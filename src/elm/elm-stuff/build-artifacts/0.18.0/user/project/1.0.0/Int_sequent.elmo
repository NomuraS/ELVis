var _user$project$Int_sequent$lookEachDiamond = F3(
	function (maxNum, ruleSet, seq) {
		var _p0 = seq.rightForm;
		if ((((_p0.ctor === '::') && (_p0._0._0.ctor === '_Tuple4')) && (_p0._0._0._3.ctor === 'Dia')) && (_p0._1.ctor === '[]')) {
			var _p11 = _p0._0._0._1;
			var _p10 = _p0._0._0._3._1;
			var _p9 = _p0._0._0._0;
			var _p8 = _p0._0._0._2;
			var _p7 = _p0._0._0._3._0;
			var orig = function (_p1) {
				var _p2 = _p1;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p2._0, _1: _p2._1},
							_1: _p9
						},
						_1: _p11,
						_2: _p8,
						_3: A2(_user$project$Common_syntax$Dia, _p7, _p10)
					});
			};
			var add2 = function (_p3) {
				var _p4 = _p3;
				return _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p7,
						_1: _toastal$either$Either$lefts(_p8),
						_2: {
							ctor: '_Tuple2',
							_0: _p11,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: _p4._0,
							_1: {ctor: '[]'}
						}
					});
			};
			var add1 = function (_p5) {
				var _p6 = _p5;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {ctor: '[]'},
						_1: _p6._0,
						_2: _p8,
						_3: _p10
					});
			};
			var justlabel = function (wholeLabel2) {
				return _elm_lang$core$List$head(
					A2(_user$project$Util$difference, wholeLabel2, _p9));
			}(
				A2(
					_elm_lang$core$List$map,
					function (n) {
						return {
							ctor: '_Tuple2',
							_0: n,
							_1: {ctor: '[]'}
						};
					},
					_user$project$Common_sequent$wholeLabel(seq)));
			var seq1 = A2(
				_user$project$Applicative_ops['?>'],
				justlabel,
				function (x) {
					return _elm_lang$core$Native_Utils.update(
						seq,
						{
							rightForm: A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: add1(x),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'})
						});
				});
			var seq2 = A2(
				_user$project$Applicative_ops['?>'],
				justlabel,
				function (x) {
					return _elm_lang$core$Native_Utils.update(
						seq,
						{
							rightRel: A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: add2(x),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'})
						});
				});
			return A3(_user$project$Common_sequent$isProvableSeq, maxNum, ruleSet, seq1) ? _elm_community$maybe_extra$Maybe_Extra$combine(
				{
					ctor: '::',
					_0: seq1,
					_1: {ctor: '[]'}
				}) : (A3(_user$project$Common_sequent$isProvableSeq, maxNum, ruleSet, seq2) ? _elm_community$maybe_extra$Maybe_Extra$combine(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				}) : _elm_lang$core$Maybe$Nothing);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Int_sequent$lookEachDisjunct = F3(
	function (maxNum, ruleSet, seq) {
		var _p12 = seq.rightForm;
		if ((((_p12.ctor === '::') && (_p12._0._0.ctor === '_Tuple4')) && (_p12._0._0._3.ctor === 'Or')) && (_p12._1.ctor === '[]')) {
			var _p15 = _p12._0._0._1;
			var _p14 = _p12._0._0._0;
			var _p13 = _p12._0._0._2;
			var seq2 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					rightForm: {
						ctor: '::',
						_0: _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p14, _1: _p15, _2: _p13, _3: _p12._0._0._3._1}),
						_1: {ctor: '[]'}
					}
				});
			var seq1 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					rightForm: {
						ctor: '::',
						_0: _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p14, _1: _p15, _2: _p13, _3: _p12._0._0._3._0}),
						_1: {ctor: '[]'}
					}
				});
			return A3(
				_user$project$Common_sequent$isProvableSeq,
				maxNum,
				ruleSet,
				_elm_lang$core$Maybe$Just(seq1)) ? _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq1,
					_1: {ctor: '[]'}
				}) : (A3(
				_user$project$Common_sequent$isProvableSeq,
				maxNum,
				ruleSet,
				_elm_lang$core$Maybe$Just(seq2)) ? _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				}) : _elm_lang$core$Maybe$Nothing);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Int_sequent$ruleK_int = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$boxRN,
		category: _user$project$Common_sequent$Rule4RightFormula,
		rulename: 'R#',
		rule: function (seq) {
			var _p16 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
			if ((((((_p16.ctor === '_Tuple2') && (_p16._0.ctor === '::')) && (_p16._0._0._0.ctor === '_Tuple4')) && (_p16._0._0._0._3.ctor === 'Box')) && (_p16._0._1.ctor === '[]')) && (_p16._1.ctor === '[]')) {
				var _p17 = _p16._0._0._0._2;
				var $new = _user$project$Common_sequent$freshLabel(seq);
				var add1 = _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p16._0._0._0._3._0,
						_1: _toastal$either$Either$lefts(_p17),
						_2: {
							ctor: '_Tuple2',
							_0: _p16._0._0._0._1,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: $new,
							_1: {ctor: '[]'}
						}
					});
				var add2 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p16._0._0._0._0, _1: $new, _2: _p17, _3: _p16._0._0._0._3._1});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add2,
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								leftRel: _user$project$Common_sequent$sortRelAtom(
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftRel))
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: 99,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L#_int',
			rule: function (seq) {
				var _p18 = seq.leftForm;
				if (((_p18.ctor === '::') && (_p18._0._0.ctor === '_Tuple4')) && (_p18._0._0._3.ctor === 'Box')) {
					var _p30 = _p18._0._0._1;
					var _p29 = _p18._0._0._3._1;
					var _p28 = _p18._1;
					var _p27 = _p18._0._0._0;
					var _p26 = _p18._0._0._2;
					var _p25 = _p18._0._0._3._0;
					var orig = function (_p19) {
						var _p20 = _p19;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p20._0, _1: _p20._1},
									_1: _p27
								},
								_1: _p30,
								_2: _p26,
								_3: A2(_user$project$Common_syntax$Box, _p25, _p29)
							});
					};
					var add2 = function (_p21) {
						var _p22 = _p21;
						return _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p25,
								_1: _toastal$either$Either$lefts(_p26),
								_2: {
									ctor: '_Tuple2',
									_0: _p30,
									_1: {ctor: '[]'}
								},
								_3: {
									ctor: '_Tuple2',
									_0: _p22._0,
									_1: {ctor: '[]'}
								}
							});
					};
					var add1 = function (_p23) {
						var _p24 = _p23;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {ctor: '[]'},
								_1: _p24._0,
								_2: _p26,
								_3: _p29
							});
					};
					var justlabel = function (wholeLabel2) {
						return _elm_community$list_extra$List_Extra$last(
							A2(_user$project$Util$difference, wholeLabel2, _p27));
					}(
						A2(
							_elm_lang$core$List$map,
							function (n) {
								return {
									ctor: '_Tuple2',
									_0: n,
									_1: {ctor: '[]'}
								};
							},
							_user$project$Common_sequent$wholeLabel(seq)));
					return A2(
						_user$project$Applicative_ops['?>'],
						justlabel,
						function (x) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1(x),
												_1: {ctor: '[]'}
											},
											_p28)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: _p28,
											rightRel: {
												ctor: '::',
												_0: add2(x),
												_1: {ctor: '[]'}
											},
											rightForm: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$boxLN,
				category: _user$project$Common_sequent$Rule4RightFormula,
				rulename: 'R$_int',
				rule: function (seq) {
					var _p31 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
					if ((((((_p31.ctor === '_Tuple2') && (_p31._0.ctor === '::')) && (_p31._0._0._0.ctor === '_Tuple4')) && (_p31._0._0._0._3.ctor === 'Dia')) && (_p31._0._1.ctor === '[]')) && (_p31._1.ctor === '[]')) {
						var _p42 = _p31._0._0._0._1;
						var _p41 = _p31._0._0._0._3._1;
						var _p40 = _p31._0._0._0._0;
						var _p39 = _p31._0._0._0._2;
						var _p38 = _p31._0._0._0._3._0;
						var orig = function (_p32) {
							var _p33 = _p32;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p33._0, _1: _p33._1},
										_1: _p40
									},
									_1: _p42,
									_2: _p39,
									_3: A2(_user$project$Common_syntax$Dia, _p38, _p41)
								});
						};
						var add2 = function (_p34) {
							var _p35 = _p34;
							return _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p38,
									_1: _toastal$either$Either$lefts(_p39),
									_2: {
										ctor: '_Tuple2',
										_0: _p42,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: _p35._0,
										_1: {ctor: '[]'}
									}
								});
						};
						var add1 = function (_p36) {
							var _p37 = _p36;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {ctor: '[]'},
									_1: _p37._0,
									_2: _p39,
									_3: _p41
								});
						};
						var justlabel = function (wholeLabel2) {
							return _elm_community$list_extra$List_Extra$last(
								A2(_user$project$Util$difference, wholeLabel2, _p40));
						}(
							A2(
								_elm_lang$core$List$map,
								function (n) {
									return {
										ctor: '_Tuple2',
										_0: n,
										_1: {ctor: '[]'}
									};
								},
								_user$project$Common_sequent$wholeLabel(seq)));
						return A2(
							_user$project$Applicative_ops['?>'],
							justlabel,
							function (x) {
								return {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1(x),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'})
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightRel: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add2(x),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												rightForm: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								};
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$boxRN,
					category: _user$project$Common_sequent$Rule4LeftFormula,
					rulename: 'L$',
					rule: function (seq) {
						var _p43 = seq.leftForm;
						if (((_p43.ctor === '::') && (_p43._0._0.ctor === '_Tuple4')) && (_p43._0._0._3.ctor === 'Dia')) {
							var _p44 = _p43._0._0._2;
							var $new = _user$project$Common_sequent$freshLabel(seq);
							var add1 = _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p43._0._0._3._0,
									_1: _toastal$either$Either$lefts(_p44),
									_2: {
										ctor: '_Tuple2',
										_0: _p43._0._0._1,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: $new,
										_1: {ctor: '[]'}
									}
								});
							var add2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p43._0._0._0, _1: $new, _2: _p44, _3: _p43._0._0._3._1});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p43._1),
											leftRel: _user$project$Common_sequent$sortRelAtom(
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													seq.leftRel))
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Int_sequent$ruleInt = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$negLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L~',
		rule: function (seq) {
			var _p45 = seq.leftForm;
			if (((_p45.ctor === '::') && (_p45._0._0.ctor === '_Tuple4')) && (_p45._0._0._3.ctor === 'Not')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p45._0._0._0, _1: _p45._0._0._1, _2: _p45._0._0._2, _3: _p45._0._0._3._0});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: _p45._1,
								rightForm: {
									ctor: '::',
									_0: add1,
									_1: {ctor: '[]'}
								},
								rightRel: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: 99,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'R~',
			rule: function (seq) {
				var _p46 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
				if ((((((_p46.ctor === '_Tuple2') && (_p46._0.ctor === '::')) && (_p46._0._0._0.ctor === '_Tuple4')) && (_p46._0._0._0._3.ctor === 'Not')) && (_p46._0._1.ctor === '[]')) && (_p46._1.ctor === '[]')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{ctor: '_Tuple4', _0: _p46._0._0._0._0, _1: _p46._0._0._0._1, _2: _p46._0._0._0._2, _3: _p46._0._0._0._3._0});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftForm),
									rightForm: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$conjLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L&',
				rule: function (seq) {
					var _p47 = seq.leftForm;
					if (((_p47.ctor === '::') && (_p47._0._0.ctor === '_Tuple4')) && (_p47._0._0._3.ctor === 'And')) {
						var _p50 = _p47._0._0._2;
						var _p49 = _p47._0._0._0;
						var _p48 = _p47._0._0._1;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p49, _1: _p48, _2: _p50, _3: _p47._0._0._3._1});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p49, _1: _p48, _2: _p50, _3: _p47._0._0._3._0});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												}
											},
											_p47._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$conjRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R&',
					rule: function (seq) {
						var _p51 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
						if ((((((_p51.ctor === '_Tuple2') && (_p51._0.ctor === '::')) && (_p51._0._0._0.ctor === '_Tuple4')) && (_p51._0._0._0._3.ctor === 'And')) && (_p51._0._1.ctor === '[]')) && (_p51._1.ctor === '[]')) {
							var _p54 = _p51._0._0._0._2;
							var _p53 = _p51._0._0._0._0;
							var _p52 = _p51._0._0._0._1;
							var f2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p53, _1: _p52, _2: _p54, _3: _p51._0._0._0._3._1});
							var f1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p53, _1: _p52, _2: _p54, _3: _p51._0._0._0._3._0});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: f1,
													_1: {ctor: '[]'}
												},
												{ctor: '[]'})
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: f2,
														_1: {ctor: '[]'}
													},
													{ctor: '[]'})
											}),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$disjLN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'Lv',
						rule: function (seq) {
							var _p55 = seq.leftForm;
							if (((_p55.ctor === '::') && (_p55._0._0.ctor === '_Tuple4')) && (_p55._0._0._3.ctor === 'Or')) {
								var _p59 = _p55._1;
								var _p58 = _p55._0._0._2;
								var _p57 = _p55._0._0._0;
								var _p56 = _p55._0._0._1;
								var add2 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p57, _1: _p56, _2: _p58, _3: _p55._0._0._3._1});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p57, _1: _p56, _2: _p58, _3: _p55._0._0._3._0});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													_p59)
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													leftForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														},
														_p59)
												}),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$disjRN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'Rv_int',
							rule: function (seq) {
								var _p60 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
								if ((((((_p60.ctor === '_Tuple2') && (_p60._0.ctor === '::')) && (_p60._0._0._0.ctor === '_Tuple4')) && (_p60._0._0._0._3.ctor === 'Or')) && (_p60._0._1.ctor === '[]')) && (_p60._1.ctor === '[]')) {
									var _p63 = _p60._0._0._0._2;
									var _p62 = _p60._0._0._0._0;
									var _p61 = _p60._0._0._0._1;
									var add2 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p62, _1: _p61, _2: _p63, _3: _p60._0._0._0._3._1});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p62, _1: _p61, _2: _p63, _3: _p60._0._0._0._3._0});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														{ctor: '[]'})
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															{ctor: '[]'})
													}),
												_1: {ctor: '[]'}
											}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: 99,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L->',
								rule: function (seq) {
									var _p64 = seq.leftForm;
									if (((_p64.ctor === '::') && (_p64._0._0.ctor === '_Tuple4')) && (_p64._0._0._3.ctor === 'Imply')) {
										var _p68 = _p64._1;
										var _p67 = _p64._0._0._2;
										var _p66 = _p64._0._0._0;
										var _p65 = _p64._0._0._1;
										var add2 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p66, _1: _p65, _2: _p67, _3: _p64._0._0._3._1});
										var add1 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p66, _1: _p65, _2: _p67, _3: _p64._0._0._3._0});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftForm: _p68,
														rightForm: {
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														rightRel: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p68)
														}),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$implRN,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'R->',
									rule: function (seq) {
										var _p69 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
										if ((((((_p69.ctor === '_Tuple2') && (_p69._0.ctor === '::')) && (_p69._0._0._0.ctor === '_Tuple4')) && (_p69._0._0._0._3.ctor === 'Imply')) && (_p69._0._1.ctor === '[]')) && (_p69._1.ctor === '[]')) {
											var _p72 = _p69._0._0._0._1;
											var _p71 = _p69._0._0._0._0;
											var _p70 = _p69._0._0._0._2;
											var add2 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p71, _1: _p72, _2: _p70, _3: _p69._0._0._0._3._1});
											var add1 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p71, _1: _p72, _2: _p70, _3: _p69._0._0._0._3._0});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.leftForm),
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'})
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: 99,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L->2',
										rule: function (seq) {
											var _p73 = seq.leftForm;
											if (((_p73.ctor === '::') && (_p73._0._0.ctor === '_Tuple4')) && (_p73._0._0._3.ctor === 'Imply2')) {
												var _p77 = _p73._1;
												var _p76 = _p73._0._0._2;
												var _p75 = _p73._0._0._0;
												var _p74 = _p73._0._0._1;
												var add2 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p75, _1: _p74, _2: _p76, _3: _p73._0._0._3._0});
												var add1 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p75, _1: _p74, _2: _p76, _3: _p73._0._0._3._1});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: _p77,
																rightForm: {
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																rightRel: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add2,
																			_1: {ctor: '[]'}
																		},
																		_p77)
																}),
															_1: {ctor: '[]'}
														}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$implRN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R->2',
											rule: function (seq) {
												var _p78 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
												if ((((((_p78.ctor === '_Tuple2') && (_p78._0.ctor === '::')) && (_p78._0._0._0.ctor === '_Tuple4')) && (_p78._0._0._0._3.ctor === 'Imply2')) && (_p78._0._1.ctor === '[]')) && (_p78._1.ctor === '[]')) {
													var _p81 = _p78._0._0._0._1;
													var _p80 = _p78._0._0._0._0;
													var _p79 = _p78._0._0._0._2;
													var add2 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p80, _1: _p81, _2: _p79, _3: _p78._0._0._0._3._0});
													var add1 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p80, _1: _p81, _2: _p79, _3: _p78._0._0._0._3._1});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		seq.leftForm),
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add2,
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'})
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$equiLN,
												category: _user$project$Common_sequent$Rule4LeftFormula,
												rulename: 'L<->',
												rule: function (seq) {
													var _p82 = seq.leftForm;
													if (((_p82.ctor === '::') && (_p82._0._0.ctor === '_Tuple4')) && (_p82._0._0._3.ctor === 'Iff')) {
														var _p84 = _p82._0._0._3._1;
														var _p83 = _p82._0._0._3._0;
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: _p82._0._0._0,
																_1: _p82._0._0._1,
																_2: _p82._0._0._2,
																_3: A2(
																	_user$project$Common_syntax$And,
																	A2(_user$project$Common_syntax$Imply, _p83, _p84),
																	A2(_user$project$Common_syntax$Imply, _p84, _p83))
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p82._1)
																	}),
																_1: {ctor: '[]'}
															});
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$equiRN,
													category: _user$project$Common_sequent$Rule4RightFormula,
													rulename: 'R<->',
													rule: function (seq) {
														var _p85 = {ctor: '_Tuple2', _0: seq.rightForm, _1: seq.rightRel};
														if ((((((_p85.ctor === '_Tuple2') && (_p85._0.ctor === '::')) && (_p85._0._0._0.ctor === '_Tuple4')) && (_p85._0._0._0._3.ctor === 'Iff')) && (_p85._0._1.ctor === '[]')) && (_p85._1.ctor === '[]')) {
															var _p87 = _p85._0._0._0._3._1;
															var _p86 = _p85._0._0._0._3._0;
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: _p85._0._0._0._0,
																	_1: _p85._0._0._0._1,
																	_2: _p85._0._0._0._2,
																	_3: A2(
																		_user$project$Common_syntax$And,
																		A2(_user$project$Common_syntax$Imply, _p86, _p87),
																		A2(_user$project$Common_syntax$Imply, _p87, _p86))
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'})
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
