var _user$project$Util$thd3 = function (_p0) {
	var _p1 = _p0;
	return _p1._2;
};
var _user$project$Util$snd3 = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Util$fst3 = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Util$snd = function (_p6) {
	var _p7 = _p6;
	return _p7._1;
};
var _user$project$Util$fst = function (_p8) {
	var _p9 = _p8;
	return _p9._0;
};
var _user$project$Util$removeComma = _elm_lang$core$List$filter(
	function (x) {
		return !_elm_lang$core$Native_Utils.eq(
			x,
			_elm_lang$core$Native_Utils.chr(','));
	});
var _user$project$Util$delete = F2(
	function (a, li) {
		return A2(
			_elm_lang$core$List$filter,
			function (x) {
				return !_elm_lang$core$Native_Utils.eq(a, x);
			},
			li);
	});
var _user$project$Util$removeWhiteSpace = _user$project$Util$delete(
	_elm_lang$core$Native_Utils.chr(' '));
var _user$project$Util$removeWhiteSpaceFromString = function (a) {
	return _elm_lang$core$String$fromList(
		_user$project$Util$removeWhiteSpace(
			_elm_lang$core$String$toList(a)));
};
var _user$project$Util$string2num = function (x) {
	return _elm_lang$core$Basics$toString(
		_Skinney$fnv$FNV$hashString(x));
};
var _user$project$Util$concatComma = function (a) {
	return _elm_lang$core$String$concat(
		A2(_elm_lang$core$List$intersperse, ' , ', a));
};
var _user$project$Util$powerList = function (xs) {
	return _elm_community$list_extra$List_Extra$subsequences(xs);
};
var _user$project$Util$subList = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$member,
			a,
			_user$project$Util$powerList(b));
	});
var _user$project$Util$difference = F2(
	function (xs, ys) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, a) {
					return A2(_elm_lang$core$List$member, x, ys) ? a : {ctor: '::', _0: x, _1: a};
				}),
			{ctor: '[]'},
			xs);
	});
var _user$project$Util$exists = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$any, p, xs);
	});
var _user$project$Util$forall = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$all, p, xs);
	});
var _user$project$Util$nub2 = _elm_community$list_extra$List_Extra$unique;
var _user$project$Util$nsort = function (x) {
	return _elm_lang$core$List$sort(
		_user$project$Util$nub2(x));
};
var _user$project$Util$nub = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (a, xss) {
				return A2(_elm_lang$core$List$member, a, xss) ? xss : {ctor: '::', _0: a, _1: xss};
			}),
		{ctor: '[]'},
		xs);
};
var _user$project$Util$rotate = function (li) {
	var ff = function (_p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Basics_ops['++'], _p11._0, _p11._1);
	};
	var tai = _elm_community$list_extra$List_Extra$tails(li);
	var ini = _elm_community$list_extra$List_Extra$inits(li);
	return _user$project$Util$nub(
		A2(
			_elm_lang$core$List$map,
			ff,
			A2(_elm_community$list_extra$List_Extra$zip, tai, ini)));
};
var _user$project$Util$intersectL = F2(
	function (xs1, xs2) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (a, ax) {
					return A2(_elm_lang$core$List$member, a, xs1) ? {ctor: '::', _0: a, _1: ax} : ax;
				}),
			{ctor: '[]'},
			xs2);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['==>'] = F2(
	function (b1, b2) {
		return (!b1) || b2;
	});
var _user$project$Util$unwords = _elm_lang$core$String$concat;
var _user$project$Util$initTail = function (a) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_community$list_extra$List_Extra$init(
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(a))));
};
var _user$project$Util$lookup = F2(
	function (a, li) {
		lookup:
		while (true) {
			var _p12 = li;
			if (_p12.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p12._0._0, a)) {
					return _elm_lang$core$Maybe$Just(_p12._0._1);
				} else {
					var _v7 = a,
						_v8 = _p12._1;
					a = _v7;
					li = _v8;
					continue lookup;
				}
			}
		}
	});
var _user$project$Util$lookVal = F2(
	function (at, li) {
		lookVal:
		while (true) {
			var _p13 = li;
			if (_p13.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p13._0._0)) {
					return _p13._0._1;
				} else {
					var _v10 = at,
						_v11 = _p13._1;
					at = _v10;
					li = _v11;
					continue lookVal;
				}
			}
		}
	});
var _user$project$Util$lookRel = F2(
	function (at, li) {
		var gg = function (_p14) {
			var _p15 = _p14;
			return {ctor: '_Tuple2', _0: _p15._1, _1: _p15._2};
		};
		return A2(_elm_lang$core$List$map, gg, li);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['$>>='] = F2(
	function (x, y) {
		return A2(_elm_lang$core$List$concatMap, y, x);
	});
var _user$project$Util$cartesian = F2(
	function (xs, ys) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: x, _1: y},
							_1: {ctor: '[]'}
						};
					});
			});
	});
var _user$project$Util$cartesian2 = F3(
	function (xs, ys, zs) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return A2(
							_user$project$Util_ops['$>>='],
							zs,
							function (z) {
								return {
									ctor: '::',
									_0: {ctor: '_Tuple3', _0: x, _1: y, _2: z},
									_1: {ctor: '[]'}
								};
							});
					});
			});
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['?>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Maybe$andThen);
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['@>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Result$andThen);
var _user$project$Util$unzip2 = function (pairs) {
	var ff = F2(
		function (_p17, _p16) {
			var _p18 = _p17;
			var _p19 = _p16;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], _p18._0, _p19._0),
				_1: A2(_elm_lang$core$Basics_ops['++'], _p18._1, _p19._1)
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		ff,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _user$project$Util$maybeBigOr = function (li) {
	var _p20 = li;
	if (_p20.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_elm_community$maybe_extra$Maybe_Extra$or, x, y);
				}),
			_p20._0,
			_p20._1);
	}
};
var _user$project$Util$show = _elm_lang$core$Basics$toString;
var _user$project$Util$isSingleton = function (li) {
	var _p21 = li;
	if ((_p21.ctor === '::') && (_p21._1.ctor === '[]')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Util$or = function (li) {
	return A2(
		_user$project$Util$exists,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$and = function (li) {
	return A2(
		_user$project$Util$forall,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$maybelist2list = function (mli) {
	maybelist2list:
	while (true) {
		var _p22 = mli;
		if (_p22.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p24 = _p22._1;
			var _p23 = _p22._0;
			if (_p23.ctor === 'Nothing') {
				var _v19 = _p24;
				mli = _v19;
				continue maybelist2list;
			} else {
				return {
					ctor: '::',
					_0: _p23._0,
					_1: _user$project$Util$maybelist2list(_p24)
				};
			}
		}
	}
};
var _user$project$Util$int2list = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? {ctor: '[]'} : A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: n,
			_1: {ctor: '[]'}
		},
		_user$project$Util$int2list(n - 1));
};
var _user$project$Util$forallResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p25 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p25._0.ctor === 'Ok') {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p25._0._0 && _p25._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._1._0);
					}
				} else {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Err(_p25._0._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$forallEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p26 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p26._0.ctor === 'Right') {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p26._0._0 && _p26._1._0);
					} else {
						return _toastal$either$Either$Left(_p26._1._0);
					}
				} else {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Left(_p26._0._0);
					} else {
						return _toastal$either$Either$Left(_p26._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(true),
			listOfEither);
	});
var _user$project$Util$existsResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p27 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p27._0.ctor === 'Ok') {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._0._0 || _p27._1._0);
					} else {
						return _elm_lang$core$Result$Ok(_p27._0._0);
					}
				} else {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p27._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$existsEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p28 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p28._0.ctor === 'Right') {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._0._0 || _p28._1._0);
					} else {
						return _toastal$either$Either$Right(_p28._0._0);
					}
				} else {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._1._0);
					} else {
						return _toastal$either$Either$Left(_p28._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(false),
			listOfEither);
	});
var _user$project$Util$forallMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p29 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p29._0.ctor === 'Just') {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p29._0._0 && _p29._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Maybe$Just(true),
			listOfEither);
	});
var _user$project$Util$existsMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p30 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p30._0.ctor === 'Just') {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._0._0 || _p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Just(_p30._0._0);
					}
				} else {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(_elm_lang$core$List$foldl, biOp, _elm_lang$core$Maybe$Nothing, listOfEither);
	});
var _user$project$Util$filterR2 = F3(
	function (func, li, res) {
		filterR2:
		while (true) {
			var _p31 = li;
			if (_p31.ctor === '[]') {
				return res;
			} else {
				var _p34 = _p31._1;
				var _p33 = _p31._0;
				var _p32 = func(_p33);
				if (_p32.ctor === 'Ok') {
					if (_p32._0 === true) {
						var _v28 = func,
							_v29 = _p34,
							_v30 = A2(
							_elm_lang$core$Result$map,
							function (y) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Util$nub(y),
									{
										ctor: '::',
										_0: _p33,
										_1: {ctor: '[]'}
									});
							},
							res);
						func = _v28;
						li = _v29;
						res = _v30;
						continue filterR2;
					} else {
						var _v31 = func,
							_v32 = _p34,
							_v33 = res;
						func = _v31;
						li = _v32;
						res = _v33;
						continue filterR2;
					}
				} else {
					return _elm_lang$core$Result$Err(_p32._0);
				}
			}
		}
	});
var _user$project$Util$filterR = F2(
	function (func, li) {
		return A3(
			_user$project$Util$filterR2,
			func,
			li,
			_elm_lang$core$Result$Ok(
				{ctor: '[]'}));
	});
var _user$project$Util$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p35 = list;
			if (_p35.ctor === '[]') {
				return sentence;
			} else {
				if (_p35._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p35._0));
				} else {
					var _v35 = lastPart,
						_v36 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p35._0)),
						_v37 = _p35._1;
					lastPart = _v35;
					sentence = _v36;
					list = _v37;
					continue toSentenceHelper;
				}
			}
		}
	});
var _user$project$Util$toSentenceBaseCase = function (list) {
	var _p36 = list;
	_v38_2:
	do {
		if (_p36.ctor === '::') {
			if (_p36._1.ctor === '[]') {
				return _p36._0;
			} else {
				if (_p36._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p36._0,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p36._1._0));
				} else {
					break _v38_2;
				}
			}
		} else {
			break _v38_2;
		}
	} while(false);
	return '';
};
var _user$project$Util$toSentenceComma = function (list) {
	var _p37 = list;
	if (((_p37.ctor === '::') && (_p37._1.ctor === '::')) && (_p37._1._1.ctor === '::')) {
		return A3(
			_user$project$Util$toSentenceHelper,
			',',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p37._0,
				A2(_elm_lang$core$Basics_ops['++'], ',', _p37._1._0)),
			{ctor: '::', _0: _p37._1._1._0, _1: _p37._1._1._1});
	} else {
		return _user$project$Util$toSentenceBaseCase(list);
	}
};
