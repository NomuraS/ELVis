var _user$project$Common_sequent$texRule = function (r) {
	var _p0 = r;
	switch (_p0) {
		case 'R~':
			return 'R\\neg ';
		case 'L~':
			return 'L\\neg ';
		case 'R&':
			return 'R\\wedge ';
		case 'L&':
			return 'L\\wedge ';
		case 'Rv':
			return 'R\\vee ';
		case 'Lv':
			return 'L\\vee ';
		case 'R->':
			return 'R\\to ';
		case 'R->2':
			return 'R\\to ';
		case 'L->':
			return 'L\\to ';
		case 'R<->':
			return 'R\\leftrightarrow ';
		case 'L<->':
			return 'L\\leftrightarrow ';
		case 'R<.>':
			return 'L\\langle . \\rangle ';
		case 'L<.>':
			return 'R\\langle . \\rangle ';
		case 'R#':
			return 'R\\Box ';
		case 'R#1':
			return 'R\\Box1 ';
		case 'R#2':
			return 'R\\Box2 ';
		case 'L#':
			return 'L\\Box ';
		case 'L#1':
			return 'L\\Box1 ';
		case 'L#2':
			return 'L\\Box2 ';
		case 'R$':
			return 'R\\lozenge ';
		case 'L$':
			return 'L\\lozenge ';
		case 'Bot':
			return 'L\\bot ';
		case 'Top':
			return 'R\\top ';
		case 'R&&':
			return 'R\\wedge\'  ';
		case 'L&&':
			return 'L\\wedge\' ';
		default:
			return _p0;
	}
};
var _user$project$Common_sequent$drawTexFormula = F2(
	function (n, f) {
		var kakko = F2(
			function (k, s) {
				return (_elm_lang$core$Native_Utils.cmp(n, k) > 0) ? A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(_elm_lang$core$Basics_ops['++'], s, ')')) : s;
			});
		var _p1 = f;
		switch (_p1.ctor) {
			case 'Atom':
				return _p1._0;
			case 'AnyFormula':
				return _p1._0;
			case 'Top':
				return ' \\top ';
			case 'Bot':
				return ' \\bot ';
			case 'Not':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' \\neg ',
					A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._0));
			case 'Box':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'\\Box_{',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'}',
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1))));
			case 'Dia':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'\\lozenge_{',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'}',
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1))));
			case 'Announce':
				return A2(
					kakko,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								']',
								A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1)))));
			case 'Announce2':
				return A2(
					kakko,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\\langle ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\\rangle ',
								A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1)))));
			case 'And':
				return A2(
					kakko,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\wedge',
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1))));
			case 'Or':
				return A2(
					kakko,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\vee',
							A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1))));
			case 'Imply':
				return A2(
					kakko,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\to',
							A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._1))));
			case 'Imply2':
				return A2(
					kakko,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._1),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\to',
							A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._0))));
			case 'Iff':
				return A2(
					kakko,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\leftrightarrow',
							A2(_user$project$Common_sequent$drawTexFormula, 2, _p1._1))));
			case 'Bigwedge':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\\bigwedge_{',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._1._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\\sim_',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(_elm_lang$core$Basics_ops['++'], '^', _p1._1._0.am_name))))),
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_elm_lang$core$Basics_ops['++'], _p1._1._1._2, '}'),
						A2(_user$project$Common_sequent$drawTexFormula, 1, _p1._2)));
			case 'Bigvee':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\\bigvee{',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._1._1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\\sim_',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(_elm_lang$core$Basics_ops['++'], '^', _p1._1._0.am_name))))),
					A2(
						_user$project$Common_syntax_ops['++++'],
						_p1._1._1._2,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'}',
							A2(_user$project$Common_sequent$drawTexFormula, 1, _p1._2))));
			case 'BoxAction':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_syntax$outputAction(_p1._0),
							']')),
					A2(_user$project$Common_sequent$drawTexFormula, 3, _p1._1));
			case 'DiaAction':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					'\\langle',
					A2(
						_user$project$Common_syntax_ops['++++'],
						_user$project$Common_syntax$outputAction(_p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'\\rangle',
							A2(_user$project$Common_sequent$drawTexFormula, 3, f))));
			default:
				return A2(
					_user$project$Common_syntax_ops['++++'],
					'pre^{',
					A2(
						_user$project$Common_syntax_ops['++++'],
						_p1._0.am_name,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'}(',
							A2(_user$project$Common_syntax_ops['++++'], _p1._1, ')'))));
		}
	});
var _user$project$Common_sequent$words = _user$project$Util$concatComma;
var _user$project$Common_sequent$drawTexLabelForm = function (l) {
	var gg = function (x) {
		var _p2 = x;
		if (_p2.ctor === 'Left') {
			return A2(_user$project$Common_sequent$drawTexFormula, 0, _p2._0);
		} else {
			return _user$project$Common_syntax$outputAction(_p2._0);
		}
	};
	var forml = function (fs) {
		return _user$project$Common_sequent$words(
			A2(
				_elm_lang$core$List$map,
				function (f) {
					return A2(_user$project$Common_sequent$drawTexFormula, 1, f);
				},
				fs));
	};
	var _p3 = l;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Util$show(_p3._0._1),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'{:}^{',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$words(
					A2(_elm_lang$core$List$map, gg, _p3._0._2)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'}',
					A2(_user$project$Common_sequent$drawTexFormula, 1, _p3._0._3)))));
};
var _user$project$Common_sequent$showla = function (_p4) {
	var _p5 = _p4;
	var _p8 = _p5._1;
	var _p7 = _p5._0;
	var ff = _user$project$Common_sequent$words(
		A2(_elm_lang$core$List$map, _user$project$Common_syntax$outputAction, _p8));
	var _p6 = _p8;
	if (_p6.ctor === '[]') {
		return _user$project$Util$show(_p7);
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Util$show(_p7),
				A2(
					_elm_lang$core$Basics_ops['++'],
					',',
					A2(_elm_lang$core$Basics_ops['++'], ff, ')'))));
	}
};
var _user$project$Common_sequent$drawTexLabelForm2 = function (r) {
	var gg = function (a) {
		return A2(_user$project$Common_sequent$drawTexFormula, 0, a);
	};
	var _p9 = r;
	if (_p9.ctor === 'RelAtom') {
		if (_p9._0._1.ctor === '[]') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$showla(_p9._0._2),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\\mathsf{R}^{}_{',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p9._0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'}',
							_user$project$Common_sequent$showla(_p9._0._3)))));
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$showla(_p9._0._2),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\\mathsf{R}^{',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$words(
							A2(_elm_lang$core$List$map, gg, _p9._0._1)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'}_{',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p9._0._0,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'}',
									_user$project$Common_sequent$showla(_p9._0._3)))))));
		}
	} else {
		return A2(
			_user$project$Common_syntax_ops['++++'],
			_user$project$Util$show(_p9._0._0),
			A2(
				_user$project$Common_syntax_ops['++++'],
				'\\leq',
				_user$project$Util$show(_p9._0._1)));
	}
};
var _user$project$Common_sequent$toGraph = F2(
	function (pairs, result) {
		toGraph:
		while (true) {
			var _p10 = pairs;
			if (_p10.ctor === '[]') {
				return result;
			} else {
				var _v8 = _p10._1,
					_v9 = _elm_lang$core$Native_Utils.update(
					result,
					{
						nodes: _user$project$Util$nub(
							A2(_elm_lang$core$Basics_ops['++'], result.nodes, _p10._0._0)),
						edges: _user$project$Util$nub(
							A2(_elm_lang$core$Basics_ops['++'], result.edges, _p10._0._1))
					});
				pairs = _v8;
				result = _v9;
				continue toGraph;
			}
		}
	});
var _user$project$Common_sequent$splitStringByRoundBraket = function (string) {
	var maybe_n = _elm_lang$core$List$head(
		A2(_elm_lang$core$String$indexes, ')', string));
	var a = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (n) {
				return A2(_elm_lang$core$String$left, n + 1, string);
			},
			maybe_n));
	var b = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (n) {
				return A2(_elm_lang$core$String$dropLeft, n + 1, string);
			},
			maybe_n));
	return {ctor: '_Tuple2', _0: a, _1: b};
};
var _user$project$Common_sequent$drawNodeElm = function (string) {
	var _p11 = _user$project$Common_sequent$splitStringByRoundBraket(string);
	var stringCut = _p11._0;
	var stringCut2 = _p11._1;
	var _p12 = stringCut;
	switch (_p12) {
		case '(init)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(Top)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(Bot)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(end)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 0
			};
		case '(limit)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 2
			};
		case '(stop)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 9
			};
		default:
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: stringCut2,
				color: 3
			};
	}
};
var _user$project$Common_sequent$drawEdgeElm = function (_p13) {
	var _p14 = _p13;
	var _p17 = _p14._1;
	var _p16 = _p14._0;
	var a = {
		ctor: '::',
		_0: _user$project$Common_sequent$drawNodeElm(_p16),
		_1: {
			ctor: '::',
			_0: _user$project$Common_sequent$drawNodeElm(_p17),
			_1: {ctor: '[]'}
		}
	};
	var _p15 = _user$project$Common_sequent$splitStringByRoundBraket(_p16);
	var stringCut = _p15._0;
	var stringCut2 = _p15._1;
	var b = {
		ctor: '::',
		_0: {
			id: _Skinney$fnv$FNV$hashString(
				A2(_elm_lang$core$Basics_ops['++'], _p16, _p17)),
			from: _Skinney$fnv$FNV$hashString(_p16),
			to: _Skinney$fnv$FNV$hashString(_p17),
			label: stringCut
		},
		_1: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: a, _1: b};
};
var _user$project$Common_sequent$list2pairElm = F2(
	function (xs, provable) {
		return function (x) {
			return A2(
				_user$project$Common_sequent$toGraph,
				x,
				{
					nodes: {ctor: '[]'},
					edges: {ctor: '[]'},
					provable: provable
				});
		}(
			_user$project$Util$nub(
				A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawEdgeElm, xs)));
	});
var _user$project$Common_sequent$addBlank = F2(
	function (li, res) {
		addBlank:
		while (true) {
			var wholeseq = A2(
				_elm_lang$core$List$concatMap,
				function (_p18) {
					var _p19 = _p18;
					return {
						ctor: '::',
						_0: _p19._0,
						_1: {
							ctor: '::',
							_0: _p19._1,
							_1: {ctor: '[]'}
						}
					};
				},
				li);
			var _p20 = li;
			if (_p20.ctor === '[]') {
				return res;
			} else {
				var _p23 = _p20._0._1;
				var _p22 = _p20._1;
				var _p21 = _p20._0._0;
				if (A2(
					_user$project$Util$exists,
					wholeseq,
					function (z) {
						return A2(
							_elm_lang$core$List$member,
							{ctor: '_Tuple2', _0: z, _1: _p23},
							_p22);
					})) {
					var _v14 = _p22,
						_v15 = {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _p21,
							_1: A2(_elm_lang$core$Basics_ops['++'], _p23, ' ')
						},
						_1: res
					};
					li = _v14;
					res = _v15;
					continue addBlank;
				} else {
					var _v16 = _p22,
						_v17 = {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p21, _1: _p23},
						_1: res
					};
					li = _v16;
					res = _v17;
					continue addBlank;
				}
			}
		}
	});
var _user$project$Common_sequent$tree2vis = F2(
	function (_p24, list_tofrom) {
		var _p25 = _p24;
		var _p29 = _p25._1;
		var _p26 = _p29;
		if (_p26.ctor === '[]') {
			return list_tofrom;
		} else {
			return function (x) {
				return function (list) {
					return function (f) {
						return _user$project$Util$nub2(
							A2(_elm_lang$core$List$concatMap, f, _p29));
					}(
						function (tree) {
							return A2(_user$project$Common_sequent$tree2vis, tree, list);
						});
				}(
					A2(_elm_lang$core$Basics_ops['++'], list_tofrom, x));
			}(
				A2(
					_elm_lang$core$List$map,
					function (_p27) {
						var _p28 = _p27;
						return {ctor: '_Tuple2', _0: _p25._0, _1: _p28._0};
					},
					_p26));
		}
	});
var _user$project$Common_sequent$outputLabelExp3tex = function (f) {
	var gg = function (_p30) {
		var _p31 = _p30;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p31._2,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\\sim_{',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p31._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'}^{',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$join,
								';',
								A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.am_name;
									},
									_p31._1)),
							A2(_elm_lang$core$Basics_ops['++'], '}', _p31._3))))));
	};
	return _user$project$Util$concatComma(
		A2(_elm_lang$core$List$map, gg, f));
};
var _user$project$Common_sequent$drawTexSequent = F2(
	function (seq, a) {
		var forDEL = seq.forDEL;
		var rightRel = A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawTexLabelForm2, seq.rightRel);
		var rightForm = A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawTexLabelForm, seq.rightForm);
		var leftRel = A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawTexLabelForm2, seq.leftRel);
		var leftForm = A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawTexLabelForm, seq.leftForm);
		var _p32 = a;
		if (_p32.ctor === 'Proofsty') {
			return _elm_lang$core$Native_Utils.eq(
				forDEL,
				{ctor: '[]'}) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$words(
					A2(_elm_lang$core$Basics_ops['++'], leftForm, leftRel)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\\Longrightarrow ',
					_user$project$Common_sequent$words(
						A2(_elm_lang$core$Basics_ops['++'], rightForm, rightRel)))) : A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$words(
					A2(_elm_lang$core$Basics_ops['++'], leftForm, leftRel)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\\Longrightarrow ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$words(
							A2(_elm_lang$core$Basics_ops['++'], rightForm, rightRel)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\\| ',
							_user$project$Common_sequent$outputLabelExp3tex(forDEL)))));
		} else {
			return _elm_lang$core$Native_Utils.eq(
				forDEL,
				{ctor: '[]'}) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$words(
					A2(_elm_lang$core$Basics_ops['++'], leftForm, leftRel)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'&\\Longrightarrow ',
					_user$project$Common_sequent$words(
						A2(_elm_lang$core$Basics_ops['++'], rightForm, rightRel)))) : A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$words(
					A2(_elm_lang$core$Basics_ops['++'], leftForm, leftRel)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'&\\Longrightarrow ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$words(
							A2(_elm_lang$core$Basics_ops['++'], rightForm, rightRel)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\\| ',
							_user$project$Common_sequent$outputLabelExp3tex(forDEL)))));
		}
	});
var _user$project$Common_sequent$outputLabelExp3 = function (f) {
	var gg = function (_p33) {
		var _p34 = _p33;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'Rel(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$join,
					';',
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.am_name;
						},
						_p34._1)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					')(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p34._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							')(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p34._2,
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(_elm_lang$core$Basics_ops['++'], _p34._3, ')'))))))));
	};
	return _user$project$Util$concatComma(
		A2(_elm_lang$core$List$map, gg, f));
};
var _user$project$Common_sequent$outputLabelExp2 = F2(
	function (n, f) {
		var gg = function (annouceform) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					_user$project$Common_syntax$outputForm(n),
					annouceform));
		};
		var _p35 = f;
		_v24_4:
		do {
			if (_p35.ctor === 'RelAtom') {
				if (_p35._0.ctor === '_Tuple4') {
					if (_p35._0._1.ctor === '::') {
						if ((((_p35._0._2.ctor === '_Tuple2') && (_p35._0._2._1.ctor === '[]')) && (_p35._0._3.ctor === '_Tuple2')) && (_p35._0._3._1.ctor === '[]')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'<i>',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Util$show(_p35._0._2._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'R',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p35._0._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'(',
												A2(
													_elm_lang$core$Basics_ops['++'],
													gg(
														{ctor: '::', _0: _p35._0._1._0, _1: _p35._0._1._1}),
													A2(
														_elm_lang$core$Basics_ops['++'],
														')',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$Util$show(_p35._0._3._0),
															'</i>'))))))));
						} else {
							break _v24_4;
						}
					} else {
						if ((_p35._0._2.ctor === '_Tuple2') && (_p35._0._3.ctor === '_Tuple2')) {
							if ((_p35._0._2._1.ctor === '[]') && (_p35._0._3._1.ctor === '[]')) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'<i>',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Util$show(_p35._0._2._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'R',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p35._0._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Util$show(_p35._0._3._0),
													'</i>')))));
							} else {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'<i>',
									A2(
										_elm_lang$core$Basics_ops['++'],
										'(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Util$show(_p35._0._2._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													A2(
														_elm_lang$core$String$join,
														',',
														A2(_elm_lang$core$List$map, _user$project$Common_syntax$outputAction, _p35._0._2._1)),
													A2(
														_elm_lang$core$Basics_ops['++'],
														')',
														A2(
															_elm_lang$core$Basics_ops['++'],
															'R',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p35._0._0,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'(',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_user$project$Util$show(_p35._0._3._0),
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			',',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				A2(
																					_elm_lang$core$String$join,
																					',',
																					A2(_elm_lang$core$List$map, _user$project$Common_syntax$outputAction, _p35._0._3._1)),
																				A2(_elm_lang$core$Basics_ops['++'], ')', '</i>')))))))))))));
							}
						} else {
							break _v24_4;
						}
					}
				} else {
					break _v24_4;
				}
			} else {
				if (_p35._0.ctor === '_Tuple2') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Util$show(_p35._0._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'=<',
							_user$project$Util$show(_p35._0._1)));
				} else {
					break _v24_4;
				}
			}
		} while(false);
		return _elm_lang$core$Native_Utils.crashCase(
			'Common_sequent',
			{
				start: {line: 937, column: 5},
				end: {line: 945, column: 58}
			},
			_p35)('error in outputLabelExp2');
	});
var _user$project$Common_sequent$action2string = function (pam) {
	var _p37 = pam;
	switch (_p37.ctor) {
		case 'PointAModel':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p37._0.am_name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(_elm_lang$core$Basics_ops['++'], _p37._1, ')'))));
		case 'Cup':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$action2string(_p37._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'U',
					_user$project$Common_sequent$action2string(_p37._1)));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$action2string(_p37._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					_user$project$Common_sequent$action2string(_p37._1)));
	}
};
var _user$project$Common_sequent$outputLabelExp = F2(
	function (n, _p38) {
		var _p39 = _p38;
		var _p51 = _p39._0._1;
		var _p50 = _p39._0._3;
		var _p49 = _p39._0._0;
		var _p48 = _p39._0._2;
		var addhistory2 = function (x) {
			return _elm_lang$core$Native_Utils.eq(x, '') ? x : A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], x, ')'));
		}(
			_user$project$Util$toSentenceComma(
				A2(
					_elm_lang$core$List$map,
					function (x) {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Util$show(
								_user$project$Util$fst(x)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								_user$project$Util$toSentenceComma(
									A2(
										_elm_lang$core$List$map,
										_user$project$Common_sequent$action2string,
										_user$project$Util$snd(x)))));
					},
					_p49)));
		var addhistory1 = function (x) {
			return _elm_lang$core$Native_Utils.eq(x, '') ? x : A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], x, ')'));
		}(
			_user$project$Util$toSentenceComma(
				A2(
					_elm_lang$core$List$map,
					function (x) {
						return _user$project$Util$show(
							_user$project$Util$fst(x));
					},
					_p49)));
		var ff = function (_p40) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					function (y) {
						var _p41 = y;
						if (_p41.ctor === 'PointAModel') {
							return _user$project$Common_syntax$outputAction(
								A2(_user$project$Common_syntax$PointAModel, _p41._0, _p41._1));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'Common_sequent',
								{
									start: {line: 903, column: 48},
									end: {line: 905, column: 97}
								},
								_p41)('error in error in outputLabelExp (1)');
						}
					},
					_p40));
		};
		var gg = function (_p43) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					_user$project$Common_syntax$outputForm(n),
					_p43));
		};
		var _p44 = _p48;
		if (_p44.ctor === '[]') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'<b>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p51),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'</b>:',
						A2(
							_elm_lang$core$Basics_ops['++'],
							addhistory1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'<code>',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Common_syntax$outputForm, n, _p50),
									'</code>'))))));
		} else {
			var _p45 = _p44._0;
			if (_p45.ctor === 'Left') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'<b>',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p51),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								gg(
									_toastal$either$Either$lefts(_p48)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									')</b>:',
									A2(
										_elm_lang$core$Basics_ops['++'],
										addhistory1,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'<code>',
											A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_user$project$Common_syntax$outputForm, n, _p50),
												'</code>'))))))));
			} else {
				var _p46 = _p45._0;
				if (_p46.ctor === 'PointAModel') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'<b>',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p51),
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(
										_elm_lang$core$Basics_ops['++'],
										ff(
											_toastal$either$Either$rights(_p48)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											')</b>:',
											A2(
												_elm_lang$core$Basics_ops['++'],
												addhistory2,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'<code>',
													A2(
														_elm_lang$core$Basics_ops['++'],
														A2(_user$project$Common_syntax$outputForm, n, _p50),
														'</code>')))))))));
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Common_sequent',
						{
							start: {line: 920, column: 20},
							end: {line: 922, column: 59}
						},
						_p46)('error in outputLabelExp (2)');
				}
			}
		}
	});
var _user$project$Common_sequent$outputSequent = function (seq) {
	var ff = F2(
		function (x, y) {
			return (_elm_lang$core$List$isEmpty(x) || _elm_lang$core$List$isEmpty(y)) ? '' : ',';
		});
	var r2 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp(1),
			seq.rightForm));
	var r1 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp2(1),
			seq.rightRel));
	var l2 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp(1),
			seq.leftForm));
	var l1 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp2(1),
			seq.leftRel));
	var _p52 = _elm_lang$core$List$isEmpty(seq.forDEL);
	if (_p52 === true) {
		return _elm_community$string_extra$String_Extra$clean(
			A2(
				_user$project$Common_syntax_ops['++++'],
				l1,
				A2(
					_user$project$Common_syntax_ops['++++'],
					A2(ff, seq.leftRel, seq.leftForm),
					A2(
						_user$project$Common_syntax_ops['++++'],
						l2,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<i><b>==></b></i>',
							A2(
								_user$project$Common_syntax_ops['++++'],
								r1,
								A2(
									_user$project$Common_syntax_ops['++++'],
									A2(ff, seq.rightRel, seq.rightForm),
									r2)))))));
	} else {
		return _elm_community$string_extra$String_Extra$clean(
			A2(
				_user$project$Common_syntax_ops['++++'],
				l1,
				A2(
					_user$project$Common_syntax_ops['++++'],
					A2(ff, seq.leftRel, seq.leftForm),
					A2(
						_user$project$Common_syntax_ops['++++'],
						l2,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<i><b>==></b></i>',
							A2(
								_user$project$Common_syntax_ops['++++'],
								r1,
								A2(
									_user$project$Common_syntax_ops['++++'],
									A2(ff, seq.rightRel, seq.rightForm),
									A2(
										_user$project$Common_syntax_ops['++++'],
										r2,
										A2(
											_user$project$Common_syntax_ops['++++'],
											'||',
											_user$project$Common_sequent$outputLabelExp3(seq.forDEL))))))))));
	}
};
var _user$project$Common_sequent$divideRules = F2(
	function (listrule, _p53) {
		divideRules:
		while (true) {
			var _p54 = _p53;
			var _p64 = _p54._2;
			var _p63 = _p54._3;
			var _p62 = _p54._4;
			var _p61 = _p54._5;
			var _p60 = _p54._0;
			var _p59 = _p54._1;
			var _p55 = listrule;
			if (_p55.ctor === '::') {
				var _p58 = _p55._1;
				var _p57 = _p55._0;
				var _p56 = _p57.category;
				switch (_p56.ctor) {
					case 'Rule4LeftFormula':
						var _v35 = _p58,
							_v36 = {
							ctor: '_Tuple6',
							_0: _p60,
							_1: {ctor: '::', _0: _p57, _1: _p59},
							_2: _p64,
							_3: _p63,
							_4: _p62,
							_5: _p61
						};
						listrule = _v35;
						_p53 = _v36;
						continue divideRules;
					case 'Rule4LeftRel':
						var _v37 = _p58,
							_v38 = {
							ctor: '_Tuple6',
							_0: {ctor: '::', _0: _p57, _1: _p60},
							_1: _p59,
							_2: _p64,
							_3: _p63,
							_4: _p62,
							_5: _p61
						};
						listrule = _v37;
						_p53 = _v38;
						continue divideRules;
					case 'Rule4RightFormula':
						var _v39 = _p58,
							_v40 = {
							ctor: '_Tuple6',
							_0: _p60,
							_1: _p59,
							_2: _p64,
							_3: {ctor: '::', _0: _p57, _1: _p63},
							_4: _p62,
							_5: _p61
						};
						listrule = _v39;
						_p53 = _v40;
						continue divideRules;
					case 'Rule4RightRel':
						var _v41 = _p58,
							_v42 = {
							ctor: '_Tuple6',
							_0: _p60,
							_1: _p59,
							_2: {ctor: '::', _0: _p57, _1: _p64},
							_3: _p63,
							_4: _p62,
							_5: _p61
						};
						listrule = _v41;
						_p53 = _v42;
						continue divideRules;
					case 'Rule4DEL':
						var _v43 = _p58,
							_v44 = {
							ctor: '_Tuple6',
							_0: _p60,
							_1: _p59,
							_2: _p64,
							_3: _p63,
							_4: {ctor: '::', _0: _p57, _1: _p62},
							_5: _p61
						};
						listrule = _v43;
						_p53 = _v44;
						continue divideRules;
					default:
						var _v45 = _p58,
							_v46 = {
							ctor: '_Tuple6',
							_0: _p60,
							_1: _p59,
							_2: _p64,
							_3: _p63,
							_4: _p62,
							_5: {ctor: '::', _0: _p57, _1: _p61}
						};
						listrule = _v45;
						_p53 = _v46;
						continue divideRules;
				}
			} else {
				return {ctor: '_Tuple6', _0: _p60, _1: _p59, _2: _p64, _3: _p63, _4: _p62, _5: _p61};
			}
		}
	});
var _user$project$Common_sequent$seq2branch = F2(
	function (seq, rule) {
		return A2(
			_user$project$Applicative_ops['?>'],
			rule.rule(seq),
			function (x) {
				return {causeSequent: seq, appliedRule: rule, resultSequents: x};
			});
	});
var _user$project$Common_sequent$anyFormulaCheck = function (seq) {
	var gg = function (f) {
		var _p65 = f;
		if (_p65.ctor === 'AnyFormula') {
			return true;
		} else {
			return false;
		}
	};
	var ff = function (_p66) {
		var _p67 = _p66;
		return _p67._0._3;
	};
	return _user$project$Util$or(
		A2(
			_elm_lang$core$List$map,
			function (_p68) {
				return gg(
					ff(_p68));
			},
			A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)));
};
var _user$project$Common_sequent$isProvable = function (pr) {
	var gg = function (_p69) {
		var _p70 = _p69;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _p70._1,
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$concatMap, gg, _p70._2));
	};
	var ruleList = gg(pr);
	return A2(_elm_lang$core$List$member, 'end', ruleList) ? 0 : (A2(_elm_lang$core$List$member, 'stop', ruleList) ? 9 : (A2(_elm_lang$core$List$member, 'limit', ruleList) ? 2 : 1));
};
var _user$project$Common_sequent$sortRelAtom = function (li) {
	var gg3 = function (x) {
		var _p71 = x;
		if (_p71.ctor === 'RelAtom') {
			return _p71._0._3._0;
		} else {
			return _p71._0._0;
		}
	};
	var gg2 = function (x) {
		var _p72 = x;
		if (_p72.ctor === 'RelAtom') {
			return _p72._0._2._0;
		} else {
			return _p72._0._0;
		}
	};
	var gg1 = function (x) {
		var _p73 = x;
		if (_p73.ctor === 'RelAtom') {
			return _p73._0._0;
		} else {
			return _user$project$Util$show(_p73._0._0);
		}
	};
	return function (x) {
		return A2(_elm_lang$core$List$sortWith, x, li);
	}(
		A6(_TSFoster$elm_compare$Compare$by, gg1, _TSFoster$elm_compare$Compare$thenBy, gg2, _TSFoster$elm_compare$Compare$thenBy, gg3, _TSFoster$elm_compare$Compare$ascending));
};
var _user$project$Common_sequent$sortLabelForm = function (li) {
	var gg3 = function (_p74) {
		var _p75 = _p74;
		return _elm_lang$core$List$length(_p75._0._2);
	};
	var gg2 = function (_p76) {
		var _p77 = _p76;
		return _user$project$Common_syntax$formula2Int(_p77._0._3);
	};
	var gg1 = function (_p78) {
		var _p79 = _p78;
		return _p79._0._1;
	};
	return A2(
		_elm_lang$core$List$sortWith,
		A6(_TSFoster$elm_compare$Compare$by, gg1, _TSFoster$elm_compare$Compare$thenBy, gg2, _TSFoster$elm_compare$Compare$thenBy, gg3, _TSFoster$elm_compare$Compare$ascending),
		li);
};
var _user$project$Common_sequent$sortLeftRightOfSeq = function (seq) {
	var ff = function (_p80) {
		return _user$project$Util$nub(
			_user$project$Common_sequent$sortLabelForm(_p80));
	};
	var gg = function (_p81) {
		return _user$project$Util$nub(
			_user$project$Common_sequent$sortRelAtom(_p81));
	};
	return _elm_lang$core$Native_Utils.update(
		seq,
		{
			leftRel: gg(seq.leftRel),
			leftForm: ff(seq.leftForm),
			rightRel: gg(seq.rightRel),
			rightForm: ff(seq.rightForm)
		});
};
var _user$project$Common_sequent$sortSeqOfBranch = function (bra) {
	return {
		causeSequent: bra.causeSequent,
		appliedRule: bra.appliedRule,
		resultSequents: A2(_elm_lang$core$List$map, _user$project$Common_sequent$sortLeftRightOfSeq, bra.resultSequents)
	};
};
var _user$project$Common_sequent$sameSeq = F2(
	function (seq1, seq2) {
		var d = A2(
			_elm_community$list_extra$List_Extra$isPermutationOf,
			_user$project$Util$nub(seq1.rightForm),
			_user$project$Util$nub(seq2.rightForm));
		var c = A2(
			_elm_community$list_extra$List_Extra$isPermutationOf,
			_user$project$Util$nub(seq1.leftForm),
			_user$project$Util$nub(seq2.leftForm));
		var b = _elm_lang$core$Native_Utils.eq(
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq1.rightRel)),
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq2.rightRel)));
		var a = _elm_lang$core$Native_Utils.eq(
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq1.leftRel)),
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq2.leftRel)));
		return A2(
			_user$project$Util$forall,
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: b,
					_1: {
						ctor: '::',
						_0: c,
						_1: {
							ctor: '::',
							_0: d,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x, true);
			});
	});
var _user$project$Common_sequent$agentInLabelExpression2 = F2(
	function (x, li) {
		var _p82 = x;
		if (_p82.ctor === 'RelAtom') {
			return {ctor: '::', _0: _p82._0._0, _1: li};
		} else {
			return li;
		}
	});
var _user$project$Common_sequent$agentInLabelExpression = F2(
	function (x, ags) {
		var gg = F2(
			function (y, zs) {
				gg:
				while (true) {
					var _p83 = y;
					switch (_p83.ctor) {
						case 'Box':
							var _v58 = _p83._1,
								_v59 = {ctor: '::', _0: _p83._0, _1: zs};
							y = _v58;
							zs = _v59;
							continue gg;
						case 'Dia':
							var _v60 = _p83._1,
								_v61 = {ctor: '::', _0: _p83._0, _1: zs};
							y = _v60;
							zs = _v61;
							continue gg;
						case 'Not':
							var _v62 = _p83._0,
								_v63 = zs;
							y = _v62;
							zs = _v63;
							continue gg;
						case 'And':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						case 'Or':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						case 'Imply':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						case 'Iff':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						case 'Announce':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						case 'Announce2':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p83._0, zs),
								A2(gg, _p83._1, zs));
						default:
							return zs;
					}
				}
			});
		var _p84 = x;
		if (_p84.ctor === 'Left') {
			return A2(gg, _p84._0._0._3, ags);
		} else {
			if (_p84._0.ctor === 'RelAtom') {
				return {ctor: '::', _0: _p84._0._0._0, _1: ags};
			} else {
				return ags;
			}
		}
	});
var _user$project$Common_sequent$wholeAgent = function (seq) {
	var rels = A2(
		_elm_lang$core$List$map,
		function (x) {
			return _toastal$either$Either$Right(x);
		},
		A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel));
	var forms = A2(
		_elm_lang$core$List$map,
		function (x) {
			return _toastal$either$Either$Left(x);
		},
		A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm));
	return _user$project$Util$nsort(
		A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_user$project$Common_sequent$agentInLabelExpression,
					x,
					{ctor: '[]'});
			},
			A2(_elm_lang$core$Basics_ops['++'], forms, rels)));
};
var _user$project$Common_sequent$wholeLabel = function (seq) {
	var gg_ = function (s) {
		return function (x) {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}(
			A2(
				_elm_lang$core$Result$withDefault,
				0,
				_elm_lang$core$String$toInt(
					A2(_elm_lang$core$String$filter, _elm_lang$core$Char$isDigit, s))));
	};
	var gg3 = function (_p85) {
		var _p86 = _p85;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			gg_(_p86._2),
			gg_(_p86._3));
	};
	var gg2 = function (x) {
		var _p87 = x;
		if (_p87.ctor === 'RelAtom') {
			return {
				ctor: '::',
				_0: _p87._0._2._0,
				_1: {
					ctor: '::',
					_0: _p87._0._3._0,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: _p87._0._0,
				_1: {
					ctor: '::',
					_0: _p87._0._1,
					_1: {ctor: '[]'}
				}
			};
		}
	};
	var gg1 = function (_p88) {
		var _p89 = _p88;
		return {
			ctor: '::',
			_0: _p89._0._1,
			_1: {ctor: '[]'}
		};
	};
	return _user$project$Util$nsort(
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				gg1,
				A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$concatMap,
					gg2,
					A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel)),
				A2(_elm_lang$core$List$concatMap, gg3, seq.forDEL))));
};
var _user$project$Common_sequent$freshLabel = function (sq) {
	var n = function (_p90) {
		return _elm_lang$core$List$maximum(
			_user$project$Common_sequent$wholeLabel(_p90));
	}(sq);
	var _p91 = n;
	if (_p91.ctor === 'Nothing') {
		return 0;
	} else {
		return _p91._0 + 1;
	}
};
var _user$project$Common_sequent$deadEnd = function (seq) {
	var ff = function (n) {
		return A2(
			_elm_lang$core$List$map,
			function (z) {
				var _p92 = z;
				if ((((_p92.ctor === 'RelAtom') && (_p92._0.ctor === '_Tuple4')) && (_p92._0._3.ctor === '_Tuple2')) && (_p92._0._3._1.ctor === '[]')) {
					var _p95 = _p92._0._3._0;
					return ((!_elm_lang$core$Native_Utils.eq(
						_p92._0._2,
						{
							ctor: '_Tuple2',
							_0: _p95,
							_1: {ctor: '[]'}
						})) && (!A2(
						_user$project$Util$exists,
						seq.leftRel,
						function (w) {
							var _p93 = w;
							if ((((((_p93.ctor === 'RelAtom') && (_p93._0.ctor === '_Tuple4')) && (_p93._0._2.ctor === '_Tuple2')) && (_p93._0._2._1.ctor === '[]')) && (_p93._0._3.ctor === '_Tuple2')) && (_p93._0._3._1.ctor === '[]')) {
								return _elm_lang$core$Native_Utils.eq(
									_toastal$either$Either$Left(_p95),
									_toastal$either$Either$Left(_p93._0._2._0));
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'Common_sequent',
									{
										start: {line: 619, column: 68},
										end: {line: 621, column: 63}
									},
									_p93)('error in deadEnd (1)');
							}
						}))) ? _elm_lang$core$Maybe$Just(_p95) : _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Common_sequent',
						{
							start: {line: 617, column: 18},
							end: {line: 624, column: 52}
						},
						_p92)('error in deadEnd (2)');
				}
			},
			seq.leftRel);
	};
	var wl = _user$project$Common_sequent$wholeLabel(seq);
	return _elm_lang$core$List$isEmpty(seq.leftRel) ? _elm_lang$core$List$head(wl) : _user$project$Util$maybeBigOr(
		_user$project$Util$nub(
			A2(_elm_lang$core$List$concatMap, ff, wl)));
};
var _user$project$Common_sequent$serR = 20;
var _user$project$Common_sequent$symR = 9;
var _user$project$Common_sequent$eucR = 9;
var _user$project$Common_sequent$traR = 9;
var _user$project$Common_sequent$refR = 9;
var _user$project$Common_sequent$boxLN = 16;
var _user$project$Common_sequent$boxRN = 15;
var _user$project$Common_sequent$diaLN = 6;
var _user$project$Common_sequent$diaRN = 6;
var _user$project$Common_sequent$amodelDefN_DEL = 30;
var _user$project$Common_sequent$boxLN2_DEL = 16;
var _user$project$Common_sequent$boxLN1_DEL = 16;
var _user$project$Common_sequent$boxRN2_DEL = 15;
var _user$project$Common_sequent$boxRN1_DEL = 15;
var _user$project$Common_sequent$bigAndLN_DEL = 20;
var _user$project$Common_sequent$bigAndRN_DEL = 5;
var _user$project$Common_sequent$cupLN_DEL = 2;
var _user$project$Common_sequent$cupRN_DEL = 5;
var _user$project$Common_sequent$action2RN_DEL = 9;
var _user$project$Common_sequent$action2LN_DEL = 3;
var _user$project$Common_sequent$actionLN_DEL = 9;
var _user$project$Common_sequent$actionRN_DEL = 3;
var _user$project$Common_sequent$atRN_DEL = 1;
var _user$project$Common_sequent$atLN_DEL = 1;
var _user$project$Common_sequent$cmpRN = 4;
var _user$project$Common_sequent$cmpLN = 4;
var _user$project$Common_sequent$ann2RN = 2;
var _user$project$Common_sequent$ann2LN = 2;
var _user$project$Common_sequent$annLN = 9;
var _user$project$Common_sequent$relLN = 4;
var _user$project$Common_sequent$relLN_DEL = _user$project$Common_sequent$relLN;
var _user$project$Common_sequent$annRN = 3;
var _user$project$Common_sequent$atRN = 1;
var _user$project$Common_sequent$atLN = 1;
var _user$project$Common_sequent$classicalTwo = 5;
var _user$project$Common_sequent$relRN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$relRN_DEL = _user$project$Common_sequent$relRN;
var _user$project$Common_sequent$disjLN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$conjRN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$implLN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$impl2LN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$classicalOne = 2;
var _user$project$Common_sequent$conjLN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$disjRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$implRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$impl2RN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$equiRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$equiLN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$negLN = 1;
var _user$project$Common_sequent$negRN = 1;
var _user$project$Common_sequent$initN = 0;
var _user$project$Common_sequent$limitOfSearching = 15;
var _user$project$Common_sequent$dd = _user$project$Common_syntax$AnyFormula('D');
var _user$project$Common_sequent$cc = _user$project$Common_syntax$AnyFormula('C');
var _user$project$Common_sequent$bb = _user$project$Common_syntax$AnyFormula('B');
var _user$project$Common_sequent$aa = _user$project$Common_syntax$AnyFormula('A');
var _user$project$Common_sequent$p3 = _user$project$Common_syntax$Atom('p3');
var _user$project$Common_sequent$p2 = _user$project$Common_syntax$Atom('p2');
var _user$project$Common_sequent$p1 = _user$project$Common_syntax$Atom('p1');
var _user$project$Common_sequent$ca123 = A2(
	_user$project$Common_syntax$And,
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_sequent$p1,
		A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p2, _user$project$Common_sequent$p1)),
	A2(
		_user$project$Common_syntax$And,
		A2(
			_user$project$Common_syntax$Imply,
			A2(
				_user$project$Common_syntax$Imply,
				_user$project$Common_sequent$p1,
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p2, _user$project$Common_sequent$p3)),
			A2(
				_user$project$Common_syntax$Imply,
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2),
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p3))),
		A2(
			_user$project$Common_syntax$Imply,
			A2(
				_user$project$Common_syntax$Imply,
				_user$project$Common_syntax$Not(_user$project$Common_sequent$p2),
				_user$project$Common_syntax$Not(_user$project$Common_sequent$p1)),
			A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2))));
var _user$project$Common_sequent$Sequent = F5(
	function (a, b, c, d, e) {
		return {leftRel: a, leftForm: b, rightRel: c, rightForm: d, forDEL: e};
	});
var _user$project$Common_sequent$Rule = F4(
	function (a, b, c, d) {
		return {priority: a, category: b, rulename: c, rule: d};
	});
var _user$project$Common_sequent$Branch = F3(
	function (a, b, c) {
		return {causeSequent: a, appliedRule: b, resultSequents: c};
	});
var _user$project$Common_sequent$RandomSeed = F2(
	function (a, b) {
		return {randomNumber: a, maxLengthOfRandomFormula: b};
	});
var _user$project$Common_sequent$Node = F3(
	function (a, b, c) {
		return {id: a, label: b, color: c};
	});
var _user$project$Common_sequent$Edge = F4(
	function (a, b, c, d) {
		return {id: a, from: b, to: c, label: d};
	});
var _user$project$Common_sequent$Graph = F3(
	function (a, b, c) {
		return {nodes: a, edges: b, provable: c};
	});
var _user$project$Common_sequent$LabelForm = function (a) {
	return {ctor: 'LabelForm', _0: a};
};
var _user$project$Common_sequent$formula2seq = function (f) {
	return {
		leftRel: {ctor: '[]'},
		leftForm: {ctor: '[]'},
		rightRel: {ctor: '[]'},
		rightForm: {
			ctor: '::',
			_0: _user$project$Common_sequent$LabelForm(
				{
					ctor: '_Tuple4',
					_0: {ctor: '[]'},
					_1: 0,
					_2: {ctor: '[]'},
					_3: f
				}),
			_1: {ctor: '[]'}
		},
		forDEL: {ctor: '[]'}
	};
};
var _user$project$Common_sequent$axK = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$Imply,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$bb))));
var _user$project$Common_sequent$axT = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
		_user$project$Common_sequent$aa));
var _user$project$Common_sequent$ax4 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa))));
var _user$project$Common_sequent$ax5 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa)),
		A2(
			_user$project$Common_syntax$Box,
			'a',
			_user$project$Common_syntax$Not(
				A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa)))));
var _user$project$Common_sequent$ax5p = _user$project$Common_sequent$formula2seq(
	_user$project$Common_syntax$Not(
		A2(
			_user$project$Common_syntax$Imply,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
			A2(
				_user$project$Common_syntax$Box,
				'a',
				_user$project$Common_syntax$Not(
					A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa))))));
var _user$project$Common_sequent$axB = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_sequent$aa,
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Dia, 'a', _user$project$Common_sequent$aa))));
var _user$project$Common_sequent$axD = _user$project$Common_sequent$formula2seq(
	_user$project$Common_syntax$Not(
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_syntax$Bot)));
var _user$project$Common_sequent$RelAtom_int = function (a) {
	return {ctor: 'RelAtom_int', _0: a};
};
var _user$project$Common_sequent$RelAtom = function (a) {
	return {ctor: 'RelAtom', _0: a};
};
var _user$project$Common_sequent$tran = F2(
	function (exp1, exp2) {
		var _p97 = {ctor: '_Tuple2', _0: exp1, _1: exp2};
		if (((((((_p97.ctor === '_Tuple2') && (_p97._0.ctor === 'RelAtom')) && (_p97._0._0.ctor === '_Tuple4')) && (_p97._0._0._1.ctor === '[]')) && (_p97._1.ctor === 'RelAtom')) && (_p97._1._0.ctor === '_Tuple4')) && (_p97._1._0._1.ctor === '[]')) {
			var _p98 = _p97._0._0._0;
			return (_elm_lang$core$Native_Utils.eq(_p98, _p97._1._0._0) && _elm_lang$core$Native_Utils.eq(_p97._0._0._3, _p97._1._0._2)) ? {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {
						ctor: '::',
						_0: _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p98,
								_1: {ctor: '[]'},
								_2: _p97._0._0._2,
								_3: _p97._1._0._3
							}),
						_1: {ctor: '[]'}
					}
				}
			} : {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _user$project$Common_sequent$eucl = F2(
	function (exp1, exp2) {
		var _p99 = {ctor: '_Tuple2', _0: exp1, _1: exp2};
		if (((((((_p99.ctor === '_Tuple2') && (_p99._0.ctor === 'RelAtom')) && (_p99._0._0.ctor === '_Tuple4')) && (_p99._0._0._1.ctor === '[]')) && (_p99._1.ctor === 'RelAtom')) && (_p99._1._0.ctor === '_Tuple4')) && (_p99._1._0._1.ctor === '[]')) {
			var _p102 = _p99._1._0._3;
			var _p101 = _p99._0._0._3;
			var _p100 = _p99._0._0._0;
			return (_elm_lang$core$Native_Utils.eq(_p99._0._0._2, _p99._1._0._2) && _elm_lang$core$Native_Utils.eq(_p100, _p99._1._0._0)) ? {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {
						ctor: '::',
						_0: _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p100,
								_1: {ctor: '[]'},
								_2: _p101,
								_3: _p102
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p100,
									_1: {ctor: '[]'},
									_2: _p102,
									_3: _p101
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			} : {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return _user$project$Util$nub(
				{
					ctor: '::',
					_0: exp1,
					_1: {
						ctor: '::',
						_0: exp2,
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _user$project$Common_sequent$Proof = F3(
	function (a, b, c) {
		return {ctor: 'Proof', _0: a, _1: b, _2: c};
	});
var _user$project$Common_sequent$Rule4Other = {ctor: 'Rule4Other'};
var _user$project$Common_sequent$axiomRule = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$initN,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'init',
		rule: function (seq) {
			var deleteBoxHistoty = function (_p103) {
				var _p104 = _p103;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {ctor: '[]'},
						_1: _p104._0._1,
						_2: _p104._0._2,
						_3: _p104._0._3
					});
			};
			return (A2(
				_user$project$Util$exists,
				seq.leftForm,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightForm,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(
								deleteBoxHistoty(x),
								deleteBoxHistoty(y));
						});
				}) || A2(
				_user$project$Util$exists,
				seq.leftRel,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightRel,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						});
				})) ? _elm_lang$core$Maybe$Just(
				{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$initN,
			category: _user$project$Common_sequent$Rule4Other,
			rulename: 'Top',
			rule: function (seq) {
				return A2(
					_user$project$Util$exists,
					seq.rightForm,
					function (a) {
						var _p105 = a;
						if ((_p105._0.ctor === '_Tuple4') && (_p105._0._3.ctor === 'Top')) {
							return true;
						} else {
							return false;
						}
					}) ? _elm_lang$core$Maybe$Just(
					{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$initN,
				category: _user$project$Common_sequent$Rule4Other,
				rulename: 'Bot',
				rule: function (seq) {
					return A2(
						_user$project$Util$exists,
						seq.leftForm,
						function (a) {
							var _p106 = a;
							if ((_p106._0.ctor === '_Tuple4') && (_p106._0._3.ctor === 'Bot')) {
								return true;
							} else {
								return false;
							}
						}) ? _elm_lang$core$Maybe$Just(
						{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
				}
			},
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Common_sequent$initCheck = function (li) {
	initCheck:
	while (true) {
		var _p107 = li;
		if (_p107.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p108 = _p107._0;
			if (A2(
				_user$project$Util$forall,
				_user$project$Common_sequent$axiomRule,
				function (x) {
					return function (y) {
						return _elm_lang$core$Native_Utils.eq(_elm_lang$core$Maybe$Nothing, y);
					}(
						_elm_community$maybe_extra$Maybe_Extra$combine(
							A2(_elm_lang$core$List$map, x.rule, _p108.resultSequents)));
				})) {
				var _v77 = _p107._1;
				li = _v77;
				continue initCheck;
			} else {
				return _elm_lang$core$Maybe$Just(_p108);
			}
		}
	}
};
var _user$project$Common_sequent$ruleEnd = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'end',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$ruleLimit = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'limit',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$ruleStop = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'stop',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$makeProofBranch = F3(
	function (maxNum, ruleSet, seq) {
		var stopBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleStop,
			resultSequents: {ctor: '[]'}
		};
		var endBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleEnd,
			resultSequents: {ctor: '[]'}
		};
		var limitBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleLimit,
			resultSequents: {ctor: '[]'}
		};
		var forDEL1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{forDEL: x});
			},
			_user$project$Util$rotate(seq.forDEL));
		var rightSeqs2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{rightForm: x});
			},
			_user$project$Util$rotate(seq.rightForm));
		var rightSeqs1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{rightRel: x});
			},
			_user$project$Util$rotate(seq.rightRel));
		var leftSeqs2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{leftForm: x});
			},
			_user$project$Util$rotate(seq.leftForm));
		var leftSeqs1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: x});
			},
			_user$project$Util$rotate(seq.leftRel));
		var applyrule = function (s) {
			return A2(
				_elm_lang$core$List$filterMap,
				function (r) {
					return A2(_user$project$Common_sequent$seq2branch, s, r);
				},
				ruleSet);
		};
		var branches = _user$project$Util$nub(
			A2(
				_elm_lang$core$List$concatMap,
				applyrule,
				_user$project$Util$nub(
					_elm_lang$core$List$concat(
						{
							ctor: '::',
							_0: leftSeqs1,
							_1: {
								ctor: '::',
								_0: leftSeqs2,
								_1: {
									ctor: '::',
									_0: rightSeqs1,
									_1: {
										ctor: '::',
										_0: rightSeqs2,
										_1: {
											ctor: '::',
											_0: forDEL1,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}))));
		var branchesSorted = A2(
			_elm_lang$core$List$sortBy,
			function (_p109) {
				return function (_) {
					return _.priority;
				}(
					function (_) {
						return _.appliedRule;
					}(_p109));
			},
			branches);
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel)) + _elm_lang$core$List$length(
				A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)),
			maxNum) > 0) {
			return limitBranch;
		} else {
			var _p110 = branchesSorted;
			if (_p110.ctor === '[]') {
				return _user$project$Common_sequent$anyFormulaCheck(seq) ? stopBranch : endBranch;
			} else {
				var _p111 = _user$project$Common_sequent$initCheck(branchesSorted);
				if (_p111.ctor === 'Just') {
					return _user$project$Common_sequent$sortSeqOfBranch(_p111._0);
				} else {
					return _user$project$Common_sequent$sortSeqOfBranch(_p110._0);
				}
			}
		}
	});
var _user$project$Common_sequent$makeProofTree = F3(
	function (maxNum, ruleSet, seq) {
		var move = A3(_user$project$Common_sequent$makeProofBranch, maxNum, ruleSet, seq);
		return A3(
			_user$project$Common_sequent$Proof,
			seq,
			move.appliedRule.rulename,
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Common_sequent$makeProofTree, maxNum, ruleSet),
				move.resultSequents));
	});
var _user$project$Common_sequent$isProvableSeq = F3(
	function (maxNum, ruleSet, seq) {
		var _p112 = seq;
		if (_p112.ctor === 'Nothing') {
			return false;
		} else {
			var prf = A3(_user$project$Common_sequent$makeProofTree, maxNum, ruleSet, _p112._0);
			var _p113 = _user$project$Common_sequent$isProvable(prf);
			if (_p113 === 1) {
				return true;
			} else {
				return false;
			}
		}
	});
var _user$project$Common_sequent$ruleT = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$refR,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'ref',
		rule: function (seq) {
			var ref = A2(
				_user$project$Util_ops['$>>='],
				_user$project$Common_sequent$wholeAgent(seq),
				function (ag) {
					return A2(
						_user$project$Util_ops['$>>='],
						_user$project$Common_sequent$wholeLabel(seq),
						function (w) {
							return {
								ctor: '::',
								_0: _user$project$Common_sequent$RelAtom(
									{
										ctor: '_Tuple4',
										_0: ag,
										_1: {ctor: '[]'},
										_2: {
											ctor: '_Tuple2',
											_0: w,
											_1: {ctor: '[]'}
										},
										_3: {
											ctor: '_Tuple2',
											_0: w,
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							};
						});
				});
			var seq2 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					leftRel: _user$project$Util$nub(
						A2(_elm_lang$core$Basics_ops['++'], ref, seq.leftRel))
				});
			return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				});
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$ruleD = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$serR,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'ser',
		rule: function (seq) {
			var fresh = _user$project$Common_sequent$freshLabel(seq);
			var headLa = _user$project$Common_sequent$deadEnd(seq);
			var wholeAg = _user$project$Common_sequent$wholeAgent(seq);
			var _p114 = headLa;
			if (_p114.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var gg = A2(
					_elm_lang$core$List$concatMap,
					function (ag) {
						return {
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: ag,
									_1: {ctor: '[]'},
									_2: {
										ctor: '_Tuple2',
										_0: _p114._0,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: fresh,
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						};
					},
					wholeAg);
				return A2(
					_user$project$Common_sequent$sameSeq,
					seq,
					_elm_lang$core$Native_Utils.update(
						seq,
						{
							leftRel: A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, gg)
						})) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftRel: A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, gg)
							}),
						_1: {ctor: '[]'}
					});
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$Rule4DEL = {ctor: 'Rule4DEL'};
var _user$project$Common_sequent$Rule4RightFormula = {ctor: 'Rule4RightFormula'};
var _user$project$Common_sequent$Rule4RightRel = {ctor: 'Rule4RightRel'};
var _user$project$Common_sequent$Rule4LeftFormula = {ctor: 'Rule4LeftFormula'};
var _user$project$Common_sequent$ruleClassic = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$negLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L~',
		rule: function (seq) {
			var _p115 = seq.leftForm;
			if (((_p115.ctor === '::') && (_p115._0._0.ctor === '_Tuple4')) && (_p115._0._0._3.ctor === 'Not')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p115._0._0._0, _1: _p115._0._0._1, _2: _p115._0._0._2, _3: _p115._0._0._3._0});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: _p115._1,
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									seq.rightForm)
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$negRN,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'R~',
			rule: function (seq) {
				var _p116 = seq.rightForm;
				if (((_p116.ctor === '::') && (_p116._0._0.ctor === '_Tuple4')) && (_p116._0._0._3.ctor === 'Not')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{ctor: '_Tuple4', _0: _p116._0._0._0, _1: _p116._0._0._1, _2: _p116._0._0._2, _3: _p116._0._0._3._0});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftForm),
									rightForm: _p116._1
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$conjLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L&',
				rule: function (seq) {
					var _p117 = seq.leftForm;
					if (((_p117.ctor === '::') && (_p117._0._0.ctor === '_Tuple4')) && (_p117._0._0._3.ctor === 'And')) {
						var _p120 = _p117._0._0._1;
						var _p119 = _p117._0._0._0;
						var _p118 = _p117._0._0._2;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p119, _1: _p120, _2: _p118, _3: _p117._0._0._3._1});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p119, _1: _p120, _2: _p118, _3: _p117._0._0._3._0});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												}
											},
											_p117._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$conjRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R&',
					rule: function (seq) {
						var _p121 = seq.rightForm;
						if (((_p121.ctor === '::') && (_p121._0._0.ctor === '_Tuple4')) && (_p121._0._0._3.ctor === 'And')) {
							var _p125 = _p121._1;
							var _p124 = _p121._0._0._1;
							var _p123 = _p121._0._0._0;
							var _p122 = _p121._0._0._2;
							var f2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p123, _1: _p124, _2: _p122, _3: _p121._0._0._3._1});
							var f1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p123, _1: _p124, _2: _p122, _3: _p121._0._0._3._0});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: f1,
													_1: {ctor: '[]'}
												},
												_p125)
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: f2,
														_1: {ctor: '[]'}
													},
													_p125)
											}),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$disjLN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'Lv',
						rule: function (seq) {
							var _p126 = seq.leftForm;
							if (((_p126.ctor === '::') && (_p126._0._0.ctor === '_Tuple4')) && (_p126._0._0._3.ctor === 'Or')) {
								var _p130 = _p126._1;
								var _p129 = _p126._0._0._1;
								var _p128 = _p126._0._0._0;
								var _p127 = _p126._0._0._2;
								var add2 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p128, _1: _p129, _2: _p127, _3: _p126._0._0._3._1});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p128, _1: _p129, _2: _p127, _3: _p126._0._0._3._0});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													_p130)
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													leftForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														},
														_p130)
												}),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$disjRN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'Rv',
							rule: function (seq) {
								var _p131 = seq.rightForm;
								if (((_p131.ctor === '::') && (_p131._0._0.ctor === '_Tuple4')) && (_p131._0._0._3.ctor === 'Or')) {
									var _p134 = _p131._0._0._1;
									var _p133 = _p131._0._0._0;
									var _p132 = _p131._0._0._2;
									var add2 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p133, _1: _p134, _2: _p132, _3: _p131._0._0._3._1});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p133, _1: _p134, _2: _p132, _3: _p131._0._0._3._0});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															}
														},
														_p131._1)
												}),
											_1: {ctor: '[]'}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$implLN,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L->',
								rule: function (seq) {
									var _p135 = seq.leftForm;
									if (((_p135.ctor === '::') && (_p135._0._0.ctor === '_Tuple4')) && (_p135._0._0._3.ctor === 'Imply')) {
										var _p139 = _p135._1;
										var _p138 = _p135._0._0._1;
										var _p137 = _p135._0._0._0;
										var _p136 = _p135._0._0._2;
										var add2 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p137, _1: _p138, _2: _p136, _3: _p135._0._0._3._1});
										var add1 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p137, _1: _p138, _2: _p136, _3: _p135._0._0._3._0});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftForm: _p139,
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															},
															seq.rightForm)
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p139)
														}),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$implRN,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'R->',
									rule: function (seq) {
										var _p140 = seq.rightForm;
										if (((_p140.ctor === '::') && (_p140._0._0.ctor === '_Tuple4')) && (_p140._0._0._3.ctor === 'Imply')) {
											var _p143 = _p140._0._0._1;
											var _p142 = _p140._0._0._0;
											var _p141 = _p140._0._0._2;
											var add2 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p142, _1: _p143, _2: _p141, _3: _p140._0._0._3._1});
											var add1 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p142, _1: _p143, _2: _p141, _3: _p140._0._0._3._0});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.leftForm),
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p140._1)
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$impl2LN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L->2',
										rule: function (seq) {
											var _p144 = seq.leftForm;
											if (((_p144.ctor === '::') && (_p144._0._0.ctor === '_Tuple4')) && (_p144._0._0._3.ctor === 'Imply2')) {
												var _p148 = _p144._1;
												var _p147 = _p144._0._0._1;
												var _p146 = _p144._0._0._0;
												var _p145 = _p144._0._0._2;
												var add2 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p146, _1: _p147, _2: _p145, _3: _p144._0._0._3._0});
												var add1 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p146, _1: _p147, _2: _p145, _3: _p144._0._0._3._1});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add2,
																		_1: {ctor: '[]'}
																	},
																	_p148)
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: _p148,
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		seq.rightForm)
																}),
															_1: {ctor: '[]'}
														}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$impl2RN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R->2',
											rule: function (seq) {
												var _p149 = seq.rightForm;
												if (((_p149.ctor === '::') && (_p149._0._0.ctor === '_Tuple4')) && (_p149._0._0._3.ctor === 'Imply2')) {
													var _p152 = _p149._0._0._1;
													var _p151 = _p149._0._0._0;
													var _p150 = _p149._0._0._2;
													var add2 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p151, _1: _p152, _2: _p150, _3: _p149._0._0._3._1});
													var add1 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p151, _1: _p152, _2: _p150, _3: _p149._0._0._3._0});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add2,
																			_1: {ctor: '[]'}
																		},
																		seq.leftForm),
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		_p149._1)
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$equiLN,
												category: _user$project$Common_sequent$Rule4LeftFormula,
												rulename: 'L<->',
												rule: function (seq) {
													var _p153 = seq.leftForm;
													if (((_p153.ctor === '::') && (_p153._0._0.ctor === '_Tuple4')) && (_p153._0._0._3.ctor === 'Iff')) {
														var _p155 = _p153._0._0._3._1;
														var _p154 = _p153._0._0._3._0;
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: _p153._0._0._0,
																_1: _p153._0._0._1,
																_2: _p153._0._0._2,
																_3: A2(
																	_user$project$Common_syntax$And,
																	A2(_user$project$Common_syntax$Imply, _p154, _p155),
																	A2(_user$project$Common_syntax$Imply, _p155, _p154))
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p153._1)
																	}),
																_1: {ctor: '[]'}
															});
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$equiRN,
													category: _user$project$Common_sequent$Rule4RightFormula,
													rulename: 'R<->',
													rule: function (seq) {
														var _p156 = seq.rightForm;
														if (((_p156.ctor === '::') && (_p156._0._0.ctor === '_Tuple4')) && (_p156._0._0._3.ctor === 'Iff')) {
															var _p158 = _p156._0._0._3._1;
															var _p157 = _p156._0._0._3._0;
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: _p156._0._0._0,
																	_1: _p156._0._0._1,
																	_2: _p156._0._0._2,
																	_3: A2(
																		_user$project$Common_syntax$And,
																		A2(_user$project$Common_syntax$Imply, _p157, _p158),
																		A2(_user$project$Common_syntax$Imply, _p158, _p157))
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				_p156._1)
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Common_sequent$ruleK = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$boxRN,
		category: _user$project$Common_sequent$Rule4RightFormula,
		rulename: 'R#',
		rule: function (seq) {
			var _p159 = seq.rightForm;
			if (((_p159.ctor === '::') && (_p159._0._0.ctor === '_Tuple4')) && (_p159._0._0._3.ctor === 'Box')) {
				var _p160 = _p159._0._0._2;
				var $new = _user$project$Common_sequent$freshLabel(seq);
				var add1 = _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p159._0._0._3._0,
						_1: _toastal$either$Either$lefts(_p160),
						_2: {
							ctor: '_Tuple2',
							_0: _p159._0._0._1,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: $new,
							_1: {ctor: '[]'}
						}
					});
				var add2 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p159._0._0._0, _1: $new, _2: _p160, _3: _p159._0._0._3._1});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add2,
										_1: {ctor: '[]'}
									},
									_p159._1),
								leftRel: _user$project$Common_sequent$sortRelAtom(
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftRel))
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$boxLN,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L#',
			rule: function (seq) {
				var _p161 = seq.leftForm;
				if (((_p161.ctor === '::') && (_p161._0._0.ctor === '_Tuple4')) && (_p161._0._0._3.ctor === 'Box')) {
					var _p173 = _p161._0._0._1;
					var _p172 = _p161._0._0._3._1;
					var _p171 = _p161._1;
					var _p170 = _p161._0._0._0;
					var _p169 = _p161._0._0._2;
					var _p168 = _p161._0._0._3._0;
					var orig = function (_p162) {
						var _p163 = _p162;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p163._0, _1: _p163._1},
									_1: _p170
								},
								_1: _p173,
								_2: _p169,
								_3: A2(_user$project$Common_syntax$Box, _p168, _p172)
							});
					};
					var add2 = function (_p164) {
						var _p165 = _p164;
						return _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p168,
								_1: _toastal$either$Either$lefts(_p169),
								_2: {
									ctor: '_Tuple2',
									_0: _p173,
									_1: {ctor: '[]'}
								},
								_3: {
									ctor: '_Tuple2',
									_0: _p165._0,
									_1: {ctor: '[]'}
								}
							});
					};
					var add1 = function (_p166) {
						var _p167 = _p166;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {ctor: '[]'},
								_1: _p167._0,
								_2: _p169,
								_3: _p172
							});
					};
					var justlabel = function (wholeLabel2) {
						return _elm_community$list_extra$List_Extra$last(
							A2(_user$project$Util$difference, wholeLabel2, _p170));
					}(
						A2(
							_elm_lang$core$List$map,
							function (n) {
								return {
									ctor: '_Tuple2',
									_0: n,
									_1: {ctor: '[]'}
								};
							},
							_user$project$Common_sequent$wholeLabel(seq)));
					return A2(
						_user$project$Applicative_ops['?>'],
						justlabel,
						function (x) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: orig(x),
												_1: {
													ctor: '::',
													_0: add1(x),
													_1: {ctor: '[]'}
												}
											},
											_p171)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: orig(x),
													_1: {ctor: '[]'}
												},
												_p171),
											rightRel: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2(x),
													_1: {ctor: '[]'}
												},
												seq.rightRel)
										}),
									_1: {ctor: '[]'}
								}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$boxLN,
				category: _user$project$Common_sequent$Rule4RightFormula,
				rulename: 'R$',
				rule: function (seq) {
					var _p174 = seq.rightForm;
					if (((_p174.ctor === '::') && (_p174._0._0.ctor === '_Tuple4')) && (_p174._0._0._3.ctor === 'Dia')) {
						var _p186 = _p174._0._0._1;
						var _p185 = _p174._1;
						var _p184 = _p174._0._0._3._1;
						var _p183 = _p174._0._0._0;
						var _p182 = _p174._0._0._2;
						var _p181 = _p174._0._0._3._0;
						var orig = function (_p175) {
							var _p176 = _p175;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p176._0, _1: _p176._1},
										_1: _p183
									},
									_1: _p186,
									_2: _p182,
									_3: A2(_user$project$Common_syntax$Dia, _p181, _p184)
								});
						};
						var add2 = function (_p177) {
							var _p178 = _p177;
							return _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p181,
									_1: _toastal$either$Either$lefts(_p182),
									_2: {
										ctor: '_Tuple2',
										_0: _p186,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: _p178._0,
										_1: {ctor: '[]'}
									}
								});
						};
						var add1 = function (_p179) {
							var _p180 = _p179;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {ctor: '[]'},
									_1: _p180._0,
									_2: _p182,
									_3: _p184
								});
						};
						var justlabel = function (wholeLabel2) {
							return _elm_lang$core$List$head(
								A2(_user$project$Util$difference, wholeLabel2, _p183));
						}(
							A2(
								_elm_lang$core$List$map,
								function (n) {
									return {
										ctor: '_Tuple2',
										_0: n,
										_1: {ctor: '[]'}
									};
								},
								_user$project$Common_sequent$wholeLabel(seq)));
						return A2(
							_user$project$Applicative_ops['?>'],
							justlabel,
							function (x) {
								return {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: orig(x),
													_1: {
														ctor: '::',
														_0: add1(x),
														_1: {ctor: '[]'}
													}
												},
												_p185)
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: orig(x),
														_1: {ctor: '[]'}
													},
													_p185),
												rightRel: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add2(x),
														_1: {ctor: '[]'}
													},
													seq.rightRel)
											}),
										_1: {ctor: '[]'}
									}
								};
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$boxRN,
					category: _user$project$Common_sequent$Rule4LeftFormula,
					rulename: 'L$',
					rule: function (seq) {
						var _p187 = seq.leftForm;
						if (((_p187.ctor === '::') && (_p187._0._0.ctor === '_Tuple4')) && (_p187._0._0._3.ctor === 'Dia')) {
							var _p188 = _p187._0._0._2;
							var $new = _user$project$Common_sequent$freshLabel(seq);
							var add1 = _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p187._0._0._3._0,
									_1: _toastal$either$Either$lefts(_p188),
									_2: {
										ctor: '_Tuple2',
										_0: _p187._0._0._1,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: $new,
										_1: {ctor: '[]'}
									}
								});
							var add2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p187._0._0._0, _1: $new, _2: _p188, _3: _p187._0._0._3._1});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p187._1),
											leftRel: _user$project$Common_sequent$sortRelAtom(
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													seq.leftRel))
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Common_sequent$Rule4LeftRel = {ctor: 'Rule4LeftRel'};
var _user$project$Common_sequent$rule4 = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$traR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'tran',
		rule: function (seq) {
			var _p189 = seq.leftRel;
			if ((((_p189.ctor === '::') && (_p189._0.ctor === 'RelAtom')) && (_p189._0._0.ctor === '_Tuple4')) && (_p189._0._0._1.ctor === '[]')) {
				var ff = _user$project$Common_sequent$tran(
					_user$project$Common_sequent$RelAtom(
						{
							ctor: '_Tuple4',
							_0: _p189._0._0._0,
							_1: {ctor: '[]'},
							_2: _p189._0._0._2,
							_3: _p189._0._0._3
						}));
				var le2 = _user$project$Util$nub(
					A2(_elm_lang$core$List$concatMap, ff, seq.leftRel));
				var seq2 = _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: le2});
				return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: seq2,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$rule5 = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$eucR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'eucl',
		rule: function (seq) {
			var _p190 = seq.leftRel;
			if ((((_p190.ctor === '::') && (_p190._0.ctor === 'RelAtom')) && (_p190._0._0.ctor === '_Tuple4')) && (_p190._0._0._1.ctor === '[]')) {
				var ff = _user$project$Common_sequent$eucl(
					_user$project$Common_sequent$RelAtom(
						{
							ctor: '_Tuple4',
							_0: _p190._0._0._0,
							_1: {ctor: '[]'},
							_2: _p190._0._0._2,
							_3: _p190._0._0._3
						}));
				var le2 = _user$project$Util$nub(
					A2(_elm_lang$core$List$concatMap, ff, seq.leftRel));
				var seq2 = _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: le2});
				return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: seq2,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$ruleB = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$symR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'symm',
		rule: function (seq) {
			var _p191 = seq.leftRel;
			if ((((_p191.ctor === '::') && (_p191._0.ctor === 'RelAtom')) && (_p191._0._0.ctor === '_Tuple4')) && (_p191._0._0._1.ctor === '[]')) {
				var le2 = _user$project$Util$nub(
					A2(
						_elm_lang$core$Basics_ops['++'],
						seq.leftRel,
						{
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p191._0._0._0,
									_1: {ctor: '[]'},
									_2: _p191._0._0._3,
									_3: _p191._0._0._2
								}),
							_1: {ctor: '[]'}
						}));
				return A2(
					_user$project$Common_sequent$sameSeq,
					seq,
					_elm_lang$core$Native_Utils.update(
						seq,
						{leftRel: le2})) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{leftRel: le2}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$proofSystem = function (str) {
	proofSystem:
	while (true) {
		var _p192 = _elm_lang$core$String$toList(str);
		if (_p192.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p196 = _p192._1;
			var _p193 = _p192._0;
			switch (_p193.valueOf()) {
				case 'K':
					var _v110 = _elm_lang$core$String$fromList(_p196);
					str = _v110;
					continue proofSystem;
				case 'T':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleT,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p196)));
				case 'B':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleB,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p196)));
				case 'D':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleD,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p196)));
				case '4':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$rule4,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p196)));
				case '5':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$rule5,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p196)));
				case 'S':
					var _p194 = _p196;
					if (_p194.ctor === '[]') {
						return {ctor: '[]'};
					} else {
						var _p195 = _p194._0;
						switch (_p195.valueOf()) {
							case '5':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Common_sequent$ruleK,
									A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleT, _user$project$Common_sequent$rule5));
							case '4':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Common_sequent$ruleK,
									A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleT, _user$project$Common_sequent$rule4));
							default:
								return {ctor: '[]'};
						}
					}
				default:
					return {ctor: '[]'};
			}
		}
	}
};
var _user$project$Common_sequent$EbProofsty = {ctor: 'EbProofsty'};
var _user$project$Common_sequent$drawTexProof_ebproofsty2 = function (q) {
	var _p197 = q;
	if ((_p197.ctor === '::') && (_p197._1.ctor === '[]')) {
		var _p200 = _p197._0._0;
		var _p199 = _p197._0._1;
		var _p198 = _p197._0._2;
		if (_p198.ctor === '[]') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'\\Hypo{($',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Common_sequent$texRule(_p199),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'$)}',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n \\Infer1[]{',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Common_sequent$drawTexSequent, _p200, _user$project$Common_sequent$EbProofsty),
								'}')))));
		} else {
			if (_p198._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Common_sequent$drawTexProof_ebproofsty2(
						{
							ctor: '::',
							_0: A3(_user$project$Common_sequent$Proof, _p198._0._0, _p198._0._1, _p198._0._2),
							_1: {ctor: '[]'}
						}),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\n \\Infer1[\\mbox{($',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_sequent$texRule(_p199),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'$)}]{',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Common_sequent$drawTexSequent, _p200, _user$project$Common_sequent$EbProofsty),
									'}')))));
			} else {
				if (_p198._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$drawTexProof_ebproofsty2(
							{
								ctor: '::',
								_0: A3(_user$project$Common_sequent$Proof, _p198._0._0, _p198._0._1, _p198._0._2),
								_1: {ctor: '[]'}
							}),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Common_sequent$drawTexProof_ebproofsty2(
									{
										ctor: '::',
										_0: A3(_user$project$Common_sequent$Proof, _p198._1._0._0, _p198._1._0._1, _p198._1._0._2),
										_1: {ctor: '[]'}
									}),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\n \\Infer2[\\mbox{($',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Common_sequent$texRule(_p199),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'$)}]{',
											A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_user$project$Common_sequent$drawTexSequent, _p200, _user$project$Common_sequent$EbProofsty),
												'}')))))));
				} else {
					if (_p198._1._1._1.ctor === '[]') {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_sequent$drawTexProof_ebproofsty2(
								{
									ctor: '::',
									_0: A3(_user$project$Common_sequent$Proof, _p198._0._0, _p198._0._1, _p198._0._2),
									_1: {ctor: '[]'}
								}),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\n',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Common_sequent$drawTexProof_ebproofsty2(
										{
											ctor: '::',
											_0: A3(_user$project$Common_sequent$Proof, _p198._1._0._0, _p198._1._0._1, _p198._1._0._2),
											_1: {ctor: '[]'}
										}),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'\n',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Common_sequent$drawTexProof_ebproofsty2(
												{
													ctor: '::',
													_0: A3(_user$project$Common_sequent$Proof, _p198._1._1._0._0, _p198._1._1._0._1, _p198._1._1._0._2),
													_1: {ctor: '[]'}
												}),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'\n \\Infer3[\\mbox{($',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Common_sequent$texRule(_p199),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'$)}]{',
														A2(
															_elm_lang$core$Basics_ops['++'],
															A2(_user$project$Common_sequent$drawTexSequent, _p200, _user$project$Common_sequent$EbProofsty),
															'}')))))))));
					} else {
						return 'error in drawTexProof_ebproofsty2 (1)';
					}
				}
			}
		}
	} else {
		return 'error in drawTexProof_ebproofsty2 (2)';
	}
};
var _user$project$Common_sequent$drawTexProof_ebproofsty = function (q) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'<div>\\documentclass{article}</div>',
		A2(
			_elm_lang$core$Basics_ops['++'],
			'<div>\\usepackage{amsmath,amssymb,amsthm}</div>',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'<div>\\usepackage{ebproof}</div>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'<div>\\begin{document}</div>',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<div>\\begin{tiny}</div>',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'<div>\\begin{prooftree}</div>',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Common_sequent$drawTexProof_ebproofsty2(q),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'<div>\\end{prooftree}</div>',
									A2(_elm_lang$core$Basics_ops['++'], '<div>\\end{tiny}</div>', '<div>\\end{document}</div>')))))))));
};
var _user$project$Common_sequent$Proofsty = {ctor: 'Proofsty'};
var _user$project$Common_sequent$drawTexProof_proofsty2 = function (q) {
	var _p201 = q;
	if ((_p201.ctor === '::') && (_p201._1.ctor === '[]')) {
		var _p204 = _p201._0._0;
		var _p203 = _p201._0._1;
		var _p202 = _p201._0._2;
		if (_p202.ctor === '[]') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'\n \\infer[\\mbox{($',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Common_sequent$texRule(_p203),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'$)}]{',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_sequent$drawTexSequent, _p204, _user$project$Common_sequent$Proofsty),
							'}{}'))));
		} else {
			if (_p202._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'\n \\infer[\\mbox{($',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$texRule(_p203),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'$)}]{',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(_user$project$Common_sequent$drawTexSequent, _p204, _user$project$Common_sequent$Proofsty),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'}{',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Common_sequent$drawTexProof_proofsty2(
											{
												ctor: '::',
												_0: A3(_user$project$Common_sequent$Proof, _p202._0._0, _p202._0._1, _p202._0._2),
												_1: {ctor: '[]'}
											}),
										'}'))))));
			} else {
				if (_p202._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'\n \\infer[\\mbox{($',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_sequent$texRule(_p203),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'$)}]{',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Common_sequent$drawTexSequent, _p204, _user$project$Common_sequent$Proofsty),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'}',
										A2(
											_elm_lang$core$Basics_ops['++'],
											'{',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_user$project$Common_sequent$drawTexProof_proofsty2(
													{
														ctor: '::',
														_0: A3(_user$project$Common_sequent$Proof, _p202._0._0, _p202._0._1, _p202._0._2),
														_1: {ctor: '[]'}
													}),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'\n &',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_user$project$Common_sequent$drawTexProof_proofsty2(
															{
																ctor: '::',
																_0: A3(_user$project$Common_sequent$Proof, _p202._1._0._0, _p202._1._0._1, _p202._1._0._2),
																_1: {ctor: '[]'}
															}),
														'}')))))))));
				} else {
					if (_p202._1._1._1.ctor === '[]') {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							'\n \\infer[\\mbox{($',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Common_sequent$texRule(_p203),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'$)}]{',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(_user$project$Common_sequent$drawTexSequent, _p204, _user$project$Common_sequent$Proofsty),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'}',
											A2(
												_elm_lang$core$Basics_ops['++'],
												'{',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Common_sequent$drawTexProof_proofsty2(
														{
															ctor: '::',
															_0: A3(_user$project$Common_sequent$Proof, _p202._0._0, _p202._0._1, _p202._0._2),
															_1: {ctor: '[]'}
														}),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'\n &',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$Common_sequent$drawTexProof_proofsty2(
																{
																	ctor: '::',
																	_0: A3(_user$project$Common_sequent$Proof, _p202._1._0._0, _p202._1._0._1, _p202._1._0._2),
																	_1: {ctor: '[]'}
																}),
															A2(
																_elm_lang$core$Basics_ops['++'],
																'\n &',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_user$project$Common_sequent$drawTexProof_proofsty2(
																		{
																			ctor: '::',
																			_0: A3(_user$project$Common_sequent$Proof, _p202._1._1._0._0, _p202._1._1._0._1, _p202._1._1._0._2),
																			_1: {ctor: '[]'}
																		}),
																	'}')))))))))));
					} else {
						return 'error in drawTexProof_proofsty2 (1)';
					}
				}
			}
		}
	} else {
		return 'error in drawTexProof_proofsty2 (2)';
	}
};
var _user$project$Common_sequent$drawTexProof_proofsty = function (q) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'<div>\\documentclass{article}</div>',
		A2(
			_elm_lang$core$Basics_ops['++'],
			'<div>\\usepackage{amsmath,amssymb,amsthm}</div>',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'<div>\\usepackage{proof}</div>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'<div>\\begin{document}</div>',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<div>\\begin{tiny}</div>',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_sequent$drawTexProof_proofsty2(q),
							A2(_elm_lang$core$Basics_ops['++'], '<div>\\end{tiny}</div>', '<div>\\end{document}</div>')))))));
};
var _user$project$Common_sequent$Tree = F2(
	function (a, b) {
		return {ctor: 'Tree', _0: a, _1: b};
	});
var _user$project$Common_sequent$proof2tree = function (_p205) {
	var _p206 = _p205;
	return function (w) {
		return A2(
			_user$project$Common_sequent$Tree,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p206._1,
					A2(_elm_lang$core$Basics_ops['++'], ')  ', w))),
			A2(_elm_lang$core$List$map, _user$project$Common_sequent$proof2tree, _p206._2));
	}(
		_user$project$Common_sequent$outputSequent(_p206._0));
};
var _user$project$Common_sequent$drawProof = function (derivation) {
	var isPro = _user$project$Common_sequent$isProvable(derivation);
	return function (z) {
		return A2(_user$project$Common_sequent$list2pairElm, z, isPro);
	}(
		function (y) {
			return A2(
				_user$project$Common_sequent$addBlank,
				y,
				{ctor: '[]'});
		}(
			function (y) {
				return A2(
					_user$project$Common_sequent$addBlank,
					y,
					{ctor: '[]'});
			}(
				function (y) {
					return A2(
						_user$project$Common_sequent$addBlank,
						y,
						{ctor: '[]'});
				}(
					function (x) {
						return A2(
							_user$project$Common_sequent$tree2vis,
							x,
							{ctor: '[]'});
					}(
						_user$project$Common_sequent$proof2tree(derivation))))));
};
