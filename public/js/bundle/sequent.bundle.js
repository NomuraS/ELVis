webpackJsonp([0,3],{

/***/ 16:
/***/ (function(module, exports, __webpack_require__) {

// agent to backup to agent's label
function inputTextArea4Agent() {
    $("#network_action .vis-connect").after(
        '<div class="vis-button_textarea" >' +
        '<input type="text" value="a"  id="id_of_input_for_arrow" >' +
        '</div>'
    )
};

function inputTextArea4Agent_kripke() {
    $("#network_kripke .vis-connect").after(
        '<div class="vis-button_textarea" >' +
        '<input type="text" value="a"  id="id_of_input_for_arrow_kripke" >' +
        '</div>'
    )
};

function backup2manipulation() {
    var val2 = document.getElementById('id_of_input_for_arrow_backup').value
    $('#id_of_input_for_arrow').val(val2)
};

function backup2manipulation_kripke() {
    var val2 = document.getElementById('id_of_input_for_arrow_backup_kripke').value
    $('#id_of_input_for_arrow_kripke').val(val2)
};

$(document).on('click', '#id_of_input_for_arrow', function() {
    document.getElementById("id_of_input_for_arrow").focus();
})

$(document).on('click', '#id_of_input_for_arrow_kripke', function() {
    document.getElementById("id_of_input_for_arrow_kripke").focus();
})

$(document).on('change', '#id_of_input_for_arrow', function() {
    var val1 = document.getElementById('id_of_input_for_arrow').value;
    $('#id_of_input_for_arrow_backup').val(val1);
});
$(document).on('change', '#id_of_input_for_arrow_kripke', function() {
    var val1 = document.getElementById('id_of_input_for_arrow_kripke').value;
    $('#id_of_input_for_arrow_backup_kripke').val(val1);
});

/**
 * vis.js
 * https://github.com/almende/vis
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 4.20.0
 * @date    2017-05-21
 *
 * @license
 * Copyright (C) 2011-2017 Almende B.V, http://almende.com
 *
 * Vis.js is dual licensed under both
 *
 * * The Apache 2.0 License
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * and
 *
 * * The MIT License
 *   http://opensource.org/licenses/MIT
 *
 * Vis.js may be distributed under either license.
 */

"use strict";
var aa = "ee";

(function webpackUniversalModuleDefinition(root, factory) {
    if (true)
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define([], factory);
    else if (typeof exports === 'object')
        exports["vis"] = factory();
    else
        root["vis"] = factory();
})(this, function() {
    return /******/ (function(modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

                /******/ // Check if module is in cache
                /******/
                if (installedModules[moduleId])
                /******/
                    return installedModules[moduleId].exports;

                /******/ // Create a new module (and put it into the cache)
                /******/
                var module = installedModules[moduleId] = {
                    /******/
                    exports: {},
                    /******/
                    id: moduleId,
                    /******/
                    loaded: false
                        /******/
                };

                /******/ // Execute the module function
                /******/
                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

                /******/ // Flag the module as loaded
                /******/
                module.loaded = true;

                /******/ // Return the exports of the module
                /******/
                return module.exports;
                /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
        })
        /************************************************************************/
        /******/
        ([
            /* 0 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var util = __webpack_require__(1);

                // Graph3d
                util.extend(exports, __webpack_require__(87));

                // Timeline & Graph2d
                util.extend(exports, __webpack_require__(116));

                // Network
                util.extend(exports, __webpack_require__(158));

                /***/
            }),
            /* 1 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _getIterator2 = __webpack_require__(2);

                var _getIterator3 = _interopRequireDefault(_getIterator2);

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                // utility functions

                // first check if moment.js is already loaded in the browser window, if so,
                // use this instance. Else, load via commonjs.


                var moment = __webpack_require__(82);
                var uuid = __webpack_require__(86);

                /**
                 * Test whether given object is a number
                 * @param {*} object
                 * @return {Boolean} isNumber
                 */
                exports.isNumber = function(object) {
                    return object instanceof Number || typeof object == 'number';
                };

                /**
                 * Remove everything in the DOM object
                 * @param DOMobject
                 */
                exports.recursiveDOMDelete = function(DOMobject) {
                    if (DOMobject) {
                        while (DOMobject.hasChildNodes() === true) {
                            exports.recursiveDOMDelete(DOMobject.firstChild);
                            DOMobject.removeChild(DOMobject.firstChild);
                        }
                    }
                };

                /**
                 * this function gives you a range between 0 and 1 based on the min and max values in the set, the total sum of all values and the current value.
                 *
                 * @param min
                 * @param max
                 * @param total
                 * @param value
                 * @returns {number}
                 */
                exports.giveRange = function(min, max, total, value) {
                    if (max == min) {
                        return 0.5;
                    } else {
                        var scale = 1 / (max - min);
                        return Math.max(0, (value - min) * scale);
                    }
                };

                /**
                 * Test whether given object is a string
                 * @param {*} object
                 * @return {Boolean} isString
                 */
                exports.isString = function(object) {
                    return object instanceof String || typeof object == 'string';
                };

                /**
                 * Test whether given object is a Date, or a String containing a Date
                 * @param {Date | String} object
                 * @return {Boolean} isDate
                 */
                exports.isDate = function(object) {
                    if (object instanceof Date) {
                        return true;
                    } else if (exports.isString(object)) {
                        // test whether this string contains a date
                        var match = ASPDateRegex.exec(object);
                        if (match) {
                            return true;
                        } else if (!isNaN(Date.parse(object))) {
                            return true;
                        }
                    }

                    return false;
                };

                /**
                 * Create a semi UUID
                 * source: http://stackoverflow.com/a/105074/1262753
                 * @return {String} uuid
                 */
                exports.randomUUID = function() {
                    return uuid.v4();
                };

                /**
                 * assign all keys of an object that are not nested objects to a certain value (used for color objects).
                 * @param obj
                 * @param value
                 */
                exports.assignAllKeys = function(obj, value) {
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop)) {
                            if ((0, _typeof3['default'])(obj[prop]) !== 'object') {
                                obj[prop] = value;
                            }
                        }
                    }
                };

                /**
                 * Fill an object with a possibly partially defined other object. Only copies values if the a object has an object requiring values.
                 * That means an object is not created on a property if only the b object has it.
                 * @param obj
                 * @param value
                 */
                exports.fillIfDefined = function(a, b) {
                    var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                    for (var prop in a) {
                        if (b[prop] !== undefined) {
                            if ((0, _typeof3['default'])(b[prop]) !== 'object') {
                                if ((b[prop] === undefined || b[prop] === null) && a[prop] !== undefined && allowDeletion === true) {
                                    delete a[prop];
                                } else {
                                    a[prop] = b[prop];
                                }
                            } else {
                                if ((0, _typeof3['default'])(a[prop]) === 'object') {
                                    exports.fillIfDefined(a[prop], b[prop], allowDeletion);
                                }
                            }
                        }
                    }
                };

                /**
                 * Extend object a with the properties of object b or a series of objects
                 * Only properties with defined values are copied
                 * @param {Object} a
                 * @param {... Object} b
                 * @return {Object} a
                 */
                exports.protoExtend = function(a, b) {
                    for (var i = 1; i < arguments.length; i++) {
                        var other = arguments[i];
                        for (var prop in other) {
                            a[prop] = other[prop];
                        }
                    }
                    return a;
                };

                /**
                 * Extend object a with the properties of object b or a series of objects
                 * Only properties with defined values are copied
                 * @param {Object} a
                 * @param {... Object} b
                 * @return {Object} a
                 */
                exports.extend = function(a, b) {
                    for (var i = 1; i < arguments.length; i++) {
                        var other = arguments[i];
                        for (var prop in other) {
                            if (other.hasOwnProperty(prop)) {
                                a[prop] = other[prop];
                            }
                        }
                    }
                    return a;
                };

                /**
                 * Extend object a with selected properties of object b or a series of objects
                 * Only properties with defined values are copied
                 * @param {Array.<String>} props
                 * @param {Object} a
                 * @param {Object} b
                 * @return {Object} a
                 */
                exports.selectiveExtend = function(props, a, b) {
                    if (!Array.isArray(props)) {
                        throw new Error('Array with property names expected as first argument');
                    }

                    for (var i = 2; i < arguments.length; i++) {
                        var other = arguments[i];

                        for (var p = 0; p < props.length; p++) {
                            var prop = props[p];
                            if (other && other.hasOwnProperty(prop)) {
                                a[prop] = other[prop];
                            }
                        }
                    }
                    return a;
                };

                /**
                 * Extend object a with selected properties of object b or a series of objects
                 * Only properties with defined values are copied
                 * @param {Array.<String>} props
                 * @param {Object} a
                 * @param {Object} b
                 * @return {Object} a
                 */
                exports.selectiveDeepExtend = function(props, a, b) {
                    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                    // TODO: add support for Arrays to deepExtend
                    if (Array.isArray(b)) {
                        throw new TypeError('Arrays are not supported by deepExtend');
                    }
                    for (var i = 2; i < arguments.length; i++) {
                        var other = arguments[i];
                        for (var p = 0; p < props.length; p++) {
                            var prop = props[p];
                            if (other.hasOwnProperty(prop)) {
                                if (b[prop] && b[prop].constructor === Object) {
                                    if (a[prop] === undefined) {
                                        a[prop] = {};
                                    }
                                    if (a[prop].constructor === Object) {
                                        exports.deepExtend(a[prop], b[prop], false, allowDeletion);
                                    } else {
                                        if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                            delete a[prop];
                                        } else {
                                            a[prop] = b[prop];
                                        }
                                    }
                                } else if (Array.isArray(b[prop])) {
                                    throw new TypeError('Arrays are not supported by deepExtend');
                                } else {
                                    if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                        delete a[prop];
                                    } else {
                                        a[prop] = b[prop];
                                    }
                                }
                            }
                        }
                    }
                    return a;
                };

                /**
                 * Extend object a with selected properties of object b or a series of objects
                 * Only properties with defined values are copied
                 * @param {Array.<String>} props
                 * @param {Object} a
                 * @param {Object} b
                 * @return {Object} a
                 */
                exports.selectiveNotDeepExtend = function(props, a, b) {
                    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                    // TODO: add support for Arrays to deepExtend
                    if (Array.isArray(b)) {
                        throw new TypeError('Arrays are not supported by deepExtend');
                    }
                    for (var prop in b) {
                        if (b.hasOwnProperty(prop)) {
                            if (props.indexOf(prop) == -1) {
                                if (b[prop] && b[prop].constructor === Object) {
                                    if (a[prop] === undefined) {
                                        a[prop] = {};
                                    }
                                    if (a[prop].constructor === Object) {
                                        exports.deepExtend(a[prop], b[prop]);
                                    } else {
                                        if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                            delete a[prop];
                                        } else {
                                            a[prop] = b[prop];
                                        }
                                    }
                                } else if (Array.isArray(b[prop])) {
                                    a[prop] = [];
                                    for (var i = 0; i < b[prop].length; i++) {
                                        a[prop].push(b[prop][i]);
                                    }
                                } else {
                                    if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                        delete a[prop];
                                    } else {
                                        a[prop] = b[prop];
                                    }
                                }
                            }
                        }
                    }
                    return a;
                };

                /**
                 * Deep extend an object a with the properties of object b
                 * @param {Object} a
                 * @param {Object} b
                 * @param [Boolean] protoExtend --> optional parameter. If true, the prototype values will also be extended.
                 *                                  (ie. the options objects that inherit from others will also get the inherited options)
                 * @param [Boolean] global      --> optional parameter. If true, the values of fields that are null will not deleted
                 * @returns {Object}
                 */
                exports.deepExtend = function(a, b, protoExtend, allowDeletion) {
                    for (var prop in b) {
                        if (b.hasOwnProperty(prop) || protoExtend === true) {
                            if (b[prop] && b[prop].constructor === Object) {
                                if (a[prop] === undefined) {
                                    a[prop] = {};
                                }
                                if (a[prop].constructor === Object) {
                                    exports.deepExtend(a[prop], b[prop], protoExtend);
                                } else {
                                    if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                        delete a[prop];
                                    } else {
                                        a[prop] = b[prop];
                                    }
                                }
                            } else if (Array.isArray(b[prop])) {
                                a[prop] = [];
                                for (var i = 0; i < b[prop].length; i++) {
                                    a[prop].push(b[prop][i]);
                                }
                            } else {
                                if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
                                    delete a[prop];
                                } else {
                                    a[prop] = b[prop];
                                }
                            }
                        }
                    }
                    return a;
                };

                /**
                 * Test whether all elements in two arrays are equal.
                 * @param {Array} a
                 * @param {Array} b
                 * @return {boolean} Returns true if both arrays have the same length and same
                 *                   elements.
                 */
                exports.equalArray = function(a, b) {
                    if (a.length != b.length) return false;

                    for (var i = 0, len = a.length; i < len; i++) {
                        if (a[i] != b[i]) return false;
                    }

                    return true;
                };

                /**
                 * Convert an object to another type
                 * @param {Boolean | Number | String | Date | Moment | Null | undefined} object
                 * @param {String | undefined} type   Name of the type. Available types:
                 *                                    'Boolean', 'Number', 'String',
                 *                                    'Date', 'Moment', ISODate', 'ASPDate'.
                 * @return {*} object
                 * @throws Error
                 */
                exports.convert = function(object, type) {
                    var match;

                    if (object === undefined) {
                        return undefined;
                    }
                    if (object === null) {
                        return null;
                    }

                    if (!type) {
                        return object;
                    }
                    if (!(typeof type === 'string') && !(type instanceof String)) {
                        throw new Error('Type must be a string');
                    }

                    //noinspection FallthroughInSwitchStatementJS
                    switch (type) {
                        case 'boolean':
                        case 'Boolean':
                            return Boolean(object);

                        case 'number':
                        case 'Number':
                            if (exports.isString(object) && !isNaN(Date.parse(object))) {
                                return moment(object).valueOf();
                            } else {
                                return Number(object.valueOf());
                            }
                        case 'string':
                        case 'String':
                            return String(object);

                        case 'Date':
                            if (exports.isNumber(object)) {
                                return new Date(object);
                            }
                            if (object instanceof Date) {
                                return new Date(object.valueOf());
                            } else if (moment.isMoment(object)) {
                                return new Date(object.valueOf());
                            }
                            if (exports.isString(object)) {
                                match = ASPDateRegex.exec(object);
                                if (match) {
                                    // object is an ASP date
                                    return new Date(Number(match[1])); // parse number
                                } else {
                                    return moment(new Date(object)).toDate(); // parse string
                                }
                            } else {
                                throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
                            }

                        case 'Moment':
                            if (exports.isNumber(object)) {
                                return moment(object);
                            }
                            if (object instanceof Date) {
                                return moment(object.valueOf());
                            } else if (moment.isMoment(object)) {
                                return moment(object);
                            }
                            if (exports.isString(object)) {
                                match = ASPDateRegex.exec(object);
                                if (match) {
                                    // object is an ASP date
                                    return moment(Number(match[1])); // parse number
                                } else {
                                    return moment(object); // parse string
                                }
                            } else {
                                throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
                            }

                        case 'ISODate':
                            if (exports.isNumber(object)) {
                                return new Date(object);
                            } else if (object instanceof Date) {
                                return object.toISOString();
                            } else if (moment.isMoment(object)) {
                                return object.toDate().toISOString();
                            } else if (exports.isString(object)) {
                                match = ASPDateRegex.exec(object);
                                if (match) {
                                    // object is an ASP date
                                    return new Date(Number(match[1])).toISOString(); // parse number
                                } else {
                                    return moment(object).format(); // ISO 8601
                                }
                            } else {
                                throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ISODate');
                            }

                        case 'ASPDate':
                            if (exports.isNumber(object)) {
                                return '/Date(' + object + ')/';
                            } else if (object instanceof Date) {
                                return '/Date(' + object.valueOf() + ')/';
                            } else if (exports.isString(object)) {
                                match = ASPDateRegex.exec(object);
                                var value;
                                if (match) {
                                    // object is an ASP date
                                    value = new Date(Number(match[1])).valueOf(); // parse number
                                } else {
                                    value = new Date(object).valueOf(); // parse string
                                }
                                return '/Date(' + value + ')/';
                            } else {
                                throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ASPDate');
                            }

                        default:
                            throw new Error('Unknown type "' + type + '"');
                    }
                };

                // parse ASP.Net Date pattern,
                // for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
                // code from http://momentjs.com/
                var ASPDateRegex = /^\/?Date\((\-?\d+)/i;

                /**
                 * Get the type of an object, for example exports.getType([]) returns 'Array'
                 * @param {*} object
                 * @return {String} type
                 */
                exports.getType = function(object) {
                    var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

                    if (type == 'object') {
                        if (object === null) {
                            return 'null';
                        }
                        if (object instanceof Boolean) {
                            return 'Boolean';
                        }
                        if (object instanceof Number) {
                            return 'Number';
                        }
                        if (object instanceof String) {
                            return 'String';
                        }
                        if (Array.isArray(object)) {
                            return 'Array';
                        }
                        if (object instanceof Date) {
                            return 'Date';
                        }
                        return 'Object';
                    } else if (type == 'number') {
                        return 'Number';
                    } else if (type == 'boolean') {
                        return 'Boolean';
                    } else if (type == 'string') {
                        return 'String';
                    } else if (type === undefined) {
                        return 'undefined';
                    }

                    return type;
                };

                /**
                 * Used to extend an array and copy it. This is used to propagate paths recursively.
                 *
                 * @param arr
                 * @param newValue
                 * @returns {Array}
                 */
                exports.copyAndExtendArray = function(arr, newValue) {
                    var newArr = [];
                    for (var i = 0; i < arr.length; i++) {
                        newArr.push(arr[i]);
                    }
                    newArr.push(newValue);
                    return newArr;
                };

                /**
                 * Used to extend an array and copy it. This is used to propagate paths recursively.
                 *
                 * @param arr
                 * @param newValue
                 * @returns {Array}
                 */
                exports.copyArray = function(arr) {
                    var newArr = [];
                    for (var i = 0; i < arr.length; i++) {
                        newArr.push(arr[i]);
                    }
                    return newArr;
                };

                /**
                 * Retrieve the absolute left value of a DOM element
                 * @param {Element} elem        A dom element, for example a div
                 * @return {number} left        The absolute left position of this element
                 *                              in the browser page.
                 */
                exports.getAbsoluteLeft = function(elem) {
                    return elem.getBoundingClientRect().left;
                };

                exports.getAbsoluteRight = function(elem) {
                    return elem.getBoundingClientRect().right;
                };

                /**
                 * Retrieve the absolute top value of a DOM element
                 * @param {Element} elem        A dom element, for example a div
                 * @return {number} top        The absolute top position of this element
                 *                              in the browser page.
                 */
                exports.getAbsoluteTop = function(elem) {
                    return elem.getBoundingClientRect().top;
                };

                /**
                 * add a className to the given elements style
                 * @param {Element} elem
                 * @param {String} className
                 */
                exports.addClassName = function(elem, classNames) {
                    var classes = elem.className.split(' ');
                    var newClasses = classNames.split(' ');
                    classes = classes.concat(newClasses.filter(function(className) {
                        return classes.indexOf(className) < 0;
                    }));
                    elem.className = classes.join(' ');
                };

                /**
                 * add a className to the given elements style
                 * @param {Element} elem
                 * @param {String} className
                 */
                exports.removeClassName = function(elem, classNames) {
                    var classes = elem.className.split(' ');
                    var oldClasses = classNames.split(' ');
                    classes = classes.filter(function(className) {
                        return oldClasses.indexOf(className) < 0;
                    });
                    elem.className = classes.join(' ');
                };

                /**
                 * For each method for both arrays and objects.
                 * In case of an array, the built-in Array.forEach() is applied.
                 * In case of an Object, the method loops over all properties of the object.
                 * @param {Object | Array} object   An Object or Array
                 * @param {function} callback       Callback method, called for each item in
                 *                                  the object or array with three parameters:
                 *                                  callback(value, index, object)
                 */
                exports.forEach = function(object, callback) {
                    var i, len;
                    if (Array.isArray(object)) {
                        // array
                        for (i = 0, len = object.length; i < len; i++) {
                            callback(object[i], i, object);
                        }
                    } else {
                        // object
                        for (i in object) {
                            if (object.hasOwnProperty(i)) {
                                callback(object[i], i, object);
                            }
                        }
                    }
                };

                /**
                 * Convert an object into an array: all objects properties are put into the
                 * array. The resulting array is unordered.
                 * @param {Object} object
                 * @param {Array} array
                 */
                exports.toArray = function(object) {
                    var array = [];

                    for (var prop in object) {
                        if (object.hasOwnProperty(prop)) array.push(object[prop]);
                    }

                    return array;
                };

                /**
                 * Update a property in an object
                 * @param {Object} object
                 * @param {String} key
                 * @param {*} value
                 * @return {Boolean} changed
                 */
                exports.updateProperty = function(object, key, value) {
                    if (object[key] !== value) {
                        object[key] = value;
                        return true;
                    } else {
                        return false;
                    }
                };

                /**
                 * Throttle the given function to be only executed once per animation frame
                 * @param {function} fn
                 * @returns {function} Returns the throttled function
                 */
                exports.throttle = function(fn) {
                    var scheduled = false;

                    return function throttled() {
                        if (!scheduled) {
                            scheduled = true;
                            requestAnimationFrame(function() {
                                scheduled = false;
                                fn();
                            });
                        }
                    };
                };

                /**
                 * Add and event listener. Works for all browsers
                 * @param {Element}     element    An html element
                 * @param {string}      action     The action, for example "click",
                 *                                 without the prefix "on"
                 * @param {function}    listener   The callback function to be executed
                 * @param {boolean}     [useCapture]
                 */
                exports.addEventListener = function(element, action, listener, useCapture) {
                    if (element.addEventListener) {
                        if (useCapture === undefined) useCapture = false;

                        if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
                            action = "DOMMouseScroll"; // For Firefox
                        }

                        element.addEventListener(action, listener, useCapture);
                    } else {
                        element.attachEvent("on" + action, listener); // IE browsers
                    }
                };

                /**
                 * Remove an event listener from an element
                 * @param {Element}     element         An html dom element
                 * @param {string}      action          The name of the event, for example "mousedown"
                 * @param {function}    listener        The listener function
                 * @param {boolean}     [useCapture]
                 */
                exports.removeEventListener = function(element, action, listener, useCapture) {
                    if (element.removeEventListener) {
                        // non-IE browsers
                        if (useCapture === undefined) useCapture = false;

                        if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
                            action = "DOMMouseScroll"; // For Firefox
                        }

                        element.removeEventListener(action, listener, useCapture);
                    } else {
                        // IE browsers
                        element.detachEvent("on" + action, listener);
                    }
                };

                /**
                 * Cancels the event if it is cancelable, without stopping further propagation of the event.
                 */
                exports.preventDefault = function(event) {
                    if (!event) event = window.event;

                    if (event.preventDefault) {
                        event.preventDefault(); // non-IE browsers
                    } else {
                        event.returnValue = false; // IE browsers
                    }
                };

                /**
                 * Get HTML element which is the target of the event
                 * @param {Event} event
                 * @return {Element} target element
                 */
                exports.getTarget = function(event) {
                    // code from http://www.quirksmode.org/js/events_properties.html
                    if (!event) {
                        event = window.event;
                    }

                    var target;

                    if (event.target) {
                        target = event.target;
                    } else if (event.srcElement) {
                        target = event.srcElement;
                    }

                    if (target.nodeType != undefined && target.nodeType == 3) {
                        // defeat Safari bug
                        target = target.parentNode;
                    }

                    return target;
                };

                /**
                 * Check if given element contains given parent somewhere in the DOM tree
                 * @param {Element} element
                 * @param {Element} parent
                 */
                exports.hasParent = function(element, parent) {
                    var e = element;

                    while (e) {
                        if (e === parent) {
                            return true;
                        }
                        e = e.parentNode;
                    }

                    return false;
                };

                exports.option = {};

                /**
                 * Convert a value into a boolean
                 * @param {Boolean | function | undefined} value
                 * @param {Boolean} [defaultValue]
                 * @returns {Boolean} bool
                 */
                exports.option.asBoolean = function(value, defaultValue) {
                    if (typeof value == 'function') {
                        value = value();
                    }

                    if (value != null) {
                        return value != false;
                    }

                    return defaultValue || null;
                };

                /**
                 * Convert a value into a number
                 * @param {Boolean | function | undefined} value
                 * @param {Number} [defaultValue]
                 * @returns {Number} number
                 */
                exports.option.asNumber = function(value, defaultValue) {
                    if (typeof value == 'function') {
                        value = value();
                    }

                    if (value != null) {
                        return Number(value) || defaultValue || null;
                    }

                    return defaultValue || null;
                };

                /**
                 * Convert a value into a string
                 * @param {String | function | undefined} value
                 * @param {String} [defaultValue]
                 * @returns {String} str
                 */
                exports.option.asString = function(value, defaultValue) {
                    if (typeof value == 'function') {
                        value = value();
                    }

                    if (value != null) {
                        return String(value);
                    }

                    return defaultValue || null;
                };

                /**
                 * Convert a size or location into a string with pixels or a percentage
                 * @param {String | Number | function | undefined} value
                 * @param {String} [defaultValue]
                 * @returns {String} size
                 */
                exports.option.asSize = function(value, defaultValue) {
                    if (typeof value == 'function') {
                        value = value();
                    }

                    if (exports.isString(value)) {
                        return value;
                    } else if (exports.isNumber(value)) {
                        return value + 'px';
                    } else {
                        return defaultValue || null;
                    }
                };

                /**
                 * Convert a value into a DOM element
                 * @param {HTMLElement | function | undefined} value
                 * @param {HTMLElement} [defaultValue]
                 * @returns {HTMLElement | null} dom
                 */
                exports.option.asElement = function(value, defaultValue) {
                    if (typeof value == 'function') {
                        value = value();
                    }

                    return value || defaultValue || null;
                };

                /**
                 * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
                 *
                 * @param {String} hex
                 * @returns {{r: *, g: *, b: *}} | 255 range
                 */
                exports.hexToRGB = function(hex) {
                    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
                    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                        return r + r + g + g + b + b;
                    });
                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                    return result ? {
                        r: parseInt(result[1], 16),
                        g: parseInt(result[2], 16),
                        b: parseInt(result[3], 16)
                    } : null;
                };

                /**
                 * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
                 * @param color
                 * @param opacity
                 * @returns {*}
                 */
                exports.overrideOpacity = function(color, opacity) {
                    if (color.indexOf("rgba") != -1) {
                        return color;
                    } else if (color.indexOf("rgb") != -1) {
                        var rgb = color.substr(color.indexOf("(") + 1).replace(")", "").split(",");
                        return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
                    } else {
                        var rgb = exports.hexToRGB(color);
                        if (rgb == null) {
                            return color;
                        } else {
                            return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + opacity + ")";
                        }
                    }
                };

                /**
                 *
                 * @param red     0 -- 255
                 * @param green   0 -- 255
                 * @param blue    0 -- 255
                 * @returns {string}
                 * @constructor
                 */
                exports.RGBToHex = function(red, green, blue) {
                    return "#" + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);
                };

                /**
                 * Parse a color property into an object with border, background, and
                 * highlight colors
                 * @param {Object | String} color
                 * @return {Object} colorObject
                 */
                exports.parseColor = function(color) {
                    var c;
                    if (exports.isString(color) === true) {
                        if (exports.isValidRGB(color) === true) {
                            var rgb = color.substr(4).substr(0, color.length - 5).split(',').map(function(value) {
                                return parseInt(value);
                            });
                            color = exports.RGBToHex(rgb[0], rgb[1], rgb[2]);
                        }
                        if (exports.isValidHex(color) === true) {
                            var hsv = exports.hexToHSV(color);
                            var lighterColorHSV = { h: hsv.h, s: hsv.s * 0.8, v: Math.min(1, hsv.v * 1.02) };
                            var darkerColorHSV = { h: hsv.h, s: Math.min(1, hsv.s * 1.25), v: hsv.v * 0.8 };
                            var darkerColorHex = exports.HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
                            var lighterColorHex = exports.HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
                            c = {
                                background: color,
                                border: darkerColorHex,
                                highlight: {
                                    background: lighterColorHex,
                                    border: darkerColorHex
                                },
                                hover: {
                                    background: lighterColorHex,
                                    border: darkerColorHex
                                }
                            };
                        } else {
                            c = {
                                background: color,
                                border: color,
                                highlight: {
                                    background: color,
                                    border: color
                                },
                                hover: {
                                    background: color,
                                    border: color
                                }
                            };
                        }
                    } else {
                        c = {};
                        c.background = color.background || undefined;
                        c.border = color.border || undefined;

                        if (exports.isString(color.highlight)) {
                            c.highlight = {
                                border: color.highlight,
                                background: color.highlight
                            };
                        } else {
                            c.highlight = {};
                            c.highlight.background = color.highlight && color.highlight.background || undefined;
                            c.highlight.border = color.highlight && color.highlight.border || undefined;
                        }

                        if (exports.isString(color.hover)) {
                            c.hover = {
                                border: color.hover,
                                background: color.hover
                            };
                        } else {
                            c.hover = {};
                            c.hover.background = color.hover && color.hover.background || undefined;
                            c.hover.border = color.hover && color.hover.border || undefined;
                        }
                    }

                    return c;
                };

                /**
                 * http://www.javascripter.net/faq/rgb2hsv.htm
                 *
                 * @param red
                 * @param green
                 * @param blue
                 * @returns {*}
                 * @constructor
                 */
                exports.RGBToHSV = function(red, green, blue) {
                    red = red / 255;
                    green = green / 255;
                    blue = blue / 255;
                    var minRGB = Math.min(red, Math.min(green, blue));
                    var maxRGB = Math.max(red, Math.max(green, blue));

                    // Black-gray-white
                    if (minRGB == maxRGB) {
                        return { h: 0, s: 0, v: minRGB };
                    }

                    // Colors other than black-gray-white:
                    var d = red == minRGB ? green - blue : blue == minRGB ? red - green : blue - red;
                    var h = red == minRGB ? 3 : blue == minRGB ? 1 : 5;
                    var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
                    var saturation = (maxRGB - minRGB) / maxRGB;
                    var value = maxRGB;
                    return { h: hue, s: saturation, v: value };
                };

                var cssUtil = {
                    // split a string with css styles into an object with key/values
                    split: function split(cssText) {
                        var styles = {};

                        cssText.split(';').forEach(function(style) {
                            if (style.trim() != '') {
                                var parts = style.split(':');
                                var key = parts[0].trim();
                                var value = parts[1].trim();
                                styles[key] = value;
                            }
                        });

                        return styles;
                    },

                    // build a css text string from an object with key/values
                    join: function join(styles) {
                        return (0, _keys2['default'])(styles).map(function(key) {
                            return key + ': ' + styles[key];
                        }).join('; ');
                    }
                };

                /**
                 * Append a string with css styles to an element
                 * @param {Element} element
                 * @param {String} cssText
                 */
                exports.addCssText = function(element, cssText) {
                    var currentStyles = cssUtil.split(element.style.cssText);
                    var newStyles = cssUtil.split(cssText);
                    var styles = exports.extend(currentStyles, newStyles);

                    element.style.cssText = cssUtil.join(styles);
                };

                /**
                 * Remove a string with css styles from an element
                 * @param {Element} element
                 * @param {String} cssText
                 */
                exports.removeCssText = function(element, cssText) {
                    var styles = cssUtil.split(element.style.cssText);
                    var removeStyles = cssUtil.split(cssText);

                    for (var key in removeStyles) {
                        if (removeStyles.hasOwnProperty(key)) {
                            delete styles[key];
                        }
                    }

                    element.style.cssText = cssUtil.join(styles);
                };

                /**
                 * https://gist.github.com/mjijackson/5311256
                 * @param h
                 * @param s
                 * @param v
                 * @returns {{r: number, g: number, b: number}}
                 * @constructor
                 */
                exports.HSVToRGB = function(h, s, v) {
                    var r, g, b;

                    var i = Math.floor(h * 6);
                    var f = h * 6 - i;
                    var p = v * (1 - s);
                    var q = v * (1 - f * s);
                    var t = v * (1 - (1 - f) * s);

                    switch (i % 6) {
                        case 0:
                            r = v, g = t, b = p;
                            break;
                        case 1:
                            r = q, g = v, b = p;
                            break;
                        case 2:
                            r = p, g = v, b = t;
                            break;
                        case 3:
                            r = p, g = q, b = v;
                            break;
                        case 4:
                            r = t, g = p, b = v;
                            break;
                        case 5:
                            r = v, g = p, b = q;
                            break;
                    }

                    return { r: Math.floor(r * 255), g: Math.floor(g * 255), b: Math.floor(b * 255) };
                };

                exports.HSVToHex = function(h, s, v) {
                    var rgb = exports.HSVToRGB(h, s, v);
                    return exports.RGBToHex(rgb.r, rgb.g, rgb.b);
                };

                exports.hexToHSV = function(hex) {
                    var rgb = exports.hexToRGB(hex);
                    return exports.RGBToHSV(rgb.r, rgb.g, rgb.b);
                };

                exports.isValidHex = function(hex) {
                    var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
                    return isOk;
                };

                exports.isValidRGB = function(rgb) {
                    rgb = rgb.replace(" ", "");
                    var isOk = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/i.test(rgb);
                    return isOk;
                };
                exports.isValidRGBA = function(rgba) {
                    rgba = rgba.replace(" ", "");
                    var isOk = /rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),(.{1,3})\)/i.test(rgba);
                    return isOk;
                };

                /**
                 * This recursively redirects the prototype of JSON objects to the referenceObject
                 * This is used for default options.
                 *
                 * @param referenceObject
                 * @returns {*}
                 */
                exports.selectiveBridgeObject = function(fields, referenceObject) {
                    if ((typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) == "object") {
                        var objectTo = (0, _create2['default'])(referenceObject);
                        for (var i = 0; i < fields.length; i++) {
                            if (referenceObject.hasOwnProperty(fields[i])) {
                                if ((0, _typeof3['default'])(referenceObject[fields[i]]) == "object") {
                                    objectTo[fields[i]] = exports.bridgeObject(referenceObject[fields[i]]);
                                }
                            }
                        }
                        return objectTo;
                    } else {
                        return null;
                    }
                };

                /**
                 * This recursively redirects the prototype of JSON objects to the referenceObject
                 * This is used for default options.
                 *
                 * @param referenceObject
                 * @returns {*}
                 */
                exports.bridgeObject = function(referenceObject) {
                    if ((typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) == "object") {
                        var objectTo = (0, _create2['default'])(referenceObject);
                        for (var i in referenceObject) {
                            if (referenceObject.hasOwnProperty(i)) {
                                if ((0, _typeof3['default'])(referenceObject[i]) == "object") {
                                    objectTo[i] = exports.bridgeObject(referenceObject[i]);
                                }
                            }
                        }
                        return objectTo;
                    } else {
                        return null;
                    }
                };

                /**
                 * This method provides a stable sort implementation, very fast for presorted data
                 *
                 * @param a the array
                 * @param a order comparator
                 * @returns {the array}
                 */
                exports.insertSort = function(a, compare) {
                    for (var i = 0; i < a.length; i++) {
                        var k = a[i];
                        for (var j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {
                            a[j] = a[j - 1];
                        }
                        a[j] = k;
                    }
                    return a;
                };

                /**
                 * this is used to set the options of subobjects in the options object. A requirement of these subobjects
                 * is that they have an 'enabled' element which is optional for the user but mandatory for the program.
                 *
                 * @param [object] mergeTarget | this is either this.options or the options used for the groups.
                 * @param [object] options     | options
                 * @param [String] option      | this is the option key in the options argument
                 */
                exports.mergeOptions = function(mergeTarget, options, option) {
                    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                    var globalOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

                    if (options[option] === null) {
                        mergeTarget[option] = (0, _create2['default'])(globalOptions[option]);
                    } else {
                        if (options[option] !== undefined) {
                            if (typeof options[option] === 'boolean') {
                                mergeTarget[option].enabled = options[option];
                            } else {
                                if (options[option].enabled === undefined) {
                                    mergeTarget[option].enabled = true;
                                }
                                for (var prop in options[option]) {
                                    if (options[option].hasOwnProperty(prop)) {
                                        mergeTarget[option][prop] = options[option][prop];
                                    }
                                }
                            }
                        }
                    }
                };

                /**
                 * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
                 * this function will then iterate in both directions over this sorted list to find all visible items.
                 *
                 * @param {Item[]} orderedItems       | Items ordered by start
                 * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher
                 * @param {String} field
                 * @param {String} field2
                 * @returns {number}
                 * @private
                 */
                exports.binarySearchCustom = function(orderedItems, comparator, field, field2) {
                    var maxIterations = 10000;
                    var iteration = 0;
                    var low = 0;
                    var high = orderedItems.length - 1;

                    while (low <= high && iteration < maxIterations) {
                        var middle = Math.floor((low + high) / 2);

                        var item = orderedItems[middle];
                        var value = field2 === undefined ? item[field] : item[field][field2];

                        var searchResult = comparator(value);
                        if (searchResult == 0) {
                            // jihaa, found a visible item!
                            return middle;
                        } else if (searchResult == -1) {
                            // it is too small --> increase low
                            low = middle + 1;
                        } else {
                            // it is too big --> decrease high
                            high = middle - 1;
                        }

                        iteration++;
                    }

                    return -1;
                };

                /**
                 * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
                 * two values, we return either the one before or the one after, depending on user input
                 * If it is found, we return the index, else -1.
                 *
                 * @param {Array} orderedItems
                 * @param {{start: number, end: number}} target
                 * @param {String} field
                 * @param {String} sidePreference   'before' or 'after'
                 * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.
                 * @returns {number}
                 * @private
                 */
                exports.binarySearchValue = function(orderedItems, target, field, sidePreference, comparator) {
                    var maxIterations = 10000;
                    var iteration = 0;
                    var low = 0;
                    var high = orderedItems.length - 1;
                    var prevValue, value, nextValue, middle;

                    var comparator = comparator != undefined ? comparator : function(a, b) {
                        return a == b ? 0 : a < b ? -1 : 1;
                    };

                    while (low <= high && iteration < maxIterations) {
                        // get a new guess
                        middle = Math.floor(0.5 * (high + low));
                        prevValue = orderedItems[Math.max(0, middle - 1)][field];
                        value = orderedItems[middle][field];
                        nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];

                        if (comparator(value, target) == 0) {
                            // we found the target
                            return middle;
                        } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
                            // target is in between of the previous and the current
                            return sidePreference == 'before' ? Math.max(0, middle - 1) : middle;
                        } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
                            // target is in between of the current and the next
                            return sidePreference == 'before' ? middle : Math.min(orderedItems.length - 1, middle + 1);
                        } else {
                            // didnt find the target, we need to change our boundaries.
                            if (comparator(value, target) < 0) {
                                // it is too small --> increase low
                                low = middle + 1;
                            } else {
                                // it is too big --> decrease high
                                high = middle - 1;
                            }
                        }
                        iteration++;
                    }

                    // didnt find anything. Return -1.
                    return -1;
                };

                /*
                 * Easing Functions - inspired from http://gizma.com/easing/
                 * only considering the t value for the range [0, 1] => [0, 1]
                 * https://gist.github.com/gre/1650294
                 */
                exports.easingFunctions = {
                    // no easing, no acceleration
                    linear: function linear(t) {
                        return t;
                    },
                    // accelerating from zero velocity
                    easeInQuad: function easeInQuad(t) {
                        return t * t;
                    },
                    // decelerating to zero velocity
                    easeOutQuad: function easeOutQuad(t) {
                        return t * (2 - t);
                    },
                    // acceleration until halfway, then deceleration
                    easeInOutQuad: function easeInOutQuad(t) {
                        return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
                    },
                    // accelerating from zero velocity
                    easeInCubic: function easeInCubic(t) {
                        return t * t * t;
                    },
                    // decelerating to zero velocity
                    easeOutCubic: function easeOutCubic(t) {
                        return --t * t * t + 1;
                    },
                    // acceleration until halfway, then deceleration
                    easeInOutCubic: function easeInOutCubic(t) {
                        return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
                    },
                    // accelerating from zero velocity
                    easeInQuart: function easeInQuart(t) {
                        return t * t * t * t;
                    },
                    // decelerating to zero velocity
                    easeOutQuart: function easeOutQuart(t) {
                        return 1 - --t * t * t * t;
                    },
                    // acceleration until halfway, then deceleration
                    easeInOutQuart: function easeInOutQuart(t) {
                        return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
                    },
                    // accelerating from zero velocity
                    easeInQuint: function easeInQuint(t) {
                        return t * t * t * t * t;
                    },
                    // decelerating to zero velocity
                    easeOutQuint: function easeOutQuint(t) {
                        return 1 + --t * t * t * t * t;
                    },
                    // acceleration until halfway, then deceleration
                    easeInOutQuint: function easeInOutQuint(t) {
                        return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
                    }
                };

                exports.getScrollBarWidth = function() {
                    var inner = document.createElement('p');
                    inner.style.width = "100%";
                    inner.style.height = "200px";

                    var outer = document.createElement('div');
                    outer.style.position = "absolute";
                    outer.style.top = "0px";
                    outer.style.left = "0px";
                    outer.style.visibility = "hidden";
                    outer.style.width = "200px";
                    outer.style.height = "150px";
                    outer.style.overflow = "hidden";
                    outer.appendChild(inner);

                    document.body.appendChild(outer);
                    var w1 = inner.offsetWidth;
                    outer.style.overflow = 'scroll';
                    var w2 = inner.offsetWidth;
                    if (w1 == w2) w2 = outer.clientWidth;

                    document.body.removeChild(outer);

                    return w1 - w2;
                };

                exports.topMost = function(pile, accessors) {
                    var candidate = void 0;
                    if (!Array.isArray(accessors)) {
                        accessors = [accessors];
                    }
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = (0, _getIterator3['default'])(pile), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var member = _step.value;

                            if (member) {
                                candidate = member[accessors[0]];
                                for (var i = 1; i < accessors.length; i++) {
                                    if (candidate) {
                                        candidate = candidate[accessors[i]];
                                    } else {
                                        continue;
                                    }
                                }
                                if (typeof candidate != 'undefined') {
                                    break;
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator['return']) {
                                _iterator['return']();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    return candidate;
                };

                /***/
            }),
            /* 2 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(3), __esModule: true };

                /***/
            }),
            /* 3 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(4);
                __webpack_require__(50);
                module.exports = __webpack_require__(52);

                /***/
            }),
            /* 4 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(5);
                var global = __webpack_require__(16),
                    hide = __webpack_require__(20),
                    Iterators = __webpack_require__(8),
                    TO_STRING_TAG = __webpack_require__(47)('toStringTag');

                for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
                    var NAME = collections[i],
                        Collection = global[NAME],
                        proto = Collection && Collection.prototype;
                    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                    Iterators[NAME] = Iterators.Array;
                }

                /***/
            }),
            /* 5 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                var addToUnscopables = __webpack_require__(6),
                    step = __webpack_require__(7),
                    Iterators = __webpack_require__(8),
                    toIObject = __webpack_require__(9);

                // 22.1.3.4 Array.prototype.entries()
                // 22.1.3.13 Array.prototype.keys()
                // 22.1.3.29 Array.prototype.values()
                // 22.1.3.30 Array.prototype[@@iterator]()
                module.exports = __webpack_require__(13)(Array, 'Array', function(iterated, kind) {
                    this._t = toIObject(iterated); // target
                    this._i = 0; // next index
                    this._k = kind; // kind
                    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
                }, function() {
                    var O = this._t,
                        kind = this._k,
                        index = this._i++;
                    if (!O || index >= O.length) {
                        this._t = undefined;
                        return step(1);
                    }
                    if (kind == 'keys') return step(0, index);
                    if (kind == 'values') return step(0, O[index]);
                    return step(0, [index, O[index]]);
                }, 'values');

                // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
                Iterators.Arguments = Iterators.Array;

                addToUnscopables('keys');
                addToUnscopables('values');
                addToUnscopables('entries');

                /***/
            }),
            /* 6 */
            /***/
            (function(module, exports) {

                module.exports = function() { /* empty */ };

                /***/
            }),
            /* 7 */
            /***/
            (function(module, exports) {

                module.exports = function(done, value) {
                    return { value: value, done: !!done };
                };

                /***/
            }),
            /* 8 */
            /***/
            (function(module, exports) {

                module.exports = {};

                /***/
            }),
            /* 9 */
            /***/
            (function(module, exports, __webpack_require__) {

                // to indexed object, toObject with fallback for non-array-like ES3 strings
                var IObject = __webpack_require__(10),
                    defined = __webpack_require__(12);
                module.exports = function(it) {
                    return IObject(defined(it));
                };

                /***/
            }),
            /* 10 */
            /***/
            (function(module, exports, __webpack_require__) {

                // fallback for non-array-like ES3 and non-enumerable old V8 strings
                var cof = __webpack_require__(11);
                module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
                    return cof(it) == 'String' ? it.split('') : Object(it);
                };

                /***/
            }),
            /* 11 */
            /***/
            (function(module, exports) {

                var toString = {}.toString;

                module.exports = function(it) {
                    return toString.call(it).slice(8, -1);
                };

                /***/
            }),
            /* 12 */
            /***/
            (function(module, exports) {

                // 7.2.1 RequireObjectCoercible(argument)
                module.exports = function(it) {
                    if (it == undefined) throw TypeError("Can't call method on  " + it);
                    return it;
                };

                /***/
            }),
            /* 13 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                var LIBRARY = __webpack_require__(14),
                    $export = __webpack_require__(15),
                    redefine = __webpack_require__(30),
                    hide = __webpack_require__(20),
                    has = __webpack_require__(31),
                    Iterators = __webpack_require__(8),
                    $iterCreate = __webpack_require__(32),
                    setToStringTag = __webpack_require__(46),
                    getPrototypeOf = __webpack_require__(48),
                    ITERATOR = __webpack_require__(47)('iterator'),
                    BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
                    ,
                    FF_ITERATOR = '@@iterator',
                    KEYS = 'keys',
                    VALUES = 'values';

                var returnThis = function() { return this; };

                module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                    $iterCreate(Constructor, NAME, next);
                    var getMethod = function(kind) {
                        if (!BUGGY && kind in proto) return proto[kind];
                        switch (kind) {
                            case KEYS:
                                return function keys() { return new Constructor(this, kind); };
                            case VALUES:
                                return function values() { return new Constructor(this, kind); };
                        }
                        return function entries() { return new Constructor(this, kind); };
                    };
                    var TAG = NAME + ' Iterator',
                        DEF_VALUES = DEFAULT == VALUES,
                        VALUES_BUG = false,
                        proto = Base.prototype,
                        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
                        $default = $native || getMethod(DEFAULT),
                        $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
                        $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
                        methods, key, IteratorPrototype;
                    // Fix native
                    if ($anyNative) {
                        IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
                        if (IteratorPrototype !== Object.prototype) {
                            // Set @@toStringTag to native iterators
                            setToStringTag(IteratorPrototype, TAG, true);
                            // fix for some old engines
                            if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                        }
                    }
                    // fix Array#{values, @@iterator}.name in V8 / FF
                    if (DEF_VALUES && $native && $native.name !== VALUES) {
                        VALUES_BUG = true;
                        $default = function values() { return $native.call(this); };
                    }
                    // Define iterator
                    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                        hide(proto, ITERATOR, $default);
                    }
                    // Plug for library
                    Iterators[NAME] = $default;
                    Iterators[TAG] = returnThis;
                    if (DEFAULT) {
                        methods = {
                            values: DEF_VALUES ? $default : getMethod(VALUES),
                            keys: IS_SET ? $default : getMethod(KEYS),
                            entries: $entries
                        };
                        if (FORCED)
                            for (key in methods) {
                                if (!(key in proto)) redefine(proto, key, methods[key]);
                            } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                    }
                    return methods;
                };

                /***/
            }),
            /* 14 */
            /***/
            (function(module, exports) {

                module.exports = true;

                /***/
            }),
            /* 15 */
            /***/
            (function(module, exports, __webpack_require__) {

                var global = __webpack_require__(16),
                    core = __webpack_require__(17),
                    ctx = __webpack_require__(18),
                    hide = __webpack_require__(20),
                    PROTOTYPE = 'prototype';

                var $export = function(type, name, source) {
                    var IS_FORCED = type & $export.F,
                        IS_GLOBAL = type & $export.G,
                        IS_STATIC = type & $export.S,
                        IS_PROTO = type & $export.P,
                        IS_BIND = type & $export.B,
                        IS_WRAP = type & $export.W,
                        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
                        expProto = exports[PROTOTYPE],
                        target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
                        key, own, out;
                    if (IS_GLOBAL) source = name;
                    for (key in source) {
                        // contains in native
                        own = !IS_FORCED && target && target[key] !== undefined;
                        if (own && key in exports) continue;
                        // export native or passed
                        out = own ? target[key] : source[key];
                        // prevent global pollution for namespaces
                        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
                            // bind timers to global for call from export context
                            :
                            IS_BIND && own ? ctx(out, global)
                            // wrap global constructors for prevent change them in library
                            :
                            IS_WRAP && target[key] == out ? (function(C) {
                                var F = function(a, b, c) {
                                    if (this instanceof C) {
                                        switch (arguments.length) {
                                            case 0:
                                                return new C;
                                            case 1:
                                                return new C(a);
                                            case 2:
                                                return new C(a, b);
                                        }
                                        return new C(a, b, c);
                                    }
                                    return C.apply(this, arguments);
                                };
                                F[PROTOTYPE] = C[PROTOTYPE];
                                return F;
                                // make static versions for prototype methods
                            })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                        // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
                        if (IS_PROTO) {
                            (exports.virtual || (exports.virtual = {}))[key] = out;
                            // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
                            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
                        }
                    }
                };
                // type bitmap
                $export.F = 1; // forced
                $export.G = 2; // global
                $export.S = 4; // static
                $export.P = 8; // proto
                $export.B = 16; // bind
                $export.W = 32; // wrap
                $export.U = 64; // safe
                $export.R = 128; // real proto method for `library` 
                module.exports = $export;

                /***/
            }),
            /* 16 */
            /***/
            (function(module, exports) {

                // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                var global = module.exports = typeof window != 'undefined' && window.Math == Math ?
                    window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

                /***/
            }),
            /* 17 */
            /***/
            (function(module, exports) {

                var core = module.exports = { version: '2.4.0' };
                if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

                /***/
            }),
            /* 18 */
            /***/
            (function(module, exports, __webpack_require__) {

                // optional / simple context binding
                var aFunction = __webpack_require__(19);
                module.exports = function(fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                        case 1:
                            return function(a) {
                                return fn.call(that, a);
                            };
                        case 2:
                            return function(a, b) {
                                return fn.call(that, a, b);
                            };
                        case 3:
                            return function(a, b, c) {
                                return fn.call(that, a, b, c);
                            };
                    }
                    return function( /* ...args */ ) {
                        return fn.apply(that, arguments);
                    };
                };

                /***/
            }),
            /* 19 */
            /***/
            (function(module, exports) {

                module.exports = function(it) {
                    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
                    return it;
                };

                /***/
            }),
            /* 20 */
            /***/
            (function(module, exports, __webpack_require__) {

                var dP = __webpack_require__(21),
                    createDesc = __webpack_require__(29);
                module.exports = __webpack_require__(25) ? function(object, key, value) {
                    return dP.f(object, key, createDesc(1, value));
                } : function(object, key, value) {
                    object[key] = value;
                    return object;
                };

                /***/
            }),
            /* 21 */
            /***/
            (function(module, exports, __webpack_require__) {

                var anObject = __webpack_require__(22),
                    IE8_DOM_DEFINE = __webpack_require__(24),
                    toPrimitive = __webpack_require__(28),
                    dP = Object.defineProperty;

                exports.f = __webpack_require__(25) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                        return dP(O, P, Attributes);
                    } catch (e) { /* empty */ }
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                };

                /***/
            }),
            /* 22 */
            /***/
            (function(module, exports, __webpack_require__) {

                var isObject = __webpack_require__(23);
                module.exports = function(it) {
                    if (!isObject(it)) throw TypeError(it + ' is not an object!');
                    return it;
                };

                /***/
            }),
            /* 23 */
            /***/
            (function(module, exports) {

                module.exports = function(it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                };

                /***/
            }),
            /* 24 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = !__webpack_require__(25) && !__webpack_require__(26)(function() {
                    return Object.defineProperty(__webpack_require__(27)('div'), 'a', { get: function() { return 7; } }).a != 7;
                });

                /***/
            }),
            /* 25 */
            /***/
            (function(module, exports, __webpack_require__) {

                // Thank's IE8 for his funny defineProperty
                module.exports = !__webpack_require__(26)(function() {
                    return Object.defineProperty({}, 'a', { get: function() { return 7; } }).a != 7;
                });

                /***/
            }),
            /* 26 */
            /***/
            (function(module, exports) {

                module.exports = function(exec) {
                    try {
                        return !!exec();
                    } catch (e) {
                        return true;
                    }
                };

                /***/
            }),
            /* 27 */
            /***/
            (function(module, exports, __webpack_require__) {

                var isObject = __webpack_require__(23),
                    document = __webpack_require__(16).document
                    // in old IE typeof document.createElement is 'object'
                    ,
                    is = isObject(document) && isObject(document.createElement);
                module.exports = function(it) {
                    return is ? document.createElement(it) : {};
                };

                /***/
            }),
            /* 28 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 7.1.1 ToPrimitive(input [, PreferredType])
                var isObject = __webpack_require__(23);
                // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                // and the second argument - flag - preferred type is a string
                module.exports = function(it, S) {
                    if (!isObject(it)) return it;
                    var fn, val;
                    if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    throw TypeError("Can't convert object to primitive value");
                };

                /***/
            }),
            /* 29 */
            /***/
            (function(module, exports) {

                module.exports = function(bitmap, value) {
                    return {
                        enumerable: !(bitmap & 1),
                        configurable: !(bitmap & 2),
                        writable: !(bitmap & 4),
                        value: value
                    };
                };

                /***/
            }),
            /* 30 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(20);

                /***/
            }),
            /* 31 */
            /***/
            (function(module, exports) {

                var hasOwnProperty = {}.hasOwnProperty;
                module.exports = function(it, key) {
                    return hasOwnProperty.call(it, key);
                };

                /***/
            }),
            /* 32 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                var create = __webpack_require__(33),
                    descriptor = __webpack_require__(29),
                    setToStringTag = __webpack_require__(46),
                    IteratorPrototype = {};

                // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
                __webpack_require__(20)(IteratorPrototype, __webpack_require__(47)('iterator'), function() { return this; });

                module.exports = function(Constructor, NAME, next) {
                    Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
                    setToStringTag(Constructor, NAME + ' Iterator');
                };

                /***/
            }),
            /* 33 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
                var anObject = __webpack_require__(22),
                    dPs = __webpack_require__(34),
                    enumBugKeys = __webpack_require__(44),
                    IE_PROTO = __webpack_require__(41)('IE_PROTO'),
                    Empty = function() { /* empty */ },
                    PROTOTYPE = 'prototype';

                // Create object with fake `null` prototype: use iframe Object with cleared prototype
                var createDict = function() {
                    // Thrash, waste and sodomy: IE GC bug
                    var iframe = __webpack_require__(27)('iframe'),
                        i = enumBugKeys.length,
                        lt = '<',
                        gt = '>',
                        iframeDocument;
                    iframe.style.display = 'none';
                    __webpack_require__(45).appendChild(iframe);
                    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
                    // createDict = iframe.contentWindow.Object;
                    // html.removeChild(iframe);
                    iframeDocument = iframe.contentWindow.document;
                    iframeDocument.open();
                    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
                    iframeDocument.close();
                    createDict = iframeDocument.F;
                    while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
                    return createDict();
                };

                module.exports = Object.create || function create(O, Properties) {
                    var result;
                    if (O !== null) {
                        Empty[PROTOTYPE] = anObject(O);
                        result = new Empty;
                        Empty[PROTOTYPE] = null;
                        // add "__proto__" for Object.getPrototypeOf polyfill
                        result[IE_PROTO] = O;
                    } else result = createDict();
                    return Properties === undefined ? result : dPs(result, Properties);
                };


                /***/
            }),
            /* 34 */
            /***/
            (function(module, exports, __webpack_require__) {

                var dP = __webpack_require__(21),
                    anObject = __webpack_require__(22),
                    getKeys = __webpack_require__(35);

                module.exports = __webpack_require__(25) ? Object.defineProperties : function defineProperties(O, Properties) {
                    anObject(O);
                    var keys = getKeys(Properties),
                        length = keys.length,
                        i = 0,
                        P;
                    while (length > i) dP.f(O, P = keys[i++], Properties[P]);
                    return O;
                };

                /***/
            }),
            /* 35 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.14 / 15.2.3.14 Object.keys(O)
                var $keys = __webpack_require__(36),
                    enumBugKeys = __webpack_require__(44);

                module.exports = Object.keys || function keys(O) {
                    return $keys(O, enumBugKeys);
                };

                /***/
            }),
            /* 36 */
            /***/
            (function(module, exports, __webpack_require__) {

                var has = __webpack_require__(31),
                    toIObject = __webpack_require__(9),
                    arrayIndexOf = __webpack_require__(37)(false),
                    IE_PROTO = __webpack_require__(41)('IE_PROTO');

                module.exports = function(object, names) {
                    var O = toIObject(object),
                        i = 0,
                        result = [],
                        key;
                    for (key in O)
                        if (key != IE_PROTO) has(O, key) && result.push(key);
                        // Don't enum bug & hidden keys
                    while (names.length > i)
                        if (has(O, key = names[i++])) {
                            ~arrayIndexOf(result, key) || result.push(key);
                        }
                    return result;
                };

                /***/
            }),
            /* 37 */
            /***/
            (function(module, exports, __webpack_require__) {

                // false -> Array#indexOf
                // true  -> Array#includes
                var toIObject = __webpack_require__(9),
                    toLength = __webpack_require__(38),
                    toIndex = __webpack_require__(40);
                module.exports = function(IS_INCLUDES) {
                    return function($this, el, fromIndex) {
                        var O = toIObject($this),
                            length = toLength(O.length),
                            index = toIndex(fromIndex, length),
                            value;
                        // Array#includes uses SameValueZero equality algorithm
                        if (IS_INCLUDES && el != el)
                            while (length > index) {
                                value = O[index++];
                                if (value != value) return true;
                                // Array#toIndex ignores holes, Array#includes - not
                            } else
                                for (; length > index; index++)
                                    if (IS_INCLUDES || index in O) {
                                        if (O[index] === el) return IS_INCLUDES || index || 0;
                                    }
                        return !IS_INCLUDES && -1;
                    };
                };

                /***/
            }),
            /* 38 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 7.1.15 ToLength
                var toInteger = __webpack_require__(39),
                    min = Math.min;
                module.exports = function(it) {
                    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
                };

                /***/
            }),
            /* 39 */
            /***/
            (function(module, exports) {

                // 7.1.4 ToInteger
                var ceil = Math.ceil,
                    floor = Math.floor;
                module.exports = function(it) {
                    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
                };

                /***/
            }),
            /* 40 */
            /***/
            (function(module, exports, __webpack_require__) {

                var toInteger = __webpack_require__(39),
                    max = Math.max,
                    min = Math.min;
                module.exports = function(index, length) {
                    index = toInteger(index);
                    return index < 0 ? max(index + length, 0) : min(index, length);
                };

                /***/
            }),
            /* 41 */
            /***/
            (function(module, exports, __webpack_require__) {

                var shared = __webpack_require__(42)('keys'),
                    uid = __webpack_require__(43);
                module.exports = function(key) {
                    return shared[key] || (shared[key] = uid(key));
                };

                /***/
            }),
            /* 42 */
            /***/
            (function(module, exports, __webpack_require__) {

                var global = __webpack_require__(16),
                    SHARED = '__core-js_shared__',
                    store = global[SHARED] || (global[SHARED] = {});
                module.exports = function(key) {
                    return store[key] || (store[key] = {});
                };

                /***/
            }),
            /* 43 */
            /***/
            (function(module, exports) {

                var id = 0,
                    px = Math.random();
                module.exports = function(key) {
                    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
                };

                /***/
            }),
            /* 44 */
            /***/
            (function(module, exports) {

                // IE 8- don't enum bug keys
                module.exports = (
                    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
                ).split(',');

                /***/
            }),
            /* 45 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(16).document && document.documentElement;

                /***/
            }),
            /* 46 */
            /***/
            (function(module, exports, __webpack_require__) {

                var def = __webpack_require__(21).f,
                    has = __webpack_require__(31),
                    TAG = __webpack_require__(47)('toStringTag');

                module.exports = function(it, tag, stat) {
                    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
                };

                /***/
            }),
            /* 47 */
            /***/
            (function(module, exports, __webpack_require__) {

                var store = __webpack_require__(42)('wks'),
                    uid = __webpack_require__(43),
                    Symbol = __webpack_require__(16).Symbol,
                    USE_SYMBOL = typeof Symbol == 'function';

                var $exports = module.exports = function(name) {
                    return store[name] || (store[name] =
                        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
                };

                $exports.store = store;

                /***/
            }),
            /* 48 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
                var has = __webpack_require__(31),
                    toObject = __webpack_require__(49),
                    IE_PROTO = __webpack_require__(41)('IE_PROTO'),
                    ObjectProto = Object.prototype;

                module.exports = Object.getPrototypeOf || function(O) {
                    O = toObject(O);
                    if (has(O, IE_PROTO)) return O[IE_PROTO];
                    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                        return O.constructor.prototype;
                    }
                    return O instanceof Object ? ObjectProto : null;
                };

                /***/
            }),
            /* 49 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 7.1.13 ToObject(argument)
                var defined = __webpack_require__(12);
                module.exports = function(it) {
                    return Object(defined(it));
                };

                /***/
            }),
            /* 50 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                var $at = __webpack_require__(51)(true);

                // 21.1.3.27 String.prototype[@@iterator]()
                __webpack_require__(13)(String, 'String', function(iterated) {
                    this._t = String(iterated); // target
                    this._i = 0; // next index
                    // 21.1.5.2.1 %StringIteratorPrototype%.next()
                }, function() {
                    var O = this._t,
                        index = this._i,
                        point;
                    if (index >= O.length) return { value: undefined, done: true };
                    point = $at(O, index);
                    this._i += point.length;
                    return { value: point, done: false };
                });

                /***/
            }),
            /* 51 */
            /***/
            (function(module, exports, __webpack_require__) {

                var toInteger = __webpack_require__(39),
                    defined = __webpack_require__(12);
                // true  -> String#at
                // false -> String#codePointAt
                module.exports = function(TO_STRING) {
                    return function(that, pos) {
                        var s = String(defined(that)),
                            i = toInteger(pos),
                            l = s.length,
                            a, b;
                        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                        a = s.charCodeAt(i);
                        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ?
                            TO_STRING ? s.charAt(i) : a :
                            TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                    };
                };

                /***/
            }),
            /* 52 */
            /***/
            (function(module, exports, __webpack_require__) {

                var anObject = __webpack_require__(22),
                    get = __webpack_require__(53);
                module.exports = __webpack_require__(17).getIterator = function(it) {
                    var iterFn = get(it);
                    if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
                    return anObject(iterFn.call(it));
                };

                /***/
            }),
            /* 53 */
            /***/
            (function(module, exports, __webpack_require__) {

                var classof = __webpack_require__(54),
                    ITERATOR = __webpack_require__(47)('iterator'),
                    Iterators = __webpack_require__(8);
                module.exports = __webpack_require__(17).getIteratorMethod = function(it) {
                    if (it != undefined) return it[ITERATOR] ||
                        it['@@iterator'] ||
                        Iterators[classof(it)];
                };

                /***/
            }),
            /* 54 */
            /***/
            (function(module, exports, __webpack_require__) {

                // getting tag from 19.1.3.6 Object.prototype.toString()
                var cof = __webpack_require__(11),
                    TAG = __webpack_require__(47)('toStringTag')
                    // ES3 wrong here
                    ,
                    ARG = cof(function() { return arguments; }()) == 'Arguments';

                // fallback for IE11 Script Access Denied error
                var tryGet = function(it, key) {
                    try {
                        return it[key];
                    } catch (e) { /* empty */ }
                };

                module.exports = function(it) {
                    var O, T, B;
                    return it === undefined ? 'Undefined' : it === null ? 'Null'
                        // @@toStringTag case
                        :
                        typeof(T = tryGet(O = Object(it), TAG)) == 'string' ? T
                        // builtinTag case
                        :
                        ARG ? cof(O)
                        // ES3 arguments fallback
                        :
                        (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
                };

                /***/
            }),
            /* 55 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(56), __esModule: true };

                /***/
            }),
            /* 56 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(57);
                var $Object = __webpack_require__(17).Object;
                module.exports = function create(P, D) {
                    return $Object.create(P, D);
                };

                /***/
            }),
            /* 57 */
            /***/
            (function(module, exports, __webpack_require__) {

                var $export = __webpack_require__(15)
                    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
                $export($export.S, 'Object', { create: __webpack_require__(33) });

                /***/
            }),
            /* 58 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(59), __esModule: true };

                /***/
            }),
            /* 59 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(60);
                module.exports = __webpack_require__(17).Object.keys;

                /***/
            }),
            /* 60 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.14 Object.keys(O)
                var toObject = __webpack_require__(49),
                    $keys = __webpack_require__(35);

                __webpack_require__(61)('keys', function() {
                    return function keys(it) {
                        return $keys(toObject(it));
                    };
                });

                /***/
            }),
            /* 61 */
            /***/
            (function(module, exports, __webpack_require__) {

                // most Object methods by ES6 should accept primitives
                var $export = __webpack_require__(15),
                    core = __webpack_require__(17),
                    fails = __webpack_require__(26);
                module.exports = function(KEY, exec) {
                    var fn = (core.Object || {})[KEY] || Object[KEY],
                        exp = {};
                    exp[KEY] = exec(fn);
                    $export($export.S + $export.F * fails(function() { fn(1); }), 'Object', exp);
                };

                /***/
            }),
            /* 62 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                exports.__esModule = true;

                var _iterator = __webpack_require__(63);

                var _iterator2 = _interopRequireDefault(_iterator);

                var _symbol = __webpack_require__(66);

                var _symbol2 = _interopRequireDefault(_symbol);

                var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) { return typeof obj; } : function(obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
                    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
                } : function(obj) {
                    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
                };

                /***/
            }),
            /* 63 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(64), __esModule: true };

                /***/
            }),
            /* 64 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(50);
                __webpack_require__(4);
                module.exports = __webpack_require__(65).f('iterator');

                /***/
            }),
            /* 65 */
            /***/
            (function(module, exports, __webpack_require__) {

                exports.f = __webpack_require__(47);

                /***/
            }),
            /* 66 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(67), __esModule: true };

                /***/
            }),
            /* 67 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(68);
                __webpack_require__(79);
                __webpack_require__(80);
                __webpack_require__(81);
                module.exports = __webpack_require__(17).Symbol;

                /***/
            }),
            /* 68 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                // ECMAScript 6 symbols shim
                var global = __webpack_require__(16),
                    has = __webpack_require__(31),
                    DESCRIPTORS = __webpack_require__(25),
                    $export = __webpack_require__(15),
                    redefine = __webpack_require__(30),
                    META = __webpack_require__(69).KEY,
                    $fails = __webpack_require__(26),
                    shared = __webpack_require__(42),
                    setToStringTag = __webpack_require__(46),
                    uid = __webpack_require__(43),
                    wks = __webpack_require__(47),
                    wksExt = __webpack_require__(65),
                    wksDefine = __webpack_require__(70),
                    keyOf = __webpack_require__(71),
                    enumKeys = __webpack_require__(72),
                    isArray = __webpack_require__(75),
                    anObject = __webpack_require__(22),
                    toIObject = __webpack_require__(9),
                    toPrimitive = __webpack_require__(28),
                    createDesc = __webpack_require__(29),
                    _create = __webpack_require__(33),
                    gOPNExt = __webpack_require__(76),
                    $GOPD = __webpack_require__(78),
                    $DP = __webpack_require__(21),
                    $keys = __webpack_require__(35),
                    gOPD = $GOPD.f,
                    dP = $DP.f,
                    gOPN = gOPNExt.f,
                    $Symbol = global.Symbol,
                    $JSON = global.JSON,
                    _stringify = $JSON && $JSON.stringify,
                    PROTOTYPE = 'prototype',
                    HIDDEN = wks('_hidden'),
                    TO_PRIMITIVE = wks('toPrimitive'),
                    isEnum = {}.propertyIsEnumerable,
                    SymbolRegistry = shared('symbol-registry'),
                    AllSymbols = shared('symbols'),
                    OPSymbols = shared('op-symbols'),
                    ObjectProto = Object[PROTOTYPE],
                    USE_NATIVE = typeof $Symbol == 'function',
                    QObject = global.QObject;
                // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
                var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

                // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
                var setSymbolDesc = DESCRIPTORS && $fails(function() {
                    return _create(dP({}, 'a', {
                        get: function() { return dP(this, 'a', { value: 7 }).a; }
                    })).a != 7;
                }) ? function(it, key, D) {
                    var protoDesc = gOPD(ObjectProto, key);
                    if (protoDesc) delete ObjectProto[key];
                    dP(it, key, D);
                    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
                } : dP;

                var wrap = function(tag) {
                    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
                    sym._k = tag;
                    return sym;
                };

                var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it) {
                    return typeof it == 'symbol';
                } : function(it) {
                    return it instanceof $Symbol;
                };

                var $defineProperty = function defineProperty(it, key, D) {
                    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
                    anObject(it);
                    key = toPrimitive(key, true);
                    anObject(D);
                    if (has(AllSymbols, key)) {
                        if (!D.enumerable) {
                            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                            it[HIDDEN][key] = true;
                        } else {
                            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                            D = _create(D, { enumerable: createDesc(0, false) });
                        }
                        return setSymbolDesc(it, key, D);
                    }
                    return dP(it, key, D);
                };
                var $defineProperties = function defineProperties(it, P) {
                    anObject(it);
                    var keys = enumKeys(P = toIObject(P)),
                        i = 0,
                        l = keys.length,
                        key;
                    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
                    return it;
                };
                var $create = function create(it, P) {
                    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
                };
                var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                    var E = isEnum.call(this, key = toPrimitive(key, true));
                    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
                    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
                };
                var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                    it = toIObject(it);
                    key = toPrimitive(key, true);
                    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
                    var D = gOPD(it, key);
                    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
                    return D;
                };
                var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                    var names = gOPN(toIObject(it)),
                        result = [],
                        i = 0,
                        key;
                    while (names.length > i) {
                        if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
                    }
                    return result;
                };
                var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                    var IS_OP = it === ObjectProto,
                        names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
                        result = [],
                        i = 0,
                        key;
                    while (names.length > i) {
                        if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
                    }
                    return result;
                };

                // 19.4.1.1 Symbol([description])
                if (!USE_NATIVE) {
                    $Symbol = function Symbol() {
                        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
                        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                        var $set = function(value) {
                            if (this === ObjectProto) $set.call(OPSymbols, value);
                            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                            setSymbolDesc(this, tag, createDesc(1, value));
                        };
                        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
                        return wrap(tag);
                    };
                    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                        return this._k;
                    });

                    $GOPD.f = $getOwnPropertyDescriptor;
                    $DP.f = $defineProperty;
                    __webpack_require__(77).f = gOPNExt.f = $getOwnPropertyNames;
                    __webpack_require__(74).f = $propertyIsEnumerable;
                    __webpack_require__(73).f = $getOwnPropertySymbols;

                    if (DESCRIPTORS && !__webpack_require__(14)) {
                        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
                    }

                    wksExt.f = function(name) {
                        return wrap(wks(name));
                    }
                }

                $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

                for (var symbols = (
                        // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
                        'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
                    ).split(','), i = 0; symbols.length > i;) wks(symbols[i++]);

                for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]);

                $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
                    // 19.4.2.1 Symbol.for(key)
                    'for': function(key) {
                        return has(SymbolRegistry, key += '') ?
                            SymbolRegistry[key] :
                            SymbolRegistry[key] = $Symbol(key);
                    },
                    // 19.4.2.5 Symbol.keyFor(sym)
                    keyFor: function keyFor(key) {
                        if (isSymbol(key)) return keyOf(SymbolRegistry, key);
                        throw TypeError(key + ' is not a symbol!');
                    },
                    useSetter: function() { setter = true; },
                    useSimple: function() { setter = false; }
                });

                $export($export.S + $export.F * !USE_NATIVE, 'Object', {
                    // 19.1.2.2 Object.create(O [, Properties])
                    create: $create,
                    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
                    defineProperty: $defineProperty,
                    // 19.1.2.3 Object.defineProperties(O, Properties)
                    defineProperties: $defineProperties,
                    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
                    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                    // 19.1.2.7 Object.getOwnPropertyNames(O)
                    getOwnPropertyNames: $getOwnPropertyNames,
                    // 19.1.2.8 Object.getOwnPropertySymbols(O)
                    getOwnPropertySymbols: $getOwnPropertySymbols
                });

                // 24.3.2 JSON.stringify(value [, replacer [, space]])
                $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
                    var S = $Symbol();
                    // MS Edge converts symbol values to JSON as {}
                    // WebKit converts symbol values to JSON as null
                    // V8 throws on boxed symbols
                    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
                })), 'JSON', {
                    stringify: function stringify(it) {
                        if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                        var args = [it],
                            i = 1,
                            replacer, $replacer;
                        while (arguments.length > i) args.push(arguments[i++]);
                        replacer = args[1];
                        if (typeof replacer == 'function') $replacer = replacer;
                        if ($replacer || !isArray(replacer)) replacer = function(key, value) {
                            if ($replacer) value = $replacer.call(this, key, value);
                            if (!isSymbol(value)) return value;
                        };
                        args[1] = replacer;
                        return _stringify.apply($JSON, args);
                    }
                });

                // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
                $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(20)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
                // 19.4.3.5 Symbol.prototype[@@toStringTag]
                setToStringTag($Symbol, 'Symbol');
                // 20.2.1.9 Math[@@toStringTag]
                setToStringTag(Math, 'Math', true);
                // 24.3.3 JSON[@@toStringTag]
                setToStringTag(global.JSON, 'JSON', true);

                /***/
            }),
            /* 69 */
            /***/
            (function(module, exports, __webpack_require__) {

                var META = __webpack_require__(43)('meta'),
                    isObject = __webpack_require__(23),
                    has = __webpack_require__(31),
                    setDesc = __webpack_require__(21).f,
                    id = 0;
                var isExtensible = Object.isExtensible || function() {
                    return true;
                };
                var FREEZE = !__webpack_require__(26)(function() {
                    return isExtensible(Object.preventExtensions({}));
                });
                var setMeta = function(it) {
                    setDesc(it, META, {
                        value: {
                            i: 'O' + ++id, // object ID
                            w: {} // weak collections IDs
                        }
                    });
                };
                var fastKey = function(it, create) {
                    // return primitive with prefix
                    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                    if (!has(it, META)) {
                        // can't set metadata to uncaught frozen object
                        if (!isExtensible(it)) return 'F';
                        // not necessary to add metadata
                        if (!create) return 'E';
                        // add missing metadata
                        setMeta(it);
                        // return object ID
                    }
                    return it[META].i;
                };
                var getWeak = function(it, create) {
                    if (!has(it, META)) {
                        // can't set metadata to uncaught frozen object
                        if (!isExtensible(it)) return true;
                        // not necessary to add metadata
                        if (!create) return false;
                        // add missing metadata
                        setMeta(it);
                        // return hash weak collections IDs
                    }
                    return it[META].w;
                };
                // add metadata on freeze-family methods calling
                var onFreeze = function(it) {
                    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
                    return it;
                };
                var meta = module.exports = {
                    KEY: META,
                    NEED: false,
                    fastKey: fastKey,
                    getWeak: getWeak,
                    onFreeze: onFreeze
                };

                /***/
            }),
            /* 70 */
            /***/
            (function(module, exports, __webpack_require__) {

                var global = __webpack_require__(16),
                    core = __webpack_require__(17),
                    LIBRARY = __webpack_require__(14),
                    wksExt = __webpack_require__(65),
                    defineProperty = __webpack_require__(21).f;
                module.exports = function(name) {
                    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
                    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
                };

                /***/
            }),
            /* 71 */
            /***/
            (function(module, exports, __webpack_require__) {

                var getKeys = __webpack_require__(35),
                    toIObject = __webpack_require__(9);
                module.exports = function(object, el) {
                    var O = toIObject(object),
                        keys = getKeys(O),
                        length = keys.length,
                        index = 0,
                        key;
                    while (length > index)
                        if (O[key = keys[index++]] === el) return key;
                };

                /***/
            }),
            /* 72 */
            /***/
            (function(module, exports, __webpack_require__) {

                // all enumerable object keys, includes symbols
                var getKeys = __webpack_require__(35),
                    gOPS = __webpack_require__(73),
                    pIE = __webpack_require__(74);
                module.exports = function(it) {
                    var result = getKeys(it),
                        getSymbols = gOPS.f;
                    if (getSymbols) {
                        var symbols = getSymbols(it),
                            isEnum = pIE.f,
                            i = 0,
                            key;
                        while (symbols.length > i)
                            if (isEnum.call(it, key = symbols[i++])) result.push(key);
                    }
                    return result;
                };

                /***/
            }),
            /* 73 */
            /***/
            (function(module, exports) {

                exports.f = Object.getOwnPropertySymbols;

                /***/
            }),
            /* 74 */
            /***/
            (function(module, exports) {

                exports.f = {}.propertyIsEnumerable;

                /***/
            }),
            /* 75 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 7.2.2 IsArray(argument)
                var cof = __webpack_require__(11);
                module.exports = Array.isArray || function isArray(arg) {
                    return cof(arg) == 'Array';
                };

                /***/
            }),
            /* 76 */
            /***/
            (function(module, exports, __webpack_require__) {

                // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
                var toIObject = __webpack_require__(9),
                    gOPN = __webpack_require__(77).f,
                    toString = {}.toString;

                var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ?
                    Object.getOwnPropertyNames(window) : [];

                var getWindowNames = function(it) {
                    try {
                        return gOPN(it);
                    } catch (e) {
                        return windowNames.slice();
                    }
                };

                module.exports.f = function getOwnPropertyNames(it) {
                    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
                };


                /***/
            }),
            /* 77 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
                var $keys = __webpack_require__(36),
                    hiddenKeys = __webpack_require__(44).concat('length', 'prototype');

                exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return $keys(O, hiddenKeys);
                };

                /***/
            }),
            /* 78 */
            /***/
            (function(module, exports, __webpack_require__) {

                var pIE = __webpack_require__(74),
                    createDesc = __webpack_require__(29),
                    toIObject = __webpack_require__(9),
                    toPrimitive = __webpack_require__(28),
                    has = __webpack_require__(31),
                    IE8_DOM_DEFINE = __webpack_require__(24),
                    gOPD = Object.getOwnPropertyDescriptor;

                exports.f = __webpack_require__(25) ? gOPD : function getOwnPropertyDescriptor(O, P) {
                    O = toIObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                        return gOPD(O, P);
                    } catch (e) { /* empty */ }
                    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
                };

                /***/
            }),
            /* 79 */
            /***/
            (function(module, exports) {



                /***/
            }),
            /* 80 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(70)('asyncIterator');

                /***/
            }),
            /* 81 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(70)('observable');

                /***/
            }),
            /* 82 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // first check if moment.js is already loaded in the browser window, if so,
                // use this instance. Else, load via commonjs.
                module.exports = typeof window !== 'undefined' && window['moment'] || __webpack_require__(83);

                /***/
            }),
            /* 83 */
            /***/
            (function(module, exports, __webpack_require__) {

                /* WEBPACK VAR INJECTION */
                (function(module) { //! moment.js
                    //! version : 2.18.1
                    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
                    //! license : MIT
                    //! momentjs.com

                    ;
                    (function(global, factory) {
                        true ? module.exports = factory() :
                            typeof define === 'function' && define.amd ? define(factory) :
                            global.moment = factory()
                    }(this, (function() {
                        'use strict';

                        var hookCallback;

                        function hooks() {
                            return hookCallback.apply(null, arguments);
                        }

                        // This is done to register the method called with moment()
                        // without creating circular dependencies.
                        function setHookCallback(callback) {
                            hookCallback = callback;
                        }

                        function isArray(input) {
                            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
                        }

                        function isObject(input) {
                            // IE8 will treat undefined and null as object if it wasn't for
                            // input != null
                            return input != null && Object.prototype.toString.call(input) === '[object Object]';
                        }

                        function isObjectEmpty(obj) {
                            var k;
                            for (k in obj) {
                                // even if its not own property I'd still call it non-empty
                                return false;
                            }
                            return true;
                        }

                        function isUndefined(input) {
                            return input === void 0;
                        }

                        function isNumber(input) {
                            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
                        }

                        function isDate(input) {
                            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
                        }

                        function map(arr, fn) {
                            var res = [],
                                i;
                            for (i = 0; i < arr.length; ++i) {
                                res.push(fn(arr[i], i));
                            }
                            return res;
                        }

                        function hasOwnProp(a, b) {
                            return Object.prototype.hasOwnProperty.call(a, b);
                        }

                        function extend(a, b) {
                            for (var i in b) {
                                if (hasOwnProp(b, i)) {
                                    a[i] = b[i];
                                }
                            }

                            if (hasOwnProp(b, 'toString')) {
                                a.toString = b.toString;
                            }

                            if (hasOwnProp(b, 'valueOf')) {
                                a.valueOf = b.valueOf;
                            }

                            return a;
                        }

                        function createUTC(input, format, locale, strict) {
                            return createLocalOrUTC(input, format, locale, strict, true).utc();
                        }

                        function defaultParsingFlags() {
                            // We need to deep clone this object.
                            return {
                                empty: false,
                                unusedTokens: [],
                                unusedInput: [],
                                overflow: -2,
                                charsLeftOver: 0,
                                nullInput: false,
                                invalidMonth: null,
                                invalidFormat: false,
                                userInvalidated: false,
                                iso: false,
                                parsedDateParts: [],
                                meridiem: null,
                                rfc2822: false,
                                weekdayMismatch: false
                            };
                        }

                        function getParsingFlags(m) {
                            if (m._pf == null) {
                                m._pf = defaultParsingFlags();
                            }
                            return m._pf;
                        }

                        var some;
                        if (Array.prototype.some) {
                            some = Array.prototype.some;
                        } else {
                            some = function(fun) {
                                var t = Object(this);
                                var len = t.length >>> 0;

                                for (var i = 0; i < len; i++) {
                                    if (i in t && fun.call(this, t[i], i, t)) {
                                        return true;
                                    }
                                }

                                return false;
                            };
                        }

                        var some$1 = some;

                        function isValid(m) {
                            if (m._isValid == null) {
                                var flags = getParsingFlags(m);
                                var parsedParts = some$1.call(flags.parsedDateParts, function(i) {
                                    return i != null;
                                });
                                var isNowValid = !isNaN(m._d.getTime()) &&
                                    flags.overflow < 0 &&
                                    !flags.empty &&
                                    !flags.invalidMonth &&
                                    !flags.invalidWeekday &&
                                    !flags.nullInput &&
                                    !flags.invalidFormat &&
                                    !flags.userInvalidated &&
                                    (!flags.meridiem || (flags.meridiem && parsedParts));

                                if (m._strict) {
                                    isNowValid = isNowValid &&
                                        flags.charsLeftOver === 0 &&
                                        flags.unusedTokens.length === 0 &&
                                        flags.bigHour === undefined;
                                }

                                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                                    m._isValid = isNowValid;
                                } else {
                                    return isNowValid;
                                }
                            }
                            return m._isValid;
                        }

                        function createInvalid(flags) {
                            var m = createUTC(NaN);
                            if (flags != null) {
                                extend(getParsingFlags(m), flags);
                            } else {
                                getParsingFlags(m).userInvalidated = true;
                            }

                            return m;
                        }

                        // Plugins that add properties should also add the key here (null value),
                        // so we can properly clone ourselves.
                        var momentProperties = hooks.momentProperties = [];

                        function copyConfig(to, from) {
                            var i, prop, val;

                            if (!isUndefined(from._isAMomentObject)) {
                                to._isAMomentObject = from._isAMomentObject;
                            }
                            if (!isUndefined(from._i)) {
                                to._i = from._i;
                            }
                            if (!isUndefined(from._f)) {
                                to._f = from._f;
                            }
                            if (!isUndefined(from._l)) {
                                to._l = from._l;
                            }
                            if (!isUndefined(from._strict)) {
                                to._strict = from._strict;
                            }
                            if (!isUndefined(from._tzm)) {
                                to._tzm = from._tzm;
                            }
                            if (!isUndefined(from._isUTC)) {
                                to._isUTC = from._isUTC;
                            }
                            if (!isUndefined(from._offset)) {
                                to._offset = from._offset;
                            }
                            if (!isUndefined(from._pf)) {
                                to._pf = getParsingFlags(from);
                            }
                            if (!isUndefined(from._locale)) {
                                to._locale = from._locale;
                            }

                            if (momentProperties.length > 0) {
                                for (i = 0; i < momentProperties.length; i++) {
                                    prop = momentProperties[i];
                                    val = from[prop];
                                    if (!isUndefined(val)) {
                                        to[prop] = val;
                                    }
                                }
                            }

                            return to;
                        }

                        var updateInProgress = false;

                        // Moment prototype object
                        function Moment(config) {
                            copyConfig(this, config);
                            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                            if (!this.isValid()) {
                                this._d = new Date(NaN);
                            }
                            // Prevent infinite loop in case updateOffset creates new moment
                            // objects.
                            if (updateInProgress === false) {
                                updateInProgress = true;
                                hooks.updateOffset(this);
                                updateInProgress = false;
                            }
                        }

                        function isMoment(obj) {
                            return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
                        }

                        function absFloor(number) {
                            if (number < 0) {
                                // -0 -> 0
                                return Math.ceil(number) || 0;
                            } else {
                                return Math.floor(number);
                            }
                        }

                        function toInt(argumentForCoercion) {
                            var coercedNumber = +argumentForCoercion,
                                value = 0;

                            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                                value = absFloor(coercedNumber);
                            }

                            return value;
                        }

                        // compare two arrays, return the number of differences
                        function compareArrays(array1, array2, dontConvert) {
                            var len = Math.min(array1.length, array2.length),
                                lengthDiff = Math.abs(array1.length - array2.length),
                                diffs = 0,
                                i;
                            for (i = 0; i < len; i++) {
                                if ((dontConvert && array1[i] !== array2[i]) ||
                                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                                    diffs++;
                                }
                            }
                            return diffs + lengthDiff;
                        }

                        function warn(msg) {
                            if (hooks.suppressDeprecationWarnings === false &&
                                (typeof console !== 'undefined') && console.warn) {
                                console.warn('Deprecation warning: ' + msg);
                            }
                        }

                        function deprecate(msg, fn) {
                            var firstTime = true;

                            return extend(function() {
                                if (hooks.deprecationHandler != null) {
                                    hooks.deprecationHandler(null, msg);
                                }
                                if (firstTime) {
                                    var args = [];
                                    var arg;
                                    for (var i = 0; i < arguments.length; i++) {
                                        arg = '';
                                        if (typeof arguments[i] === 'object') {
                                            arg += '\n[' + i + '] ';
                                            for (var key in arguments[0]) {
                                                arg += key + ': ' + arguments[0][key] + ', ';
                                            }
                                            arg = arg.slice(0, -2); // Remove trailing comma and space
                                        } else {
                                            arg = arguments[i];
                                        }
                                        args.push(arg);
                                    }
                                    warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                                    firstTime = false;
                                }
                                return fn.apply(this, arguments);
                            }, fn);
                        }

                        var deprecations = {};

                        function deprecateSimple(name, msg) {
                            if (hooks.deprecationHandler != null) {
                                hooks.deprecationHandler(name, msg);
                            }
                            if (!deprecations[name]) {
                                warn(msg);
                                deprecations[name] = true;
                            }
                        }

                        hooks.suppressDeprecationWarnings = false;
                        hooks.deprecationHandler = null;

                        function isFunction(input) {
                            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
                        }

                        function set(config) {
                            var prop, i;
                            for (i in config) {
                                prop = config[i];
                                if (isFunction(prop)) {
                                    this[i] = prop;
                                } else {
                                    this['_' + i] = prop;
                                }
                            }
                            this._config = config;
                            // Lenient ordinal parsing accepts just a number in addition to
                            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
                            // TODO: Remove "ordinalParse" fallback in next major release.
                            this._dayOfMonthOrdinalParseLenient = new RegExp(
                                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                                '|' + (/\d{1,2}/).source);
                        }

                        function mergeConfigs(parentConfig, childConfig) {
                            var res = extend({}, parentConfig),
                                prop;
                            for (prop in childConfig) {
                                if (hasOwnProp(childConfig, prop)) {
                                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                                        res[prop] = {};
                                        extend(res[prop], parentConfig[prop]);
                                        extend(res[prop], childConfig[prop]);
                                    } else if (childConfig[prop] != null) {
                                        res[prop] = childConfig[prop];
                                    } else {
                                        delete res[prop];
                                    }
                                }
                            }
                            for (prop in parentConfig) {
                                if (hasOwnProp(parentConfig, prop) &&
                                    !hasOwnProp(childConfig, prop) &&
                                    isObject(parentConfig[prop])) {
                                    // make sure changes to properties don't modify parent config
                                    res[prop] = extend({}, res[prop]);
                                }
                            }
                            return res;
                        }

                        function Locale(config) {
                            if (config != null) {
                                this.set(config);
                            }
                        }

                        var keys;

                        if (Object.keys) {
                            keys = Object.keys;
                        } else {
                            keys = function(obj) {
                                var i, res = [];
                                for (i in obj) {
                                    if (hasOwnProp(obj, i)) {
                                        res.push(i);
                                    }
                                }
                                return res;
                            };
                        }

                        var keys$1 = keys;

                        var defaultCalendar = {
                            sameDay: '[Today at] LT',
                            nextDay: '[Tomorrow at] LT',
                            nextWeek: 'dddd [at] LT',
                            lastDay: '[Yesterday at] LT',
                            lastWeek: '[Last] dddd [at] LT',
                            sameElse: 'L'
                        };

                        function calendar(key, mom, now) {
                            var output = this._calendar[key] || this._calendar['sameElse'];
                            return isFunction(output) ? output.call(mom, now) : output;
                        }

                        var defaultLongDateFormat = {
                            LTS: 'h:mm:ss A',
                            LT: 'h:mm A',
                            L: 'MM/DD/YYYY',
                            LL: 'MMMM D, YYYY',
                            LLL: 'MMMM D, YYYY h:mm A',
                            LLLL: 'dddd, MMMM D, YYYY h:mm A'
                        };

                        function longDateFormat(key) {
                            var format = this._longDateFormat[key],
                                formatUpper = this._longDateFormat[key.toUpperCase()];

                            if (format || !formatUpper) {
                                return format;
                            }

                            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
                                return val.slice(1);
                            });

                            return this._longDateFormat[key];
                        }

                        var defaultInvalidDate = 'Invalid date';

                        function invalidDate() {
                            return this._invalidDate;
                        }

                        var defaultOrdinal = '%d';
                        var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

                        function ordinal(number) {
                            return this._ordinal.replace('%d', number);
                        }

                        var defaultRelativeTime = {
                            future: 'in %s',
                            past: '%s ago',
                            s: 'a few seconds',
                            ss: '%d seconds',
                            m: 'a minute',
                            mm: '%d minutes',
                            h: 'an hour',
                            hh: '%d hours',
                            d: 'a day',
                            dd: '%d days',
                            M: 'a month',
                            MM: '%d months',
                            y: 'a year',
                            yy: '%d years'
                        };

                        function relativeTime(number, withoutSuffix, string, isFuture) {
                            var output = this._relativeTime[string];
                            return (isFunction(output)) ?
                                output(number, withoutSuffix, string, isFuture) :
                                output.replace(/%d/i, number);
                        }

                        function pastFuture(diff, output) {
                            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
                        }

                        var aliases = {};

                        function addUnitAlias(unit, shorthand) {
                            var lowerCase = unit.toLowerCase();
                            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
                        }

                        function normalizeUnits(units) {
                            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
                        }

                        function normalizeObjectUnits(inputObject) {
                            var normalizedInput = {},
                                normalizedProp,
                                prop;

                            for (prop in inputObject) {
                                if (hasOwnProp(inputObject, prop)) {
                                    normalizedProp = normalizeUnits(prop);
                                    if (normalizedProp) {
                                        normalizedInput[normalizedProp] = inputObject[prop];
                                    }
                                }
                            }

                            return normalizedInput;
                        }

                        var priorities = {};

                        function addUnitPriority(unit, priority) {
                            priorities[unit] = priority;
                        }

                        function getPrioritizedUnits(unitsObj) {
                            var units = [];
                            for (var u in unitsObj) {
                                units.push({ unit: u, priority: priorities[u] });
                            }
                            units.sort(function(a, b) {
                                return a.priority - b.priority;
                            });
                            return units;
                        }

                        function makeGetSet(unit, keepTime) {
                            return function(value) {
                                if (value != null) {
                                    set$1(this, unit, value);
                                    hooks.updateOffset(this, keepTime);
                                    return this;
                                } else {
                                    return get(this, unit);
                                }
                            };
                        }

                        function get(mom, unit) {
                            return mom.isValid() ?
                                mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
                        }

                        function set$1(mom, unit, value) {
                            if (mom.isValid()) {
                                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                            }
                        }

                        // MOMENTS

                        function stringGet(units) {
                            units = normalizeUnits(units);
                            if (isFunction(this[units])) {
                                return this[units]();
                            }
                            return this;
                        }


                        function stringSet(units, value) {
                            if (typeof units === 'object') {
                                units = normalizeObjectUnits(units);
                                var prioritized = getPrioritizedUnits(units);
                                for (var i = 0; i < prioritized.length; i++) {
                                    this[prioritized[i].unit](units[prioritized[i].unit]);
                                }
                            } else {
                                units = normalizeUnits(units);
                                if (isFunction(this[units])) {
                                    return this[units](value);
                                }
                            }
                            return this;
                        }

                        function zeroFill(number, targetLength, forceSign) {
                            var absNumber = '' + Math.abs(number),
                                zerosToFill = targetLength - absNumber.length,
                                sign = number >= 0;
                            return (sign ? (forceSign ? '+' : '') : '-') +
                                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
                        }

                        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

                        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

                        var formatFunctions = {};

                        var formatTokenFunctions = {};

                        // token:    'M'
                        // padded:   ['MM', 2]
                        // ordinal:  'Mo'
                        // callback: function () { this.month() + 1 }
                        function addFormatToken(token, padded, ordinal, callback) {
                            var func = callback;
                            if (typeof callback === 'string') {
                                func = function() {
                                    return this[callback]();
                                };
                            }
                            if (token) {
                                formatTokenFunctions[token] = func;
                            }
                            if (padded) {
                                formatTokenFunctions[padded[0]] = function() {
                                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                                };
                            }
                            if (ordinal) {
                                formatTokenFunctions[ordinal] = function() {
                                    return this.localeData().ordinal(func.apply(this, arguments), token);
                                };
                            }
                        }

                        function removeFormattingTokens(input) {
                            if (input.match(/\[[\s\S]/)) {
                                return input.replace(/^\[|\]$/g, '');
                            }
                            return input.replace(/\\/g, '');
                        }

                        function makeFormatFunction(format) {
                            var array = format.match(formattingTokens),
                                i, length;

                            for (i = 0, length = array.length; i < length; i++) {
                                if (formatTokenFunctions[array[i]]) {
                                    array[i] = formatTokenFunctions[array[i]];
                                } else {
                                    array[i] = removeFormattingTokens(array[i]);
                                }
                            }

                            return function(mom) {
                                var output = '',
                                    i;
                                for (i = 0; i < length; i++) {
                                    output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                                }
                                return output;
                            };
                        }

                        // format date using native date object
                        function formatMoment(m, format) {
                            if (!m.isValid()) {
                                return m.localeData().invalidDate();
                            }

                            format = expandFormat(format, m.localeData());
                            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

                            return formatFunctions[format](m);
                        }

                        function expandFormat(format, locale) {
                            var i = 5;

                            function replaceLongDateFormatTokens(input) {
                                return locale.longDateFormat(input) || input;
                            }

                            localFormattingTokens.lastIndex = 0;
                            while (i >= 0 && localFormattingTokens.test(format)) {
                                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                                localFormattingTokens.lastIndex = 0;
                                i -= 1;
                            }

                            return format;
                        }

                        var match1 = /\d/; //       0 - 9
                        var match2 = /\d\d/; //      00 - 99
                        var match3 = /\d{3}/; //     000 - 999
                        var match4 = /\d{4}/; //    0000 - 9999
                        var match6 = /[+-]?\d{6}/; // -999999 - 999999
                        var match1to2 = /\d\d?/; //       0 - 99
                        var match3to4 = /\d\d\d\d?/; //     999 - 9999
                        var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
                        var match1to3 = /\d{1,3}/; //       0 - 999
                        var match1to4 = /\d{1,4}/; //       0 - 9999
                        var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

                        var matchUnsigned = /\d+/; //       0 - inf
                        var matchSigned = /[+-]?\d+/; //    -inf - inf

                        var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
                        var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

                        var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

                        // any word (or two) characters or numbers including two/three word month in arabic.
                        // includes scottish gaelic two word and hyphenated months
                        var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


                        var regexes = {};

                        function addRegexToken(token, regex, strictRegex) {
                            regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
                                return (isStrict && strictRegex) ? strictRegex : regex;
                            };
                        }

                        function getParseRegexForToken(token, config) {
                            if (!hasOwnProp(regexes, token)) {
                                return new RegExp(unescapeFormat(token));
                            }

                            return regexes[token](config._strict, config._locale);
                        }

                        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
                        function unescapeFormat(s) {
                            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                                return p1 || p2 || p3 || p4;
                            }));
                        }

                        function regexEscape(s) {
                            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                        }

                        var tokens = {};

                        function addParseToken(token, callback) {
                            var i, func = callback;
                            if (typeof token === 'string') {
                                token = [token];
                            }
                            if (isNumber(callback)) {
                                func = function(input, array) {
                                    array[callback] = toInt(input);
                                };
                            }
                            for (i = 0; i < token.length; i++) {
                                tokens[token[i]] = func;
                            }
                        }

                        function addWeekParseToken(token, callback) {
                            addParseToken(token, function(input, array, config, token) {
                                config._w = config._w || {};
                                callback(input, config._w, config, token);
                            });
                        }

                        function addTimeToArrayFromToken(token, input, config) {
                            if (input != null && hasOwnProp(tokens, token)) {
                                tokens[token](input, config._a, config, token);
                            }
                        }

                        var YEAR = 0;
                        var MONTH = 1;
                        var DATE = 2;
                        var HOUR = 3;
                        var MINUTE = 4;
                        var SECOND = 5;
                        var MILLISECOND = 6;
                        var WEEK = 7;
                        var WEEKDAY = 8;

                        var indexOf;

                        if (Array.prototype.indexOf) {
                            indexOf = Array.prototype.indexOf;
                        } else {
                            indexOf = function(o) {
                                // I know
                                var i;
                                for (i = 0; i < this.length; ++i) {
                                    if (this[i] === o) {
                                        return i;
                                    }
                                }
                                return -1;
                            };
                        }

                        var indexOf$1 = indexOf;

                        function daysInMonth(year, month) {
                            return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
                        }

                        // FORMATTING

                        addFormatToken('M', ['MM', 2], 'Mo', function() {
                            return this.month() + 1;
                        });

                        addFormatToken('MMM', 0, 0, function(format) {
                            return this.localeData().monthsShort(this, format);
                        });

                        addFormatToken('MMMM', 0, 0, function(format) {
                            return this.localeData().months(this, format);
                        });

                        // ALIASES

                        addUnitAlias('month', 'M');

                        // PRIORITY

                        addUnitPriority('month', 8);

                        // PARSING

                        addRegexToken('M', match1to2);
                        addRegexToken('MM', match1to2, match2);
                        addRegexToken('MMM', function(isStrict, locale) {
                            return locale.monthsShortRegex(isStrict);
                        });
                        addRegexToken('MMMM', function(isStrict, locale) {
                            return locale.monthsRegex(isStrict);
                        });

                        addParseToken(['M', 'MM'], function(input, array) {
                            array[MONTH] = toInt(input) - 1;
                        });

                        addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
                            var month = config._locale.monthsParse(input, token, config._strict);
                            // if we didn't find a month name, mark the date as invalid.
                            if (month != null) {
                                array[MONTH] = month;
                            } else {
                                getParsingFlags(config).invalidMonth = input;
                            }
                        });

                        // LOCALES

                        var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
                        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

                        function localeMonths(m, format) {
                            if (!m) {
                                return isArray(this._months) ? this._months :
                                    this._months['standalone'];
                            }
                            return isArray(this._months) ? this._months[m.month()] :
                                this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
                        }

                        var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

                        function localeMonthsShort(m, format) {
                            if (!m) {
                                return isArray(this._monthsShort) ? this._monthsShort :
                                    this._monthsShort['standalone'];
                            }
                            return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
                                this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
                        }

                        function handleStrictParse(monthName, format, strict) {
                            var i, ii, mom, llc = monthName.toLocaleLowerCase();
                            if (!this._monthsParse) {
                                // this is not used
                                this._monthsParse = [];
                                this._longMonthsParse = [];
                                this._shortMonthsParse = [];
                                for (i = 0; i < 12; ++i) {
                                    mom = createUTC([2000, i]);
                                    this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                                }
                            }

                            if (strict) {
                                if (format === 'MMM') {
                                    ii = indexOf$1.call(this._shortMonthsParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else {
                                    ii = indexOf$1.call(this._longMonthsParse, llc);
                                    return ii !== -1 ? ii : null;
                                }
                            } else {
                                if (format === 'MMM') {
                                    ii = indexOf$1.call(this._shortMonthsParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._longMonthsParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else {
                                    ii = indexOf$1.call(this._longMonthsParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._shortMonthsParse, llc);
                                    return ii !== -1 ? ii : null;
                                }
                            }
                        }

                        function localeMonthsParse(monthName, format, strict) {
                            var i, mom, regex;

                            if (this._monthsParseExact) {
                                return handleStrictParse.call(this, monthName, format, strict);
                            }

                            if (!this._monthsParse) {
                                this._monthsParse = [];
                                this._longMonthsParse = [];
                                this._shortMonthsParse = [];
                            }

                            // TODO: add sorting
                            // Sorting makes sure if one month (or abbr) is a prefix of another
                            // see sorting in computeMonthsParse
                            for (i = 0; i < 12; i++) {
                                // make the regex if we don't have it already
                                mom = createUTC([2000, i]);
                                if (strict && !this._longMonthsParse[i]) {
                                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                                }
                                if (!strict && !this._monthsParse[i]) {
                                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                                }
                                // test the regex
                                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                                    return i;
                                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                                    return i;
                                } else if (!strict && this._monthsParse[i].test(monthName)) {
                                    return i;
                                }
                            }
                        }

                        // MOMENTS

                        function setMonth(mom, value) {
                            var dayOfMonth;

                            if (!mom.isValid()) {
                                // No op
                                return mom;
                            }

                            if (typeof value === 'string') {
                                if (/^\d+$/.test(value)) {
                                    value = toInt(value);
                                } else {
                                    value = mom.localeData().monthsParse(value);
                                    // TODO: Another silent failure?
                                    if (!isNumber(value)) {
                                        return mom;
                                    }
                                }
                            }

                            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
                            return mom;
                        }

                        function getSetMonth(value) {
                            if (value != null) {
                                setMonth(this, value);
                                hooks.updateOffset(this, true);
                                return this;
                            } else {
                                return get(this, 'Month');
                            }
                        }

                        function getDaysInMonth() {
                            return daysInMonth(this.year(), this.month());
                        }

                        var defaultMonthsShortRegex = matchWord;

                        function monthsShortRegex(isStrict) {
                            if (this._monthsParseExact) {
                                if (!hasOwnProp(this, '_monthsRegex')) {
                                    computeMonthsParse.call(this);
                                }
                                if (isStrict) {
                                    return this._monthsShortStrictRegex;
                                } else {
                                    return this._monthsShortRegex;
                                }
                            } else {
                                if (!hasOwnProp(this, '_monthsShortRegex')) {
                                    this._monthsShortRegex = defaultMonthsShortRegex;
                                }
                                return this._monthsShortStrictRegex && isStrict ?
                                    this._monthsShortStrictRegex : this._monthsShortRegex;
                            }
                        }

                        var defaultMonthsRegex = matchWord;

                        function monthsRegex(isStrict) {
                            if (this._monthsParseExact) {
                                if (!hasOwnProp(this, '_monthsRegex')) {
                                    computeMonthsParse.call(this);
                                }
                                if (isStrict) {
                                    return this._monthsStrictRegex;
                                } else {
                                    return this._monthsRegex;
                                }
                            } else {
                                if (!hasOwnProp(this, '_monthsRegex')) {
                                    this._monthsRegex = defaultMonthsRegex;
                                }
                                return this._monthsStrictRegex && isStrict ?
                                    this._monthsStrictRegex : this._monthsRegex;
                            }
                        }

                        function computeMonthsParse() {
                            function cmpLenRev(a, b) {
                                return b.length - a.length;
                            }

                            var shortPieces = [],
                                longPieces = [],
                                mixedPieces = [],
                                i, mom;
                            for (i = 0; i < 12; i++) {
                                // make the regex if we don't have it already
                                mom = createUTC([2000, i]);
                                shortPieces.push(this.monthsShort(mom, ''));
                                longPieces.push(this.months(mom, ''));
                                mixedPieces.push(this.months(mom, ''));
                                mixedPieces.push(this.monthsShort(mom, ''));
                            }
                            // Sorting makes sure if one month (or abbr) is a prefix of another it
                            // will match the longer piece.
                            shortPieces.sort(cmpLenRev);
                            longPieces.sort(cmpLenRev);
                            mixedPieces.sort(cmpLenRev);
                            for (i = 0; i < 12; i++) {
                                shortPieces[i] = regexEscape(shortPieces[i]);
                                longPieces[i] = regexEscape(longPieces[i]);
                            }
                            for (i = 0; i < 24; i++) {
                                mixedPieces[i] = regexEscape(mixedPieces[i]);
                            }

                            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                            this._monthsShortRegex = this._monthsRegex;
                            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
                            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
                        }

                        // FORMATTING

                        addFormatToken('Y', 0, 0, function() {
                            var y = this.year();
                            return y <= 9999 ? '' + y : '+' + y;
                        });

                        addFormatToken(0, ['YY', 2], 0, function() {
                            return this.year() % 100;
                        });

                        addFormatToken(0, ['YYYY', 4], 0, 'year');
                        addFormatToken(0, ['YYYYY', 5], 0, 'year');
                        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

                        // ALIASES

                        addUnitAlias('year', 'y');

                        // PRIORITIES

                        addUnitPriority('year', 1);

                        // PARSING

                        addRegexToken('Y', matchSigned);
                        addRegexToken('YY', match1to2, match2);
                        addRegexToken('YYYY', match1to4, match4);
                        addRegexToken('YYYYY', match1to6, match6);
                        addRegexToken('YYYYYY', match1to6, match6);

                        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
                        addParseToken('YYYY', function(input, array) {
                            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
                        });
                        addParseToken('YY', function(input, array) {
                            array[YEAR] = hooks.parseTwoDigitYear(input);
                        });
                        addParseToken('Y', function(input, array) {
                            array[YEAR] = parseInt(input, 10);
                        });

                        // HELPERS

                        function daysInYear(year) {
                            return isLeapYear(year) ? 366 : 365;
                        }

                        function isLeapYear(year) {
                            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
                        }

                        // HOOKS

                        hooks.parseTwoDigitYear = function(input) {
                            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
                        };

                        // MOMENTS

                        var getSetYear = makeGetSet('FullYear', true);

                        function getIsLeapYear() {
                            return isLeapYear(this.year());
                        }

                        function createDate(y, m, d, h, M, s, ms) {
                            // can't just apply() to create a date:
                            // https://stackoverflow.com/q/181348
                            var date = new Date(y, m, d, h, M, s, ms);

                            // the date constructor remaps years 0-99 to 1900-1999
                            if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                                date.setFullYear(y);
                            }
                            return date;
                        }

                        function createUTCDate(y) {
                            var date = new Date(Date.UTC.apply(null, arguments));

                            // the Date.UTC function remaps years 0-99 to 1900-1999
                            if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                                date.setUTCFullYear(y);
                            }
                            return date;
                        }

                        // start-of-first-week - start-of-year
                        function firstWeekOffset(year, dow, doy) {
                            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                                fwd = 7 + dow - doy,
                                // first-week day local weekday -- which local weekday is fwd
                                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

                            return -fwdlw + fwd - 1;
                        }

                        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
                        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                            var localWeekday = (7 + weekday - dow) % 7,
                                weekOffset = firstWeekOffset(year, dow, doy),
                                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                                resYear, resDayOfYear;

                            if (dayOfYear <= 0) {
                                resYear = year - 1;
                                resDayOfYear = daysInYear(resYear) + dayOfYear;
                            } else if (dayOfYear > daysInYear(year)) {
                                resYear = year + 1;
                                resDayOfYear = dayOfYear - daysInYear(year);
                            } else {
                                resYear = year;
                                resDayOfYear = dayOfYear;
                            }

                            return {
                                year: resYear,
                                dayOfYear: resDayOfYear
                            };
                        }

                        function weekOfYear(mom, dow, doy) {
                            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                                resWeek, resYear;

                            if (week < 1) {
                                resYear = mom.year() - 1;
                                resWeek = week + weeksInYear(resYear, dow, doy);
                            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                                resWeek = week - weeksInYear(mom.year(), dow, doy);
                                resYear = mom.year() + 1;
                            } else {
                                resYear = mom.year();
                                resWeek = week;
                            }

                            return {
                                week: resWeek,
                                year: resYear
                            };
                        }

                        function weeksInYear(year, dow, doy) {
                            var weekOffset = firstWeekOffset(year, dow, doy),
                                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
                        }

                        // FORMATTING

                        addFormatToken('w', ['ww', 2], 'wo', 'week');
                        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

                        // ALIASES

                        addUnitAlias('week', 'w');
                        addUnitAlias('isoWeek', 'W');

                        // PRIORITIES

                        addUnitPriority('week', 5);
                        addUnitPriority('isoWeek', 5);

                        // PARSING

                        addRegexToken('w', match1to2);
                        addRegexToken('ww', match1to2, match2);
                        addRegexToken('W', match1to2);
                        addRegexToken('WW', match1to2, match2);

                        addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
                            week[token.substr(0, 1)] = toInt(input);
                        });

                        // HELPERS

                        // LOCALES

                        function localeWeek(mom) {
                            return weekOfYear(mom, this._week.dow, this._week.doy).week;
                        }

                        var defaultLocaleWeek = {
                            dow: 0, // Sunday is the first day of the week.
                            doy: 6 // The week that contains Jan 1st is the first week of the year.
                        };

                        function localeFirstDayOfWeek() {
                            return this._week.dow;
                        }

                        function localeFirstDayOfYear() {
                            return this._week.doy;
                        }

                        // MOMENTS

                        function getSetWeek(input) {
                            var week = this.localeData().week(this);
                            return input == null ? week : this.add((input - week) * 7, 'd');
                        }

                        function getSetISOWeek(input) {
                            var week = weekOfYear(this, 1, 4).week;
                            return input == null ? week : this.add((input - week) * 7, 'd');
                        }

                        // FORMATTING

                        addFormatToken('d', 0, 'do', 'day');

                        addFormatToken('dd', 0, 0, function(format) {
                            return this.localeData().weekdaysMin(this, format);
                        });

                        addFormatToken('ddd', 0, 0, function(format) {
                            return this.localeData().weekdaysShort(this, format);
                        });

                        addFormatToken('dddd', 0, 0, function(format) {
                            return this.localeData().weekdays(this, format);
                        });

                        addFormatToken('e', 0, 0, 'weekday');
                        addFormatToken('E', 0, 0, 'isoWeekday');

                        // ALIASES

                        addUnitAlias('day', 'd');
                        addUnitAlias('weekday', 'e');
                        addUnitAlias('isoWeekday', 'E');

                        // PRIORITY
                        addUnitPriority('day', 11);
                        addUnitPriority('weekday', 11);
                        addUnitPriority('isoWeekday', 11);

                        // PARSING

                        addRegexToken('d', match1to2);
                        addRegexToken('e', match1to2);
                        addRegexToken('E', match1to2);
                        addRegexToken('dd', function(isStrict, locale) {
                            return locale.weekdaysMinRegex(isStrict);
                        });
                        addRegexToken('ddd', function(isStrict, locale) {
                            return locale.weekdaysShortRegex(isStrict);
                        });
                        addRegexToken('dddd', function(isStrict, locale) {
                            return locale.weekdaysRegex(isStrict);
                        });

                        addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config, token) {
                            var weekday = config._locale.weekdaysParse(input, token, config._strict);
                            // if we didn't get a weekday name, mark the date as invalid
                            if (weekday != null) {
                                week.d = weekday;
                            } else {
                                getParsingFlags(config).invalidWeekday = input;
                            }
                        });

                        addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
                            week[token] = toInt(input);
                        });

                        // HELPERS

                        function parseWeekday(input, locale) {
                            if (typeof input !== 'string') {
                                return input;
                            }

                            if (!isNaN(input)) {
                                return parseInt(input, 10);
                            }

                            input = locale.weekdaysParse(input);
                            if (typeof input === 'number') {
                                return input;
                            }

                            return null;
                        }

                        function parseIsoWeekday(input, locale) {
                            if (typeof input === 'string') {
                                return locale.weekdaysParse(input) % 7 || 7;
                            }
                            return isNaN(input) ? null : input;
                        }

                        // LOCALES

                        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

                        function localeWeekdays(m, format) {
                            if (!m) {
                                return isArray(this._weekdays) ? this._weekdays :
                                    this._weekdays['standalone'];
                            }
                            return isArray(this._weekdays) ? this._weekdays[m.day()] :
                                this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
                        }

                        var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

                        function localeWeekdaysShort(m) {
                            return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
                        }

                        var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

                        function localeWeekdaysMin(m) {
                            return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
                        }

                        function handleStrictParse$1(weekdayName, format, strict) {
                            var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
                            if (!this._weekdaysParse) {
                                this._weekdaysParse = [];
                                this._shortWeekdaysParse = [];
                                this._minWeekdaysParse = [];

                                for (i = 0; i < 7; ++i) {
                                    mom = createUTC([2000, 1]).day(i);
                                    this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                                    this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                                }
                            }

                            if (strict) {
                                if (format === 'dddd') {
                                    ii = indexOf$1.call(this._weekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else if (format === 'ddd') {
                                    ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else {
                                    ii = indexOf$1.call(this._minWeekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                }
                            } else {
                                if (format === 'dddd') {
                                    ii = indexOf$1.call(this._weekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._minWeekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else if (format === 'ddd') {
                                    ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._weekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._minWeekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                } else {
                                    ii = indexOf$1.call(this._minWeekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._weekdaysParse, llc);
                                    if (ii !== -1) {
                                        return ii;
                                    }
                                    ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                                    return ii !== -1 ? ii : null;
                                }
                            }
                        }

                        function localeWeekdaysParse(weekdayName, format, strict) {
                            var i, mom, regex;

                            if (this._weekdaysParseExact) {
                                return handleStrictParse$1.call(this, weekdayName, format, strict);
                            }

                            if (!this._weekdaysParse) {
                                this._weekdaysParse = [];
                                this._minWeekdaysParse = [];
                                this._shortWeekdaysParse = [];
                                this._fullWeekdaysParse = [];
                            }

                            for (i = 0; i < 7; i++) {
                                // make the regex if we don't have it already

                                mom = createUTC([2000, 1]).day(i);
                                if (strict && !this._fullWeekdaysParse[i]) {
                                    this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                                    this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                                    this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
                                }
                                if (!this._weekdaysParse[i]) {
                                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                                }
                                // test the regex
                                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                                    return i;
                                } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                                    return i;
                                } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                                    return i;
                                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                                    return i;
                                }
                            }
                        }

                        // MOMENTS

                        function getSetDayOfWeek(input) {
                            if (!this.isValid()) {
                                return input != null ? this : NaN;
                            }
                            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                            if (input != null) {
                                input = parseWeekday(input, this.localeData());
                                return this.add(input - day, 'd');
                            } else {
                                return day;
                            }
                        }

                        function getSetLocaleDayOfWeek(input) {
                            if (!this.isValid()) {
                                return input != null ? this : NaN;
                            }
                            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                            return input == null ? weekday : this.add(input - weekday, 'd');
                        }

                        function getSetISODayOfWeek(input) {
                            if (!this.isValid()) {
                                return input != null ? this : NaN;
                            }

                            // behaves the same as moment#day except
                            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                            // as a setter, sunday should belong to the previous week.

                            if (input != null) {
                                var weekday = parseIsoWeekday(input, this.localeData());
                                return this.day(this.day() % 7 ? weekday : weekday - 7);
                            } else {
                                return this.day() || 7;
                            }
                        }

                        var defaultWeekdaysRegex = matchWord;

                        function weekdaysRegex(isStrict) {
                            if (this._weekdaysParseExact) {
                                if (!hasOwnProp(this, '_weekdaysRegex')) {
                                    computeWeekdaysParse.call(this);
                                }
                                if (isStrict) {
                                    return this._weekdaysStrictRegex;
                                } else {
                                    return this._weekdaysRegex;
                                }
                            } else {
                                if (!hasOwnProp(this, '_weekdaysRegex')) {
                                    this._weekdaysRegex = defaultWeekdaysRegex;
                                }
                                return this._weekdaysStrictRegex && isStrict ?
                                    this._weekdaysStrictRegex : this._weekdaysRegex;
                            }
                        }

                        var defaultWeekdaysShortRegex = matchWord;

                        function weekdaysShortRegex(isStrict) {
                            if (this._weekdaysParseExact) {
                                if (!hasOwnProp(this, '_weekdaysRegex')) {
                                    computeWeekdaysParse.call(this);
                                }
                                if (isStrict) {
                                    return this._weekdaysShortStrictRegex;
                                } else {
                                    return this._weekdaysShortRegex;
                                }
                            } else {
                                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                                }
                                return this._weekdaysShortStrictRegex && isStrict ?
                                    this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
                            }
                        }

                        var defaultWeekdaysMinRegex = matchWord;

                        function weekdaysMinRegex(isStrict) {
                            if (this._weekdaysParseExact) {
                                if (!hasOwnProp(this, '_weekdaysRegex')) {
                                    computeWeekdaysParse.call(this);
                                }
                                if (isStrict) {
                                    return this._weekdaysMinStrictRegex;
                                } else {
                                    return this._weekdaysMinRegex;
                                }
                            } else {
                                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                                }
                                return this._weekdaysMinStrictRegex && isStrict ?
                                    this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
                            }
                        }


                        function computeWeekdaysParse() {
                            function cmpLenRev(a, b) {
                                return b.length - a.length;
                            }

                            var minPieces = [],
                                shortPieces = [],
                                longPieces = [],
                                mixedPieces = [],
                                i, mom, minp, shortp, longp;
                            for (i = 0; i < 7; i++) {
                                // make the regex if we don't have it already
                                mom = createUTC([2000, 1]).day(i);
                                minp = this.weekdaysMin(mom, '');
                                shortp = this.weekdaysShort(mom, '');
                                longp = this.weekdays(mom, '');
                                minPieces.push(minp);
                                shortPieces.push(shortp);
                                longPieces.push(longp);
                                mixedPieces.push(minp);
                                mixedPieces.push(shortp);
                                mixedPieces.push(longp);
                            }
                            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
                            // will match the longer piece.
                            minPieces.sort(cmpLenRev);
                            shortPieces.sort(cmpLenRev);
                            longPieces.sort(cmpLenRev);
                            mixedPieces.sort(cmpLenRev);
                            for (i = 0; i < 7; i++) {
                                shortPieces[i] = regexEscape(shortPieces[i]);
                                longPieces[i] = regexEscape(longPieces[i]);
                                mixedPieces[i] = regexEscape(mixedPieces[i]);
                            }

                            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                            this._weekdaysShortRegex = this._weekdaysRegex;
                            this._weekdaysMinRegex = this._weekdaysRegex;

                            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
                            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
                            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
                        }

                        // FORMATTING

                        function hFormat() {
                            return this.hours() % 12 || 12;
                        }

                        function kFormat() {
                            return this.hours() || 24;
                        }

                        addFormatToken('H', ['HH', 2], 0, 'hour');
                        addFormatToken('h', ['hh', 2], 0, hFormat);
                        addFormatToken('k', ['kk', 2], 0, kFormat);

                        addFormatToken('hmm', 0, 0, function() {
                            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
                        });

                        addFormatToken('hmmss', 0, 0, function() {
                            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
                                zeroFill(this.seconds(), 2);
                        });

                        addFormatToken('Hmm', 0, 0, function() {
                            return '' + this.hours() + zeroFill(this.minutes(), 2);
                        });

                        addFormatToken('Hmmss', 0, 0, function() {
                            return '' + this.hours() + zeroFill(this.minutes(), 2) +
                                zeroFill(this.seconds(), 2);
                        });

                        function meridiem(token, lowercase) {
                            addFormatToken(token, 0, 0, function() {
                                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
                            });
                        }

                        meridiem('a', true);
                        meridiem('A', false);

                        // ALIASES

                        addUnitAlias('hour', 'h');

                        // PRIORITY
                        addUnitPriority('hour', 13);

                        // PARSING

                        function matchMeridiem(isStrict, locale) {
                            return locale._meridiemParse;
                        }

                        addRegexToken('a', matchMeridiem);
                        addRegexToken('A', matchMeridiem);
                        addRegexToken('H', match1to2);
                        addRegexToken('h', match1to2);
                        addRegexToken('k', match1to2);
                        addRegexToken('HH', match1to2, match2);
                        addRegexToken('hh', match1to2, match2);
                        addRegexToken('kk', match1to2, match2);

                        addRegexToken('hmm', match3to4);
                        addRegexToken('hmmss', match5to6);
                        addRegexToken('Hmm', match3to4);
                        addRegexToken('Hmmss', match5to6);

                        addParseToken(['H', 'HH'], HOUR);
                        addParseToken(['k', 'kk'], function(input, array, config) {
                            var kInput = toInt(input);
                            array[HOUR] = kInput === 24 ? 0 : kInput;
                        });
                        addParseToken(['a', 'A'], function(input, array, config) {
                            config._isPm = config._locale.isPM(input);
                            config._meridiem = input;
                        });
                        addParseToken(['h', 'hh'], function(input, array, config) {
                            array[HOUR] = toInt(input);
                            getParsingFlags(config).bigHour = true;
                        });
                        addParseToken('hmm', function(input, array, config) {
                            var pos = input.length - 2;
                            array[HOUR] = toInt(input.substr(0, pos));
                            array[MINUTE] = toInt(input.substr(pos));
                            getParsingFlags(config).bigHour = true;
                        });
                        addParseToken('hmmss', function(input, array, config) {
                            var pos1 = input.length - 4;
                            var pos2 = input.length - 2;
                            array[HOUR] = toInt(input.substr(0, pos1));
                            array[MINUTE] = toInt(input.substr(pos1, 2));
                            array[SECOND] = toInt(input.substr(pos2));
                            getParsingFlags(config).bigHour = true;
                        });
                        addParseToken('Hmm', function(input, array, config) {
                            var pos = input.length - 2;
                            array[HOUR] = toInt(input.substr(0, pos));
                            array[MINUTE] = toInt(input.substr(pos));
                        });
                        addParseToken('Hmmss', function(input, array, config) {
                            var pos1 = input.length - 4;
                            var pos2 = input.length - 2;
                            array[HOUR] = toInt(input.substr(0, pos1));
                            array[MINUTE] = toInt(input.substr(pos1, 2));
                            array[SECOND] = toInt(input.substr(pos2));
                        });

                        // LOCALES

                        function localeIsPM(input) {
                            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                            // Using charAt should be more compatible.
                            return ((input + '').toLowerCase().charAt(0) === 'p');
                        }

                        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

                        function localeMeridiem(hours, minutes, isLower) {
                            if (hours > 11) {
                                return isLower ? 'pm' : 'PM';
                            } else {
                                return isLower ? 'am' : 'AM';
                            }
                        }


                        // MOMENTS

                        // Setting the hour should keep the time, because the user explicitly
                        // specified which hour he wants. So trying to maintain the same hour (in
                        // a new timezone) makes sense. Adding/subtracting hours does not follow
                        // this rule.
                        var getSetHour = makeGetSet('Hours', true);

                        // months
                        // week
                        // weekdays
                        // meridiem
                        var baseConfig = {
                            calendar: defaultCalendar,
                            longDateFormat: defaultLongDateFormat,
                            invalidDate: defaultInvalidDate,
                            ordinal: defaultOrdinal,
                            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                            relativeTime: defaultRelativeTime,

                            months: defaultLocaleMonths,
                            monthsShort: defaultLocaleMonthsShort,

                            week: defaultLocaleWeek,

                            weekdays: defaultLocaleWeekdays,
                            weekdaysMin: defaultLocaleWeekdaysMin,
                            weekdaysShort: defaultLocaleWeekdaysShort,

                            meridiemParse: defaultLocaleMeridiemParse
                        };

                        // internal storage for locale config files
                        var locales = {};
                        var localeFamilies = {};
                        var globalLocale;

                        function normalizeLocale(key) {
                            return key ? key.toLowerCase().replace('_', '-') : key;
                        }

                        // pick the locale from the array
                        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
                        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
                        function chooseLocale(names) {
                            var i = 0,
                                j, next, locale, split;

                            while (i < names.length) {
                                split = normalizeLocale(names[i]).split('-');
                                j = split.length;
                                next = normalizeLocale(names[i + 1]);
                                next = next ? next.split('-') : null;
                                while (j > 0) {
                                    locale = loadLocale(split.slice(0, j).join('-'));
                                    if (locale) {
                                        return locale;
                                    }
                                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                                        //the next array item is better than a shallower substring of this one
                                        break;
                                    }
                                    j--;
                                }
                                i++;
                            }
                            return null;
                        }

                        function loadLocale(name) {
                            var oldLocale = null;
                            // TODO: Find a better way to register and load all the locales in Node
                            if (!locales[name] && (typeof module !== 'undefined') &&
                                module && module.exports) {
                                try {
                                    oldLocale = globalLocale._abbr;
                                    !(function webpackMissingModule() {
                                        var e = new Error("Cannot find module \"./locale\"");
                                        e.code = 'MODULE_NOT_FOUND';
                                        throw e;
                                    }());
                                    // because defineLocale currently also sets the global locale, we
                                    // want to undo that for lazy loaded locales
                                    getSetGlobalLocale(oldLocale);
                                } catch (e) {}
                            }
                            return locales[name];
                        }

                        // This function will load locale and then set the global locale.  If
                        // no arguments are passed in, it will simply return the current global
                        // locale key.
                        function getSetGlobalLocale(key, values) {
                            var data;
                            if (key) {
                                if (isUndefined(values)) {
                                    data = getLocale(key);
                                } else {
                                    data = defineLocale(key, values);
                                }

                                if (data) {
                                    // moment.duration._locale = moment._locale = data;
                                    globalLocale = data;
                                }
                            }

                            return globalLocale._abbr;
                        }

                        function defineLocale(name, config) {
                            if (config !== null) {
                                var parentConfig = baseConfig;
                                config.abbr = name;
                                if (locales[name] != null) {
                                    deprecateSimple('defineLocaleOverride',
                                        'use moment.updateLocale(localeName, config) to change ' +
                                        'an existing locale. moment.defineLocale(localeName, ' +
                                        'config) should only be used for creating a new locale ' +
                                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                                    parentConfig = locales[name]._config;
                                } else if (config.parentLocale != null) {
                                    if (locales[config.parentLocale] != null) {
                                        parentConfig = locales[config.parentLocale]._config;
                                    } else {
                                        if (!localeFamilies[config.parentLocale]) {
                                            localeFamilies[config.parentLocale] = [];
                                        }
                                        localeFamilies[config.parentLocale].push({
                                            name: name,
                                            config: config
                                        });
                                        return null;
                                    }
                                }
                                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                                if (localeFamilies[name]) {
                                    localeFamilies[name].forEach(function(x) {
                                        defineLocale(x.name, x.config);
                                    });
                                }

                                // backwards compat for now: also set the locale
                                // make sure we set the locale AFTER all child locales have been
                                // created, so we won't end up with the child locale set.
                                getSetGlobalLocale(name);


                                return locales[name];
                            } else {
                                // useful for testing
                                delete locales[name];
                                return null;
                            }
                        }

                        function updateLocale(name, config) {
                            if (config != null) {
                                var locale, parentConfig = baseConfig;
                                // MERGE
                                if (locales[name] != null) {
                                    parentConfig = locales[name]._config;
                                }
                                config = mergeConfigs(parentConfig, config);
                                locale = new Locale(config);
                                locale.parentLocale = locales[name];
                                locales[name] = locale;

                                // backwards compat for now: also set the locale
                                getSetGlobalLocale(name);
                            } else {
                                // pass null for config to unupdate, useful for tests
                                if (locales[name] != null) {
                                    if (locales[name].parentLocale != null) {
                                        locales[name] = locales[name].parentLocale;
                                    } else if (locales[name] != null) {
                                        delete locales[name];
                                    }
                                }
                            }
                            return locales[name];
                        }

                        // returns locale data
                        function getLocale(key) {
                            var locale;

                            if (key && key._locale && key._locale._abbr) {
                                key = key._locale._abbr;
                            }

                            if (!key) {
                                return globalLocale;
                            }

                            if (!isArray(key)) {
                                //short-circuit everything else
                                locale = loadLocale(key);
                                if (locale) {
                                    return locale;
                                }
                                key = [key];
                            }

                            return chooseLocale(key);
                        }

                        function listLocales() {
                            return keys$1(locales);
                        }

                        function checkOverflow(m) {
                            var overflow;
                            var a = m._a;

                            if (a && getParsingFlags(m).overflow === -2) {
                                overflow =
                                    a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :
                                    a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                                    a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                                    a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :
                                    a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :
                                    a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                                    -1;

                                if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                                    overflow = DATE;
                                }
                                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                                    overflow = WEEK;
                                }
                                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                                    overflow = WEEKDAY;
                                }

                                getParsingFlags(m).overflow = overflow;
                            }

                            return m;
                        }

                        // iso 8601 regex
                        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
                        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
                        var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

                        var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

                        var isoDates = [
                            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                            ['YYYY-DDD', /\d{4}-\d{3}/],
                            ['YYYY-MM', /\d{4}-\d\d/, false],
                            ['YYYYYYMMDD', /[+-]\d{10}/],
                            ['YYYYMMDD', /\d{8}/],
                            // YYYYMM is NOT allowed by the standard
                            ['GGGG[W]WWE', /\d{4}W\d{3}/],
                            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                            ['YYYYDDD', /\d{7}/]
                        ];

                        // iso time formats and regexes
                        var isoTimes = [
                            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                            ['HH:mm', /\d\d:\d\d/],
                            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                            ['HHmmss', /\d\d\d\d\d\d/],
                            ['HHmm', /\d\d\d\d/],
                            ['HH', /\d\d/]
                        ];

                        var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

                        // date from iso format
                        function configFromISO(config) {
                            var i, l,
                                string = config._i,
                                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                                allowTime, dateFormat, timeFormat, tzFormat;

                            if (match) {
                                getParsingFlags(config).iso = true;

                                for (i = 0, l = isoDates.length; i < l; i++) {
                                    if (isoDates[i][1].exec(match[1])) {
                                        dateFormat = isoDates[i][0];
                                        allowTime = isoDates[i][2] !== false;
                                        break;
                                    }
                                }
                                if (dateFormat == null) {
                                    config._isValid = false;
                                    return;
                                }
                                if (match[3]) {
                                    for (i = 0, l = isoTimes.length; i < l; i++) {
                                        if (isoTimes[i][1].exec(match[3])) {
                                            // match[2] should be 'T' or space
                                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                                            break;
                                        }
                                    }
                                    if (timeFormat == null) {
                                        config._isValid = false;
                                        return;
                                    }
                                }
                                if (!allowTime && timeFormat != null) {
                                    config._isValid = false;
                                    return;
                                }
                                if (match[4]) {
                                    if (tzRegex.exec(match[4])) {
                                        tzFormat = 'Z';
                                    } else {
                                        config._isValid = false;
                                        return;
                                    }
                                }
                                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                                configFromStringAndFormat(config);
                            } else {
                                config._isValid = false;
                            }
                        }

                        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
                        var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

                        // date and time from ref 2822 format
                        function configFromRFC2822(config) {
                            var string, match, dayFormat,
                                dateFormat, timeFormat, tzFormat;
                            var timezones = {
                                ' GMT': ' +0000',
                                ' EDT': ' -0400',
                                ' EST': ' -0500',
                                ' CDT': ' -0500',
                                ' CST': ' -0600',
                                ' MDT': ' -0600',
                                ' MST': ' -0700',
                                ' PDT': ' -0700',
                                ' PST': ' -0800'
                            };
                            var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
                            var timezone, timezoneIndex;

                            string = config._i
                                .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
                                .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
                                .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
                            match = basicRfcRegex.exec(string);

                            if (match) {
                                dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
                                dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
                                timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

                                // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
                                if (match[1]) { // day of week given
                                    var momentDate = new Date(match[2]);
                                    var momentDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][momentDate.getDay()];

                                    if (match[1].substr(0, 3) !== momentDay) {
                                        getParsingFlags(config).weekdayMismatch = true;
                                        config._isValid = false;
                                        return;
                                    }
                                }

                                switch (match[5].length) {
                                    case 2: // military
                                        if (timezoneIndex === 0) {
                                            timezone = ' +0000';
                                        } else {
                                            timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                                            timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                                                (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                                        }
                                        break;
                                    case 4: // Zone
                                        timezone = timezones[match[5]];
                                        break;
                                    default: // UT or +/-9999
                                        timezone = timezones[' GMT'];
                                }
                                match[5] = timezone;
                                config._i = match.splice(1).join('');
                                tzFormat = ' ZZ';
                                config._f = dayFormat + dateFormat + timeFormat + tzFormat;
                                configFromStringAndFormat(config);
                                getParsingFlags(config).rfc2822 = true;
                            } else {
                                config._isValid = false;
                            }
                        }

                        // date from iso format or fallback
                        function configFromString(config) {
                            var matched = aspNetJsonRegex.exec(config._i);

                            if (matched !== null) {
                                config._d = new Date(+matched[1]);
                                return;
                            }

                            configFromISO(config);
                            if (config._isValid === false) {
                                delete config._isValid;
                            } else {
                                return;
                            }

                            configFromRFC2822(config);
                            if (config._isValid === false) {
                                delete config._isValid;
                            } else {
                                return;
                            }

                            // Final attempt, use Input Fallback
                            hooks.createFromInputFallback(config);
                        }

                        hooks.createFromInputFallback = deprecate(
                            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                            'discouraged and will be removed in an upcoming major release. Please refer to ' +
                            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
                            function(config) {
                                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
                            }
                        );

                        // Pick the first defined of two or three arguments.
                        function defaults(a, b, c) {
                            if (a != null) {
                                return a;
                            }
                            if (b != null) {
                                return b;
                            }
                            return c;
                        }

                        function currentDateArray(config) {
                            // hooks is actually the exported moment object
                            var nowValue = new Date(hooks.now());
                            if (config._useUTC) {
                                return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
                            }
                            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
                        }

                        // convert an array to a date.
                        // the array should mirror the parameters below
                        // note: all values past the year are optional and will default to the lowest possible value.
                        // [year, month, day , hour, minute, second, millisecond]
                        function configFromArray(config) {
                            var i, date, input = [],
                                currentDate, yearToUse;

                            if (config._d) {
                                return;
                            }

                            currentDate = currentDateArray(config);

                            //compute day of the year from weeks and weekdays
                            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                                dayOfYearFromWeekInfo(config);
                            }

                            //if the day of the year is set, figure out what it is
                            if (config._dayOfYear != null) {
                                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                                if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                                    getParsingFlags(config)._overflowDayOfYear = true;
                                }

                                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                                config._a[MONTH] = date.getUTCMonth();
                                config._a[DATE] = date.getUTCDate();
                            }

                            // Default to current date.
                            // * if no year, month, day of month are given, default to today
                            // * if day of month is given, default month and year
                            // * if month is given, default only year
                            // * if year is given, don't default anything
                            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                                config._a[i] = input[i] = currentDate[i];
                            }

                            // Zero out whatever was not defaulted, including time
                            for (; i < 7; i++) {
                                config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
                            }

                            // Check for 24:00:00.000
                            if (config._a[HOUR] === 24 &&
                                config._a[MINUTE] === 0 &&
                                config._a[SECOND] === 0 &&
                                config._a[MILLISECOND] === 0) {
                                config._nextDay = true;
                                config._a[HOUR] = 0;
                            }

                            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
                            // Apply timezone offset from input. The actual utcOffset can be changed
                            // with parseZone.
                            if (config._tzm != null) {
                                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                            }

                            if (config._nextDay) {
                                config._a[HOUR] = 24;
                            }
                        }

                        function dayOfYearFromWeekInfo(config) {
                            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

                            w = config._w;
                            if (w.GG != null || w.W != null || w.E != null) {
                                dow = 1;
                                doy = 4;

                                // TODO: We need to take the current isoWeekYear, but that depends on
                                // how we interpret now (local, utc, fixed offset). So create
                                // a now version of current config (take local/utc/offset flags, and
                                // create now).
                                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                                week = defaults(w.W, 1);
                                weekday = defaults(w.E, 1);
                                if (weekday < 1 || weekday > 7) {
                                    weekdayOverflow = true;
                                }
                            } else {
                                dow = config._locale._week.dow;
                                doy = config._locale._week.doy;

                                var curWeek = weekOfYear(createLocal(), dow, doy);

                                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                                // Default to current week.
                                week = defaults(w.w, curWeek.week);

                                if (w.d != null) {
                                    // weekday -- low day numbers are considered next week
                                    weekday = w.d;
                                    if (weekday < 0 || weekday > 6) {
                                        weekdayOverflow = true;
                                    }
                                } else if (w.e != null) {
                                    // local weekday -- counting starts from begining of week
                                    weekday = w.e + dow;
                                    if (w.e < 0 || w.e > 6) {
                                        weekdayOverflow = true;
                                    }
                                } else {
                                    // default to begining of week
                                    weekday = dow;
                                }
                            }
                            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                                getParsingFlags(config)._overflowWeeks = true;
                            } else if (weekdayOverflow != null) {
                                getParsingFlags(config)._overflowWeekday = true;
                            } else {
                                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                                config._a[YEAR] = temp.year;
                                config._dayOfYear = temp.dayOfYear;
                            }
                        }

                        // constant that refers to the ISO standard
                        hooks.ISO_8601 = function() {};

                        // constant that refers to the RFC 2822 form
                        hooks.RFC_2822 = function() {};

                        // date from string and format string
                        function configFromStringAndFormat(config) {
                            // TODO: Move this to another part of the creation flow to prevent circular deps
                            if (config._f === hooks.ISO_8601) {
                                configFromISO(config);
                                return;
                            }
                            if (config._f === hooks.RFC_2822) {
                                configFromRFC2822(config);
                                return;
                            }
                            config._a = [];
                            getParsingFlags(config).empty = true;

                            // This array is used to make a Date, either with `new Date` or `Date.UTC`
                            var string = '' + config._i,
                                i, parsedInput, tokens, token, skipped,
                                stringLength = string.length,
                                totalParsedInputLength = 0;

                            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

                            for (i = 0; i < tokens.length; i++) {
                                token = tokens[i];
                                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                                // console.log('token', token, 'parsedInput', parsedInput,
                                //         'regex', getParseRegexForToken(token, config));
                                if (parsedInput) {
                                    skipped = string.substr(0, string.indexOf(parsedInput));
                                    if (skipped.length > 0) {
                                        getParsingFlags(config).unusedInput.push(skipped);
                                    }
                                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                                    totalParsedInputLength += parsedInput.length;
                                }
                                // don't parse if it's not a known token
                                if (formatTokenFunctions[token]) {
                                    if (parsedInput) {
                                        getParsingFlags(config).empty = false;
                                    } else {
                                        getParsingFlags(config).unusedTokens.push(token);
                                    }
                                    addTimeToArrayFromToken(token, parsedInput, config);
                                } else if (config._strict && !parsedInput) {
                                    getParsingFlags(config).unusedTokens.push(token);
                                }
                            }

                            // add remaining unparsed input length to the string
                            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
                            if (string.length > 0) {
                                getParsingFlags(config).unusedInput.push(string);
                            }

                            // clear _12h flag if hour is <= 12
                            if (config._a[HOUR] <= 12 &&
                                getParsingFlags(config).bigHour === true &&
                                config._a[HOUR] > 0) {
                                getParsingFlags(config).bigHour = undefined;
                            }

                            getParsingFlags(config).parsedDateParts = config._a.slice(0);
                            getParsingFlags(config).meridiem = config._meridiem;
                            // handle meridiem
                            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

                            configFromArray(config);
                            checkOverflow(config);
                        }


                        function meridiemFixWrap(locale, hour, meridiem) {
                            var isPm;

                            if (meridiem == null) {
                                // nothing to do
                                return hour;
                            }
                            if (locale.meridiemHour != null) {
                                return locale.meridiemHour(hour, meridiem);
                            } else if (locale.isPM != null) {
                                // Fallback
                                isPm = locale.isPM(meridiem);
                                if (isPm && hour < 12) {
                                    hour += 12;
                                }
                                if (!isPm && hour === 12) {
                                    hour = 0;
                                }
                                return hour;
                            } else {
                                // this is not supposed to happen
                                return hour;
                            }
                        }

                        // date from string and array of format strings
                        function configFromStringAndArray(config) {
                            var tempConfig,
                                bestMoment,

                                scoreToBeat,
                                i,
                                currentScore;

                            if (config._f.length === 0) {
                                getParsingFlags(config).invalidFormat = true;
                                config._d = new Date(NaN);
                                return;
                            }

                            for (i = 0; i < config._f.length; i++) {
                                currentScore = 0;
                                tempConfig = copyConfig({}, config);
                                if (config._useUTC != null) {
                                    tempConfig._useUTC = config._useUTC;
                                }
                                tempConfig._f = config._f[i];
                                configFromStringAndFormat(tempConfig);

                                if (!isValid(tempConfig)) {
                                    continue;
                                }

                                // if there is any input that was not parsed add a penalty for that format
                                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                                //or tokens
                                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                                getParsingFlags(tempConfig).score = currentScore;

                                if (scoreToBeat == null || currentScore < scoreToBeat) {
                                    scoreToBeat = currentScore;
                                    bestMoment = tempConfig;
                                }
                            }

                            extend(config, bestMoment || tempConfig);
                        }

                        function configFromObject(config) {
                            if (config._d) {
                                return;
                            }

                            var i = normalizeObjectUnits(config._i);
                            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function(obj) {
                                return obj && parseInt(obj, 10);
                            });

                            configFromArray(config);
                        }

                        function createFromConfig(config) {
                            var res = new Moment(checkOverflow(prepareConfig(config)));
                            if (res._nextDay) {
                                // Adding is smart enough around DST
                                res.add(1, 'd');
                                res._nextDay = undefined;
                            }

                            return res;
                        }

                        function prepareConfig(config) {
                            var input = config._i,
                                format = config._f;

                            config._locale = config._locale || getLocale(config._l);

                            if (input === null || (format === undefined && input === '')) {
                                return createInvalid({ nullInput: true });
                            }

                            if (typeof input === 'string') {
                                config._i = input = config._locale.preparse(input);
                            }

                            if (isMoment(input)) {
                                return new Moment(checkOverflow(input));
                            } else if (isDate(input)) {
                                config._d = input;
                            } else if (isArray(format)) {
                                configFromStringAndArray(config);
                            } else if (format) {
                                configFromStringAndFormat(config);
                            } else {
                                configFromInput(config);
                            }

                            if (!isValid(config)) {
                                config._d = null;
                            }

                            return config;
                        }

                        function configFromInput(config) {
                            var input = config._i;
                            if (isUndefined(input)) {
                                config._d = new Date(hooks.now());
                            } else if (isDate(input)) {
                                config._d = new Date(input.valueOf());
                            } else if (typeof input === 'string') {
                                configFromString(config);
                            } else if (isArray(input)) {
                                config._a = map(input.slice(0), function(obj) {
                                    return parseInt(obj, 10);
                                });
                                configFromArray(config);
                            } else if (isObject(input)) {
                                configFromObject(config);
                            } else if (isNumber(input)) {
                                // from milliseconds
                                config._d = new Date(input);
                            } else {
                                hooks.createFromInputFallback(config);
                            }
                        }

                        function createLocalOrUTC(input, format, locale, strict, isUTC) {
                            var c = {};

                            if (locale === true || locale === false) {
                                strict = locale;
                                locale = undefined;
                            }

                            if ((isObject(input) && isObjectEmpty(input)) ||
                                (isArray(input) && input.length === 0)) {
                                input = undefined;
                            }
                            // object construction must be done this way.
                            // https://github.com/moment/moment/issues/1423
                            c._isAMomentObject = true;
                            c._useUTC = c._isUTC = isUTC;
                            c._l = locale;
                            c._i = input;
                            c._f = format;
                            c._strict = strict;

                            return createFromConfig(c);
                        }

                        function createLocal(input, format, locale, strict) {
                            return createLocalOrUTC(input, format, locale, strict, false);
                        }

                        var prototypeMin = deprecate(
                            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                            function() {
                                var other = createLocal.apply(null, arguments);
                                if (this.isValid() && other.isValid()) {
                                    return other < this ? this : other;
                                } else {
                                    return createInvalid();
                                }
                            }
                        );

                        var prototypeMax = deprecate(
                            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                            function() {
                                var other = createLocal.apply(null, arguments);
                                if (this.isValid() && other.isValid()) {
                                    return other > this ? this : other;
                                } else {
                                    return createInvalid();
                                }
                            }
                        );

                        // Pick a moment m from moments so that m[fn](other) is true for all
                        // other. This relies on the function fn to be transitive.
                        //
                        // moments should either be an array of moment objects or an array, whose
                        // first element is an array of moment objects.
                        function pickBy(fn, moments) {
                            var res, i;
                            if (moments.length === 1 && isArray(moments[0])) {
                                moments = moments[0];
                            }
                            if (!moments.length) {
                                return createLocal();
                            }
                            res = moments[0];
                            for (i = 1; i < moments.length; ++i) {
                                if (!moments[i].isValid() || moments[i][fn](res)) {
                                    res = moments[i];
                                }
                            }
                            return res;
                        }

                        // TODO: Use [].sort instead?
                        function min() {
                            var args = [].slice.call(arguments, 0);

                            return pickBy('isBefore', args);
                        }

                        function max() {
                            var args = [].slice.call(arguments, 0);

                            return pickBy('isAfter', args);
                        }

                        var now = function() {
                            return Date.now ? Date.now() : +(new Date());
                        };

                        var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

                        function isDurationValid(m) {
                            for (var key in m) {
                                if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                                    return false;
                                }
                            }

                            var unitHasDecimal = false;
                            for (var i = 0; i < ordering.length; ++i) {
                                if (m[ordering[i]]) {
                                    if (unitHasDecimal) {
                                        return false; // only allow non-integers for smallest unit
                                    }
                                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                                        unitHasDecimal = true;
                                    }
                                }
                            }

                            return true;
                        }

                        function isValid$1() {
                            return this._isValid;
                        }

                        function createInvalid$1() {
                            return createDuration(NaN);
                        }

                        function Duration(duration) {
                            var normalizedInput = normalizeObjectUnits(duration),
                                years = normalizedInput.year || 0,
                                quarters = normalizedInput.quarter || 0,
                                months = normalizedInput.month || 0,
                                weeks = normalizedInput.week || 0,
                                days = normalizedInput.day || 0,
                                hours = normalizedInput.hour || 0,
                                minutes = normalizedInput.minute || 0,
                                seconds = normalizedInput.second || 0,
                                milliseconds = normalizedInput.millisecond || 0;

                            this._isValid = isDurationValid(normalizedInput);

                            // representation for dateAddRemove
                            this._milliseconds = +milliseconds +
                                seconds * 1e3 + // 1000
                                minutes * 6e4 + // 1000 * 60
                                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
                            // Because of dateAddRemove treats 24 hours as different from a
                            // day when working around DST, we need to store them separately
                            this._days = +days +
                                weeks * 7;
                            // It is impossible translate months into days without knowing
                            // which months you are are talking about, so we have to store
                            // it separately.
                            this._months = +months +
                                quarters * 3 +
                                years * 12;

                            this._data = {};

                            this._locale = getLocale();

                            this._bubble();
                        }

                        function isDuration(obj) {
                            return obj instanceof Duration;
                        }

                        function absRound(number) {
                            if (number < 0) {
                                return Math.round(-1 * number) * -1;
                            } else {
                                return Math.round(number);
                            }
                        }

                        // FORMATTING

                        function offset(token, separator) {
                            addFormatToken(token, 0, 0, function() {
                                var offset = this.utcOffset();
                                var sign = '+';
                                if (offset < 0) {
                                    offset = -offset;
                                    sign = '-';
                                }
                                return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
                            });
                        }

                        offset('Z', ':');
                        offset('ZZ', '');

                        // PARSING

                        addRegexToken('Z', matchShortOffset);
                        addRegexToken('ZZ', matchShortOffset);
                        addParseToken(['Z', 'ZZ'], function(input, array, config) {
                            config._useUTC = true;
                            config._tzm = offsetFromString(matchShortOffset, input);
                        });

                        // HELPERS

                        // timezone chunker
                        // '+10:00' > ['10',  '00']
                        // '-1530'  > ['-15', '30']
                        var chunkOffset = /([\+\-]|\d\d)/gi;

                        function offsetFromString(matcher, string) {
                            var matches = (string || '').match(matcher);

                            if (matches === null) {
                                return null;
                            }

                            var chunk = matches[matches.length - 1] || [];
                            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
                            var minutes = +(parts[1] * 60) + toInt(parts[2]);

                            return minutes === 0 ?
                                0 :
                                parts[0] === '+' ? minutes : -minutes;
                        }

                        // Return a moment from input, that is local/utc/zone equivalent to model.
                        function cloneWithOffset(input, model) {
                            var res, diff;
                            if (model._isUTC) {
                                res = model.clone();
                                diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
                                // Use low-level api, because this fn is low-level api.
                                res._d.setTime(res._d.valueOf() + diff);
                                hooks.updateOffset(res, false);
                                return res;
                            } else {
                                return createLocal(input).local();
                            }
                        }

                        function getDateOffset(m) {
                            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                            // https://github.com/moment/moment/pull/1871
                            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
                        }

                        // HOOKS

                        // This function will be called whenever a moment is mutated.
                        // It is intended to keep the offset in sync with the timezone.
                        hooks.updateOffset = function() {};

                        // MOMENTS

                        // keepLocalTime = true means only change the timezone, without
                        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
                        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
                        // +0200, so we adjust the time as needed, to be valid.
                        //
                        // Keeping the time actually adds/subtracts (one hour)
                        // from the actual represented time. That is why we call updateOffset
                        // a second time. In case it wants us to change the offset again
                        // _changeInProgress == true case, then we have to adjust, because
                        // there is no such time in the given timezone.
                        function getSetOffset(input, keepLocalTime, keepMinutes) {
                            var offset = this._offset || 0,
                                localAdjust;
                            if (!this.isValid()) {
                                return input != null ? this : NaN;
                            }
                            if (input != null) {
                                if (typeof input === 'string') {
                                    input = offsetFromString(matchShortOffset, input);
                                    if (input === null) {
                                        return this;
                                    }
                                } else if (Math.abs(input) < 16 && !keepMinutes) {
                                    input = input * 60;
                                }
                                if (!this._isUTC && keepLocalTime) {
                                    localAdjust = getDateOffset(this);
                                }
                                this._offset = input;
                                this._isUTC = true;
                                if (localAdjust != null) {
                                    this.add(localAdjust, 'm');
                                }
                                if (offset !== input) {
                                    if (!keepLocalTime || this._changeInProgress) {
                                        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                                    } else if (!this._changeInProgress) {
                                        this._changeInProgress = true;
                                        hooks.updateOffset(this, true);
                                        this._changeInProgress = null;
                                    }
                                }
                                return this;
                            } else {
                                return this._isUTC ? offset : getDateOffset(this);
                            }
                        }

                        function getSetZone(input, keepLocalTime) {
                            if (input != null) {
                                if (typeof input !== 'string') {
                                    input = -input;
                                }

                                this.utcOffset(input, keepLocalTime);

                                return this;
                            } else {
                                return -this.utcOffset();
                            }
                        }

                        function setOffsetToUTC(keepLocalTime) {
                            return this.utcOffset(0, keepLocalTime);
                        }

                        function setOffsetToLocal(keepLocalTime) {
                            if (this._isUTC) {
                                this.utcOffset(0, keepLocalTime);
                                this._isUTC = false;

                                if (keepLocalTime) {
                                    this.subtract(getDateOffset(this), 'm');
                                }
                            }
                            return this;
                        }

                        function setOffsetToParsedOffset() {
                            if (this._tzm != null) {
                                this.utcOffset(this._tzm, false, true);
                            } else if (typeof this._i === 'string') {
                                var tZone = offsetFromString(matchOffset, this._i);
                                if (tZone != null) {
                                    this.utcOffset(tZone);
                                } else {
                                    this.utcOffset(0, true);
                                }
                            }
                            return this;
                        }

                        function hasAlignedHourOffset(input) {
                            if (!this.isValid()) {
                                return false;
                            }
                            input = input ? createLocal(input).utcOffset() : 0;

                            return (this.utcOffset() - input) % 60 === 0;
                        }

                        function isDaylightSavingTime() {
                            return (
                                this.utcOffset() > this.clone().month(0).utcOffset() ||
                                this.utcOffset() > this.clone().month(5).utcOffset()
                            );
                        }

                        function isDaylightSavingTimeShifted() {
                            if (!isUndefined(this._isDSTShifted)) {
                                return this._isDSTShifted;
                            }

                            var c = {};

                            copyConfig(c, this);
                            c = prepareConfig(c);

                            if (c._a) {
                                var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                                this._isDSTShifted = this.isValid() &&
                                    compareArrays(c._a, other.toArray()) > 0;
                            } else {
                                this._isDSTShifted = false;
                            }

                            return this._isDSTShifted;
                        }

                        function isLocal() {
                            return this.isValid() ? !this._isUTC : false;
                        }

                        function isUtcOffset() {
                            return this.isValid() ? this._isUTC : false;
                        }

                        function isUtc() {
                            return this.isValid() ? this._isUTC && this._offset === 0 : false;
                        }

                        // ASP.NET json date format regex
                        var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

                        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
                        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
                        // and further modified to allow for strings containing both week and day
                        var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

                        function createDuration(input, key) {
                            var duration = input,
                                // matching against regexp is expensive, do it on demand
                                match = null,
                                sign,
                                ret,
                                diffRes;

                            if (isDuration(input)) {
                                duration = {
                                    ms: input._milliseconds,
                                    d: input._days,
                                    M: input._months
                                };
                            } else if (isNumber(input)) {
                                duration = {};
                                if (key) {
                                    duration[key] = input;
                                } else {
                                    duration.milliseconds = input;
                                }
                            } else if (!!(match = aspNetRegex.exec(input))) {
                                sign = (match[1] === '-') ? -1 : 1;
                                duration = {
                                    y: 0,
                                    d: toInt(match[DATE]) * sign,
                                    h: toInt(match[HOUR]) * sign,
                                    m: toInt(match[MINUTE]) * sign,
                                    s: toInt(match[SECOND]) * sign,
                                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
                                };
                            } else if (!!(match = isoRegex.exec(input))) {
                                sign = (match[1] === '-') ? -1 : 1;
                                duration = {
                                    y: parseIso(match[2], sign),
                                    M: parseIso(match[3], sign),
                                    w: parseIso(match[4], sign),
                                    d: parseIso(match[5], sign),
                                    h: parseIso(match[6], sign),
                                    m: parseIso(match[7], sign),
                                    s: parseIso(match[8], sign)
                                };
                            } else if (duration == null) { // checks for null or undefined
                                duration = {};
                            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
                                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

                                duration = {};
                                duration.ms = diffRes.milliseconds;
                                duration.M = diffRes.months;
                            }

                            ret = new Duration(duration);

                            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                                ret._locale = input._locale;
                            }

                            return ret;
                        }

                        createDuration.fn = Duration.prototype;
                        createDuration.invalid = createInvalid$1;

                        function parseIso(inp, sign) {
                            // We'd normally use ~~inp for this, but unfortunately it also
                            // converts floats to ints.
                            // inp may be undefined, so careful calling replace on it.
                            var res = inp && parseFloat(inp.replace(',', '.'));
                            // apply sign while we're at it
                            return (isNaN(res) ? 0 : res) * sign;
                        }

                        function positiveMomentsDifference(base, other) {
                            var res = { milliseconds: 0, months: 0 };

                            res.months = other.month() - base.month() +
                                (other.year() - base.year()) * 12;
                            if (base.clone().add(res.months, 'M').isAfter(other)) {
                                --res.months;
                            }

                            res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

                            return res;
                        }

                        function momentsDifference(base, other) {
                            var res;
                            if (!(base.isValid() && other.isValid())) {
                                return { milliseconds: 0, months: 0 };
                            }

                            other = cloneWithOffset(other, base);
                            if (base.isBefore(other)) {
                                res = positiveMomentsDifference(base, other);
                            } else {
                                res = positiveMomentsDifference(other, base);
                                res.milliseconds = -res.milliseconds;
                                res.months = -res.months;
                            }

                            return res;
                        }

                        // TODO: remove 'name' arg after deprecation is removed
                        function createAdder(direction, name) {
                            return function(val, period) {
                                var dur, tmp;
                                //invert the arguments, but complain about it
                                if (period !== null && !isNaN(+period)) {
                                    deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                                    tmp = val;
                                    val = period;
                                    period = tmp;
                                }

                                val = typeof val === 'string' ? +val : val;
                                dur = createDuration(val, period);
                                addSubtract(this, dur, direction);
                                return this;
                            };
                        }

                        function addSubtract(mom, duration, isAdding, updateOffset) {
                            var milliseconds = duration._milliseconds,
                                days = absRound(duration._days),
                                months = absRound(duration._months);

                            if (!mom.isValid()) {
                                // No op
                                return;
                            }

                            updateOffset = updateOffset == null ? true : updateOffset;

                            if (milliseconds) {
                                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
                            }
                            if (days) {
                                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
                            }
                            if (months) {
                                setMonth(mom, get(mom, 'Month') + months * isAdding);
                            }
                            if (updateOffset) {
                                hooks.updateOffset(mom, days || months);
                            }
                        }

                        var add = createAdder(1, 'add');
                        var subtract = createAdder(-1, 'subtract');

                        function getCalendarFormat(myMoment, now) {
                            var diff = myMoment.diff(now, 'days', true);
                            return diff < -6 ? 'sameElse' :
                                diff < -1 ? 'lastWeek' :
                                diff < 0 ? 'lastDay' :
                                diff < 1 ? 'sameDay' :
                                diff < 2 ? 'nextDay' :
                                diff < 7 ? 'nextWeek' : 'sameElse';
                        }

                        function calendar$1(time, formats) {
                            // We want to compare the start of today, vs this.
                            // Getting start-of-today depends on whether we're local/utc/offset or not.
                            var now = time || createLocal(),
                                sod = cloneWithOffset(now, this).startOf('day'),
                                format = hooks.calendarFormat(this, sod) || 'sameElse';

                            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

                            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
                        }

                        function clone() {
                            return new Moment(this);
                        }

                        function isAfter(input, units) {
                            var localInput = isMoment(input) ? input : createLocal(input);
                            if (!(this.isValid() && localInput.isValid())) {
                                return false;
                            }
                            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
                            if (units === 'millisecond') {
                                return this.valueOf() > localInput.valueOf();
                            } else {
                                return localInput.valueOf() < this.clone().startOf(units).valueOf();
                            }
                        }

                        function isBefore(input, units) {
                            var localInput = isMoment(input) ? input : createLocal(input);
                            if (!(this.isValid() && localInput.isValid())) {
                                return false;
                            }
                            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
                            if (units === 'millisecond') {
                                return this.valueOf() < localInput.valueOf();
                            } else {
                                return this.clone().endOf(units).valueOf() < localInput.valueOf();
                            }
                        }

                        function isBetween(from, to, units, inclusivity) {
                            inclusivity = inclusivity || '()';
                            return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
                                (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
                        }

                        function isSame(input, units) {
                            var localInput = isMoment(input) ? input : createLocal(input),
                                inputMs;
                            if (!(this.isValid() && localInput.isValid())) {
                                return false;
                            }
                            units = normalizeUnits(units || 'millisecond');
                            if (units === 'millisecond') {
                                return this.valueOf() === localInput.valueOf();
                            } else {
                                inputMs = localInput.valueOf();
                                return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
                            }
                        }

                        function isSameOrAfter(input, units) {
                            return this.isSame(input, units) || this.isAfter(input, units);
                        }

                        function isSameOrBefore(input, units) {
                            return this.isSame(input, units) || this.isBefore(input, units);
                        }

                        function diff(input, units, asFloat) {
                            var that,
                                zoneDelta,
                                delta, output;

                            if (!this.isValid()) {
                                return NaN;
                            }

                            that = cloneWithOffset(input, this);

                            if (!that.isValid()) {
                                return NaN;
                            }

                            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

                            units = normalizeUnits(units);

                            if (units === 'year' || units === 'month' || units === 'quarter') {
                                output = monthDiff(this, that);
                                if (units === 'quarter') {
                                    output = output / 3;
                                } else if (units === 'year') {
                                    output = output / 12;
                                }
                            } else {
                                delta = this - that;
                                output = units === 'second' ? delta / 1e3 : // 1000
                                    units === 'minute' ? delta / 6e4 : // 1000 * 60
                                    units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                                    units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                                    units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                                    delta;
                            }
                            return asFloat ? output : absFloor(output);
                        }

                        function monthDiff(a, b) {
                            // difference in months
                            var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
                                // b is in (anchor - 1 month, anchor + 1 month)
                                anchor = a.clone().add(wholeMonthDiff, 'months'),
                                anchor2, adjust;

                            if (b - anchor < 0) {
                                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                                // linear across the month
                                adjust = (b - anchor) / (anchor - anchor2);
                            } else {
                                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                                // linear across the month
                                adjust = (b - anchor) / (anchor2 - anchor);
                            }

                            //check for negative zero, return zero if negative zero
                            return -(wholeMonthDiff + adjust) || 0;
                        }

                        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
                        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

                        function toString() {
                            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
                        }

                        function toISOString() {
                            if (!this.isValid()) {
                                return null;
                            }
                            var m = this.clone().utc();
                            if (m.year() < 0 || m.year() > 9999) {
                                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                            }
                            if (isFunction(Date.prototype.toISOString)) {
                                // native implementation is ~50x faster, use it when we can
                                return this.toDate().toISOString();
                            }
                            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                        }

                        /**
                         * Return a human readable representation of a moment that can
                         * also be evaluated to get a new moment which is the same
                         *
                         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
                         */
                        function inspect() {
                            if (!this.isValid()) {
                                return 'moment.invalid(/* ' + this._i + ' */)';
                            }
                            var func = 'moment';
                            var zone = '';
                            if (!this.isLocal()) {
                                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                                zone = 'Z';
                            }
                            var prefix = '[' + func + '("]';
                            var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
                            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
                            var suffix = zone + '[")]';

                            return this.format(prefix + year + datetime + suffix);
                        }

                        function format(inputString) {
                            if (!inputString) {
                                inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
                            }
                            var output = formatMoment(this, inputString);
                            return this.localeData().postformat(output);
                        }

                        function from(time, withoutSuffix) {
                            if (this.isValid() &&
                                ((isMoment(time) && time.isValid()) ||
                                    createLocal(time).isValid())) {
                                return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
                            } else {
                                return this.localeData().invalidDate();
                            }
                        }

                        function fromNow(withoutSuffix) {
                            return this.from(createLocal(), withoutSuffix);
                        }

                        function to(time, withoutSuffix) {
                            if (this.isValid() &&
                                ((isMoment(time) && time.isValid()) ||
                                    createLocal(time).isValid())) {
                                return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
                            } else {
                                return this.localeData().invalidDate();
                            }
                        }

                        function toNow(withoutSuffix) {
                            return this.to(createLocal(), withoutSuffix);
                        }

                        // If passed a locale key, it will set the locale for this
                        // instance.  Otherwise, it will return the locale configuration
                        // variables for this instance.
                        function locale(key) {
                            var newLocaleData;

                            if (key === undefined) {
                                return this._locale._abbr;
                            } else {
                                newLocaleData = getLocale(key);
                                if (newLocaleData != null) {
                                    this._locale = newLocaleData;
                                }
                                return this;
                            }
                        }

                        var lang = deprecate(
                            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
                            function(key) {
                                if (key === undefined) {
                                    return this.localeData();
                                } else {
                                    return this.locale(key);
                                }
                            }
                        );

                        function localeData() {
                            return this._locale;
                        }

                        function startOf(units) {
                            units = normalizeUnits(units);
                            // the following switch intentionally omits break keywords
                            // to utilize falling through the cases.
                            switch (units) {
                                case 'year':
                                    this.month(0);
                                    /* falls through */
                                case 'quarter':
                                case 'month':
                                    this.date(1);
                                    /* falls through */
                                case 'week':
                                case 'isoWeek':
                                case 'day':
                                case 'date':
                                    this.hours(0);
                                    /* falls through */
                                case 'hour':
                                    this.minutes(0);
                                    /* falls through */
                                case 'minute':
                                    this.seconds(0);
                                    /* falls through */
                                case 'second':
                                    this.milliseconds(0);
                            }

                            // weeks are a special case
                            if (units === 'week') {
                                this.weekday(0);
                            }
                            if (units === 'isoWeek') {
                                this.isoWeekday(1);
                            }

                            // quarters are also special
                            if (units === 'quarter') {
                                this.month(Math.floor(this.month() / 3) * 3);
                            }

                            return this;
                        }

                        function endOf(units) {
                            units = normalizeUnits(units);
                            if (units === undefined || units === 'millisecond') {
                                return this;
                            }

                            // 'date' is an alias for 'day', so it should be considered as such.
                            if (units === 'date') {
                                units = 'day';
                            }

                            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
                        }

                        function valueOf() {
                            return this._d.valueOf() - ((this._offset || 0) * 60000);
                        }

                        function unix() {
                            return Math.floor(this.valueOf() / 1000);
                        }

                        function toDate() {
                            return new Date(this.valueOf());
                        }

                        function toArray() {
                            var m = this;
                            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
                        }

                        function toObject() {
                            var m = this;
                            return {
                                years: m.year(),
                                months: m.month(),
                                date: m.date(),
                                hours: m.hours(),
                                minutes: m.minutes(),
                                seconds: m.seconds(),
                                milliseconds: m.milliseconds()
                            };
                        }

                        function toJSON() {
                            // new Date(NaN).toJSON() === null
                            return this.isValid() ? this.toISOString() : null;
                        }

                        function isValid$2() {
                            return isValid(this);
                        }

                        function parsingFlags() {
                            return extend({}, getParsingFlags(this));
                        }

                        function invalidAt() {
                            return getParsingFlags(this).overflow;
                        }

                        function creationData() {
                            return {
                                input: this._i,
                                format: this._f,
                                locale: this._locale,
                                isUTC: this._isUTC,
                                strict: this._strict
                            };
                        }

                        // FORMATTING

                        addFormatToken(0, ['gg', 2], 0, function() {
                            return this.weekYear() % 100;
                        });

                        addFormatToken(0, ['GG', 2], 0, function() {
                            return this.isoWeekYear() % 100;
                        });

                        function addWeekYearFormatToken(token, getter) {
                            addFormatToken(0, [token, token.length], 0, getter);
                        }

                        addWeekYearFormatToken('gggg', 'weekYear');
                        addWeekYearFormatToken('ggggg', 'weekYear');
                        addWeekYearFormatToken('GGGG', 'isoWeekYear');
                        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

                        // ALIASES

                        addUnitAlias('weekYear', 'gg');
                        addUnitAlias('isoWeekYear', 'GG');

                        // PRIORITY

                        addUnitPriority('weekYear', 1);
                        addUnitPriority('isoWeekYear', 1);


                        // PARSING

                        addRegexToken('G', matchSigned);
                        addRegexToken('g', matchSigned);
                        addRegexToken('GG', match1to2, match2);
                        addRegexToken('gg', match1to2, match2);
                        addRegexToken('GGGG', match1to4, match4);
                        addRegexToken('gggg', match1to4, match4);
                        addRegexToken('GGGGG', match1to6, match6);
                        addRegexToken('ggggg', match1to6, match6);

                        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(input, week, config, token) {
                            week[token.substr(0, 2)] = toInt(input);
                        });

                        addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
                            week[token] = hooks.parseTwoDigitYear(input);
                        });

                        // MOMENTS

                        function getSetWeekYear(input) {
                            return getSetWeekYearHelper.call(this,
                                input,
                                this.week(),
                                this.weekday(),
                                this.localeData()._week.dow,
                                this.localeData()._week.doy);
                        }

                        function getSetISOWeekYear(input) {
                            return getSetWeekYearHelper.call(this,
                                input, this.isoWeek(), this.isoWeekday(), 1, 4);
                        }

                        function getISOWeeksInYear() {
                            return weeksInYear(this.year(), 1, 4);
                        }

                        function getWeeksInYear() {
                            var weekInfo = this.localeData()._week;
                            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
                        }

                        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                            var weeksTarget;
                            if (input == null) {
                                return weekOfYear(this, dow, doy).year;
                            } else {
                                weeksTarget = weeksInYear(input, dow, doy);
                                if (week > weeksTarget) {
                                    week = weeksTarget;
                                }
                                return setWeekAll.call(this, input, week, weekday, dow, doy);
                            }
                        }

                        function setWeekAll(weekYear, week, weekday, dow, doy) {
                            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

                            this.year(date.getUTCFullYear());
                            this.month(date.getUTCMonth());
                            this.date(date.getUTCDate());
                            return this;
                        }

                        // FORMATTING

                        addFormatToken('Q', 0, 'Qo', 'quarter');

                        // ALIASES

                        addUnitAlias('quarter', 'Q');

                        // PRIORITY

                        addUnitPriority('quarter', 7);

                        // PARSING

                        addRegexToken('Q', match1);
                        addParseToken('Q', function(input, array) {
                            array[MONTH] = (toInt(input) - 1) * 3;
                        });

                        // MOMENTS

                        function getSetQuarter(input) {
                            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
                        }

                        // FORMATTING

                        addFormatToken('D', ['DD', 2], 'Do', 'date');

                        // ALIASES

                        addUnitAlias('date', 'D');

                        // PRIOROITY
                        addUnitPriority('date', 9);

                        // PARSING

                        addRegexToken('D', match1to2);
                        addRegexToken('DD', match1to2, match2);
                        addRegexToken('Do', function(isStrict, locale) {
                            // TODO: Remove "ordinalParse" fallback in next major release.
                            return isStrict ?
                                (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
                                locale._dayOfMonthOrdinalParseLenient;
                        });

                        addParseToken(['D', 'DD'], DATE);
                        addParseToken('Do', function(input, array) {
                            array[DATE] = toInt(input.match(match1to2)[0], 10);
                        });

                        // MOMENTS

                        var getSetDayOfMonth = makeGetSet('Date', true);

                        // FORMATTING

                        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

                        // ALIASES

                        addUnitAlias('dayOfYear', 'DDD');

                        // PRIORITY
                        addUnitPriority('dayOfYear', 4);

                        // PARSING

                        addRegexToken('DDD', match1to3);
                        addRegexToken('DDDD', match3);
                        addParseToken(['DDD', 'DDDD'], function(input, array, config) {
                            config._dayOfYear = toInt(input);
                        });

                        // HELPERS

                        // MOMENTS

                        function getSetDayOfYear(input) {
                            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
                            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
                        }

                        // FORMATTING

                        addFormatToken('m', ['mm', 2], 0, 'minute');

                        // ALIASES

                        addUnitAlias('minute', 'm');

                        // PRIORITY

                        addUnitPriority('minute', 14);

                        // PARSING

                        addRegexToken('m', match1to2);
                        addRegexToken('mm', match1to2, match2);
                        addParseToken(['m', 'mm'], MINUTE);

                        // MOMENTS

                        var getSetMinute = makeGetSet('Minutes', false);

                        // FORMATTING

                        addFormatToken('s', ['ss', 2], 0, 'second');

                        // ALIASES

                        addUnitAlias('second', 's');

                        // PRIORITY

                        addUnitPriority('second', 15);

                        // PARSING

                        addRegexToken('s', match1to2);
                        addRegexToken('ss', match1to2, match2);
                        addParseToken(['s', 'ss'], SECOND);

                        // MOMENTS

                        var getSetSecond = makeGetSet('Seconds', false);

                        // FORMATTING

                        addFormatToken('S', 0, 0, function() {
                            return ~~(this.millisecond() / 100);
                        });

                        addFormatToken(0, ['SS', 2], 0, function() {
                            return ~~(this.millisecond() / 10);
                        });

                        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
                        addFormatToken(0, ['SSSS', 4], 0, function() {
                            return this.millisecond() * 10;
                        });
                        addFormatToken(0, ['SSSSS', 5], 0, function() {
                            return this.millisecond() * 100;
                        });
                        addFormatToken(0, ['SSSSSS', 6], 0, function() {
                            return this.millisecond() * 1000;
                        });
                        addFormatToken(0, ['SSSSSSS', 7], 0, function() {
                            return this.millisecond() * 10000;
                        });
                        addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
                            return this.millisecond() * 100000;
                        });
                        addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
                            return this.millisecond() * 1000000;
                        });


                        // ALIASES

                        addUnitAlias('millisecond', 'ms');

                        // PRIORITY

                        addUnitPriority('millisecond', 16);

                        // PARSING

                        addRegexToken('S', match1to3, match1);
                        addRegexToken('SS', match1to3, match2);
                        addRegexToken('SSS', match1to3, match3);

                        var token;
                        for (token = 'SSSS'; token.length <= 9; token += 'S') {
                            addRegexToken(token, matchUnsigned);
                        }

                        function parseMs(input, array) {
                            array[MILLISECOND] = toInt(('0.' + input) * 1000);
                        }

                        for (token = 'S'; token.length <= 9; token += 'S') {
                            addParseToken(token, parseMs);
                        }
                        // MOMENTS

                        var getSetMillisecond = makeGetSet('Milliseconds', false);

                        // FORMATTING

                        addFormatToken('z', 0, 0, 'zoneAbbr');
                        addFormatToken('zz', 0, 0, 'zoneName');

                        // MOMENTS

                        function getZoneAbbr() {
                            return this._isUTC ? 'UTC' : '';
                        }

                        function getZoneName() {
                            return this._isUTC ? 'Coordinated Universal Time' : '';
                        }

                        var proto = Moment.prototype;

                        proto.add = add;
                        proto.calendar = calendar$1;
                        proto.clone = clone;
                        proto.diff = diff;
                        proto.endOf = endOf;
                        proto.format = format;
                        proto.from = from;
                        proto.fromNow = fromNow;
                        proto.to = to;
                        proto.toNow = toNow;
                        proto.get = stringGet;
                        proto.invalidAt = invalidAt;
                        proto.isAfter = isAfter;
                        proto.isBefore = isBefore;
                        proto.isBetween = isBetween;
                        proto.isSame = isSame;
                        proto.isSameOrAfter = isSameOrAfter;
                        proto.isSameOrBefore = isSameOrBefore;
                        proto.isValid = isValid$2;
                        proto.lang = lang;
                        proto.locale = locale;
                        proto.localeData = localeData;
                        proto.max = prototypeMax;
                        proto.min = prototypeMin;
                        proto.parsingFlags = parsingFlags;
                        proto.set = stringSet;
                        proto.startOf = startOf;
                        proto.subtract = subtract;
                        proto.toArray = toArray;
                        proto.toObject = toObject;
                        proto.toDate = toDate;
                        proto.toISOString = toISOString;
                        proto.inspect = inspect;
                        proto.toJSON = toJSON;
                        proto.toString = toString;
                        proto.unix = unix;
                        proto.valueOf = valueOf;
                        proto.creationData = creationData;

                        // Year
                        proto.year = getSetYear;
                        proto.isLeapYear = getIsLeapYear;

                        // Week Year
                        proto.weekYear = getSetWeekYear;
                        proto.isoWeekYear = getSetISOWeekYear;

                        // Quarter
                        proto.quarter = proto.quarters = getSetQuarter;

                        // Month
                        proto.month = getSetMonth;
                        proto.daysInMonth = getDaysInMonth;

                        // Week
                        proto.week = proto.weeks = getSetWeek;
                        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
                        proto.weeksInYear = getWeeksInYear;
                        proto.isoWeeksInYear = getISOWeeksInYear;

                        // Day
                        proto.date = getSetDayOfMonth;
                        proto.day = proto.days = getSetDayOfWeek;
                        proto.weekday = getSetLocaleDayOfWeek;
                        proto.isoWeekday = getSetISODayOfWeek;
                        proto.dayOfYear = getSetDayOfYear;

                        // Hour
                        proto.hour = proto.hours = getSetHour;

                        // Minute
                        proto.minute = proto.minutes = getSetMinute;

                        // Second
                        proto.second = proto.seconds = getSetSecond;

                        // Millisecond
                        proto.millisecond = proto.milliseconds = getSetMillisecond;

                        // Offset
                        proto.utcOffset = getSetOffset;
                        proto.utc = setOffsetToUTC;
                        proto.local = setOffsetToLocal;
                        proto.parseZone = setOffsetToParsedOffset;
                        proto.hasAlignedHourOffset = hasAlignedHourOffset;
                        proto.isDST = isDaylightSavingTime;
                        proto.isLocal = isLocal;
                        proto.isUtcOffset = isUtcOffset;
                        proto.isUtc = isUtc;
                        proto.isUTC = isUtc;

                        // Timezone
                        proto.zoneAbbr = getZoneAbbr;
                        proto.zoneName = getZoneName;

                        // Deprecations
                        proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
                        proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
                        proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
                        proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
                        proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

                        function createUnix(input) {
                            return createLocal(input * 1000);
                        }

                        function createInZone() {
                            return createLocal.apply(null, arguments).parseZone();
                        }

                        function preParsePostFormat(string) {
                            return string;
                        }

                        var proto$1 = Locale.prototype;

                        proto$1.calendar = calendar;
                        proto$1.longDateFormat = longDateFormat;
                        proto$1.invalidDate = invalidDate;
                        proto$1.ordinal = ordinal;
                        proto$1.preparse = preParsePostFormat;
                        proto$1.postformat = preParsePostFormat;
                        proto$1.relativeTime = relativeTime;
                        proto$1.pastFuture = pastFuture;
                        proto$1.set = set;

                        // Month
                        proto$1.months = localeMonths;
                        proto$1.monthsShort = localeMonthsShort;
                        proto$1.monthsParse = localeMonthsParse;
                        proto$1.monthsRegex = monthsRegex;
                        proto$1.monthsShortRegex = monthsShortRegex;

                        // Week
                        proto$1.week = localeWeek;
                        proto$1.firstDayOfYear = localeFirstDayOfYear;
                        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

                        // Day of Week
                        proto$1.weekdays = localeWeekdays;
                        proto$1.weekdaysMin = localeWeekdaysMin;
                        proto$1.weekdaysShort = localeWeekdaysShort;
                        proto$1.weekdaysParse = localeWeekdaysParse;

                        proto$1.weekdaysRegex = weekdaysRegex;
                        proto$1.weekdaysShortRegex = weekdaysShortRegex;
                        proto$1.weekdaysMinRegex = weekdaysMinRegex;

                        // Hours
                        proto$1.isPM = localeIsPM;
                        proto$1.meridiem = localeMeridiem;

                        function get$1(format, index, field, setter) {
                            var locale = getLocale();
                            var utc = createUTC().set(setter, index);
                            return locale[field](utc, format);
                        }

                        function listMonthsImpl(format, index, field) {
                            if (isNumber(format)) {
                                index = format;
                                format = undefined;
                            }

                            format = format || '';

                            if (index != null) {
                                return get$1(format, index, field, 'month');
                            }

                            var i;
                            var out = [];
                            for (i = 0; i < 12; i++) {
                                out[i] = get$1(format, i, field, 'month');
                            }
                            return out;
                        }

                        // ()
                        // (5)
                        // (fmt, 5)
                        // (fmt)
                        // (true)
                        // (true, 5)
                        // (true, fmt, 5)
                        // (true, fmt)
                        function listWeekdaysImpl(localeSorted, format, index, field) {
                            if (typeof localeSorted === 'boolean') {
                                if (isNumber(format)) {
                                    index = format;
                                    format = undefined;
                                }

                                format = format || '';
                            } else {
                                format = localeSorted;
                                index = format;
                                localeSorted = false;

                                if (isNumber(format)) {
                                    index = format;
                                    format = undefined;
                                }

                                format = format || '';
                            }

                            var locale = getLocale(),
                                shift = localeSorted ? locale._week.dow : 0;

                            if (index != null) {
                                return get$1(format, (index + shift) % 7, field, 'day');
                            }

                            var i;
                            var out = [];
                            for (i = 0; i < 7; i++) {
                                out[i] = get$1(format, (i + shift) % 7, field, 'day');
                            }
                            return out;
                        }

                        function listMonths(format, index) {
                            return listMonthsImpl(format, index, 'months');
                        }

                        function listMonthsShort(format, index) {
                            return listMonthsImpl(format, index, 'monthsShort');
                        }

                        function listWeekdays(localeSorted, format, index) {
                            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
                        }

                        function listWeekdaysShort(localeSorted, format, index) {
                            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
                        }

                        function listWeekdaysMin(localeSorted, format, index) {
                            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
                        }

                        getSetGlobalLocale('en', {
                            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                            ordinal: function(number) {
                                var b = number % 10,
                                    output = (toInt(number % 100 / 10) === 1) ? 'th' :
                                    (b === 1) ? 'st' :
                                    (b === 2) ? 'nd' :
                                    (b === 3) ? 'rd' : 'th';
                                return number + output;
                            }
                        });

                        // Side effect imports
                        hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
                        hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

                        var mathAbs = Math.abs;

                        function abs() {
                            var data = this._data;

                            this._milliseconds = mathAbs(this._milliseconds);
                            this._days = mathAbs(this._days);
                            this._months = mathAbs(this._months);

                            data.milliseconds = mathAbs(data.milliseconds);
                            data.seconds = mathAbs(data.seconds);
                            data.minutes = mathAbs(data.minutes);
                            data.hours = mathAbs(data.hours);
                            data.months = mathAbs(data.months);
                            data.years = mathAbs(data.years);

                            return this;
                        }

                        function addSubtract$1(duration, input, value, direction) {
                            var other = createDuration(input, value);

                            duration._milliseconds += direction * other._milliseconds;
                            duration._days += direction * other._days;
                            duration._months += direction * other._months;

                            return duration._bubble();
                        }

                        // supports only 2.0-style add(1, 's') or add(duration)
                        function add$1(input, value) {
                            return addSubtract$1(this, input, value, 1);
                        }

                        // supports only 2.0-style subtract(1, 's') or subtract(duration)
                        function subtract$1(input, value) {
                            return addSubtract$1(this, input, value, -1);
                        }

                        function absCeil(number) {
                            if (number < 0) {
                                return Math.floor(number);
                            } else {
                                return Math.ceil(number);
                            }
                        }

                        function bubble() {
                            var milliseconds = this._milliseconds;
                            var days = this._days;
                            var months = this._months;
                            var data = this._data;
                            var seconds, minutes, hours, years, monthsFromDays;

                            // if we have a mix of positive and negative values, bubble down first
                            // check: https://github.com/moment/moment/issues/2166
                            if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                                    (milliseconds <= 0 && days <= 0 && months <= 0))) {
                                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                                days = 0;
                                months = 0;
                            }

                            // The following code bubbles up values, see the tests for
                            // examples of what that means.
                            data.milliseconds = milliseconds % 1000;

                            seconds = absFloor(milliseconds / 1000);
                            data.seconds = seconds % 60;

                            minutes = absFloor(seconds / 60);
                            data.minutes = minutes % 60;

                            hours = absFloor(minutes / 60);
                            data.hours = hours % 24;

                            days += absFloor(hours / 24);

                            // convert days to months
                            monthsFromDays = absFloor(daysToMonths(days));
                            months += monthsFromDays;
                            days -= absCeil(monthsToDays(monthsFromDays));

                            // 12 months -> 1 year
                            years = absFloor(months / 12);
                            months %= 12;

                            data.days = days;
                            data.months = months;
                            data.years = years;

                            return this;
                        }

                        function daysToMonths(days) {
                            // 400 years have 146097 days (taking into account leap year rules)
                            // 400 years have 12 months === 4800
                            return days * 4800 / 146097;
                        }

                        function monthsToDays(months) {
                            // the reverse of daysToMonths
                            return months * 146097 / 4800;
                        }

                        function as(units) {
                            if (!this.isValid()) {
                                return NaN;
                            }
                            var days;
                            var months;
                            var milliseconds = this._milliseconds;

                            units = normalizeUnits(units);

                            if (units === 'month' || units === 'year') {
                                days = this._days + milliseconds / 864e5;
                                months = this._months + daysToMonths(days);
                                return units === 'month' ? months : months / 12;
                            } else {
                                // handle milliseconds separately because of floating point math errors (issue #1867)
                                days = this._days + Math.round(monthsToDays(this._months));
                                switch (units) {
                                    case 'week':
                                        return days / 7 + milliseconds / 6048e5;
                                    case 'day':
                                        return days + milliseconds / 864e5;
                                    case 'hour':
                                        return days * 24 + milliseconds / 36e5;
                                    case 'minute':
                                        return days * 1440 + milliseconds / 6e4;
                                    case 'second':
                                        return days * 86400 + milliseconds / 1000;
                                        // Math.floor prevents floating point math errors here
                                    case 'millisecond':
                                        return Math.floor(days * 864e5) + milliseconds;
                                    default:
                                        throw new Error('Unknown unit ' + units);
                                }
                            }
                        }

                        // TODO: Use this.as('ms')?
                        function valueOf$1() {
                            if (!this.isValid()) {
                                return NaN;
                            }
                            return (
                                this._milliseconds +
                                this._days * 864e5 +
                                (this._months % 12) * 2592e6 +
                                toInt(this._months / 12) * 31536e6
                            );
                        }

                        function makeAs(alias) {
                            return function() {
                                return this.as(alias);
                            };
                        }

                        var asMilliseconds = makeAs('ms');
                        var asSeconds = makeAs('s');
                        var asMinutes = makeAs('m');
                        var asHours = makeAs('h');
                        var asDays = makeAs('d');
                        var asWeeks = makeAs('w');
                        var asMonths = makeAs('M');
                        var asYears = makeAs('y');

                        function get$2(units) {
                            units = normalizeUnits(units);
                            return this.isValid() ? this[units + 's']() : NaN;
                        }

                        function makeGetter(name) {
                            return function() {
                                return this.isValid() ? this._data[name] : NaN;
                            };
                        }

                        var milliseconds = makeGetter('milliseconds');
                        var seconds = makeGetter('seconds');
                        var minutes = makeGetter('minutes');
                        var hours = makeGetter('hours');
                        var days = makeGetter('days');
                        var months = makeGetter('months');
                        var years = makeGetter('years');

                        function weeks() {
                            return absFloor(this.days() / 7);
                        }

                        var round = Math.round;
                        var thresholds = {
                            ss: 44, // a few seconds to seconds
                            s: 45, // seconds to minute
                            m: 45, // minutes to hour
                            h: 22, // hours to day
                            d: 26, // days to month
                            M: 11 // months to year
                        };

                        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
                        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
                        }

                        function relativeTime$1(posNegDuration, withoutSuffix, locale) {
                            var duration = createDuration(posNegDuration).abs();
                            var seconds = round(duration.as('s'));
                            var minutes = round(duration.as('m'));
                            var hours = round(duration.as('h'));
                            var days = round(duration.as('d'));
                            var months = round(duration.as('M'));
                            var years = round(duration.as('y'));

                            var a = seconds <= thresholds.ss && ['s', seconds] ||
                                seconds < thresholds.s && ['ss', seconds] ||
                                minutes <= 1 && ['m'] ||
                                minutes < thresholds.m && ['mm', minutes] ||
                                hours <= 1 && ['h'] ||
                                hours < thresholds.h && ['hh', hours] ||
                                days <= 1 && ['d'] ||
                                days < thresholds.d && ['dd', days] ||
                                months <= 1 && ['M'] ||
                                months < thresholds.M && ['MM', months] ||
                                years <= 1 && ['y'] || ['yy', years];

                            a[2] = withoutSuffix;
                            a[3] = +posNegDuration > 0;
                            a[4] = locale;
                            return substituteTimeAgo.apply(null, a);
                        }

                        // This function allows you to set the rounding function for relative time strings
                        function getSetRelativeTimeRounding(roundingFunction) {
                            if (roundingFunction === undefined) {
                                return round;
                            }
                            if (typeof(roundingFunction) === 'function') {
                                round = roundingFunction;
                                return true;
                            }
                            return false;
                        }

                        // This function allows you to set a threshold for relative time strings
                        function getSetRelativeTimeThreshold(threshold, limit) {
                            if (thresholds[threshold] === undefined) {
                                return false;
                            }
                            if (limit === undefined) {
                                return thresholds[threshold];
                            }
                            thresholds[threshold] = limit;
                            if (threshold === 's') {
                                thresholds.ss = limit - 1;
                            }
                            return true;
                        }

                        function humanize(withSuffix) {
                            if (!this.isValid()) {
                                return this.localeData().invalidDate();
                            }

                            var locale = this.localeData();
                            var output = relativeTime$1(this, !withSuffix, locale);

                            if (withSuffix) {
                                output = locale.pastFuture(+this, output);
                            }

                            return locale.postformat(output);
                        }

                        var abs$1 = Math.abs;

                        function toISOString$1() {
                            // for ISO strings we do not use the normal bubbling rules:
                            //  * milliseconds bubble up until they become hours
                            //  * days do not bubble at all
                            //  * months bubble up until they become years
                            // This is because there is no context-free conversion between hours and days
                            // (think of clock changes)
                            // and also not between days and months (28-31 days per month)
                            if (!this.isValid()) {
                                return this.localeData().invalidDate();
                            }

                            var seconds = abs$1(this._milliseconds) / 1000;
                            var days = abs$1(this._days);
                            var months = abs$1(this._months);
                            var minutes, hours, years;

                            // 3600 seconds -> 60 minutes -> 1 hour
                            minutes = absFloor(seconds / 60);
                            hours = absFloor(minutes / 60);
                            seconds %= 60;
                            minutes %= 60;

                            // 12 months -> 1 year
                            years = absFloor(months / 12);
                            months %= 12;


                            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                            var Y = years;
                            var M = months;
                            var D = days;
                            var h = hours;
                            var m = minutes;
                            var s = seconds;
                            var total = this.asSeconds();

                            if (!total) {
                                // this is the same as C#'s (Noda) and python (isodate)...
                                // but not other JS (goog.date)
                                return 'P0D';
                            }

                            return (total < 0 ? '-' : '') +
                                'P' +
                                (Y ? Y + 'Y' : '') +
                                (M ? M + 'M' : '') +
                                (D ? D + 'D' : '') +
                                ((h || m || s) ? 'T' : '') +
                                (h ? h + 'H' : '') +
                                (m ? m + 'M' : '') +
                                (s ? s + 'S' : '');
                        }

                        var proto$2 = Duration.prototype;

                        proto$2.isValid = isValid$1;
                        proto$2.abs = abs;
                        proto$2.add = add$1;
                        proto$2.subtract = subtract$1;
                        proto$2.as = as;
                        proto$2.asMilliseconds = asMilliseconds;
                        proto$2.asSeconds = asSeconds;
                        proto$2.asMinutes = asMinutes;
                        proto$2.asHours = asHours;
                        proto$2.asDays = asDays;
                        proto$2.asWeeks = asWeeks;
                        proto$2.asMonths = asMonths;
                        proto$2.asYears = asYears;
                        proto$2.valueOf = valueOf$1;
                        proto$2._bubble = bubble;
                        proto$2.get = get$2;
                        proto$2.milliseconds = milliseconds;
                        proto$2.seconds = seconds;
                        proto$2.minutes = minutes;
                        proto$2.hours = hours;
                        proto$2.days = days;
                        proto$2.weeks = weeks;
                        proto$2.months = months;
                        proto$2.years = years;
                        proto$2.humanize = humanize;
                        proto$2.toISOString = toISOString$1;
                        proto$2.toString = toISOString$1;
                        proto$2.toJSON = toISOString$1;
                        proto$2.locale = locale;
                        proto$2.localeData = localeData;

                        // Deprecations
                        proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
                        proto$2.lang = lang;

                        // Side effect imports

                        // FORMATTING

                        addFormatToken('X', 0, 0, 'unix');
                        addFormatToken('x', 0, 0, 'valueOf');

                        // PARSING

                        addRegexToken('x', matchSigned);
                        addRegexToken('X', matchTimestamp);
                        addParseToken('X', function(input, array, config) {
                            config._d = new Date(parseFloat(input, 10) * 1000);
                        });
                        addParseToken('x', function(input, array, config) {
                            config._d = new Date(toInt(input));
                        });

                        // Side effect imports


                        hooks.version = '2.18.1';

                        setHookCallback(createLocal);

                        hooks.fn = proto;
                        hooks.min = min;
                        hooks.max = max;
                        hooks.now = now;
                        hooks.utc = createUTC;
                        hooks.unix = createUnix;
                        hooks.months = listMonths;
                        hooks.isDate = isDate;
                        hooks.locale = getSetGlobalLocale;
                        hooks.invalid = createInvalid;
                        hooks.duration = createDuration;
                        hooks.isMoment = isMoment;
                        hooks.weekdays = listWeekdays;
                        hooks.parseZone = createInZone;
                        hooks.localeData = getLocale;
                        hooks.isDuration = isDuration;
                        hooks.monthsShort = listMonthsShort;
                        hooks.weekdaysMin = listWeekdaysMin;
                        hooks.defineLocale = defineLocale;
                        hooks.updateLocale = updateLocale;
                        hooks.locales = listLocales;
                        hooks.weekdaysShort = listWeekdaysShort;
                        hooks.normalizeUnits = normalizeUnits;
                        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
                        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
                        hooks.calendarFormat = getCalendarFormat;
                        hooks.prototype = proto;

                        return hooks;

                    })));

                    /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(84)(module)))

                /***/
            }),
            /* 84 */
            /***/
            (function(module, exports) {

                module.exports = function(module) {
                    if (!module.webpackPolyfill) {
                        module.deprecate = function() {};
                        module.paths = [];
                        // module.parent = undefined by default
                        module.children = [];
                        module.webpackPolyfill = 1;
                    }
                    return module;
                }


                /***/
            }),
            /* 85 */
            /***/
            (function(module, exports) {

                function webpackContext(req) {
                    throw new Error("Cannot find module '" + req + "'.");
                }
                webpackContext.keys = function() { return []; };
                webpackContext.resolve = webpackContext;
                module.exports = webpackContext;
                webpackContext.id = 85;


                /***/
            }),
            /* 86 */
            /***/
            (function(module, exports) {

                /* WEBPACK VAR INJECTION */
                (function(global) {
                    'use strict';

                    var _rng;

                    var globalVar = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;

                    if (globalVar && globalVar.crypto && crypto.getRandomValues) {
                        // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
                        // Moderately fast, high quality
                        var _rnds8 = new Uint8Array(16);
                        _rng = function whatwgRNG() {
                            crypto.getRandomValues(_rnds8);
                            return _rnds8;
                        };
                    }

                    if (!_rng) {
                        // Math.random()-based (RNG)
                        //
                        // If all else fails, use Math.random().  It's fast, but is of unspecified
                        // quality.
                        var _rnds = new Array(16);
                        _rng = function _rng() {
                            for (var i = 0, r; i < 16; i++) {
                                if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
                                _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
                            }

                            return _rnds;
                        };
                    }

                    //     uuid.js
                    //
                    //     Copyright (c) 2010-2012 Robert Kieffer
                    //     MIT License - http://opensource.org/licenses/mit-license.php

                    // Unique ID creation requires a high quality random # generator.  We feature
                    // detect to determine the best RNG source, normalizing to a function that
                    // returns 128-bits of randomness, since that's what's usually required

                    //var _rng = require('./rng');

                    // Maps for number <-> hex string conversion
                    var _byteToHex = [];
                    var _hexToByte = {};
                    for (var i = 0; i < 256; i++) {
                        _byteToHex[i] = (i + 0x100).toString(16).substr(1);
                        _hexToByte[_byteToHex[i]] = i;
                    }

                    // **`parse()` - Parse a UUID into it's component bytes**
                    function parse(s, buf, offset) {
                        var i = buf && offset || 0,
                            ii = 0;

                        buf = buf || [];
                        s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
                            if (ii < 16) {
                                // Don't overflow!
                                buf[i + ii++] = _hexToByte[oct];
                            }
                        });

                        // Zero out remaining bytes if string was short
                        while (ii < 16) {
                            buf[i + ii++] = 0;
                        }

                        return buf;
                    }

                    // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
                    function unparse(buf, offset) {
                        var i = offset || 0,
                            bth = _byteToHex;
                        return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
                    }

                    // **`v1()` - Generate time-based UUID**
                    //
                    // Inspired by https://github.com/LiosK/UUID.js
                    // and http://docs.python.org/library/uuid.html

                    // random #'s we need to init node and clockseq
                    var _seedBytes = _rng();

                    // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
                    var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

                    // Per 4.2.2, randomize (14 bit) clockseq
                    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

                    // Previous uuid creation time
                    var _lastMSecs = 0,
                        _lastNSecs = 0;

                    // See https://github.com/broofa/node-uuid for API details
                    function v1(options, buf, offset) {
                        var i = buf && offset || 0;
                        var b = buf || [];

                        options = options || {};

                        var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

                        // UUID timestamps are 100 nano-second units since the Gregorian epoch,
                        // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
                        // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
                        // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
                        var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

                        // Per 4.2.1.2, use count of uuid's generated during the current clock
                        // cycle to simulate higher resolution clock
                        var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

                        // Time since last uuid creation (in msecs)
                        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

                        // Per 4.2.1.2, Bump clockseq on clock regression
                        if (dt < 0 && options.clockseq === undefined) {
                            clockseq = clockseq + 1 & 0x3fff;
                        }

                        // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
                        // time interval
                        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
                            nsecs = 0;
                        }

                        // Per 4.2.1.2 Throw error if too many uuids are requested
                        if (nsecs >= 10000) {
                            throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
                        }

                        _lastMSecs = msecs;
                        _lastNSecs = nsecs;
                        _clockseq = clockseq;

                        // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
                        msecs += 12219292800000;

                        // `time_low`
                        var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
                        b[i++] = tl >>> 24 & 0xff;
                        b[i++] = tl >>> 16 & 0xff;
                        b[i++] = tl >>> 8 & 0xff;
                        b[i++] = tl & 0xff;

                        // `time_mid`
                        var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
                        b[i++] = tmh >>> 8 & 0xff;
                        b[i++] = tmh & 0xff;

                        // `time_high_and_version`
                        b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
                        b[i++] = tmh >>> 16 & 0xff;

                        // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
                        b[i++] = clockseq >>> 8 | 0x80;

                        // `clock_seq_low`
                        b[i++] = clockseq & 0xff;

                        // `node`
                        var node = options.node || _nodeId;
                        for (var n = 0; n < 6; n++) {
                            b[i + n] = node[n];
                        }

                        return buf ? buf : unparse(b);
                    }

                    // **`v4()` - Generate random UUID**

                    // See https://github.com/broofa/node-uuid for API details
                    function v4(options, buf, offset) {
                        // Deprecated - 'format' argument, as supported in v1.2
                        var i = buf && offset || 0;

                        if (typeof options == 'string') {
                            buf = options == 'binary' ? new Array(16) : null;
                            options = null;
                        }
                        options = options || {};

                        var rnds = options.random || (options.rng || _rng)();

                        // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
                        rnds[6] = rnds[6] & 0x0f | 0x40;
                        rnds[8] = rnds[8] & 0x3f | 0x80;

                        // Copy bytes to buffer, if provided
                        if (buf) {
                            for (var ii = 0; ii < 16; ii++) {
                                buf[i + ii] = rnds[ii];
                            }
                        }

                        return buf || unparse(rnds);
                    }

                    // Export public API
                    var uuid = v4;
                    uuid.v1 = v1;
                    uuid.v4 = v4;
                    uuid.parse = parse;
                    uuid.unparse = unparse;

                    module.exports = uuid;
                    /* WEBPACK VAR INJECTION */
                }.call(exports, (function() { return this; }())))

                /***/
            }),
            /* 87 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // utils
                exports.util = __webpack_require__(1);
                exports.DOMutil = __webpack_require__(88);

                // data
                exports.DataSet = __webpack_require__(89);
                exports.DataView = __webpack_require__(93);
                exports.Queue = __webpack_require__(92);

                // Graph3d
                exports.Graph3d = __webpack_require__(94);
                exports.graph3d = {
                    Camera: __webpack_require__(102),
                    Filter: __webpack_require__(107),
                    Point2d: __webpack_require__(101),
                    Point3d: __webpack_require__(100),
                    Slider: __webpack_require__(108),
                    StepNumber: __webpack_require__(109)
                };

                // bundled external libraries
                exports.moment = __webpack_require__(82);
                exports.Hammer = __webpack_require__(112);
                exports.keycharm = __webpack_require__(115);

                /***/
            }),
            /* 88 */
            /***/
            (function(module, exports) {

                'use strict';

                // DOM utility methods

                /**
                 * this prepares the JSON container for allocating SVG elements
                 * @param JSONcontainer
                 * @private
                 */
                exports.prepareElements = function(JSONcontainer) {
                    // cleanup the redundant svgElements;
                    for (var elementType in JSONcontainer) {
                        if (JSONcontainer.hasOwnProperty(elementType)) {
                            JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
                            JSONcontainer[elementType].used = [];
                        }
                    }
                };

                /**
                 * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
                 * which to remove the redundant elements.
                 *
                 * @param JSONcontainer
                 * @private
                 */
                exports.cleanupElements = function(JSONcontainer) {
                    // cleanup the redundant svgElements;
                    for (var elementType in JSONcontainer) {
                        if (JSONcontainer.hasOwnProperty(elementType)) {
                            if (JSONcontainer[elementType].redundant) {
                                for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
                                    JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
                                }
                                JSONcontainer[elementType].redundant = [];
                            }
                        }
                    }
                };

                /**
                 * Ensures that all elements are removed first up so they can be recreated cleanly
                 * @param JSONcontainer
                 */
                exports.resetElements = function(JSONcontainer) {
                    exports.prepareElements(JSONcontainer);
                    exports.cleanupElements(JSONcontainer);
                    exports.prepareElements(JSONcontainer);
                };

                /**
                 * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
                 * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
                 *
                 * @param elementType
                 * @param JSONcontainer
                 * @param svgContainer
                 * @returns {*}
                 * @private
                 */
                exports.getSVGElement = function(elementType, JSONcontainer, svgContainer) {
                    var element;
                    // allocate SVG element, if it doesnt yet exist, create one.
                    if (JSONcontainer.hasOwnProperty(elementType)) {
                        // this element has been created before
                        // check if there is an redundant element
                        if (JSONcontainer[elementType].redundant.length > 0) {
                            element = JSONcontainer[elementType].redundant[0];
                            JSONcontainer[elementType].redundant.shift();
                        } else {
                            // create a new element and add it to the SVG
                            element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
                            svgContainer.appendChild(element);
                        }
                    } else {
                        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
                        element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
                        JSONcontainer[elementType] = { used: [], redundant: [] };
                        svgContainer.appendChild(element);
                    }
                    JSONcontainer[elementType].used.push(element);
                    return element;
                };

                /**
                 * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
                 * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
                 *
                 * @param elementType
                 * @param JSONcontainer
                 * @param DOMContainer
                 * @returns {*}
                 * @private
                 */
                exports.getDOMElement = function(elementType, JSONcontainer, DOMContainer, insertBefore) {
                    var element;
                    // allocate DOM element, if it doesnt yet exist, create one.
                    if (JSONcontainer.hasOwnProperty(elementType)) {
                        // this element has been created before
                        // check if there is an redundant element
                        if (JSONcontainer[elementType].redundant.length > 0) {
                            element = JSONcontainer[elementType].redundant[0];
                            JSONcontainer[elementType].redundant.shift();
                        } else {
                            // create a new element and add it to the SVG
                            element = document.createElement(elementType);
                            if (insertBefore !== undefined) {
                                DOMContainer.insertBefore(element, insertBefore);
                            } else {
                                DOMContainer.appendChild(element);
                            }
                        }
                    } else {
                        // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
                        element = document.createElement(elementType);
                        JSONcontainer[elementType] = { used: [], redundant: [] };
                        if (insertBefore !== undefined) {
                            DOMContainer.insertBefore(element, insertBefore);
                        } else {
                            DOMContainer.appendChild(element);
                        }
                    }
                    JSONcontainer[elementType].used.push(element);
                    return element;
                };

                /**
                 * Draw a point object. This is a separate function because it can also be called by the legend.
                 * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
                 * as well.
                 *
                 * @param x
                 * @param y
                 * @param groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
                 * @param JSONcontainer
                 * @param svgContainer
                 * @param labelObj
                 * @returns {*}
                 */
                exports.drawPoint = function(x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
                    var point;
                    if (groupTemplate.style == 'circle') {
                        point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
                        point.setAttributeNS(null, "cx", x);
                        point.setAttributeNS(null, "cy", y);
                        point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
                    } else {
                        point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
                        point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
                        point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
                        point.setAttributeNS(null, "width", groupTemplate.size);
                        point.setAttributeNS(null, "height", groupTemplate.size);
                    }

                    if (groupTemplate.styles !== undefined) {
                        point.setAttributeNS(null, "style", groupTemplate.styles);
                    }
                    point.setAttributeNS(null, "class", groupTemplate.className + " vis-point");
                    //handle label


                    if (labelObj) {
                        var label = exports.getSVGElement('text', JSONcontainer, svgContainer);
                        if (labelObj.xOffset) {
                            x = x + labelObj.xOffset;
                        }

                        if (labelObj.yOffset) {
                            y = y + labelObj.yOffset;
                        }
                        if (labelObj.content) {
                            label.textContent = labelObj.content;
                        }

                        if (labelObj.className) {
                            label.setAttributeNS(null, "class", labelObj.className + " vis-label");
                        }
                        label.setAttributeNS(null, "x", x);
                        label.setAttributeNS(null, "y", y);
                    }

                    return point;
                };

                /**
                 * draw a bar SVG element centered on the X coordinate
                 *
                 * @param x
                 * @param y
                 * @param className
                 */
                exports.drawBar = function(x, y, width, height, className, JSONcontainer, svgContainer, style) {
                    if (height != 0) {
                        if (height < 0) {
                            height *= -1;
                            y -= height;
                        }
                        var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
                        rect.setAttributeNS(null, "x", x - 0.5 * width);
                        rect.setAttributeNS(null, "y", y);
                        rect.setAttributeNS(null, "width", width);
                        rect.setAttributeNS(null, "height", height);
                        rect.setAttributeNS(null, "class", className);
                        if (style) {
                            rect.setAttributeNS(null, "style", style);
                        }
                    }
                };

                /***/
            }),
            /* 89 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var Queue = __webpack_require__(92);

                /**
                 * DataSet
                 *
                 * Usage:
                 *     var dataSet = new DataSet({
                 *         fieldId: '_id',
                 *         type: {
                 *             // ...
                 *         }
                 *     });
                 *
                 *     dataSet.add(item);
                 *     dataSet.add(data);
                 *     dataSet.update(item);
                 *     dataSet.update(data);
                 *     dataSet.remove(id);
                 *     dataSet.remove(ids);
                 *     var data = dataSet.get();
                 *     var data = dataSet.get(id);
                 *     var data = dataSet.get(ids);
                 *     var data = dataSet.get(ids, options, data);
                 *     dataSet.clear();
                 *
                 * A data set can:
                 * - add/remove/update data
                 * - gives triggers upon changes in the data
                 * - can  import/export data in various data formats
                 *
                 * @param {Array} [data]    Optional array with initial data
                 * @param {Object} [options]   Available options:
                 *                             {String} fieldId Field name of the id in the
                 *                                              items, 'id' by default.
                 *                             {Object.<String, String} type
                 *                                              A map with field names as key,
                 *                                              and the field type as value.
                 *                             {Object} queue   Queue changes to the DataSet,
                 *                                              flush them all at once.
                 *                                              Queue options:
                 *                                              - {number} delay  Delay in ms, null by default
                 *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
                 * @constructor DataSet
                 */
                // TODO: add a DataSet constructor DataSet(data, options)
                function DataSet(data, options) {
                    // correctly read optional arguments
                    if (data && !Array.isArray(data)) {
                        options = data;
                        data = null;
                    }

                    this._options = options || {};
                    this._data = {}; // map with data indexed by id
                    this.length = 0; // number of items in the DataSet
                    this._fieldId = this._options.fieldId || 'id'; // name of the field containing id
                    this._type = {}; // internal field types (NOTE: this can differ from this._options.type)

                    // all variants of a Date are internally stored as Date, so we can convert
                    // from everything to everything (also from ISODate to Number for example)
                    if (this._options.type) {
                        var fields = (0, _keys2['default'])(this._options.type);
                        for (var i = 0, len = fields.length; i < len; i++) {
                            var field = fields[i];
                            var value = this._options.type[field];
                            if (value == 'Date' || value == 'ISODate' || value == 'ASPDate') {
                                this._type[field] = 'Date';
                            } else {
                                this._type[field] = value;
                            }
                        }
                    }

                    // TODO: deprecated since version 1.1.1 (or 2.0.0?)
                    if (this._options.convert) {
                        throw new Error('Option "convert" is deprecated. Use "type" instead.');
                    }

                    this._subscribers = {}; // event subscribers

                    // add initial data when provided
                    if (data) {
                        this.add(data);
                    }

                    this.setOptions(options);
                }

                /**
                 * @param {Object} [options]   Available options:
                 *                             {Object} queue   Queue changes to the DataSet,
                 *                                              flush them all at once.
                 *                                              Queue options:
                 *                                              - {number} delay  Delay in ms, null by default
                 *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
                 * @param options
                 */
                DataSet.prototype.setOptions = function(options) {
                    if (options && options.queue !== undefined) {
                        if (options.queue === false) {
                            // delete queue if loaded
                            if (this._queue) {
                                this._queue.destroy();
                                delete this._queue;
                            }
                        } else {
                            // create queue and update its options
                            if (!this._queue) {
                                this._queue = Queue.extend(this, {
                                    replace: ['add', 'update', 'remove']
                                });
                            }

                            if ((0, _typeof3['default'])(options.queue) === 'object') {
                                this._queue.setOptions(options.queue);
                            }
                        }
                    }
                };

                /**
                 * Subscribe to an event, add an event listener
                 * @param {String} event        Event name. Available events: 'put', 'update',
                 *                              'remove'
                 * @param {function} callback   Callback method. Called with three parameters:
                 *                                  {String} event
                 *                                  {Object | null} params
                 *                                  {String | Number} senderId
                 */
                DataSet.prototype.on = function(event, callback) {
                    var subscribers = this._subscribers[event];
                    if (!subscribers) {
                        subscribers = [];
                        this._subscribers[event] = subscribers;
                    }

                    subscribers.push({
                        callback: callback
                    });
                };

                // TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
                DataSet.prototype.subscribe = function() {
                    throw new Error('DataSet.subscribe is deprecated. Use DataSet.on instead.');
                };

                /**
                 * Unsubscribe from an event, remove an event listener
                 * @param {String} event
                 * @param {function} callback
                 */
                DataSet.prototype.off = function(event, callback) {
                    var subscribers = this._subscribers[event];
                    if (subscribers) {
                        this._subscribers[event] = subscribers.filter(function(listener) {
                            return listener.callback != callback;
                        });
                    }
                };

                // TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
                DataSet.prototype.unsubscribe = function() {
                    throw new Error('DataSet.unsubscribe is deprecated. Use DataSet.off instead.');
                };

                /**
                 * Trigger an event
                 * @param {String} event
                 * @param {Object | null} params
                 * @param {String} [senderId]       Optional id of the sender.
                 * @private
                 */
                DataSet.prototype._trigger = function(event, params, senderId) {
                    if (event == '*') {
                        throw new Error('Cannot trigger event *');
                    }

                    var subscribers = [];
                    if (event in this._subscribers) {
                        subscribers = subscribers.concat(this._subscribers[event]);
                    }
                    if ('*' in this._subscribers) {
                        subscribers = subscribers.concat(this._subscribers['*']);
                    }

                    for (var i = 0, len = subscribers.length; i < len; i++) {
                        var subscriber = subscribers[i];
                        if (subscriber.callback) {
                            subscriber.callback(event, params, senderId || null);
                        }
                    }
                };

                /**
                 * Add data.
                 * Adding an item will fail when there already is an item with the same id.
                 * @param {Object | Array} data
                 * @param {String} [senderId] Optional sender id
                 * @return {Array} addedIds      Array with the ids of the added items
                 */
                DataSet.prototype.add = function(data, senderId) {
                    var addedIds = [],
                        id,
                        me = this;

                    if (Array.isArray(data)) {
                        // Array
                        for (var i = 0, len = data.length; i < len; i++) {
                            id = me._addItem(data[i]);
                            addedIds.push(id);
                        }
                    } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
                        // Single item
                        id = me._addItem(data);
                        addedIds.push(id);
                    } else {
                        throw new Error('Unknown dataType');
                    }

                    if (addedIds.length) {
                        this._trigger('add', { items: addedIds }, senderId);
                    }

                    return addedIds;
                };

                /**
                 * Update existing items. When an item does not exist, it will be created
                 * @param {Object | Array} data
                 * @param {String} [senderId] Optional sender id
                 * @return {Array} updatedIds     The ids of the added or updated items
                 */
                DataSet.prototype.update = function(data, senderId) {
                    var addedIds = [];
                    var updatedIds = [];
                    var oldData = [];
                    var updatedData = [];
                    var me = this;
                    var fieldId = me._fieldId;

                    var addOrUpdate = function addOrUpdate(item) {
                        var id = item[fieldId];
                        if (me._data[id]) {
                            var oldItem = util.extend({}, me._data[id]);
                            // update item
                            id = me._updateItem(item);
                            updatedIds.push(id);
                            updatedData.push(item);
                            oldData.push(oldItem);
                        } else {
                            // add new item
                            id = me._addItem(item);
                            addedIds.push(id);
                        }
                    };

                    if (Array.isArray(data)) {
                        // Array
                        for (var i = 0, len = data.length; i < len; i++) {
                            if (data[i] && (0, _typeof3['default'])(data[i]) === 'object') {
                                addOrUpdate(data[i]);
                            } else {
                                console.warn('Ignoring input item, which is not an object at index ' + i);
                            }
                        }
                    } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
                        // Single item
                        addOrUpdate(data);
                    } else {
                        throw new Error('Unknown dataType');
                    }

                    if (addedIds.length) {
                        this._trigger('add', { items: addedIds }, senderId);
                    }
                    if (updatedIds.length) {
                        var props = { items: updatedIds, oldData: oldData, data: updatedData };
                        // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger('update', props, senderId);
                    }

                    return addedIds.concat(updatedIds);
                };

                /**
                 * Get a data item or multiple items.
                 *
                 * Usage:
                 *
                 *     get()
                 *     get(options: Object)
                 *
                 *     get(id: Number | String)
                 *     get(id: Number | String, options: Object)
                 *
                 *     get(ids: Number[] | String[])
                 *     get(ids: Number[] | String[], options: Object)
                 *
                 * Where:
                 *
                 * {Number | String} id         The id of an item
                 * {Number[] | String{}} ids    An array with ids of items
                 * {Object} options             An Object with options. Available options:
                 * {String} [returnType]        Type of data to be returned.
                 *                              Can be 'Array' (default) or 'Object'.
                 * {Object.<String, String>} [type]
                 * {String[]} [fields]          field names to be returned
                 * {function} [filter]          filter items
                 * {String | function} [order]  Order the items by a field name or custom sort function.
                 * @throws Error
                 */
                DataSet.prototype.get = function(args) {
                    var me = this;

                    // parse the arguments
                    var id, ids, options;
                    var firstType = util.getType(arguments[0]);
                    if (firstType == 'String' || firstType == 'Number') {
                        // get(id [, options])
                        id = arguments[0];
                        options = arguments[1];
                    } else if (firstType == 'Array') {
                        // get(ids [, options])
                        ids = arguments[0];
                        options = arguments[1];
                    } else {
                        // get([, options])
                        options = arguments[0];
                    }

                    // determine the return type
                    var returnType;
                    if (options && options.returnType) {
                        var allowedValues = ['Array', 'Object'];
                        returnType = allowedValues.indexOf(options.returnType) == -1 ? 'Array' : options.returnType;
                    } else {
                        returnType = 'Array';
                    }

                    // build options
                    var type = options && options.type || this._options.type;
                    var filter = options && options.filter;
                    var items = [],
                        item,
                        itemIds,
                        itemId,
                        i,
                        len;

                    // convert items
                    if (id != undefined) {
                        // return a single item
                        item = me._getItem(id, type);
                        if (item && filter && !filter(item)) {
                            item = null;
                        }
                    } else if (ids != undefined) {
                        // return a subset of items
                        for (i = 0, len = ids.length; i < len; i++) {
                            item = me._getItem(ids[i], type);
                            if (!filter || filter(item)) {
                                items.push(item);
                            }
                        }
                    } else {
                        // return all items
                        itemIds = (0, _keys2['default'])(this._data);
                        for (i = 0, len = itemIds.length; i < len; i++) {
                            itemId = itemIds[i];
                            item = me._getItem(itemId, type);
                            if (!filter || filter(item)) {
                                items.push(item);
                            }
                        }
                    }

                    // order the results
                    if (options && options.order && id == undefined) {
                        this._sort(items, options.order);
                    }

                    // filter fields of the items
                    if (options && options.fields) {
                        var fields = options.fields;
                        if (id != undefined) {
                            item = this._filterFields(item, fields);
                        } else {
                            for (i = 0, len = items.length; i < len; i++) {
                                items[i] = this._filterFields(items[i], fields);
                            }
                        }
                    }

                    // return the results
                    if (returnType == 'Object') {
                        var result = {},
                            resultant;
                        for (i = 0, len = items.length; i < len; i++) {
                            resultant = items[i];
                            result[resultant.id] = resultant;
                        }
                        return result;
                    } else {
                        if (id != undefined) {
                            // a single item
                            return item;
                        } else {
                            // just return our array
                            return items;
                        }
                    }
                };

                /**
                 * Get ids of all items or from a filtered set of items.
                 * @param {Object} [options]    An Object with options. Available options:
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 * @return {Array} ids
                 */
                DataSet.prototype.getIds = function(options) {
                    var data = this._data,
                        filter = options && options.filter,
                        order = options && options.order,
                        type = options && options.type || this._options.type,
                        itemIds = (0, _keys2['default'])(data),
                        i,
                        len,
                        id,
                        item,
                        items,
                        ids = [];

                    if (filter) {
                        // get filtered items
                        if (order) {
                            // create ordered list
                            items = [];
                            for (i = 0, len = itemIds.length; i < len; i++) {
                                id = itemIds[i];
                                item = this._getItem(id, type);
                                if (filter(item)) {
                                    items.push(item);
                                }
                            }

                            this._sort(items, order);

                            for (i = 0, len = items.length; i < len; i++) {
                                ids.push(items[i][this._fieldId]);
                            }
                        } else {
                            // create unordered list
                            for (i = 0, len = itemIds.length; i < len; i++) {
                                id = itemIds[i];
                                item = this._getItem(id, type);
                                if (filter(item)) {
                                    ids.push(item[this._fieldId]);
                                }
                            }
                        }
                    } else {
                        // get all items
                        if (order) {
                            // create an ordered list
                            items = [];
                            for (i = 0, len = itemIds.length; i < len; i++) {
                                id = itemIds[i];
                                items.push(data[id]);
                            }

                            this._sort(items, order);

                            for (i = 0, len = items.length; i < len; i++) {
                                ids.push(items[i][this._fieldId]);
                            }
                        } else {
                            // create unordered list
                            for (i = 0, len = itemIds.length; i < len; i++) {
                                id = itemIds[i];
                                item = data[id];
                                ids.push(item[this._fieldId]);
                            }
                        }
                    }

                    return ids;
                };

                /**
                 * Returns the DataSet itself. Is overwritten for example by the DataView,
                 * which returns the DataSet it is connected to instead.
                 */
                DataSet.prototype.getDataSet = function() {
                    return this;
                };

                /**
                 * Execute a callback function for every item in the dataset.
                 * @param {function} callback
                 * @param {Object} [options]    Available options:
                 *                              {Object.<String, String>} [type]
                 *                              {String[]} [fields] filter fields
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 */
                DataSet.prototype.forEach = function(callback, options) {
                    var filter = options && options.filter,
                        type = options && options.type || this._options.type,
                        data = this._data,
                        itemIds = (0, _keys2['default'])(data),
                        i,
                        len,
                        item,
                        id;

                    if (options && options.order) {
                        // execute forEach on ordered list
                        var items = this.get(options);

                        for (i = 0, len = items.length; i < len; i++) {
                            item = items[i];
                            id = item[this._fieldId];
                            callback(item, id);
                        }
                    } else {
                        // unordered
                        for (i = 0, len = itemIds.length; i < len; i++) {
                            id = itemIds[i];
                            item = this._getItem(id, type);
                            if (!filter || filter(item)) {
                                callback(item, id);
                            }
                        }
                    }
                };

                /**
                 * Map every item in the dataset.
                 * @param {function} callback
                 * @param {Object} [options]    Available options:
                 *                              {Object.<String, String>} [type]
                 *                              {String[]} [fields] filter fields
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 * @return {Object[]} mappedItems
                 */
                DataSet.prototype.map = function(callback, options) {
                    var filter = options && options.filter,
                        type = options && options.type || this._options.type,
                        mappedItems = [],
                        data = this._data,
                        itemIds = (0, _keys2['default'])(data),
                        i,
                        len,
                        id,
                        item;

                    // convert and filter items
                    for (i = 0, len = itemIds.length; i < len; i++) {
                        id = itemIds[i];
                        item = this._getItem(id, type);
                        if (!filter || filter(item)) {
                            mappedItems.push(callback(item, id));
                        }
                    }

                    // order items
                    if (options && options.order) {
                        this._sort(mappedItems, options.order);
                    }

                    return mappedItems;
                };

                /**
                 * Filter the fields of an item
                 * @param {Object | null} item
                 * @param {String[]} fields     Field names
                 * @return {Object | null} filteredItem or null if no item is provided
                 * @private
                 */
                DataSet.prototype._filterFields = function(item, fields) {
                    if (!item) {
                        // item is null
                        return item;
                    }

                    var filteredItem = {},
                        itemFields = (0, _keys2['default'])(item),
                        len = itemFields.length,
                        i,
                        field;

                    if (Array.isArray(fields)) {
                        for (i = 0; i < len; i++) {
                            field = itemFields[i];
                            if (fields.indexOf(field) != -1) {
                                filteredItem[field] = item[field];
                            }
                        }
                    } else {
                        for (i = 0; i < len; i++) {
                            field = itemFields[i];
                            if (fields.hasOwnProperty(field)) {
                                filteredItem[fields[field]] = item[field];
                            }
                        }
                    }

                    return filteredItem;
                };

                /**
                 * Sort the provided array with items
                 * @param {Object[]} items
                 * @param {String | function} order      A field name or custom sort function.
                 * @private
                 */
                DataSet.prototype._sort = function(items, order) {
                    if (util.isString(order)) {
                        // order by provided field name
                        var name = order; // field name
                        items.sort(function(a, b) {
                            var av = a[name];
                            var bv = b[name];
                            return av > bv ? 1 : av < bv ? -1 : 0;
                        });
                    } else if (typeof order === 'function') {
                        // order by sort function
                        items.sort(order);
                    }
                    // TODO: extend order by an Object {field:String, direction:String}
                    //       where direction can be 'asc' or 'desc'
                    else {
                        throw new TypeError('Order must be a function or a string');
                    }
                };

                /**
                 * Remove an object by pointer or by id
                 * @param {String | Number | Object | Array} id Object or id, or an array with
                 *                                              objects or ids to be removed
                 * @param {String} [senderId] Optional sender id
                 * @return {Array} removedIds
                 */
                DataSet.prototype.remove = function(id, senderId) {
                    var removedIds = [],
                        removedItems = [],
                        ids = [],
                        i,
                        len,
                        itemId,
                        item;

                    // force everything to be an array for simplicity
                    ids = Array.isArray(id) ? id : [id];

                    for (i = 0, len = ids.length; i < len; i++) {
                        item = this._remove(ids[i]);
                        if (item) {
                            itemId = item[this._fieldId];
                            if (itemId != undefined) {
                                removedIds.push(itemId);
                                removedItems.push(item);
                            }
                        }
                    }

                    if (removedIds.length) {
                        this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
                    }

                    return removedIds;
                };

                /**
                 * Remove an item by its id
                 * @param {Number | String | Object} id   id or item
                 * @returns {Number | String | null} id
                 * @private
                 */
                DataSet.prototype._remove = function(id) {
                    var item, ident;

                    // confirm the id to use based on the args type
                    if (util.isNumber(id) || util.isString(id)) {
                        ident = id;
                    } else if (id && (typeof id === 'undefined' ? 'undefined' : (0, _typeof3['default'])(id)) === 'object') {
                        ident = id[this._fieldId]; // look for the identifier field using _fieldId
                    }

                    // do the remove if the item is found
                    if (ident !== undefined && this._data[ident]) {
                        item = this._data[ident];
                        delete this._data[ident];
                        this.length--;
                        return item;
                    }
                    return null;
                };

                /**
                 * Clear the data
                 * @param {String} [senderId] Optional sender id
                 * @return {Array} removedIds    The ids of all removed items
                 */
                DataSet.prototype.clear = function(senderId) {
                    var i, len;
                    var ids = (0, _keys2['default'])(this._data);
                    var items = [];

                    for (i = 0, len = ids.length; i < len; i++) {
                        items.push(this._data[ids[i]]);
                    }

                    this._data = {};
                    this.length = 0;

                    this._trigger('remove', { items: ids, oldData: items }, senderId);

                    return ids;
                };

                /**
                 * Find the item with maximum value of a specified field
                 * @param {String} field
                 * @return {Object | null} item  Item containing max value, or null if no items
                 */
                DataSet.prototype.max = function(field) {
                    var data = this._data,
                        itemIds = (0, _keys2['default'])(data),
                        max = null,
                        maxField = null,
                        i,
                        len;

                    for (i = 0, len = itemIds.length; i < len; i++) {
                        var id = itemIds[i];
                        var item = data[id];
                        var itemField = item[field];
                        if (itemField != null && (!max || itemField > maxField)) {
                            max = item;
                            maxField = itemField;
                        }
                    }

                    return max;
                };

                /**
                 * Find the item with minimum value of a specified field
                 * @param {String} field
                 * @return {Object | null} item  Item containing max value, or null if no items
                 */
                DataSet.prototype.min = function(field) {
                    var data = this._data,
                        itemIds = (0, _keys2['default'])(data),
                        min = null,
                        minField = null,
                        i,
                        len;

                    for (i = 0, len = itemIds.length; i < len; i++) {
                        var id = itemIds[i];
                        var item = data[id];
                        var itemField = item[field];
                        if (itemField != null && (!min || itemField < minField)) {
                            min = item;
                            minField = itemField;
                        }
                    }

                    return min;
                };

                /**
                 * Find all distinct values of a specified field
                 * @param {String} field
                 * @return {Array} values  Array containing all distinct values. If data items
                 *                         do not contain the specified field are ignored.
                 *                         The returned array is unordered.
                 */
                DataSet.prototype.distinct = function(field) {
                    var data = this._data;
                    var itemIds = (0, _keys2['default'])(data);
                    var values = [];
                    var fieldType = this._options.type && this._options.type[field] || null;
                    var count = 0;
                    var i, j, len;

                    for (i = 0, len = itemIds.length; i < len; i++) {
                        var id = itemIds[i];
                        var item = data[id];
                        var value = item[field];
                        var exists = false;
                        for (j = 0; j < count; j++) {
                            if (values[j] == value) {
                                exists = true;
                                break;
                            }
                        }
                        if (!exists && value !== undefined) {
                            values[count] = value;
                            count++;
                        }
                    }

                    if (fieldType) {
                        for (i = 0, len = values.length; i < len; i++) {
                            values[i] = util.convert(values[i], fieldType);
                        }
                    }

                    return values;
                };

                /**
                 * Add a single item. Will fail when an item with the same id already exists.
                 * @param {Object} item
                 * @return {String} id
                 * @private
                 */
                DataSet.prototype._addItem = function(item) {
                    var id = item[this._fieldId];

                    if (id != undefined) {
                        // check whether this id is already taken
                        if (this._data[id]) {
                            // item already exists
                            //        throw new Error('Cannot add item: item with id ' + id + ' already exists'); //hoge
                            throw new Error('Cannot add item: this arrow already exists');
                        }
                    } else {
                        // generate an id
                        id = util.randomUUID();
                        item[this._fieldId] = id;
                    }

                    var d = {},
                        fields = (0, _keys2['default'])(item),
                        i,
                        len;
                    for (i = 0, len = fields.length; i < len; i++) {
                        var field = fields[i];
                        var fieldType = this._type[field]; // type may be undefined
                        d[field] = util.convert(item[field], fieldType);
                    }
                    this._data[id] = d;
                    this.length++;

                    return id;
                };

                /**
                 * Get an item. Fields can be converted to a specific type
                 * @param {String} id
                 * @param {Object.<String, String>} [types]  field types to convert
                 * @return {Object | null} item
                 * @private
                 */
                DataSet.prototype._getItem = function(id, types) {
                    var field, value, i, len;

                    // get the item from the dataset
                    var raw = this._data[id];
                    if (!raw) {
                        return null;
                    }

                    // convert the items field types
                    var converted = {},
                        fields = (0, _keys2['default'])(raw);

                    if (types) {
                        for (i = 0, len = fields.length; i < len; i++) {
                            field = fields[i];
                            value = raw[field];
                            converted[field] = util.convert(value, types[field]);
                        }
                    } else {
                        // no field types specified, no converting needed
                        for (i = 0, len = fields.length; i < len; i++) {
                            field = fields[i];
                            value = raw[field];
                            converted[field] = value;
                        }
                    }

                    if (!converted[this._fieldId]) {
                        converted[this._fieldId] = raw.id;
                    }

                    return converted;
                };

                /**
                 * Update a single item: merge with existing item.
                 * Will fail when the item has no id, or when there does not exist an item
                 * with the same id.
                 * @param {Object} item
                 * @return {String} id
                 * @private
                 */
                DataSet.prototype._updateItem = function(item) {
                    var id = item[this._fieldId];
                    if (id == undefined) {
                        throw new Error('Cannot update item: item has no id (item: ' + (0, _stringify2['default'])(item) + ')');
                    }
                    var d = this._data[id];
                    if (!d) {
                        // item doesn't exist
                        throw new Error('Cannot update item: no item with id ' + id + ' found');
                    }

                    // merge with current item
                    var fields = (0, _keys2['default'])(item);
                    for (var i = 0, len = fields.length; i < len; i++) {
                        var field = fields[i];
                        var fieldType = this._type[field]; // type may be undefined
                        d[field] = util.convert(item[field], fieldType);
                    }

                    return id;
                };

                module.exports = DataSet;

                /***/
            }),
            /* 90 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(91), __esModule: true };

                /***/
            }),
            /* 91 */
            /***/
            (function(module, exports, __webpack_require__) {

                var core = __webpack_require__(17),
                    $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
                module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
                    return $JSON.stringify.apply($JSON, arguments);
                };

                /***/
            }),
            /* 92 */
            /***/
            (function(module, exports) {

                'use strict';

                /**
                 * A queue
                 * @param {Object} options
                 *            Available options:
                 *            - delay: number    When provided, the queue will be flushed
                 *                               automatically after an inactivity of this delay
                 *                               in milliseconds.
                 *                               Default value is null.
                 *            - max: number      When the queue exceeds the given maximum number
                 *                               of entries, the queue is flushed automatically.
                 *                               Default value of max is Infinity.
                 * @constructor
                 */
                function Queue(options) {
                    // options
                    this.delay = null;
                    this.max = Infinity;

                    // properties
                    this._queue = [];
                    this._timeout = null;
                    this._extended = null;

                    this.setOptions(options);
                }

                /**
                 * Update the configuration of the queue
                 * @param {Object} options
                 *            Available options:
                 *            - delay: number    When provided, the queue will be flushed
                 *                               automatically after an inactivity of this delay
                 *                               in milliseconds.
                 *                               Default value is null.
                 *            - max: number      When the queue exceeds the given maximum number
                 *                               of entries, the queue is flushed automatically.
                 *                               Default value of max is Infinity.
                 * @param options
                 */
                Queue.prototype.setOptions = function(options) {
                    if (options && typeof options.delay !== 'undefined') {
                        this.delay = options.delay;
                    }
                    if (options && typeof options.max !== 'undefined') {
                        this.max = options.max;
                    }

                    this._flushIfNeeded();
                };

                /**
                 * Extend an object with queuing functionality.
                 * The object will be extended with a function flush, and the methods provided
                 * in options.replace will be replaced with queued ones.
                 * @param {Object} object
                 * @param {Object} options
                 *            Available options:
                 *            - replace: Array.<string>
                 *                               A list with method names of the methods
                 *                               on the object to be replaced with queued ones.
                 *            - delay: number    When provided, the queue will be flushed
                 *                               automatically after an inactivity of this delay
                 *                               in milliseconds.
                 *                               Default value is null.
                 *            - max: number      When the queue exceeds the given maximum number
                 *                               of entries, the queue is flushed automatically.
                 *                               Default value of max is Infinity.
                 * @return {Queue} Returns the created queue
                 */
                Queue.extend = function(object, options) {
                    var queue = new Queue(options);

                    if (object.flush !== undefined) {
                        throw new Error('Target object already has a property flush');
                    }
                    object.flush = function() {
                        queue.flush();
                    };

                    var methods = [{
                        name: 'flush',
                        original: undefined
                    }];

                    if (options && options.replace) {
                        for (var i = 0; i < options.replace.length; i++) {
                            var name = options.replace[i];
                            methods.push({
                                name: name,
                                original: object[name]
                            });
                            queue.replace(object, name);
                        }
                    }

                    queue._extended = {
                        object: object,
                        methods: methods
                    };

                    return queue;
                };

                /**
                 * Destroy the queue. The queue will first flush all queued actions, and in
                 * case it has extended an object, will restore the original object.
                 */
                Queue.prototype.destroy = function() {
                    this.flush();

                    if (this._extended) {
                        var object = this._extended.object;
                        var methods = this._extended.methods;
                        for (var i = 0; i < methods.length; i++) {
                            var method = methods[i];
                            if (method.original) {
                                object[method.name] = method.original;
                            } else {
                                delete object[method.name];
                            }
                        }
                        this._extended = null;
                    }
                };

                /**
                 * Replace a method on an object with a queued version
                 * @param {Object} object   Object having the method
                 * @param {string} method   The method name
                 */
                Queue.prototype.replace = function(object, method) {
                    var me = this;
                    var original = object[method];
                    if (!original) {
                        throw new Error('Method ' + method + ' undefined');
                    }

                    object[method] = function() {
                        // create an Array with the arguments
                        var args = [];
                        for (var i = 0; i < arguments.length; i++) {
                            args[i] = arguments[i];
                        }

                        // add this call to the queue
                        me.queue({
                            args: args,
                            fn: original,
                            context: this
                        });
                    };
                };

                /**
                 * Queue a call
                 * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry
                 */
                Queue.prototype.queue = function(entry) {
                    if (typeof entry === 'function') {
                        this._queue.push({ fn: entry });
                    } else {
                        this._queue.push(entry);
                    }

                    this._flushIfNeeded();
                };

                /**
                 * Check whether the queue needs to be flushed
                 * @private
                 */
                Queue.prototype._flushIfNeeded = function() {
                    // flush when the maximum is exceeded.
                    if (this._queue.length > this.max) {
                        this.flush();
                    }

                    // flush after a period of inactivity when a delay is configured
                    clearTimeout(this._timeout);
                    if (this.queue.length > 0 && typeof this.delay === 'number') {
                        var me = this;
                        this._timeout = setTimeout(function() {
                            me.flush();
                        }, this.delay);
                    }
                };

                /**
                 * Flush all queued calls
                 */
                Queue.prototype.flush = function() {
                    while (this._queue.length > 0) {
                        var entry = this._queue.shift();
                        entry.fn.apply(entry.context || entry.fn, entry.args || []);
                    }
                };

                module.exports = Queue;

                /***/
            }),
            /* 93 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);

                /**
                 * DataView
                 *
                 * a dataview offers a filtered view on a dataset or an other dataview.
                 *
                 * @param {DataSet | DataView} data
                 * @param {Object} [options]   Available options: see method get
                 *
                 * @constructor DataView
                 */
                function DataView(data, options) {
                    this._data = null;
                    this._ids = {}; // ids of the items currently in memory (just contains a boolean true)
                    this.length = 0; // number of items in the DataView
                    this._options = options || {};
                    this._fieldId = 'id'; // name of the field containing id
                    this._subscribers = {}; // event subscribers

                    var me = this;
                    this.listener = function() {
                        me._onEvent.apply(me, arguments);
                    };

                    this.setData(data);
                }

                // TODO: implement a function .config() to dynamically update things like configured filter
                // and trigger changes accordingly

                /**
                 * Set a data source for the view
                 * @param {DataSet | DataView} data
                 */
                DataView.prototype.setData = function(data) {
                    var ids, id, i, len, items;

                    if (this._data) {
                        // unsubscribe from current dataset
                        if (this._data.off) {
                            this._data.off('*', this.listener);
                        }

                        // trigger a remove of all items in memory
                        ids = this._data.getIds({ filter: this._options && this._options.filter });
                        items = [];

                        for (i = 0, len = ids.length; i < len; i++) {
                            items.push(this._data._data[ids[i]]);
                        }

                        this._ids = {};
                        this.length = 0;
                        this._trigger('remove', { items: ids, oldData: items });
                    }

                    this._data = data;

                    if (this._data) {
                        // update fieldId
                        this._fieldId = this._options.fieldId || this._data && this._data.options && this._data.options.fieldId || 'id';

                        // trigger an add of all added items
                        ids = this._data.getIds({ filter: this._options && this._options.filter });
                        for (i = 0, len = ids.length; i < len; i++) {
                            id = ids[i];
                            this._ids[id] = true;
                        }
                        this.length = ids.length;
                        this._trigger('add', { items: ids });

                        // subscribe to new dataset
                        if (this._data.on) {
                            this._data.on('*', this.listener);
                        }
                    }
                };

                /**
                 * Refresh the DataView. Useful when the DataView has a filter function
                 * containing a variable parameter.
                 */
                DataView.prototype.refresh = function() {
                    var id, i, len;
                    var ids = this._data.getIds({ filter: this._options && this._options.filter }),
                        oldIds = (0, _keys2['default'])(this._ids),
                        newIds = {},
                        addedIds = [],
                        removedIds = [],
                        removedItems = [];

                    // check for additions
                    for (i = 0, len = ids.length; i < len; i++) {
                        id = ids[i];
                        newIds[id] = true;
                        if (!this._ids[id]) {
                            addedIds.push(id);
                            this._ids[id] = true;
                        }
                    }

                    // check for removals
                    for (i = 0, len = oldIds.length; i < len; i++) {
                        id = oldIds[i];
                        if (!newIds[id]) {
                            removedIds.push(id);
                            removedItems.push(this._data._data[id]);
                            delete this._ids[id];
                        }
                    }

                    this.length += addedIds.length - removedIds.length;

                    // trigger events
                    if (addedIds.length) {
                        this._trigger('add', { items: addedIds });
                    }
                    if (removedIds.length) {
                        this._trigger('remove', { items: removedIds, oldData: removedItems });
                    }
                };

                /**
                 * Get data from the data view
                 *
                 * Usage:
                 *
                 *     get()
                 *     get(options: Object)
                 *     get(options: Object, data: Array | DataTable)
                 *
                 *     get(id: Number)
                 *     get(id: Number, options: Object)
                 *     get(id: Number, options: Object, data: Array | DataTable)
                 *
                 *     get(ids: Number[])
                 *     get(ids: Number[], options: Object)
                 *     get(ids: Number[], options: Object, data: Array | DataTable)
                 *
                 * Where:
                 *
                 * {Number | String} id         The id of an item
                 * {Number[] | String{}} ids    An array with ids of items
                 * {Object} options             An Object with options. Available options:
                 *                              {String} [type] Type of data to be returned. Can
                 *                                              be 'DataTable' or 'Array' (default)
                 *                              {Object.<String, String>} [convert]
                 *                              {String[]} [fields] field names to be returned
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 * {Array | DataTable} [data]   If provided, items will be appended to this
                 *                              array or table. Required in case of Google
                 *                              DataTable.
                 * @param args
                 */
                DataView.prototype.get = function(args) {
                    var me = this;

                    // parse the arguments
                    var ids, options, data;
                    var firstType = util.getType(arguments[0]);
                    if (firstType == 'String' || firstType == 'Number' || firstType == 'Array') {
                        // get(id(s) [, options] [, data])
                        ids = arguments[0]; // can be a single id or an array with ids
                        options = arguments[1];
                        data = arguments[2];
                    } else {
                        // get([, options] [, data])
                        options = arguments[0];
                        data = arguments[1];
                    }

                    // extend the options with the default options and provided options
                    var viewOptions = util.extend({}, this._options, options);

                    // create a combined filter method when needed
                    if (this._options.filter && options && options.filter) {
                        viewOptions.filter = function(item) {
                            return me._options.filter(item) && options.filter(item);
                        };
                    }

                    // build up the call to the linked data set
                    var getArguments = [];
                    if (ids != undefined) {
                        getArguments.push(ids);
                    }
                    getArguments.push(viewOptions);
                    getArguments.push(data);

                    return this._data && this._data.get.apply(this._data, getArguments);
                };

                /**
                 * Get ids of all items or from a filtered set of items.
                 * @param {Object} [options]    An Object with options. Available options:
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 * @return {Array} ids
                 */
                DataView.prototype.getIds = function(options) {
                    var ids;

                    if (this._data) {
                        var defaultFilter = this._options.filter;
                        var filter;

                        if (options && options.filter) {
                            if (defaultFilter) {
                                filter = function filter(item) {
                                    return defaultFilter(item) && options.filter(item);
                                };
                            } else {
                                filter = options.filter;
                            }
                        } else {
                            filter = defaultFilter;
                        }

                        ids = this._data.getIds({
                            filter: filter,
                            order: options && options.order
                        });
                    } else {
                        ids = [];
                    }

                    return ids;
                };

                /**
                 * Map every item in the dataset.
                 * @param {function} callback
                 * @param {Object} [options]    Available options:
                 *                              {Object.<String, String>} [type]
                 *                              {String[]} [fields] filter fields
                 *                              {function} [filter] filter items
                 *                              {String | function} [order] Order the items by
                 *                                  a field name or custom sort function.
                 * @return {Object[]} mappedItems
                 */
                DataView.prototype.map = function(callback, options) {
                    var mappedItems = [];
                    if (this._data) {
                        var defaultFilter = this._options.filter;
                        var filter;

                        if (options && options.filter) {
                            if (defaultFilter) {
                                filter = function filter(item) {
                                    return defaultFilter(item) && options.filter(item);
                                };
                            } else {
                                filter = options.filter;
                            }
                        } else {
                            filter = defaultFilter;
                        }

                        mappedItems = this._data.map(callback, {
                            filter: filter,
                            order: options && options.order
                        });
                    } else {
                        mappedItems = [];
                    }

                    return mappedItems;
                };

                /**
                 * Get the DataSet to which this DataView is connected. In case there is a chain
                 * of multiple DataViews, the root DataSet of this chain is returned.
                 * @return {DataSet} dataSet
                 */
                DataView.prototype.getDataSet = function() {
                    var dataSet = this;
                    while (dataSet instanceof DataView) {
                        dataSet = dataSet._data;
                    }
                    return dataSet || null;
                };

                /**
                 * Event listener. Will propagate all events from the connected data set to
                 * the subscribers of the DataView, but will filter the items and only trigger
                 * when there are changes in the filtered data set.
                 * @param {String} event
                 * @param {Object | null} params
                 * @param {String} senderId
                 * @private
                 */
                DataView.prototype._onEvent = function(event, params, senderId) {
                    var i, len, id, item;
                    var ids = params && params.items;
                    var addedIds = [],
                        updatedIds = [],
                        removedIds = [],
                        oldItems = [],
                        updatedItems = [],
                        removedItems = [];

                    if (ids && this._data) {
                        switch (event) {
                            case 'add':
                                // filter the ids of the added items
                                for (i = 0, len = ids.length; i < len; i++) {
                                    id = ids[i];
                                    item = this.get(id);
                                    if (item) {
                                        this._ids[id] = true;
                                        addedIds.push(id);
                                    }
                                }

                                break;

                            case 'update':
                                // determine the event from the views viewpoint: an updated
                                // item can be added, updated, or removed from this view.
                                for (i = 0, len = ids.length; i < len; i++) {
                                    id = ids[i];
                                    item = this.get(id);

                                    if (item) {
                                        if (this._ids[id]) {
                                            updatedIds.push(id);
                                            updatedItems.push(params.data[i]);
                                            oldItems.push(params.oldData[i]);
                                        } else {
                                            this._ids[id] = true;
                                            addedIds.push(id);
                                        }
                                    } else {
                                        if (this._ids[id]) {
                                            delete this._ids[id];
                                            removedIds.push(id);
                                            removedItems.push(params.oldData[i]);
                                        } else {
                                            // nothing interesting for me :-(
                                        }
                                    }
                                }

                                break;

                            case 'remove':
                                // filter the ids of the removed items
                                for (i = 0, len = ids.length; i < len; i++) {
                                    id = ids[i];
                                    if (this._ids[id]) {
                                        delete this._ids[id];
                                        removedIds.push(id);
                                        removedItems.push(params.oldData[i]);
                                    }
                                }

                                break;
                        }

                        this.length += addedIds.length - removedIds.length;

                        if (addedIds.length) {
                            this._trigger('add', { items: addedIds }, senderId);
                        }
                        if (updatedIds.length) {
                            this._trigger('update', { items: updatedIds, oldData: oldItems, data: updatedItems }, senderId);
                        }
                        if (removedIds.length) {
                            this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
                        }
                    }
                };

                // copy subscription functionality from DataSet
                DataView.prototype.on = DataSet.prototype.on;
                DataView.prototype.off = DataSet.prototype.off;
                DataView.prototype._trigger = DataSet.prototype._trigger;

                // TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)
                DataView.prototype.subscribe = DataView.prototype.on;
                DataView.prototype.unsubscribe = DataView.prototype.off;

                module.exports = DataView;

                /***/
            }),
            /* 94 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _assign = __webpack_require__(95);

                var _assign2 = _interopRequireDefault(_assign);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Emitter = __webpack_require__(99);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var util = __webpack_require__(1);
                var Point3d = __webpack_require__(100);
                var Point2d = __webpack_require__(101);
                var Camera = __webpack_require__(102);
                var Filter = __webpack_require__(107);
                var Slider = __webpack_require__(108);
                var StepNumber = __webpack_require__(109);
                var Range = __webpack_require__(110);
                var Settings = __webpack_require__(111);

                /// enumerate the available styles
                Graph3d.STYLE = Settings.STYLE;

                /**
                 * Following label is used in the settings to describe values which should be
                 * determined by the code while running, from the current data and graph style.
                 *
                 * Using 'undefined' directly achieves the same thing, but this is more
                 * descriptive by describing the intent.
                 */
                var autoByDefault = undefined;

                /**
                 * Default values for option settings.
                 *
                 * These are the values used when a Graph3d instance is initialized without
                 * custom settings.
                 *
                 * If a field is not in this list, a default value of 'autoByDefault' is assumed,
                 * which is just an alias for 'undefined'.
                 */
                var DEFAULTS = {
                    width: '400px',
                    height: '400px',
                    filterLabel: 'time',
                    legendLabel: 'value',
                    xLabel: 'x',
                    yLabel: 'y',
                    zLabel: 'z',
                    xValueLabel: function xValueLabel(v) {
                        return v;
                    },
                    yValueLabel: function yValueLabel(v) {
                        return v;
                    },
                    zValueLabel: function zValueLabel(v) {
                        return v;
                    },
                    showXAxis: true,
                    showYAxis: true,
                    showZAxis: true,
                    showGrid: true,
                    showPerspective: true,
                    showShadow: false,
                    keepAspectRatio: true,
                    verticalRatio: 0.5, // 0.1 to 1.0, where 1.0 results in a 'cube'

                    dotSizeRatio: 0.02, // size of the dots as a fraction of the graph width
                    dotSizeMinFraction: 0.5, // size of min-value dot as a fraction of dotSizeRatio	
                    dotSizeMaxFraction: 2.5, // size of max-value dot as a fraction of dotSizeRatio	

                    showAnimationControls: autoByDefault,
                    animationInterval: 1000, // milliseconds
                    animationPreload: false,
                    animationAutoStart: autoByDefault,

                    axisColor: '#4D4D4D',
                    gridColor: '#D3D3D3',
                    xCenter: '55%',
                    yCenter: '50%',

                    style: Graph3d.STYLE.DOT,
                    tooltip: false,

                    tooltipStyle: {
                        content: {
                            padding: '10px',
                            border: '1px solid #4d4d4d',
                            color: '#1a1a1a',
                            background: 'rgba(255,255,255,0.7)',
                            borderRadius: '2px',
                            boxShadow: '5px 5px 10px rgba(128,128,128,0.5)'
                        },
                        line: {
                            height: '40px',
                            width: '0',
                            borderLeft: '1px solid #4d4d4d'
                        },
                        dot: {
                            height: '0',
                            width: '0',
                            border: '5px solid #4d4d4d',
                            borderRadius: '5px'
                        }
                    },

                    showLegend: autoByDefault, // determined by graph style
                    backgroundColor: autoByDefault,

                    dataColor: {
                        fill: '#7DC1FF',
                        stroke: '#3267D2',
                        strokeWidth: 1 // px
                    },

                    cameraPosition: {
                        horizontal: 1.0,
                        vertical: 0.5,
                        distance: 1.7
                    },

                    xBarWidth: autoByDefault,
                    yBarWidth: autoByDefault,
                    valueMin: autoByDefault,
                    valueMax: autoByDefault,
                    xMin: autoByDefault,
                    xMax: autoByDefault,
                    xStep: autoByDefault,
                    yMin: autoByDefault,
                    yMax: autoByDefault,
                    yStep: autoByDefault,
                    zMin: autoByDefault,
                    zMax: autoByDefault,
                    zStep: autoByDefault
                };

                // -----------------------------------------------------------------------------
                // Class Graph3d
                // -----------------------------------------------------------------------------


                /**
                 * @constructor Graph3d
                 * Graph3d displays data in 3d.
                 *
                 * Graph3d is developed in javascript as a Google Visualization Chart.
                 *
                 * @param {Element} container   The DOM element in which the Graph3d will
                 *                              be created. Normally a div element.
                 * @param {DataSet | DataView | Array} [data]
                 * @param {Object} [options]
                 */
                function Graph3d(container, data, options) {
                    if (!(this instanceof Graph3d)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }

                    // create variables and set default values
                    this.containerElement = container;

                    this.dataTable = null; // The original data table
                    this.dataPoints = null; // The table with point objects

                    // create a frame and canvas
                    this.create();

                    Settings.setDefaults(DEFAULTS, this);

                    // the column indexes
                    this.colX = undefined;
                    this.colY = undefined;
                    this.colZ = undefined;
                    this.colValue = undefined;
                    this.colFilter = undefined;

                    // TODO: customize axis range

                    // apply options (also when undefined)
                    this.setOptions(options);

                    // apply data
                    if (data) {
                        this.setData(data);
                    }
                }

                // Extend Graph3d with an Emitter mixin
                Emitter(Graph3d.prototype);

                /**
                 * Calculate the scaling values, dependent on the range in x, y, and z direction
                 */
                Graph3d.prototype._setScale = function() {
                    this.scale = new Point3d(1 / this.xRange.range(), 1 / this.yRange.range(), 1 / this.zRange.range());

                    // keep aspect ration between x and y scale if desired
                    if (this.keepAspectRatio) {
                        if (this.scale.x < this.scale.y) {
                            //noinspection JSSuspiciousNameCombination
                            this.scale.y = this.scale.x;
                        } else {
                            //noinspection JSSuspiciousNameCombination
                            this.scale.x = this.scale.y;
                        }
                    }

                    // scale the vertical axis
                    this.scale.z *= this.verticalRatio;
                    // TODO: can this be automated? verticalRatio?

                    // determine scale for (optional) value
                    if (this.valueRange !== undefined) {
                        this.scale.value = 1 / this.valueRange.range();
                    }

                    // position the camera arm
                    var xCenter = this.xRange.center() * this.scale.x;
                    var yCenter = this.yRange.center() * this.scale.y;
                    var zCenter = this.zRange.center() * this.scale.z;
                    this.camera.setArmLocation(xCenter, yCenter, zCenter);
                };

                /**
                 * Convert a 3D location to a 2D location on screen
                 * Source: ttp://en.wikipedia.org/wiki/3D_projection
                 *
                 * @param   {Point3d} point3d  A 3D point with parameters x, y, z
                 * @returns {Point2d} point2d  A 2D point with parameters x, y
                 */
                Graph3d.prototype._convert3Dto2D = function(point3d) {
                    var translation = this._convertPointToTranslation(point3d);
                    return this._convertTranslationToScreen(translation);
                };

                /**
                 * Convert a 3D location its translation seen from the camera
                 * Source: http://en.wikipedia.org/wiki/3D_projection
                 *
                 * @param   {Point3d} point3d     A 3D point with parameters x, y, z
                 * @returns {Point3d} translation A 3D point with parameters x, y, z This is
                 *                                the translation of the point, seen from the
                 *                                camera.
                 */
                Graph3d.prototype._convertPointToTranslation = function(point3d) {
                    var cameraLocation = this.camera.getCameraLocation(),
                        cameraRotation = this.camera.getCameraRotation(),
                        ax = point3d.x * this.scale.x,
                        ay = point3d.y * this.scale.y,
                        az = point3d.z * this.scale.z,
                        cx = cameraLocation.x,
                        cy = cameraLocation.y,
                        cz = cameraLocation.z,


                        // calculate angles
                        sinTx = Math.sin(cameraRotation.x),
                        cosTx = Math.cos(cameraRotation.x),
                        sinTy = Math.sin(cameraRotation.y),
                        cosTy = Math.cos(cameraRotation.y),
                        sinTz = Math.sin(cameraRotation.z),
                        cosTz = Math.cos(cameraRotation.z),


                        // calculate translation
                        dx = cosTy * (sinTz * (ay - cy) + cosTz * (ax - cx)) - sinTy * (az - cz),
                        dy = sinTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) + cosTx * (cosTz * (ay - cy) - sinTz * (ax - cx)),
                        dz = cosTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) - sinTx * (cosTz * (ay - cy) - sinTz * (ax - cx));

                    return new Point3d(dx, dy, dz);
                };

                /**
                 * Convert a translation point to a point on the screen
                 *
                 * @param   {Point3d} translation A 3D point with parameters x, y, z This is
                 *                                the translation of the point, seen from the
                 *                                camera.
                 * @returns {Point2d} point2d     A 2D point with parameters x, y
                 */
                Graph3d.prototype._convertTranslationToScreen = function(translation) {
                    var ex = this.eye.x,
                        ey = this.eye.y,
                        ez = this.eye.z,
                        dx = translation.x,
                        dy = translation.y,
                        dz = translation.z;

                    // calculate position on screen from translation
                    var bx;
                    var by;
                    if (this.showPerspective) {
                        bx = (dx - ex) * (ez / dz);
                        by = (dy - ey) * (ez / dz);
                    } else {
                        bx = dx * -(ez / this.camera.getArmLength());
                        by = dy * -(ez / this.camera.getArmLength());
                    }

                    // shift and scale the point to the center of the screen
                    // use the width of the graph to scale both horizontally and vertically.
                    return new Point2d(this.currentXCenter + bx * this.frame.canvas.clientWidth, this.currentYCenter - by * this.frame.canvas.clientWidth);
                };

                /**
                 * Calculate the translations and screen positions of all points
                 */
                Graph3d.prototype._calcTranslations = function(points, sort) {
                    if (sort === undefined) {
                        sort = true;
                    }

                    for (var i = 0; i < points.length; i++) {
                        var point = points[i];
                        point.trans = this._convertPointToTranslation(point.point);
                        point.screen = this._convertTranslationToScreen(point.trans);

                        // calculate the translation of the point at the bottom (needed for sorting)
                        var transBottom = this._convertPointToTranslation(point.bottom);
                        point.dist = this.showPerspective ? transBottom.length() : -transBottom.z;
                    }

                    if (!sort) {
                        return;
                    }

                    // sort the points on depth of their (x,y) position (not on z)
                    var sortDepth = function sortDepth(a, b) {
                        return b.dist - a.dist;
                    };
                    points.sort(sortDepth);
                };

                Graph3d.prototype.getNumberOfRows = function(data) {
                    return data.length;
                };

                Graph3d.prototype.getNumberOfColumns = function(data) {
                    var counter = 0;
                    for (var column in data[0]) {
                        if (data[0].hasOwnProperty(column)) {
                            counter++;
                        }
                    }
                    return counter;
                };

                Graph3d.prototype.getDistinctValues = function(data, column) {
                    var distinctValues = [];
                    for (var i = 0; i < data.length; i++) {
                        if (distinctValues.indexOf(data[i][column]) == -1) {
                            distinctValues.push(data[i][column]);
                        }
                    }
                    return distinctValues.sort(function(a, b) {
                        return a - b;
                    });
                };

                /**
                 * Determine the smallest difference between the values for given
                 * column in the passed data set.
                 *
                 * @returns {Number|null} Smallest difference value or
                 *                        null, if it can't be determined.
                 */
                Graph3d.prototype.getSmallestDifference = function(data, column) {
                    var values = this.getDistinctValues(data, column);
                    var diffs = [];

                    // Get all the distinct diffs
                    // Array values is assumed to be sorted here
                    var smallest_diff = null;

                    for (var i = 1; i < values.length; i++) {
                        var diff = values[i] - values[i - 1];

                        if (smallest_diff == null || smallest_diff > diff) {
                            smallest_diff = diff;
                        }
                    }

                    return smallest_diff;
                };

                /**
                 * Get the absolute min/max values for the passed data column.
                 *
                 * @returns {Range} A Range instance with min/max members properly set.
                 */
                Graph3d.prototype.getColumnRange = function(data, column) {
                    var range = new Range();

                    // Adjust the range so that it covers all values in the passed data elements.
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i][column];
                        range.adjust(item);
                    }

                    return range;
                };

                /**
                 * Check if the state is consistent for the use of the value field.
                 *
                 * Throws if a problem is detected.
                 */
                Graph3d.prototype._checkValueField = function(data) {

                    var hasValueField = this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.DOTSIZE;

                    if (!hasValueField) {
                        return; // No need to check further
                    }

                    // Following field must be present for the current graph style
                    if (this.colValue === undefined) {
                        throw new Error('Expected data to have ' + ' field \'style\' ' + ' for graph style \'' + this.style + '\'');
                    }

                    // The data must also contain this field.
                    // Note that only first data element is checked.
                    if (data[0][this.colValue] === undefined) {
                        throw new Error('Expected data to have ' + ' field \'' + this.colValue + '\' ' + ' for graph style \'' + this.style + '\'');
                    }
                };

                /**
                 * Set default values for range
                 *
                 * The default values override the range values, if defined.
                 *
                 * Because it's possible that only defaultMin or defaultMax is set, it's better
                 * to pass in a range already set with the min/max set from the data. Otherwise,
                 * it's quite hard to process the min/max properly.
                 */
                Graph3d.prototype._setRangeDefaults = function(range, defaultMin, defaultMax) {
                    if (defaultMin !== undefined) {
                        range.min = defaultMin;
                    }

                    if (defaultMax !== undefined) {
                        range.max = defaultMax;
                    }

                    // This is the original way that the default min/max values were adjusted.
                    // TODO: Perhaps it's better if an error is thrown if the values do not agree.
                    //       But this will change the behaviour.
                    if (range.max <= range.min) range.max = range.min + 1;
                };

                /**
                 * Initialize the data from the data table. Calculate minimum and maximum values
                 * and column index values
                 * @param {Array | DataSet | DataView} rawData The data containing the items for
                 *                                             the Graph.
                 * @param {Number}                     style   Style Number
                 */
                Graph3d.prototype._dataInitialize = function(rawData, style) {
                    var me = this;

                    // unsubscribe from the dataTable
                    if (this.dataSet) {
                        this.dataSet.off('*', this._onChange);
                    }

                    if (rawData === undefined) return;

                    if (Array.isArray(rawData)) {
                        rawData = new DataSet(rawData);
                    }

                    var data;
                    if (rawData instanceof DataSet || rawData instanceof DataView) {
                        data = rawData.get();
                    } else {
                        throw new Error('Array, DataSet, or DataView expected');
                    }

                    if (data.length == 0) return;

                    this.dataSet = rawData;
                    this.dataTable = data;

                    // subscribe to changes in the dataset
                    this._onChange = function() {
                        me.setData(me.dataSet);
                    };
                    this.dataSet.on('*', this._onChange);

                    // determine the location of x,y,z,value,filter columns
                    this.colX = 'x';
                    this.colY = 'y';
                    this.colZ = 'z';

                    var withBars = this.style == Graph3d.STYLE.BAR || this.style == Graph3d.STYLE.BARCOLOR || this.style == Graph3d.STYLE.BARSIZE;

                    // determine barWidth from data
                    if (withBars) {
                        if (this.defaultXBarWidth !== undefined) {
                            this.xBarWidth = this.defaultXBarWidth;
                        } else {
                            this.xBarWidth = this.getSmallestDifference(data, this.colX) || 1;
                        }

                        if (this.defaultYBarWidth !== undefined) {
                            this.yBarWidth = this.defaultYBarWidth;
                        } else {
                            this.yBarWidth = this.getSmallestDifference(data, this.colY) || 1;
                        }
                    }

                    // calculate minimums and maximums
                    var NUMSTEPS = 5;

                    var xRange = this.getColumnRange(data, this.colX);
                    if (withBars) {
                        xRange.expand(this.xBarWidth / 2);
                    }
                    this._setRangeDefaults(xRange, this.defaultXMin, this.defaultXMax);
                    this.xRange = xRange;
                    this.xStep = this.defaultXStep !== undefined ? this.defaultXStep : xRange.range() / NUMSTEPS;

                    var yRange = this.getColumnRange(data, this.colY);
                    if (withBars) {
                        yRange.expand(this.yBarWidth / 2);
                    }
                    this._setRangeDefaults(yRange, this.defaultYMin, this.defaultYMax);
                    this.yRange = yRange;
                    this.yStep = this.defaultYStep !== undefined ? this.defaultYStep : yRange.range() / NUMSTEPS;

                    var zRange = this.getColumnRange(data, this.colZ);
                    this._setRangeDefaults(zRange, this.defaultZMin, this.defaultZMax);
                    this.zRange = zRange;
                    this.zStep = this.defaultZStep !== undefined ? this.defaultZStep : zRange.range() / NUMSTEPS;

                    if (data[0].hasOwnProperty('style')) {
                        this.colValue = 'style';
                        var valueRange = this.getColumnRange(data, this.colValue);
                        this._setRangeDefaults(valueRange, this.defaultValueMin, this.defaultValueMax);
                        this.valueRange = valueRange;
                    }

                    // check if a filter column is provided
                    // Needs to be started after zRange is defined
                    if (data[0].hasOwnProperty('filter')) {
                        // Only set this field if it's actually present
                        this.colFilter = 'filter';

                        if (this.dataFilter === undefined) {
                            this.dataFilter = new Filter(rawData, this.colFilter, this);
                            this.dataFilter.setOnLoadCallback(function() {
                                me.redraw();
                            });
                        }
                    }

                    // set the scale dependent on the ranges.
                    this._setScale();
                };

                /**
                 * Filter the data based on the current filter
                 *
                 * @param   {Array} data
                 * @returns {Array} dataPoints Array with point objects which can be drawn on
                 *                             screen
                 */
                Graph3d.prototype._getDataPoints = function(data) {
                    // TODO: store the created matrix dataPoints in the filters instead of
                    //       reloading each time.
                    var x, y, i, z, obj, point;

                    var dataPoints = [];

                    if (this.style === Graph3d.STYLE.GRID || this.style === Graph3d.STYLE.SURFACE) {
                        // copy all values from the google data table to a matrix
                        // the provided values are supposed to form a grid of (x,y) positions

                        // create two lists with all present x and y values
                        var dataX = [];
                        var dataY = [];
                        for (i = 0; i < this.getNumberOfRows(data); i++) {
                            x = data[i][this.colX] || 0;
                            y = data[i][this.colY] || 0;

                            if (dataX.indexOf(x) === -1) {
                                dataX.push(x);
                            }
                            if (dataY.indexOf(y) === -1) {
                                dataY.push(y);
                            }
                        }

                        var sortNumber = function sortNumber(a, b) {
                            return a - b;
                        };
                        dataX.sort(sortNumber);
                        dataY.sort(sortNumber);

                        // create a grid, a 2d matrix, with all values.
                        var dataMatrix = []; // temporary data matrix
                        for (i = 0; i < data.length; i++) {
                            x = data[i][this.colX] || 0;
                            y = data[i][this.colY] || 0;
                            z = data[i][this.colZ] || 0;

                            // TODO: implement Array().indexOf() for Internet Explorer
                            var xIndex = dataX.indexOf(x);
                            var yIndex = dataY.indexOf(y);

                            if (dataMatrix[xIndex] === undefined) {
                                dataMatrix[xIndex] = [];
                            }

                            var point3d = new Point3d();
                            point3d.x = x;
                            point3d.y = y;
                            point3d.z = z;
                            point3d.data = data[i];

                            obj = {};
                            obj.point = point3d;
                            obj.trans = undefined;
                            obj.screen = undefined;
                            obj.bottom = new Point3d(x, y, this.zRange.min);

                            dataMatrix[xIndex][yIndex] = obj;

                            dataPoints.push(obj);
                        }

                        // fill in the pointers to the neighbors.
                        for (x = 0; x < dataMatrix.length; x++) {
                            for (y = 0; y < dataMatrix[x].length; y++) {
                                if (dataMatrix[x][y]) {
                                    dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
                                    dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
                                    dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
                                }
                            }
                        }
                    } else {
                        // 'dot', 'dot-line', etc.
                        this._checkValueField(data);

                        // copy all values from the google data table to a list with Point3d objects
                        for (i = 0; i < data.length; i++) {
                            point = new Point3d();
                            point.x = data[i][this.colX] || 0;
                            point.y = data[i][this.colY] || 0;
                            point.z = data[i][this.colZ] || 0;
                            point.data = data[i];

                            if (this.colValue !== undefined) {
                                point.value = data[i][this.colValue] || 0;
                            }

                            obj = {};
                            obj.point = point;
                            obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
                            obj.trans = undefined;
                            obj.screen = undefined;

                            if (this.style === Graph3d.STYLE.LINE) {
                                if (i > 0) {
                                    // Add next point for line drawing
                                    dataPoints[i - 1].pointNext = obj;
                                }
                            }

                            dataPoints.push(obj);
                        }
                    }

                    return dataPoints;
                };

                /**
                 * Create the main frame for the Graph3d.
                 *
                 * This function is executed once when a Graph3d object is created. The frame
                 * contains a canvas, and this canvas contains all objects like the axis and
                 * nodes.
                 */
                Graph3d.prototype.create = function() {
                    // remove all elements from the container element.
                    while (this.containerElement.hasChildNodes()) {
                        this.containerElement.removeChild(this.containerElement.firstChild);
                    }

                    this.frame = document.createElement('div');
                    this.frame.style.position = 'relative';
                    this.frame.style.overflow = 'hidden';

                    // create the graph canvas (HTML canvas element)
                    this.frame.canvas = document.createElement('canvas');
                    this.frame.canvas.style.position = 'relative';
                    this.frame.appendChild(this.frame.canvas);
                    //if (!this.frame.canvas.getContext) {
                    {
                        var noCanvas = document.createElement('DIV');
                        noCanvas.style.color = 'red';
                        noCanvas.style.fontWeight = 'bold';
                        noCanvas.style.padding = '10px';
                        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
                        this.frame.canvas.appendChild(noCanvas);
                    }

                    this.frame.filter = document.createElement('div');
                    this.frame.filter.style.position = 'absolute';
                    this.frame.filter.style.bottom = '0px';
                    this.frame.filter.style.left = '0px';
                    this.frame.filter.style.width = '100%';
                    this.frame.appendChild(this.frame.filter);

                    // add event listeners to handle moving and zooming the contents
                    var me = this;
                    var onmousedown = function onmousedown(event) {
                        me._onMouseDown(event);
                    };
                    var ontouchstart = function ontouchstart(event) {
                        me._onTouchStart(event);
                    };
                    var onmousewheel = function onmousewheel(event) {
                        me._onWheel(event);
                    };
                    var ontooltip = function ontooltip(event) {
                        me._onTooltip(event);
                    };
                    var onclick = function onclick(event) {
                        me._onClick(event);
                    };
                    // TODO: these events are never cleaned up... can give a 'memory leakage'

                    util.addEventListener(this.frame.canvas, 'mousedown', onmousedown);
                    util.addEventListener(this.frame.canvas, 'touchstart', ontouchstart);
                    util.addEventListener(this.frame.canvas, 'mousewheel', onmousewheel);
                    util.addEventListener(this.frame.canvas, 'mousemove', ontooltip);
                    util.addEventListener(this.frame.canvas, 'click', onclick);

                    // add the new graph to the container element
                    this.containerElement.appendChild(this.frame);
                };

                /**
                 * Set a new size for the graph
                 */
                Graph3d.prototype._setSize = function(width, height) {
                    this.frame.style.width = width;
                    this.frame.style.height = height;

                    this._resizeCanvas();
                };

                /**
                 * Resize the canvas to the current size of the frame
                 */
                Graph3d.prototype._resizeCanvas = function() {
                    this.frame.canvas.style.width = '100%';
                    this.frame.canvas.style.height = '100%';

                    this.frame.canvas.width = this.frame.canvas.clientWidth;
                    this.frame.canvas.height = this.frame.canvas.clientHeight;

                    // adjust with for margin
                    this.frame.filter.style.width = this.frame.canvas.clientWidth - 2 * 10 + 'px';
                };

                /**
                 * Start animation
                 */
                Graph3d.prototype.animationStart = function() {
                    if (!this.frame.filter || !this.frame.filter.slider) throw new Error('No animation available');

                    this.frame.filter.slider.play();
                };

                /**
                 * Stop animation
                 */
                Graph3d.prototype.animationStop = function() {
                    if (!this.frame.filter || !this.frame.filter.slider) return;

                    this.frame.filter.slider.stop();
                };

                /**
                 * Resize the center position based on the current values in this.xCenter
                 * and this.yCenter (which are strings with a percentage or a value
                 * in pixels). The center positions are the variables this.currentXCenter
                 * and this.currentYCenter
                 */
                Graph3d.prototype._resizeCenter = function() {
                    // calculate the horizontal center position
                    if (this.xCenter.charAt(this.xCenter.length - 1) === '%') {
                        this.currentXCenter = parseFloat(this.xCenter) / 100 * this.frame.canvas.clientWidth;
                    } else {
                        this.currentXCenter = parseFloat(this.xCenter); // supposed to be in px
                    }

                    // calculate the vertical center position
                    if (this.yCenter.charAt(this.yCenter.length - 1) === '%') {
                        this.currentYCenter = parseFloat(this.yCenter) / 100 * (this.frame.canvas.clientHeight - this.frame.filter.clientHeight);
                    } else {
                        this.currentYCenter = parseFloat(this.yCenter); // supposed to be in px
                    }
                };

                /**
                 * Retrieve the current camera rotation
                 *
                 * @returns {object} An object with parameters horizontal, vertical, and
                 *                   distance
                 */
                Graph3d.prototype.getCameraPosition = function() {
                    var pos = this.camera.getArmRotation();
                    pos.distance = this.camera.getArmLength();
                    return pos;
                };

                /**
                 * Load data into the 3D Graph
                 */
                Graph3d.prototype._readData = function(data) {
                    // read the data
                    this._dataInitialize(data, this.style);

                    if (this.dataFilter) {
                        // apply filtering
                        this.dataPoints = this.dataFilter._getDataPoints();
                    } else {
                        // no filtering. load all data
                        this.dataPoints = this._getDataPoints(this.dataTable);
                    }

                    // draw the filter
                    this._redrawFilter();
                };

                /**
                 * Replace the dataset of the Graph3d
                 *
                 * @param {Array | DataSet | DataView} data
                 */
                Graph3d.prototype.setData = function(data) {
                    this._readData(data);
                    this.redraw();

                    // start animation when option is true
                    if (this.animationAutoStart && this.dataFilter) {
                        this.animationStart();
                    }
                };

                /**
                 * Update the options. Options will be merged with current options
                 *
                 * @param {Object} options
                 */
                Graph3d.prototype.setOptions = function(options) {
                    var cameraPosition = undefined;

                    this.animationStop();

                    Settings.setOptions(options, this);

                    this.setPointDrawingMethod();
                    this._setSize(this.width, this.height);

                    // re-load the data
                    if (this.dataTable) {
                        this.setData(this.dataTable);
                    }

                    // start animation when option is true
                    if (this.animationAutoStart && this.dataFilter) {
                        this.animationStart();
                    }
                };

                /**
                 * Determine which point drawing method to use for the current graph style.
                 */
                Graph3d.prototype.setPointDrawingMethod = function() {
                    var method = undefined;

                    switch (this.style) {
                        case Graph3d.STYLE.BAR:
                            method = Graph3d.prototype._redrawBarGraphPoint;
                            break;
                        case Graph3d.STYLE.BARCOLOR:
                            method = Graph3d.prototype._redrawBarColorGraphPoint;
                            break;
                        case Graph3d.STYLE.BARSIZE:
                            method = Graph3d.prototype._redrawBarSizeGraphPoint;
                            break;
                        case Graph3d.STYLE.DOT:
                            method = Graph3d.prototype._redrawDotGraphPoint;
                            break;
                        case Graph3d.STYLE.DOTLINE:
                            method = Graph3d.prototype._redrawDotLineGraphPoint;
                            break;
                        case Graph3d.STYLE.DOTCOLOR:
                            method = Graph3d.prototype._redrawDotColorGraphPoint;
                            break;
                        case Graph3d.STYLE.DOTSIZE:
                            method = Graph3d.prototype._redrawDotSizeGraphPoint;
                            break;
                        case Graph3d.STYLE.SURFACE:
                            method = Graph3d.prototype._redrawSurfaceGraphPoint;
                            break;
                        case Graph3d.STYLE.GRID:
                            method = Graph3d.prototype._redrawGridGraphPoint;
                            break;
                        case Graph3d.STYLE.LINE:
                            method = Graph3d.prototype._redrawLineGraphPoint;
                            break;
                        default:
                            throw new Error('Can not determine point drawing method ' + 'for graph style \'' + this.style + '\'');
                    }

                    this._pointDrawingMethod = method;
                };

                /**
                 * Redraw the Graph.
                 */
                Graph3d.prototype.redraw = function() {
                    if (this.dataPoints === undefined) {
                        throw new Error('Graph data not initialized');
                    }

                    this._resizeCanvas();
                    this._resizeCenter();
                    this._redrawSlider();
                    this._redrawClear();
                    this._redrawAxis();

                    this._redrawDataGraph();

                    this._redrawInfo();
                    this._redrawLegend();
                };

                /**
                 * Get drawing context without exposing canvas
                 */
                Graph3d.prototype._getContext = function() {
                    var canvas = this.frame.canvas;
                    var ctx = canvas.getContext('2d');

                    ctx.lineJoin = 'round';
                    ctx.lineCap = 'round';

                    return ctx;
                };

                /**
                 * Clear the canvas before redrawing
                 */
                Graph3d.prototype._redrawClear = function() {
                    var canvas = this.frame.canvas;
                    var ctx = canvas.getContext('2d');

                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                };

                Graph3d.prototype._dotSize = function() {
                    return this.frame.clientWidth * this.dotSizeRatio;
                };

                /**
                 * Get legend width
                 */
                Graph3d.prototype._getLegendWidth = function() {
                    var width;

                    if (this.style === Graph3d.STYLE.DOTSIZE) {
                        var dotSize = this._dotSize();
                        //width =  dotSize / 2 + dotSize * 2;
                        width = dotSize * this.dotSizeMaxFraction;
                    } else if (this.style === Graph3d.STYLE.BARSIZE) {
                        width = this.xBarWidth;
                    } else {
                        width = 20;
                    }
                    return width;
                };

                /**
                 * Redraw the legend based on size, dot color, or surface height
                 */
                Graph3d.prototype._redrawLegend = function() {

                    //Return without drawing anything, if no legend is specified
                    if (this.showLegend !== true) {
                        return;
                    }

                    // Do not draw legend when graph style does not support
                    if (this.style === Graph3d.STYLE.LINE || this.style === Graph3d.STYLE.BARSIZE //TODO add legend support for BARSIZE
                    ) {
                        return;
                    }

                    // Legend types - size and color. Determine if size legend.
                    var isSizeLegend = this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTSIZE;

                    // Legend is either tracking z values or style values. This flag if false means use z values.
                    var isValueLegend = this.style === Graph3d.STYLE.DOTSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.BARCOLOR;

                    var height = Math.max(this.frame.clientHeight * 0.25, 100);
                    var top = this.margin;
                    var width = this._getLegendWidth(); // px - overwritten by size legend
                    var right = this.frame.clientWidth - this.margin;
                    var left = right - width;
                    var bottom = top + height;

                    var ctx = this._getContext();
                    ctx.lineWidth = 1;
                    ctx.font = '14px arial'; // TODO: put in options

                    if (isSizeLegend === false) {
                        // draw the color bar
                        var ymin = 0;
                        var ymax = height; // Todo: make height customizable
                        var y;

                        for (y = ymin; y < ymax; y++) {
                            var f = (y - ymin) / (ymax - ymin);
                            var hue = f * 240;
                            var color = this._hsv2rgb(hue, 1, 1);

                            ctx.strokeStyle = color;
                            ctx.beginPath();
                            ctx.moveTo(left, top + y);
                            ctx.lineTo(right, top + y);
                            ctx.stroke();
                        }
                        ctx.strokeStyle = this.axisColor;
                        ctx.strokeRect(left, top, width, height);
                    } else {

                        // draw the size legend box
                        var widthMin;
                        if (this.style === Graph3d.STYLE.DOTSIZE) {
                            // Get the proportion to max and min right
                            widthMin = width * (this.dotSizeMinFraction / this.dotSizeMaxFraction);
                        } else if (this.style === Graph3d.STYLE.BARSIZE) {
                            //widthMin = this.xBarWidth * 0.2 this is wrong - barwidth measures in terms of xvalues
                        }
                        ctx.strokeStyle = this.axisColor;
                        ctx.fillStyle = this.dataColor.fill;
                        ctx.beginPath();
                        ctx.moveTo(left, top);
                        ctx.lineTo(right, top);
                        ctx.lineTo(left + widthMin, bottom);
                        ctx.lineTo(left, bottom);
                        ctx.closePath();
                        ctx.fill();
                        ctx.stroke();
                    }

                    // print value text along the legend edge
                    var gridLineLen = 5; // px

                    var legendMin = isValueLegend ? this.valueRange.min : this.zRange.min;
                    var legendMax = isValueLegend ? this.valueRange.max : this.zRange.max;
                    var step = new StepNumber(legendMin, legendMax, (legendMax - legendMin) / 5, true);
                    step.start(true);

                    var y;
                    var from;
                    var to;
                    while (!step.end()) {
                        y = bottom - (step.getCurrent() - legendMin) / (legendMax - legendMin) * height;
                        from = new Point2d(left - gridLineLen, y);
                        to = new Point2d(left, y);
                        this._line(ctx, from, to);

                        ctx.textAlign = 'right';
                        ctx.textBaseline = 'middle';
                        ctx.fillStyle = this.axisColor;
                        ctx.fillText(step.getCurrent(), left - 2 * gridLineLen, y);

                        step.next();
                    }

                    ctx.textAlign = 'right';
                    ctx.textBaseline = 'top';
                    var label = this.legendLabel;
                    ctx.fillText(label, right, bottom + this.margin);
                };

                /**
                 * Redraw the filter
                 */
                Graph3d.prototype._redrawFilter = function() {
                    this.frame.filter.innerHTML = '';

                    if (this.dataFilter) {
                        var options = {
                            'visible': this.showAnimationControls
                        };
                        var slider = new Slider(this.frame.filter, options);
                        this.frame.filter.slider = slider;

                        // TODO: css here is not nice here...
                        this.frame.filter.style.padding = '10px';
                        //this.frame.filter.style.backgroundColor = '#EFEFEF';

                        slider.setValues(this.dataFilter.values);
                        slider.setPlayInterval(this.animationInterval);

                        // create an event handler
                        var me = this;
                        var onchange = function onchange() {
                            var index = slider.getIndex();

                            me.dataFilter.selectValue(index);
                            me.dataPoints = me.dataFilter._getDataPoints();

                            me.redraw();
                        };
                        slider.setOnChangeCallback(onchange);
                    } else {
                        this.frame.filter.slider = undefined;
                    }
                };

                /**
                 * Redraw the slider
                 */
                Graph3d.prototype._redrawSlider = function() {
                    if (this.frame.filter.slider !== undefined) {
                        this.frame.filter.slider.redraw();
                    }
                };

                /**
                 * Redraw common information
                 */
                Graph3d.prototype._redrawInfo = function() {
                    if (this.dataFilter) {
                        var ctx = this._getContext();

                        ctx.font = '14px arial'; // TODO: put in options
                        ctx.lineStyle = 'gray';
                        ctx.fillStyle = 'gray';
                        ctx.textAlign = 'left';
                        ctx.textBaseline = 'top';

                        var x = this.margin;
                        var y = this.margin;
                        ctx.fillText(this.dataFilter.getLabel() + ': ' + this.dataFilter.getSelectedValue(), x, y);
                    }
                };

                /**
                 * Draw a line between 2d points 'from' and 'to'.
                 *
                 * If stroke style specified, set that as well.
                 */
                Graph3d.prototype._line = function(ctx, from, to, strokeStyle) {
                    if (strokeStyle !== undefined) {
                        ctx.strokeStyle = strokeStyle;
                    }

                    ctx.beginPath();
                    ctx.moveTo(from.x, from.y);
                    ctx.lineTo(to.x, to.y);
                    ctx.stroke();
                };

                Graph3d.prototype.drawAxisLabelX = function(ctx, point3d, text, armAngle, yMargin) {
                    if (yMargin === undefined) {
                        yMargin = 0;
                    }

                    var point2d = this._convert3Dto2D(point3d);

                    if (Math.cos(armAngle * 2) > 0) {
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'top';
                        point2d.y += yMargin;
                    } else if (Math.sin(armAngle * 2) < 0) {
                        ctx.textAlign = 'right';
                        ctx.textBaseline = 'middle';
                    } else {
                        ctx.textAlign = 'left';
                        ctx.textBaseline = 'middle';
                    }

                    ctx.fillStyle = this.axisColor;
                    ctx.fillText(text, point2d.x, point2d.y);
                };

                Graph3d.prototype.drawAxisLabelY = function(ctx, point3d, text, armAngle, yMargin) {
                    if (yMargin === undefined) {
                        yMargin = 0;
                    }

                    var point2d = this._convert3Dto2D(point3d);

                    if (Math.cos(armAngle * 2) < 0) {
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'top';
                        point2d.y += yMargin;
                    } else if (Math.sin(armAngle * 2) > 0) {
                        ctx.textAlign = 'right';
                        ctx.textBaseline = 'middle';
                    } else {
                        ctx.textAlign = 'left';
                        ctx.textBaseline = 'middle';
                    }

                    ctx.fillStyle = this.axisColor;
                    ctx.fillText(text, point2d.x, point2d.y);
                };

                Graph3d.prototype.drawAxisLabelZ = function(ctx, point3d, text, offset) {
                    if (offset === undefined) {
                        offset = 0;
                    }

                    var point2d = this._convert3Dto2D(point3d);
                    ctx.textAlign = 'right';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = this.axisColor;
                    ctx.fillText(text, point2d.x - offset, point2d.y);
                };

                /**


                /**
                 * Draw a line between 2d points 'from' and 'to'.
                 *
                 * If stroke style specified, set that as well.
                 */
                Graph3d.prototype._line3d = function(ctx, from, to, strokeStyle) {
                    var from2d = this._convert3Dto2D(from);
                    var to2d = this._convert3Dto2D(to);

                    this._line(ctx, from2d, to2d, strokeStyle);
                };

                /**
                 * Redraw the axis
                 */
                Graph3d.prototype._redrawAxis = function() {
                    var ctx = this._getContext(),
                        from,
                        to,
                        step,
                        prettyStep,
                        text,
                        xText,
                        yText,
                        zText,
                        offset,
                        xOffset,
                        yOffset;

                    // TODO: get the actual rendered style of the containerElement
                    //ctx.font = this.containerElement.style.font;
                    ctx.font = 24 / this.camera.getArmLength() + 'px arial';

                    // calculate the length for the short grid lines
                    var gridLenX = 0.025 / this.scale.x;
                    var gridLenY = 0.025 / this.scale.y;
                    var textMargin = 5 / this.camera.getArmLength(); // px
                    var armAngle = this.camera.getArmRotation().horizontal;
                    var armVector = new Point2d(Math.cos(armAngle), Math.sin(armAngle));

                    var xRange = this.xRange;
                    var yRange = this.yRange;
                    var zRange = this.zRange;

                    // draw x-grid lines
                    ctx.lineWidth = 1;
                    prettyStep = this.defaultXStep === undefined;
                    step = new StepNumber(xRange.min, xRange.max, this.xStep, prettyStep);
                    step.start(true);

                    while (!step.end()) {
                        var x = step.getCurrent();

                        if (this.showGrid) {
                            from = new Point3d(x, yRange.min, zRange.min);
                            to = new Point3d(x, yRange.max, zRange.min);
                            this._line3d(ctx, from, to, this.gridColor);
                        } else if (this.showXAxis) {
                            from = new Point3d(x, yRange.min, zRange.min);
                            to = new Point3d(x, yRange.min + gridLenX, zRange.min);
                            this._line3d(ctx, from, to, this.axisColor);

                            from = new Point3d(x, yRange.max, zRange.min);
                            to = new Point3d(x, yRange.max - gridLenX, zRange.min);
                            this._line3d(ctx, from, to, this.axisColor);
                        }

                        if (this.showXAxis) {
                            yText = armVector.x > 0 ? yRange.min : yRange.max;
                            var point3d = new Point3d(x, yText, zRange.min);
                            var msg = '  ' + this.xValueLabel(x) + '  ';
                            this.drawAxisLabelX(ctx, point3d, msg, armAngle, textMargin);
                        }

                        step.next();
                    }

                    // draw y-grid lines
                    ctx.lineWidth = 1;
                    prettyStep = this.defaultYStep === undefined;
                    step = new StepNumber(yRange.min, yRange.max, this.yStep, prettyStep);
                    step.start(true);

                    while (!step.end()) {
                        var y = step.getCurrent();

                        if (this.showGrid) {
                            from = new Point3d(xRange.min, y, zRange.min);
                            to = new Point3d(xRange.max, y, zRange.min);
                            this._line3d(ctx, from, to, this.gridColor);
                        } else if (this.showYAxis) {
                            from = new Point3d(xRange.min, y, zRange.min);
                            to = new Point3d(xRange.min + gridLenY, y, zRange.min);
                            this._line3d(ctx, from, to, this.axisColor);

                            from = new Point3d(xRange.max, y, zRange.min);
                            to = new Point3d(xRange.max - gridLenY, y, zRange.min);
                            this._line3d(ctx, from, to, this.axisColor);
                        }

                        if (this.showYAxis) {
                            xText = armVector.y > 0 ? xRange.min : xRange.max;
                            point3d = new Point3d(xText, y, zRange.min);
                            var msg = '  ' + this.yValueLabel(y) + '  ';
                            this.drawAxisLabelY(ctx, point3d, msg, armAngle, textMargin);
                        }

                        step.next();
                    }

                    // draw z-grid lines and axis
                    if (this.showZAxis) {
                        ctx.lineWidth = 1;
                        prettyStep = this.defaultZStep === undefined;
                        step = new StepNumber(zRange.min, zRange.max, this.zStep, prettyStep);
                        step.start(true);

                        xText = armVector.x > 0 ? xRange.min : xRange.max;
                        yText = armVector.y < 0 ? yRange.min : yRange.max;

                        while (!step.end()) {
                            var z = step.getCurrent();

                            // TODO: make z-grid lines really 3d?
                            var from3d = new Point3d(xText, yText, z);
                            var from2d = this._convert3Dto2D(from3d);
                            to = new Point2d(from2d.x - textMargin, from2d.y);
                            this._line(ctx, from2d, to, this.axisColor);

                            var msg = this.zValueLabel(z) + ' ';
                            this.drawAxisLabelZ(ctx, from3d, msg, 5);

                            step.next();
                        }

                        ctx.lineWidth = 1;
                        from = new Point3d(xText, yText, zRange.min);
                        to = new Point3d(xText, yText, zRange.max);
                        this._line3d(ctx, from, to, this.axisColor);
                    }

                    // draw x-axis
                    if (this.showXAxis) {
                        var xMin2d;
                        var xMax2d;
                        ctx.lineWidth = 1;

                        // line at yMin
                        xMin2d = new Point3d(xRange.min, yRange.min, zRange.min);
                        xMax2d = new Point3d(xRange.max, yRange.min, zRange.min);
                        this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
                        // line at ymax
                        xMin2d = new Point3d(xRange.min, yRange.max, zRange.min);
                        xMax2d = new Point3d(xRange.max, yRange.max, zRange.min);
                        this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
                    }

                    // draw y-axis
                    if (this.showYAxis) {
                        ctx.lineWidth = 1;
                        // line at xMin
                        from = new Point3d(xRange.min, yRange.min, zRange.min);
                        to = new Point3d(xRange.min, yRange.max, zRange.min);
                        this._line3d(ctx, from, to, this.axisColor);
                        // line at xMax
                        from = new Point3d(xRange.max, yRange.min, zRange.min);
                        to = new Point3d(xRange.max, yRange.max, zRange.min);
                        this._line3d(ctx, from, to, this.axisColor);
                    }

                    // draw x-label
                    var xLabel = this.xLabel;
                    if (xLabel.length > 0 && this.showXAxis) {
                        yOffset = 0.1 / this.scale.y;
                        xText = (xRange.max + 3 * xRange.min) / 4;
                        yText = armVector.x > 0 ? yRange.min - yOffset : yRange.max + yOffset;
                        text = new Point3d(xText, yText, zRange.min);
                        this.drawAxisLabelX(ctx, text, xLabel, armAngle);
                    }

                    // draw y-label
                    var yLabel = this.yLabel;
                    if (yLabel.length > 0 && this.showYAxis) {
                        xOffset = 0.1 / this.scale.x;
                        xText = armVector.y > 0 ? xRange.min - xOffset : xRange.max + xOffset;
                        yText = (yRange.max + 3 * yRange.min) / 4;
                        text = new Point3d(xText, yText, zRange.min);

                        this.drawAxisLabelY(ctx, text, yLabel, armAngle);
                    }

                    // draw z-label
                    var zLabel = this.zLabel;
                    if (zLabel.length > 0 && this.showZAxis) {
                        offset = 30; // pixels.  // TODO: relate to the max width of the values on the z axis?
                        xText = armVector.x > 0 ? xRange.min : xRange.max;
                        yText = armVector.y < 0 ? yRange.min : yRange.max;
                        zText = (zRange.max + 3 * zRange.min) / 4;
                        text = new Point3d(xText, yText, zText);

                        this.drawAxisLabelZ(ctx, text, zLabel, offset);
                    }
                };

                /**
                 * Calculate the color based on the given value.
                 * @param {Number} H   Hue, a value be between 0 and 360
                 * @param {Number} S   Saturation, a value between 0 and 1
                 * @param {Number} V   Value, a value between 0 and 1
                 */
                Graph3d.prototype._hsv2rgb = function(H, S, V) {
                    var R, G, B, C, Hi, X;

                    C = V * S;
                    Hi = Math.floor(H / 60); // hi = 0,1,2,3,4,5
                    X = C * (1 - Math.abs(H / 60 % 2 - 1));

                    switch (Hi) {
                        case 0:
                            R = C;
                            G = X;
                            B = 0;
                            break;
                        case 1:
                            R = X;
                            G = C;
                            B = 0;
                            break;
                        case 2:
                            R = 0;
                            G = C;
                            B = X;
                            break;
                        case 3:
                            R = 0;
                            G = X;
                            B = C;
                            break;
                        case 4:
                            R = X;
                            G = 0;
                            B = C;
                            break;
                        case 5:
                            R = C;
                            G = 0;
                            B = X;
                            break;

                        default:
                            R = 0;
                            G = 0;
                            B = 0;
                            break;
                    }

                    return 'RGB(' + parseInt(R * 255) + ',' + parseInt(G * 255) + ',' + parseInt(B * 255) + ')';
                };

                Graph3d.prototype._getStrokeWidth = function(point) {
                    if (point !== undefined) {
                        if (this.showPerspective) {
                            return 1 / -point.trans.z * this.dataColor.strokeWidth;
                        } else {
                            return -(this.eye.z / this.camera.getArmLength()) * this.dataColor.strokeWidth;
                        }
                    }

                    return this.dataColor.strokeWidth;
                };

                // -----------------------------------------------------------------------------
                // Drawing primitives for the graphs
                // -----------------------------------------------------------------------------


                /**
                 * Draw a bar element in the view with the given properties.
                 */
                Graph3d.prototype._redrawBar = function(ctx, point, xWidth, yWidth, color, borderColor) {
                    var i, j, surface;

                    // calculate all corner points
                    var me = this;
                    var point3d = point.point;
                    var zMin = this.zRange.min;
                    var top = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, point3d.z) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, point3d.z) }];
                    var bottom = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, zMin) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, zMin) }];

                    // calculate screen location of the points
                    top.forEach(function(obj) {
                        obj.screen = me._convert3Dto2D(obj.point);
                    });
                    bottom.forEach(function(obj) {
                        obj.screen = me._convert3Dto2D(obj.point);
                    });

                    // create five sides, calculate both corner points and center points
                    var surfaces = [{ corners: top, center: Point3d.avg(bottom[0].point, bottom[2].point) }, { corners: [top[0], top[1], bottom[1], bottom[0]], center: Point3d.avg(bottom[1].point, bottom[0].point) }, { corners: [top[1], top[2], bottom[2], bottom[1]], center: Point3d.avg(bottom[2].point, bottom[1].point) }, { corners: [top[2], top[3], bottom[3], bottom[2]], center: Point3d.avg(bottom[3].point, bottom[2].point) }, { corners: [top[3], top[0], bottom[0], bottom[3]], center: Point3d.avg(bottom[0].point, bottom[3].point) }];
                    point.surfaces = surfaces;

                    // calculate the distance of each of the surface centers to the camera
                    for (j = 0; j < surfaces.length; j++) {
                        surface = surfaces[j];
                        var transCenter = this._convertPointToTranslation(surface.center);
                        surface.dist = this.showPerspective ? transCenter.length() : -transCenter.z;
                        // TODO: this dept calculation doesn't work 100% of the cases due to perspective,
                        //     but the current solution is fast/simple and works in 99.9% of all cases
                        //     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
                    }

                    // order the surfaces by their (translated) depth
                    surfaces.sort(function(a, b) {
                        var diff = b.dist - a.dist;
                        if (diff) return diff;

                        // if equal depth, sort the top surface last
                        if (a.corners === top) return 1;
                        if (b.corners === top) return -1;

                        // both are equal
                        return 0;
                    });

                    // draw the ordered surfaces
                    ctx.lineWidth = this._getStrokeWidth(point);
                    ctx.strokeStyle = borderColor;
                    ctx.fillStyle = color;
                    // NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside
                    for (j = 2; j < surfaces.length; j++) {
                        surface = surfaces[j];
                        this._polygon(ctx, surface.corners);
                    }
                };

                /**
                 * Draw a polygon using the passed points and fill it with the passed style and stroke.
                 *
                 * @param points      an array of points.
                 * @param fillStyle   optional; the fill style to set
                 * @param strokeStyle optional; the stroke style to set
                 */
                Graph3d.prototype._polygon = function(ctx, points, fillStyle, strokeStyle) {
                    if (points.length < 2) {
                        return;
                    }

                    if (fillStyle !== undefined) {
                        ctx.fillStyle = fillStyle;
                    }
                    if (strokeStyle !== undefined) {
                        ctx.strokeStyle = strokeStyle;
                    }
                    ctx.beginPath();
                    ctx.moveTo(points[0].screen.x, points[0].screen.y);

                    for (var i = 1; i < points.length; ++i) {
                        var point = points[i];
                        ctx.lineTo(point.screen.x, point.screen.y);
                    }

                    ctx.closePath();
                    ctx.fill();
                    ctx.stroke(); // TODO: only draw stroke when strokeWidth > 0
                };

                /**
                 * @param size optional; if not specified use value from 'this._dotSize()`
                 */
                Graph3d.prototype._drawCircle = function(ctx, point, color, borderColor, size) {
                    var radius = this._calcRadius(point, size);

                    ctx.lineWidth = this._getStrokeWidth(point);
                    ctx.strokeStyle = borderColor;
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.arc(point.screen.x, point.screen.y, radius, 0, Math.PI * 2, true);
                    ctx.fill();
                    ctx.stroke();
                };

                /**
                 * Determine the colors for the 'regular' graph styles.
                 */
                Graph3d.prototype._getColorsRegular = function(point) {
                    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
                    var hue = (1 - (point.point.z - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
                    var color = this._hsv2rgb(hue, 1, 1);
                    var borderColor = this._hsv2rgb(hue, 1, 0.8);

                    return {
                        fill: color,
                        border: borderColor
                    };
                };

                /**
                 * Get the colors for the 'color' graph styles.
                 * These styles are currently: 'bar-color' and 'dot-color'
                 * Color may be set as a string representation of HTML color, like #ff00ff,
                 * or calculated from a number, for example, distance from this point
                 * The first option is useful when we have some pre-given legend, to which we have to adjust ourselves
                 * The second option is useful when we are interested in automatically setting the color, from some value,
                 * using some color scale
                 */
                Graph3d.prototype._getColorsColor = function(point) {
                    // calculate the color based on the value
                    var color, borderColor;

                    if (typeof point.point.value === "string") {
                        color = point.point.value;
                        borderColor = point.point.value;
                    } else {
                        var hue = (1 - (point.point.value - this.valueRange.min) * this.scale.value) * 240;
                        color = this._hsv2rgb(hue, 1, 1);
                        borderColor = this._hsv2rgb(hue, 1, 0.8);
                    }
                    return {
                        fill: color,
                        border: borderColor
                    };
                };

                /**
                 * Get the colors for the 'size' graph styles.
                 * These styles are currently: 'bar-size' and 'dot-size'
                 */
                Graph3d.prototype._getColorsSize = function() {
                    return {
                        fill: this.dataColor.fill,
                        border: this.dataColor.stroke
                    };
                };

                /**
                 * Determine the size of a point on-screen, as determined by the
                 * distance to the camera.
                 *
                 * @param size the size that needs to be translated to screen coordinates.
                 *             optional; if not passed, use the default point size.
                 */
                Graph3d.prototype._calcRadius = function(point, size) {
                    if (size === undefined) {
                        size = this._dotSize();
                    }

                    var radius;
                    if (this.showPerspective) {
                        radius = size / -point.trans.z;
                    } else {
                        radius = size * -(this.eye.z / this.camera.getArmLength());
                    }
                    if (radius < 0) {
                        radius = 0;
                    }

                    return radius;
                };

                // -----------------------------------------------------------------------------
                // Methods for drawing points per graph style.
                // -----------------------------------------------------------------------------


                /**
                 * Draw single datapoint for graph style 'bar'.
                 */
                Graph3d.prototype._redrawBarGraphPoint = function(ctx, point) {
                    var xWidth = this.xBarWidth / 2;
                    var yWidth = this.yBarWidth / 2;
                    var colors = this._getColorsRegular(point);

                    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
                };

                /**
                 * Draw single datapoint for graph style 'bar-color'.
                 */
                Graph3d.prototype._redrawBarColorGraphPoint = function(ctx, point) {
                    var xWidth = this.xBarWidth / 2;
                    var yWidth = this.yBarWidth / 2;
                    var colors = this._getColorsColor(point);

                    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
                };

                /**
                 * Draw single datapoint for graph style 'bar-size'.
                 */
                Graph3d.prototype._redrawBarSizeGraphPoint = function(ctx, point) {
                    // calculate size for the bar
                    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
                    var xWidth = this.xBarWidth / 2 * (fraction * 0.8 + 0.2);
                    var yWidth = this.yBarWidth / 2 * (fraction * 0.8 + 0.2);

                    var colors = this._getColorsSize();

                    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
                };

                /**
                 * Draw single datapoint for graph style 'dot'.
                 */
                Graph3d.prototype._redrawDotGraphPoint = function(ctx, point) {
                    var colors = this._getColorsRegular(point);

                    this._drawCircle(ctx, point, colors.fill, colors.border);
                };

                /**
                 * Draw single datapoint for graph style 'dot-line'.
                 */
                Graph3d.prototype._redrawDotLineGraphPoint = function(ctx, point) {
                    // draw a vertical line from the XY-plane to the graph value
                    var from = this._convert3Dto2D(point.bottom);
                    ctx.lineWidth = 1;
                    this._line(ctx, from, point.screen, this.gridColor);

                    this._redrawDotGraphPoint(ctx, point);
                };

                /**
                 * Draw single datapoint for graph style 'dot-color'.
                 */
                Graph3d.prototype._redrawDotColorGraphPoint = function(ctx, point) {
                    var colors = this._getColorsColor(point);

                    this._drawCircle(ctx, point, colors.fill, colors.border);
                };

                /**
                 * Draw single datapoint for graph style 'dot-size'.
                 */
                Graph3d.prototype._redrawDotSizeGraphPoint = function(ctx, point) {
                    var dotSize = this._dotSize();
                    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();

                    var sizeMin = dotSize * this.dotSizeMinFraction;
                    var sizeRange = dotSize * this.dotSizeMaxFraction - sizeMin;
                    var size = sizeMin + sizeRange * fraction;

                    var colors = this._getColorsSize();

                    this._drawCircle(ctx, point, colors.fill, colors.border, size);
                };

                /**
                 * Draw single datapoint for graph style 'surface'.
                 */
                Graph3d.prototype._redrawSurfaceGraphPoint = function(ctx, point) {
                    var right = point.pointRight;
                    var top = point.pointTop;
                    var cross = point.pointCross;

                    if (point === undefined || right === undefined || top === undefined || cross === undefined) {
                        return;
                    }

                    var topSideVisible = true;
                    var fillStyle;
                    var strokeStyle;
                    var lineWidth;

                    if (this.showGrayBottom || this.showShadow) {
                        // calculate the cross product of the two vectors from center
                        // to left and right, in order to know whether we are looking at the
                        // bottom or at the top side. We can also use the cross product
                        // for calculating light intensity
                        var aDiff = Point3d.subtract(cross.trans, point.trans);
                        var bDiff = Point3d.subtract(top.trans, right.trans);
                        var crossproduct = Point3d.crossProduct(aDiff, bDiff);
                        var len = crossproduct.length();
                        // FIXME: there is a bug with determining the surface side (shadow or colored)

                        topSideVisible = crossproduct.z > 0;
                    }

                    if (topSideVisible) {

                        // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
                        var zAvg = (point.point.z + right.point.z + top.point.z + cross.point.z) / 4;
                        var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
                        var s = 1; // saturation
                        var v;

                        if (this.showShadow) {
                            v = Math.min(1 + crossproduct.x / len / 2, 1); // value. TODO: scale
                            fillStyle = this._hsv2rgb(h, s, v);
                            strokeStyle = fillStyle;
                        } else {
                            v = 1;
                            fillStyle = this._hsv2rgb(h, s, v);
                            strokeStyle = this.axisColor; // TODO: should be customizable
                        }
                    } else {
                        fillStyle = 'gray';
                        strokeStyle = this.axisColor;
                    }

                    ctx.lineWidth = this._getStrokeWidth(point);
                    // TODO: only draw stroke when strokeWidth > 0

                    var points = [point, right, cross, top];
                    this._polygon(ctx, points, fillStyle, strokeStyle);
                };

                /**
                 * Helper method for _redrawGridGraphPoint()
                 */
                Graph3d.prototype._drawGridLine = function(ctx, from, to) {
                    if (from === undefined || to === undefined) {
                        return;
                    }

                    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
                    var zAvg = (from.point.z + to.point.z) / 2;
                    var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;

                    ctx.lineWidth = this._getStrokeWidth(from) * 2;
                    ctx.strokeStyle = this._hsv2rgb(h, 1, 1);
                    this._line(ctx, from.screen, to.screen);
                };

                /**
                 * Draw single datapoint for graph style 'Grid'.
                 */
                Graph3d.prototype._redrawGridGraphPoint = function(ctx, point) {
                    this._drawGridLine(ctx, point, point.pointRight);
                    this._drawGridLine(ctx, point, point.pointTop);
                };

                /**
                 * Draw single datapoint for graph style 'line'.
                 */
                Graph3d.prototype._redrawLineGraphPoint = function(ctx, point) {
                    if (point.pointNext === undefined) {
                        return;
                    }

                    ctx.lineWidth = this._getStrokeWidth(point);
                    ctx.strokeStyle = this.dataColor.stroke;

                    this._line(ctx, point.screen, point.pointNext.screen);
                };

                /**
                 * Draw all datapoints for currently selected graph style.
                 *
                 */
                Graph3d.prototype._redrawDataGraph = function() {
                    var ctx = this._getContext();
                    var i;

                    if (this.dataPoints === undefined || this.dataPoints.length <= 0) return; // TODO: throw exception?

                    this._calcTranslations(this.dataPoints);

                    for (i = 0; i < this.dataPoints.length; i++) {
                        var point = this.dataPoints[i];

                        // Using call() ensures that the correct context is used
                        this._pointDrawingMethod.call(this, ctx, point);
                    }
                };

                // -----------------------------------------------------------------------------
                // End methods for drawing points per graph style.
                // -----------------------------------------------------------------------------

                /**
                 * Store startX, startY and startOffset for mouse operations
                 *
                 * @param {Event}     event     The event that occurred
                 */
                Graph3d.prototype._storeMousePosition = function(event) {
                    // get mouse position (different code for IE and all other browsers)
                    this.startMouseX = getMouseX(event);
                    this.startMouseY = getMouseY(event);

                    this._startCameraOffset = this.camera.getOffset();
                };

                /**
                 * Start a moving operation inside the provided parent element
                 * @param {Event}     event     The event that occurred (required for
                 *                  retrieving the  mouse position)
                 */
                Graph3d.prototype._onMouseDown = function(event) {
                    event = event || window.event;

                    // check if mouse is still down (may be up when focus is lost for example
                    // in an iframe)
                    if (this.leftButtonDown) {
                        this._onMouseUp(event);
                    }

                    // only react on left mouse button down
                    this.leftButtonDown = event.which ? event.which === 1 : event.button === 1;
                    if (!this.leftButtonDown && !this.touchDown) return;

                    this._storeMousePosition(event);

                    this.startStart = new Date(this.start);
                    this.startEnd = new Date(this.end);
                    this.startArmRotation = this.camera.getArmRotation();

                    this.frame.style.cursor = 'move';

                    // add event listeners to handle moving the contents
                    // we store the function onmousemove and onmouseup in the graph, so we can
                    // remove the eventlisteners lateron in the function mouseUp()
                    var me = this;
                    this.onmousemove = function(event) {
                        me._onMouseMove(event);
                    };
                    this.onmouseup = function(event) {
                        me._onMouseUp(event);
                    };
                    util.addEventListener(document, 'mousemove', me.onmousemove);
                    util.addEventListener(document, 'mouseup', me.onmouseup);
                    util.preventDefault(event);
                };

                /**
                 * Perform moving operating.
                 * This function activated from within the funcion Graph.mouseDown().
                 * @param {Event}   event  Well, eehh, the event
                 */
                Graph3d.prototype._onMouseMove = function(event) {
                    this.moving = true;
                    event = event || window.event;

                    // calculate change in mouse position
                    var diffX = parseFloat(getMouseX(event)) - this.startMouseX;
                    var diffY = parseFloat(getMouseY(event)) - this.startMouseY;

                    // move with ctrl or rotate by other
                    if (event && event.ctrlKey === true) {
                        // calculate change in mouse position
                        var scaleX = this.frame.clientWidth * 0.5;
                        var scaleY = this.frame.clientHeight * 0.5;

                        var offXNew = (this._startCameraOffset.x || 0) - diffX / scaleX * this.camera.armLength * 0.8;
                        var offYNew = (this._startCameraOffset.y || 0) + diffY / scaleY * this.camera.armLength * 0.8;

                        this.camera.setOffset(offXNew, offYNew);
                        this._storeMousePosition(event);
                    } else {
                        var horizontalNew = this.startArmRotation.horizontal + diffX / 200;
                        var verticalNew = this.startArmRotation.vertical + diffY / 200;

                        var snapAngle = 4; // degrees
                        var snapValue = Math.sin(snapAngle / 360 * 2 * Math.PI);

                        // snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
                        // the -0.001 is to take care that the vertical axis is always drawn at the left front corner
                        if (Math.abs(Math.sin(horizontalNew)) < snapValue) {
                            horizontalNew = Math.round(horizontalNew / Math.PI) * Math.PI - 0.001;
                        }
                        if (Math.abs(Math.cos(horizontalNew)) < snapValue) {
                            horizontalNew = (Math.round(horizontalNew / Math.PI - 0.5) + 0.5) * Math.PI - 0.001;
                        }

                        // snap vertically to nice angles
                        if (Math.abs(Math.sin(verticalNew)) < snapValue) {
                            verticalNew = Math.round(verticalNew / Math.PI) * Math.PI;
                        }
                        if (Math.abs(Math.cos(verticalNew)) < snapValue) {
                            verticalNew = (Math.round(verticalNew / Math.PI - 0.5) + 0.5) * Math.PI;
                        }
                        this.camera.setArmRotation(horizontalNew, verticalNew);
                    }

                    this.redraw();

                    // fire a cameraPositionChange event
                    var parameters = this.getCameraPosition();
                    this.emit('cameraPositionChange', parameters);

                    util.preventDefault(event);
                };

                /**
                 * Stop moving operating.
                 * This function activated from within the funcion Graph.mouseDown().
                 * @param {event}  event   The event
                 */
                Graph3d.prototype._onMouseUp = function(event) {
                    this.frame.style.cursor = 'auto';
                    this.leftButtonDown = false;

                    // remove event listeners here
                    util.removeEventListener(document, 'mousemove', this.onmousemove);
                    util.removeEventListener(document, 'mouseup', this.onmouseup);
                    util.preventDefault(event);
                };

                /**
                 * @param {event}  event   The event
                 */
                Graph3d.prototype._onClick = function(event) {
                    if (!this.onclick_callback) return;
                    if (!this.moving) {
                        var boundingRect = this.frame.getBoundingClientRect();
                        var mouseX = getMouseX(event) - boundingRect.left;
                        var mouseY = getMouseY(event) - boundingRect.top;
                        var dataPoint = this._dataPointFromXY(mouseX, mouseY);
                        if (dataPoint) this.onclick_callback(dataPoint.point.data);
                    } else {
                        // disable onclick callback, if it came immediately after rotate/pan
                        this.moving = false;
                    }
                    util.preventDefault(event);
                };

                /**
                 * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
                 * @param {Event}  event   A mouse move event
                 */
                Graph3d.prototype._onTooltip = function(event) {
                    var delay = 300; // ms
                    var boundingRect = this.frame.getBoundingClientRect();
                    var mouseX = getMouseX(event) - boundingRect.left;
                    var mouseY = getMouseY(event) - boundingRect.top;

                    if (!this.showTooltip) {
                        return;
                    }

                    if (this.tooltipTimeout) {
                        clearTimeout(this.tooltipTimeout);
                    }

                    // (delayed) display of a tooltip only if no mouse button is down
                    if (this.leftButtonDown) {
                        this._hideTooltip();
                        return;
                    }

                    if (this.tooltip && this.tooltip.dataPoint) {
                        // tooltip is currently visible
                        var dataPoint = this._dataPointFromXY(mouseX, mouseY);
                        if (dataPoint !== this.tooltip.dataPoint) {
                            // datapoint changed
                            if (dataPoint) {
                                this._showTooltip(dataPoint);
                            } else {
                                this._hideTooltip();
                            }
                        }
                    } else {
                        // tooltip is currently not visible
                        var me = this;
                        this.tooltipTimeout = setTimeout(function() {
                            me.tooltipTimeout = null;

                            // show a tooltip if we have a data point
                            var dataPoint = me._dataPointFromXY(mouseX, mouseY);
                            if (dataPoint) {
                                me._showTooltip(dataPoint);
                            }
                        }, delay);
                    }
                };

                /**
                 * Event handler for touchstart event on mobile devices
                 */
                Graph3d.prototype._onTouchStart = function(event) {
                    this.touchDown = true;

                    var me = this;
                    this.ontouchmove = function(event) {
                        me._onTouchMove(event);
                    };
                    this.ontouchend = function(event) {
                        me._onTouchEnd(event);
                    };
                    util.addEventListener(document, 'touchmove', me.ontouchmove);
                    util.addEventListener(document, 'touchend', me.ontouchend);

                    this._onMouseDown(event);
                };

                /**
                 * Event handler for touchmove event on mobile devices
                 */
                Graph3d.prototype._onTouchMove = function(event) {
                    this._onMouseMove(event);
                };

                /**
                 * Event handler for touchend event on mobile devices
                 */
                Graph3d.prototype._onTouchEnd = function(event) {
                    this.touchDown = false;

                    util.removeEventListener(document, 'touchmove', this.ontouchmove);
                    util.removeEventListener(document, 'touchend', this.ontouchend);

                    this._onMouseUp(event);
                };

                /**
                 * Event handler for mouse wheel event, used to zoom the graph
                 * Code from http://adomas.org/javascript-mouse-wheel/
                 * @param {event}  event   The event
                 */
                Graph3d.prototype._onWheel = function(event) {
                    if (!event) /* For IE. */
                        event = window.event;

                    // retrieve delta
                    var delta = 0;
                    if (event.wheelDelta) {
                        /* IE/Opera. */
                        delta = event.wheelDelta / 120;
                    } else if (event.detail) {
                        /* Mozilla case. */
                        // In Mozilla, sign of delta is different than in IE.
                        // Also, delta is multiple of 3.
                        delta = -event.detail / 3;
                    }

                    // If delta is nonzero, handle it.
                    // Basically, delta is now positive if wheel was scrolled up,
                    // and negative, if wheel was scrolled down.
                    if (delta) {
                        var oldLength = this.camera.getArmLength();
                        var newLength = oldLength * (1 - delta / 10);

                        this.camera.setArmLength(newLength);
                        this.redraw();

                        this._hideTooltip();
                    }

                    // fire a cameraPositionChange event
                    var parameters = this.getCameraPosition();
                    this.emit('cameraPositionChange', parameters);

                    // Prevent default actions caused by mouse wheel.
                    // That might be ugly, but we handle scrolls somehow
                    // anyway, so don't bother here..
                    util.preventDefault(event);
                };

                /**
                 * Test whether a point lies inside given 2D triangle
                 *
                 * @param   {Point2d}   point
                 * @param   {Point2d[]} triangle
                 * @returns {boolean}   true if given point lies inside or on the edge of the
                 *                      triangle, false otherwise
                 * @private
                 */
                Graph3d.prototype._insideTriangle = function(point, triangle) {
                    var a = triangle[0],
                        b = triangle[1],
                        c = triangle[2];

                    function sign(x) {
                        return x > 0 ? 1 : x < 0 ? -1 : 0;
                    }

                    var as = sign((b.x - a.x) * (point.y - a.y) - (b.y - a.y) * (point.x - a.x));
                    var bs = sign((c.x - b.x) * (point.y - b.y) - (c.y - b.y) * (point.x - b.x));
                    var cs = sign((a.x - c.x) * (point.y - c.y) - (a.y - c.y) * (point.x - c.x));

                    // each of the three signs must be either equal to each other or zero
                    return (as == 0 || bs == 0 || as == bs) && (bs == 0 || cs == 0 || bs == cs) && (as == 0 || cs == 0 || as == cs);
                };

                /**
                 * Find a data point close to given screen position (x, y)
                 *
                 * @param   {Number} x
                 * @param   {Number} y
                 * @returns {Object | null} The closest data point or null if not close to any
                 *                          data point
                 * @private
                 */
                Graph3d.prototype._dataPointFromXY = function(x, y) {
                    var i,
                        distMax = 100,
                        // px
                        dataPoint = null,
                        closestDataPoint = null,
                        closestDist = null,
                        center = new Point2d(x, y);

                    if (this.style === Graph3d.STYLE.BAR || this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE) {
                        // the data points are ordered from far away to closest
                        for (i = this.dataPoints.length - 1; i >= 0; i--) {
                            dataPoint = this.dataPoints[i];
                            var surfaces = dataPoint.surfaces;
                            if (surfaces) {
                                for (var s = surfaces.length - 1; s >= 0; s--) {
                                    // split each surface in two triangles, and see if the center point is inside one of these
                                    var surface = surfaces[s];
                                    var corners = surface.corners;
                                    var triangle1 = [corners[0].screen, corners[1].screen, corners[2].screen];
                                    var triangle2 = [corners[2].screen, corners[3].screen, corners[0].screen];
                                    if (this._insideTriangle(center, triangle1) || this._insideTriangle(center, triangle2)) {
                                        // return immediately at the first hit
                                        return dataPoint;
                                    }
                                }
                            }
                        }
                    } else {
                        // find the closest data point, using distance to the center of the point on 2d screen
                        for (i = 0; i < this.dataPoints.length; i++) {
                            dataPoint = this.dataPoints[i];
                            var point = dataPoint.screen;
                            if (point) {
                                var distX = Math.abs(x - point.x);
                                var distY = Math.abs(y - point.y);
                                var dist = Math.sqrt(distX * distX + distY * distY);

                                if ((closestDist === null || dist < closestDist) && dist < distMax) {
                                    closestDist = dist;
                                    closestDataPoint = dataPoint;
                                }
                            }
                        }
                    }

                    return closestDataPoint;
                };

                /**
                 * Display a tooltip for given data point
                 * @param {Object} dataPoint
                 * @private
                 */
                Graph3d.prototype._showTooltip = function(dataPoint) {
                    var content, line, dot;

                    if (!this.tooltip) {
                        content = document.createElement('div');
                        (0, _assign2['default'])(content.style, {}, this.tooltipStyle.content);
                        content.style.position = 'absolute';

                        line = document.createElement('div');
                        (0, _assign2['default'])(line.style, {}, this.tooltipStyle.line);
                        line.style.position = 'absolute';

                        dot = document.createElement('div');
                        (0, _assign2['default'])(dot.style, {}, this.tooltipStyle.dot);
                        dot.style.position = 'absolute';

                        this.tooltip = {
                            dataPoint: null,
                            dom: {
                                content: content,
                                line: line,
                                dot: dot
                            }
                        };
                    } else {
                        content = this.tooltip.dom.content;
                        line = this.tooltip.dom.line;
                        dot = this.tooltip.dom.dot;
                    }

                    this._hideTooltip();

                    this.tooltip.dataPoint = dataPoint;
                    if (typeof this.showTooltip === 'function') {
                        content.innerHTML = this.showTooltip(dataPoint.point);
                    } else {
                        content.innerHTML = '<table>' + '<tr><td>' + this.xLabel + ':</td><td>' + dataPoint.point.x + '</td></tr>' + '<tr><td>' + this.yLabel + ':</td><td>' + dataPoint.point.y + '</td></tr>' + '<tr><td>' + this.zLabel + ':</td><td>' + dataPoint.point.z + '</td></tr>' + '</table>';
                    }

                    content.style.left = '0';
                    content.style.top = '0';
                    this.frame.appendChild(content);
                    this.frame.appendChild(line);
                    this.frame.appendChild(dot);

                    // calculate sizes
                    var contentWidth = content.offsetWidth;
                    var contentHeight = content.offsetHeight;
                    var lineHeight = line.offsetHeight;
                    var dotWidth = dot.offsetWidth;
                    var dotHeight = dot.offsetHeight;

                    var left = dataPoint.screen.x - contentWidth / 2;
                    left = Math.min(Math.max(left, 10), this.frame.clientWidth - 10 - contentWidth);

                    line.style.left = dataPoint.screen.x + 'px';
                    line.style.top = dataPoint.screen.y - lineHeight + 'px';
                    content.style.left = left + 'px';
                    content.style.top = dataPoint.screen.y - lineHeight - contentHeight + 'px';
                    dot.style.left = dataPoint.screen.x - dotWidth / 2 + 'px';
                    dot.style.top = dataPoint.screen.y - dotHeight / 2 + 'px';
                };

                /**
                 * Hide the tooltip when displayed
                 * @private
                 */
                Graph3d.prototype._hideTooltip = function() {
                    if (this.tooltip) {
                        this.tooltip.dataPoint = null;

                        for (var prop in this.tooltip.dom) {
                            if (this.tooltip.dom.hasOwnProperty(prop)) {
                                var elem = this.tooltip.dom[prop];
                                if (elem && elem.parentNode) {
                                    elem.parentNode.removeChild(elem);
                                }
                            }
                        }
                    }
                };

                /**--------------------------------------------------------------------------**/

                /**
                 * Get the horizontal mouse position from a mouse event
                 *
                 * @param   {Event}  event
                 * @returns {Number} mouse x
                 */
                function getMouseX(event) {
                    if ('clientX' in event) return event.clientX;
                    return event.targetTouches[0] && event.targetTouches[0].clientX || 0;
                }

                /**
                 * Get the vertical mouse position from a mouse event
                 *
                 * @param   {Event}  event
                 * @returns {Number} mouse y
                 */
                function getMouseY(event) {
                    if ('clientY' in event) return event.clientY;
                    return event.targetTouches[0] && event.targetTouches[0].clientY || 0;
                }

                // -----------------------------------------------------------------------------
                //  Public methods for specific settings
                // -----------------------------------------------------------------------------

                /**
                 * Set the rotation and distance of the camera
                 *
                 * @param {Object}  pos            An object with the camera position
                 * @param {?Number} pos.horizontal The horizontal rotation, between 0 and 2*PI.
                 *                                 Optional, can be left undefined.
                 * @param {?Number} pos.vertical   The vertical rotation, between 0 and 0.5*PI.
                 *                                 if vertical=0.5*PI, the graph is shown from
                 *                                 the top. Optional, can be left undefined.
                 * @param {?Number} pos.distance   The (normalized) distance of the camera to the
                 *                                 center of the graph, a value between 0.71 and
                 *                                 5.0. Optional, can be left undefined.
                 */
                Graph3d.prototype.setCameraPosition = function(pos) {
                    Settings.setCameraPosition(pos, this);
                    this.redraw();
                };

                /**
                 * Set a new size for the graph
                 *
                 * @param {string} width  Width in pixels or percentage (for example '800px'
                 *                        or '50%')
                 * @param {string} height Height in pixels or percentage  (for example '400px'
                 *                        or '30%')
                 */
                Graph3d.prototype.setSize = function(width, height) {
                    this._setSize(width, height);
                    this.redraw();
                };

                // -----------------------------------------------------------------------------
                //  End public methods for specific settings
                // -----------------------------------------------------------------------------


                module.exports = Graph3d;

                /***/
            }),
            /* 95 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(96), __esModule: true };

                /***/
            }),
            /* 96 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(97);
                module.exports = __webpack_require__(17).Object.assign;

                /***/
            }),
            /* 97 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.3.1 Object.assign(target, source)
                var $export = __webpack_require__(15);

                $export($export.S + $export.F, 'Object', { assign: __webpack_require__(98) });

                /***/
            }),
            /* 98 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';
                // 19.1.2.1 Object.assign(target, source, ...)
                var getKeys = __webpack_require__(35),
                    gOPS = __webpack_require__(73),
                    pIE = __webpack_require__(74),
                    toObject = __webpack_require__(49),
                    IObject = __webpack_require__(10),
                    $assign = Object.assign;

                // should work with symbols and should have deterministic property order (V8 bug)
                module.exports = !$assign || __webpack_require__(26)(function() {
                    var A = {},
                        B = {},
                        S = Symbol(),
                        K = 'abcdefghijklmnopqrst';
                    A[S] = 7;
                    K.split('').forEach(function(k) { B[k] = k; });
                    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
                }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
                    var T = toObject(target),
                        aLen = arguments.length,
                        index = 1,
                        getSymbols = gOPS.f,
                        isEnum = pIE.f;
                    while (aLen > index) {
                        var S = IObject(arguments[index++]),
                            keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
                            length = keys.length,
                            j = 0,
                            key;
                        while (length > j)
                            if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
                    }
                    return T;
                } : $assign;

                /***/
            }),
            /* 99 */
            /***/
            (function(module, exports) {


                /**
                 * Expose `Emitter`.
                 */

                module.exports = Emitter;

                /**
                 * Initialize a new `Emitter`.
                 *
                 * @api public
                 */

                function Emitter(obj) {
                    if (obj) return mixin(obj);
                };

                /**
                 * Mixin the emitter properties.
                 *
                 * @param {Object} obj
                 * @return {Object}
                 * @api private
                 */

                function mixin(obj) {
                    for (var key in Emitter.prototype) {
                        obj[key] = Emitter.prototype[key];
                    }
                    return obj;
                }

                /**
                 * Listen on the given `event` with `fn`.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.on =
                    Emitter.prototype.addEventListener = function(event, fn) {
                        this._callbacks = this._callbacks || {};
                        (this._callbacks[event] = this._callbacks[event] || [])
                        .push(fn);
                        return this;
                    };

                /**
                 * Adds an `event` listener that will be invoked a single
                 * time then automatically removed.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.once = function(event, fn) {
                    var self = this;
                    this._callbacks = this._callbacks || {};

                    function on() {
                        self.off(event, on);
                        fn.apply(this, arguments);
                    }

                    on.fn = fn;
                    this.on(event, on);
                    return this;
                };

                /**
                 * Remove the given callback for `event` or all
                 * registered callbacks.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.off =
                    Emitter.prototype.removeListener =
                    Emitter.prototype.removeAllListeners =
                    Emitter.prototype.removeEventListener = function(event, fn) {
                        this._callbacks = this._callbacks || {};

                        // all
                        if (0 == arguments.length) {
                            this._callbacks = {};
                            return this;
                        }

                        // specific event
                        var callbacks = this._callbacks[event];
                        if (!callbacks) return this;

                        // remove all handlers
                        if (1 == arguments.length) {
                            delete this._callbacks[event];
                            return this;
                        }

                        // remove specific handler
                        var cb;
                        for (var i = 0; i < callbacks.length; i++) {
                            cb = callbacks[i];
                            if (cb === fn || cb.fn === fn) {
                                callbacks.splice(i, 1);
                                break;
                            }
                        }
                        return this;
                    };

                /**
                 * Emit `event` with the given args.
                 *
                 * @param {String} event
                 * @param {Mixed} ...
                 * @return {Emitter}
                 */

                Emitter.prototype.emit = function(event) {
                    this._callbacks = this._callbacks || {};
                    var args = [].slice.call(arguments, 1),
                        callbacks = this._callbacks[event];

                    if (callbacks) {
                        callbacks = callbacks.slice(0);
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            callbacks[i].apply(this, args);
                        }
                    }

                    return this;
                };

                /**
                 * Return array of callbacks for `event`.
                 *
                 * @param {String} event
                 * @return {Array}
                 * @api public
                 */

                Emitter.prototype.listeners = function(event) {
                    this._callbacks = this._callbacks || {};
                    return this._callbacks[event] || [];
                };

                /**
                 * Check if this emitter has `event` handlers.
                 *
                 * @param {String} event
                 * @return {Boolean}
                 * @api public
                 */

                Emitter.prototype.hasListeners = function(event) {
                    return !!this.listeners(event).length;
                };


                /***/
            }),
            /* 100 */
            /***/
            (function(module, exports) {

                "use strict";

                /**
                 * @prototype Point3d
                 * @param {Number} [x]
                 * @param {Number} [y]
                 * @param {Number} [z]
                 */
                function Point3d(x, y, z) {
                    this.x = x !== undefined ? x : 0;
                    this.y = y !== undefined ? y : 0;
                    this.z = z !== undefined ? z : 0;
                };

                /**
                 * Subtract the two provided points, returns a-b
                 * @param {Point3d} a
                 * @param {Point3d} b
                 * @return {Point3d} a-b
                 */
                Point3d.subtract = function(a, b) {
                    var sub = new Point3d();
                    sub.x = a.x - b.x;
                    sub.y = a.y - b.y;
                    sub.z = a.z - b.z;
                    return sub;
                };

                /**
                 * Add the two provided points, returns a+b
                 * @param {Point3d} a
                 * @param {Point3d} b
                 * @return {Point3d} a+b
                 */
                Point3d.add = function(a, b) {
                    var sum = new Point3d();
                    sum.x = a.x + b.x;
                    sum.y = a.y + b.y;
                    sum.z = a.z + b.z;
                    return sum;
                };

                /**
                 * Calculate the average of two 3d points
                 * @param {Point3d} a
                 * @param {Point3d} b
                 * @return {Point3d} The average, (a+b)/2
                 */
                Point3d.avg = function(a, b) {
                    return new Point3d((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);
                };

                /**
                 * Calculate the cross product of the two provided points, returns axb
                 * Documentation: http://en.wikipedia.org/wiki/Cross_product
                 * @param {Point3d} a
                 * @param {Point3d} b
                 * @return {Point3d} cross product axb
                 */
                Point3d.crossProduct = function(a, b) {
                    var crossproduct = new Point3d();

                    crossproduct.x = a.y * b.z - a.z * b.y;
                    crossproduct.y = a.z * b.x - a.x * b.z;
                    crossproduct.z = a.x * b.y - a.y * b.x;

                    return crossproduct;
                };

                /**
                 * Rtrieve the length of the vector (or the distance from this point to the origin
                 * @return {Number}  length
                 */
                Point3d.prototype.length = function() {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
                };

                module.exports = Point3d;

                /***/
            }),
            /* 101 */
            /***/
            (function(module, exports) {

                "use strict";

                /**
                 * @prototype Point2d
                 * @param {Number} [x]
                 * @param {Number} [y]
                 */
                function Point2d(x, y) {
                    this.x = x !== undefined ? x : 0;
                    this.y = y !== undefined ? y : 0;
                }

                module.exports = Point2d;

                /***/
            }),
            /* 102 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _sign = __webpack_require__(103);

                var _sign2 = _interopRequireDefault(_sign);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Point3d = __webpack_require__(100);

                /**
                 * @class Camera
                 * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
                 * The camera is always looking in the direction of the origin of the arm.
                 * This way, the camera always rotates around one fixed point, the location
                 * of the camera arm.
                 *
                 * Documentation:
                 *   http://en.wikipedia.org/wiki/3D_projection
                 */
                function Camera() {
                    this.armLocation = new Point3d();
                    this.armRotation = {};
                    this.armRotation.horizontal = 0;
                    this.armRotation.vertical = 0;
                    this.armLength = 1.7;
                    this.cameraOffset = new Point3d();
                    this.offsetMultiplier = 0.6;

                    this.cameraLocation = new Point3d();
                    this.cameraRotation = new Point3d(0.5 * Math.PI, 0, 0);

                    this.calculateCameraOrientation();
                }

                /**
                 * Set offset camera in camera coordinates
                 * @param {Number} x offset by camera horisontal
                 * @param {Number} y offset by camera vertical
                 */
                Camera.prototype.setOffset = function(x, y) {
                    var abs = Math.abs,
                        sign = _sign2['default'],
                        mul = this.offsetMultiplier,
                        border = this.armLength * mul;

                    if (abs(x) > border) {
                        x = sign(x) * border;
                    }
                    if (abs(y) > border) {
                        y = sign(y) * border;
                    }
                    this.cameraOffset.x = x;
                    this.cameraOffset.y = y;
                    this.calculateCameraOrientation();
                };

                /**
                 * Get camera offset by horizontal and vertical
                 * @return {Point3d} x - horizontal offset, y - vertical offset, z - not used
                 */
                Camera.prototype.getOffset = function(x, y) {
                    return this.cameraOffset;
                };

                /**
                 * Set the location (origin) of the arm
                 * @param {Number} x  Normalized value of x
                 * @param {Number} y  Normalized value of y
                 * @param {Number} z  Normalized value of z
                 */
                Camera.prototype.setArmLocation = function(x, y, z) {
                    this.armLocation.x = x;
                    this.armLocation.y = y;
                    this.armLocation.z = z;

                    this.calculateCameraOrientation();
                };

                /**
                 * Set the rotation of the camera arm
                 * @param {Number} horizontal   The horizontal rotation, between 0 and 2*PI.
                 *                Optional, can be left undefined.
                 * @param {Number} vertical   The vertical rotation, between 0 and 0.5*PI
                 *                if vertical=0.5*PI, the graph is shown from the
                 *                top. Optional, can be left undefined.
                 */
                Camera.prototype.setArmRotation = function(horizontal, vertical) {
                    if (horizontal !== undefined) {
                        this.armRotation.horizontal = horizontal;
                    }

                    if (vertical !== undefined) {
                        this.armRotation.vertical = vertical;
                        if (this.armRotation.vertical < 0) this.armRotation.vertical = 0;
                        if (this.armRotation.vertical > 0.5 * Math.PI) this.armRotation.vertical = 0.5 * Math.PI;
                    }

                    if (horizontal !== undefined || vertical !== undefined) {
                        this.calculateCameraOrientation();
                    }
                };

                /**
                 * Retrieve the current arm rotation
                 * @return {object}   An object with parameters horizontal and vertical
                 */
                Camera.prototype.getArmRotation = function() {
                    var rot = {};
                    rot.horizontal = this.armRotation.horizontal;
                    rot.vertical = this.armRotation.vertical;

                    return rot;
                };

                /**
                 * Set the (normalized) length of the camera arm.
                 * @param {Number} length A length between 0.71 and 5.0
                 */
                Camera.prototype.setArmLength = function(length) {
                    if (length === undefined) return;

                    this.armLength = length;

                    // Radius must be larger than the corner of the graph,
                    // which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
                    // graph
                    if (this.armLength < 0.71) this.armLength = 0.71;
                    if (this.armLength > 5.0) this.armLength = 5.0;

                    this.setOffset(this.cameraOffset.x, this.cameraOffset.y);
                    this.calculateCameraOrientation();
                };

                /**
                 * Retrieve the arm length
                 * @return {Number} length
                 */
                Camera.prototype.getArmLength = function() {
                    return this.armLength;
                };

                /**
                 * Retrieve the camera location
                 * @return {Point3d} cameraLocation
                 */
                Camera.prototype.getCameraLocation = function() {
                    return this.cameraLocation;
                };

                /**
                 * Retrieve the camera rotation
                 * @return {Point3d} cameraRotation
                 */
                Camera.prototype.getCameraRotation = function() {
                    return this.cameraRotation;
                };

                /**
                 * Calculate the location and rotation of the camera based on the
                 * position and orientation of the camera arm
                 */
                Camera.prototype.calculateCameraOrientation = function() {
                    // calculate location of the camera
                    this.cameraLocation.x = this.armLocation.x - this.armLength * Math.sin(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
                    this.cameraLocation.y = this.armLocation.y - this.armLength * Math.cos(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
                    this.cameraLocation.z = this.armLocation.z + this.armLength * Math.sin(this.armRotation.vertical);

                    // calculate rotation of the camera
                    this.cameraRotation.x = Math.PI / 2 - this.armRotation.vertical;
                    this.cameraRotation.y = 0;
                    this.cameraRotation.z = -this.armRotation.horizontal;

                    var xa = this.cameraRotation.x;
                    var ya = this.cameraRotation.y;
                    var za = this.cameraRotation.z;
                    var dx = this.cameraOffset.x;
                    var dy = this.cameraOffset.y;
                    var sin = Math.sin,
                        cos = Math.cos;

                    this.cameraLocation.x = this.cameraLocation.x + dx * cos(za) + dy * -sin(za) * cos(xa);
                    this.cameraLocation.y = this.cameraLocation.y + dx * sin(za) + dy * cos(za) * cos(xa);
                    this.cameraLocation.z = this.cameraLocation.z + dy * sin(xa);
                };

                module.exports = Camera;

                /***/
            }),
            /* 103 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(104), __esModule: true };

                /***/
            }),
            /* 104 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(105);
                module.exports = __webpack_require__(17).Math.sign;

                /***/
            }),
            /* 105 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 20.2.2.28 Math.sign(x)
                var $export = __webpack_require__(15);

                $export($export.S, 'Math', { sign: __webpack_require__(106) });

                /***/
            }),
            /* 106 */
            /***/
            (function(module, exports) {

                // 20.2.2.28 Math.sign(x)
                module.exports = Math.sign || function sign(x) {
                    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
                };

                /***/
            }),
            /* 107 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var DataView = __webpack_require__(93);

                /**
                 * @class Filter
                 *
                 * @param {DataSet} data The google data table
                 * @param {Number}  column             The index of the column to be filtered
                 * @param {Graph} graph           The graph
                 */
                function Filter(data, column, graph) {
                    this.data = data;
                    this.column = column;
                    this.graph = graph; // the parent graph

                    this.index = undefined;
                    this.value = undefined;

                    // read all distinct values and select the first one
                    this.values = graph.getDistinctValues(data.get(), this.column);

                    // sort both numeric and string values correctly
                    this.values.sort(function(a, b) {
                        return a > b ? 1 : a < b ? -1 : 0;
                    });

                    if (this.values.length > 0) {
                        this.selectValue(0);
                    }

                    // create an array with the filtered datapoints. this will be loaded afterwards
                    this.dataPoints = [];

                    this.loaded = false;
                    this.onLoadCallback = undefined;

                    if (graph.animationPreload) {
                        this.loaded = false;
                        this.loadInBackground();
                    } else {
                        this.loaded = true;
                    }
                };

                /**
                 * Return the label
                 * @return {string} label
                 */
                Filter.prototype.isLoaded = function() {
                    return this.loaded;
                };

                /**
                 * Return the loaded progress
                 * @return {Number} percentage between 0 and 100
                 */
                Filter.prototype.getLoadedProgress = function() {
                    var len = this.values.length;

                    var i = 0;
                    while (this.dataPoints[i]) {
                        i++;
                    }

                    return Math.round(i / len * 100);
                };

                /**
                 * Return the label
                 * @return {string} label
                 */
                Filter.prototype.getLabel = function() {
                    return this.graph.filterLabel;
                };

                /**
                 * Return the columnIndex of the filter
                 * @return {Number} columnIndex
                 */
                Filter.prototype.getColumn = function() {
                    return this.column;
                };

                /**
                 * Return the currently selected value. Returns undefined if there is no selection
                 * @return {*} value
                 */
                Filter.prototype.getSelectedValue = function() {
                    if (this.index === undefined) return undefined;

                    return this.values[this.index];
                };

                /**
                 * Retrieve all values of the filter
                 * @return {Array} values
                 */
                Filter.prototype.getValues = function() {
                    return this.values;
                };

                /**
                 * Retrieve one value of the filter
                 * @param {Number}  index
                 * @return {*} value
                 */
                Filter.prototype.getValue = function(index) {
                    if (index >= this.values.length) throw new Error('Index out of range');

                    return this.values[index];
                };

                /**
                 * Retrieve the (filtered) dataPoints for the currently selected filter index
                 * @param {Number} [index] (optional)
                 * @return {Array} dataPoints
                 */
                Filter.prototype._getDataPoints = function(index) {
                    if (index === undefined) index = this.index;

                    if (index === undefined) return [];

                    var dataPoints;
                    if (this.dataPoints[index]) {
                        dataPoints = this.dataPoints[index];
                    } else {
                        var f = {};
                        f.column = this.column;
                        f.value = this.values[index];

                        var dataView = new DataView(this.data, {
                            filter: function filter(item) {
                                return item[f.column] == f.value;
                            }
                        }).get();
                        dataPoints = this.graph._getDataPoints(dataView);

                        this.dataPoints[index] = dataPoints;
                    }

                    return dataPoints;
                };

                /**
                 * Set a callback function when the filter is fully loaded.
                 */
                Filter.prototype.setOnLoadCallback = function(callback) {
                    this.onLoadCallback = callback;
                };

                /**
                 * Add a value to the list with available values for this filter
                 * No double entries will be created.
                 * @param {Number} index
                 */
                Filter.prototype.selectValue = function(index) {
                    if (index >= this.values.length) throw new Error('Index out of range');

                    this.index = index;
                    this.value = this.values[index];
                };

                /**
                 * Load all filtered rows in the background one by one
                 * Start this method without providing an index!
                 */
                Filter.prototype.loadInBackground = function(index) {
                    if (index === undefined) index = 0;

                    var frame = this.graph.frame;

                    if (index < this.values.length) {
                        var dataPointsTemp = this._getDataPoints(index);
                        //this.graph.redrawInfo(); // TODO: not neat

                        // create a progress box
                        if (frame.progress === undefined) {
                            frame.progress = document.createElement('DIV');
                            frame.progress.style.position = 'absolute';
                            frame.progress.style.color = 'gray';
                            frame.appendChild(frame.progress);
                        }
                        var progress = this.getLoadedProgress();
                        frame.progress.innerHTML = 'Loading animation... ' + progress + '%';
                        // TODO: this is no nice solution...
                        frame.progress.style.bottom = 60 + 'px'; // TODO: use height of slider
                        frame.progress.style.left = 10 + 'px';

                        var me = this;
                        setTimeout(function() {
                            me.loadInBackground(index + 1);
                        }, 10);
                        this.loaded = false;
                    } else {
                        this.loaded = true;

                        // remove the progress box
                        if (frame.progress !== undefined) {
                            frame.removeChild(frame.progress);
                            frame.progress = undefined;
                        }

                        if (this.onLoadCallback) this.onLoadCallback();
                    }
                };

                module.exports = Filter;

                /***/
            }),
            /* 108 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var util = __webpack_require__(1);

                /**
                 * @constructor Slider
                 *
                 * An html slider control with start/stop/prev/next buttons
                 * @param {Element} container  The element where the slider will be created
                 * @param {Object} options   Available options:
                 *                 {boolean} visible   If true (default) the
                 *                           slider is visible.
                 */
                function Slider(container, options) {
                    if (container === undefined) {
                        throw new Error('No container element defined');
                    }
                    this.container = container;
                    this.visible = options && options.visible != undefined ? options.visible : true;

                    if (this.visible) {
                        this.frame = document.createElement('DIV');
                        //this.frame.style.backgroundColor = '#E5E5E5';
                        this.frame.style.width = '100%';
                        this.frame.style.position = 'relative';
                        this.container.appendChild(this.frame);

                        this.frame.prev = document.createElement('INPUT');
                        this.frame.prev.type = 'BUTTON';
                        this.frame.prev.value = 'Prev';
                        this.frame.appendChild(this.frame.prev);

                        this.frame.play = document.createElement('INPUT');
                        this.frame.play.type = 'BUTTON';
                        this.frame.play.value = 'Play';
                        this.frame.appendChild(this.frame.play);

                        this.frame.next = document.createElement('INPUT');
                        this.frame.next.type = 'BUTTON';
                        this.frame.next.value = 'Next';
                        this.frame.appendChild(this.frame.next);

                        this.frame.bar = document.createElement('INPUT');
                        this.frame.bar.type = 'BUTTON';
                        this.frame.bar.style.position = 'absolute';
                        this.frame.bar.style.border = '1px solid red';
                        this.frame.bar.style.width = '100px';
                        this.frame.bar.style.height = '6px';
                        this.frame.bar.style.borderRadius = '2px';
                        this.frame.bar.style.MozBorderRadius = '2px';
                        this.frame.bar.style.border = '1px solid #7F7F7F';
                        this.frame.bar.style.backgroundColor = '#E5E5E5';
                        this.frame.appendChild(this.frame.bar);

                        this.frame.slide = document.createElement('INPUT');
                        this.frame.slide.type = 'BUTTON';
                        this.frame.slide.style.margin = '0px';
                        this.frame.slide.value = ' ';
                        this.frame.slide.style.position = 'relative';
                        this.frame.slide.style.left = '-100px';
                        this.frame.appendChild(this.frame.slide);

                        // create events
                        var me = this;
                        this.frame.slide.onmousedown = function(event) {
                            me._onMouseDown(event);
                        };
                        this.frame.prev.onclick = function(event) {
                            me.prev(event);
                        };
                        this.frame.play.onclick = function(event) {
                            me.togglePlay(event);
                        };
                        this.frame.next.onclick = function(event) {
                            me.next(event);
                        };
                    }

                    this.onChangeCallback = undefined;

                    this.values = [];
                    this.index = undefined;

                    this.playTimeout = undefined;
                    this.playInterval = 1000; // milliseconds
                    this.playLoop = true;
                }

                /**
                 * Select the previous index
                 */
                Slider.prototype.prev = function() {
                    var index = this.getIndex();
                    if (index > 0) {
                        index--;
                        this.setIndex(index);
                    }
                };

                /**
                 * Select the next index
                 */
                Slider.prototype.next = function() {
                    var index = this.getIndex();
                    if (index < this.values.length - 1) {
                        index++;
                        this.setIndex(index);
                    }
                };

                /**
                 * Select the next index
                 */
                Slider.prototype.playNext = function() {
                    var start = new Date();

                    var index = this.getIndex();
                    if (index < this.values.length - 1) {
                        index++;
                        this.setIndex(index);
                    } else if (this.playLoop) {
                        // jump to the start
                        index = 0;
                        this.setIndex(index);
                    }

                    var end = new Date();
                    var diff = end - start;

                    // calculate how much time it to to set the index and to execute the callback
                    // function.
                    var interval = Math.max(this.playInterval - diff, 0);
                    // document.title = diff // TODO: cleanup

                    var me = this;
                    this.playTimeout = setTimeout(function() {
                        me.playNext();
                    }, interval);
                };

                /**
                 * Toggle start or stop playing
                 */
                Slider.prototype.togglePlay = function() {
                    if (this.playTimeout === undefined) {
                        this.play();
                    } else {
                        this.stop();
                    }
                };

                /**
                 * Start playing
                 */
                Slider.prototype.play = function() {
                    // Test whether already playing
                    if (this.playTimeout) return;

                    this.playNext();

                    if (this.frame) {
                        this.frame.play.value = 'Stop';
                    }
                };

                /**
                 * Stop playing
                 */
                Slider.prototype.stop = function() {
                    clearInterval(this.playTimeout);
                    this.playTimeout = undefined;

                    if (this.frame) {
                        this.frame.play.value = 'Play';
                    }
                };

                /**
                 * Set a callback function which will be triggered when the value of the
                 * slider bar has changed.
                 */
                Slider.prototype.setOnChangeCallback = function(callback) {
                    this.onChangeCallback = callback;
                };

                /**
                 * Set the interval for playing the list
                 * @param {Number} interval   The interval in milliseconds
                 */
                Slider.prototype.setPlayInterval = function(interval) {
                    this.playInterval = interval;
                };

                /**
                 * Retrieve the current play interval
                 * @return {Number} interval   The interval in milliseconds
                 */
                Slider.prototype.getPlayInterval = function(interval) {
                    return this.playInterval;
                };

                /**
                 * Set looping on or off
                 * @pararm {boolean} doLoop  If true, the slider will jump to the start when
                 *               the end is passed, and will jump to the end
                 *               when the start is passed.
                 */
                Slider.prototype.setPlayLoop = function(doLoop) {
                    this.playLoop = doLoop;
                };

                /**
                 * Execute the onchange callback function
                 */
                Slider.prototype.onChange = function() {
                    if (this.onChangeCallback !== undefined) {
                        this.onChangeCallback();
                    }
                };

                /**
                 * redraw the slider on the correct place
                 */
                Slider.prototype.redraw = function() {
                    if (this.frame) {
                        // resize the bar
                        this.frame.bar.style.top = this.frame.clientHeight / 2 - this.frame.bar.offsetHeight / 2 + 'px';
                        this.frame.bar.style.width = this.frame.clientWidth - this.frame.prev.clientWidth - this.frame.play.clientWidth - this.frame.next.clientWidth - 30 + 'px';

                        // position the slider button
                        var left = this.indexToLeft(this.index);
                        this.frame.slide.style.left = left + 'px';
                    }
                };

                /**
                 * Set the list with values for the slider
                 * @param {Array} values   A javascript array with values (any type)
                 */
                Slider.prototype.setValues = function(values) {
                    this.values = values;

                    if (this.values.length > 0) this.setIndex(0);
                    else this.index = undefined;
                };

                /**
                 * Select a value by its index
                 * @param {Number} index
                 */
                Slider.prototype.setIndex = function(index) {
                    if (index < this.values.length) {
                        this.index = index;

                        this.redraw();
                        this.onChange();
                    } else {
                        throw new Error('Index out of range');
                    }
                };

                /**
                 * retrieve the index of the currently selected vaue
                 * @return {Number} index
                 */
                Slider.prototype.getIndex = function() {
                    return this.index;
                };

                /**
                 * retrieve the currently selected value
                 * @return {*} value
                 */
                Slider.prototype.get = function() {
                    return this.values[this.index];
                };

                Slider.prototype._onMouseDown = function(event) {
                    // only react on left mouse button down
                    var leftButtonDown = event.which ? event.which === 1 : event.button === 1;
                    if (!leftButtonDown) return;

                    this.startClientX = event.clientX;
                    this.startSlideX = parseFloat(this.frame.slide.style.left);

                    this.frame.style.cursor = 'move';

                    // add event listeners to handle moving the contents
                    // we store the function onmousemove and onmouseup in the graph, so we can
                    // remove the eventlisteners lateron in the function mouseUp()
                    var me = this;
                    this.onmousemove = function(event) {
                        me._onMouseMove(event);
                    };
                    this.onmouseup = function(event) {
                        me._onMouseUp(event);
                    };
                    util.addEventListener(document, 'mousemove', this.onmousemove);
                    util.addEventListener(document, 'mouseup', this.onmouseup);
                    util.preventDefault(event);
                };

                Slider.prototype.leftToIndex = function(left) {
                    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
                    var x = left - 3;

                    var index = Math.round(x / width * (this.values.length - 1));
                    if (index < 0) index = 0;
                    if (index > this.values.length - 1) index = this.values.length - 1;

                    return index;
                };

                Slider.prototype.indexToLeft = function(index) {
                    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;

                    var x = index / (this.values.length - 1) * width;
                    var left = x + 3;

                    return left;
                };

                Slider.prototype._onMouseMove = function(event) {
                    var diff = event.clientX - this.startClientX;
                    var x = this.startSlideX + diff;

                    var index = this.leftToIndex(x);

                    this.setIndex(index);

                    util.preventDefault();
                };

                Slider.prototype._onMouseUp = function(event) {
                    this.frame.style.cursor = 'auto';

                    // remove event listeners
                    util.removeEventListener(document, 'mousemove', this.onmousemove);
                    util.removeEventListener(document, 'mouseup', this.onmouseup);

                    util.preventDefault();
                };

                module.exports = Slider;

                /***/
            }),
            /* 109 */
            /***/
            (function(module, exports) {

                'use strict';

                /**
                 * @prototype StepNumber
                 * The class StepNumber is an iterator for Numbers. You provide a start and end
                 * value, and a best step size. StepNumber itself rounds to fixed values and
                 * a finds the step that best fits the provided step.
                 *
                 * If prettyStep is true, the step size is chosen as close as possible to the
                 * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
                 *
                 * Example usage:
                 *   var step = new StepNumber(0, 10, 2.5, true);
                 *   step.start();
                 *   while (!step.end()) {
                 *   alert(step.getCurrent());
                 *   step.next();
                 *   }
                 *
                 * Version: 1.0
                 *
                 * @param {Number} start     The start value
                 * @param {Number} end     The end value
                 * @param {Number} step    Optional. Step size. Must be a positive value.
                 * @param {boolean} prettyStep Optional. If true, the step size is rounded
                 *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
                 */
                function StepNumber(start, end, step, prettyStep) {
                    // set default values
                    this._start = 0;
                    this._end = 0;
                    this._step = 1;
                    this.prettyStep = true;
                    this.precision = 5;

                    this._current = 0;
                    this.setRange(start, end, step, prettyStep);
                };

                /**
                 * Check for input values, to prevent disasters from happening
                 *
                 * Source: http://stackoverflow.com/a/1830844
                 */
                StepNumber.prototype.isNumeric = function(n) {
                    return !isNaN(parseFloat(n)) && isFinite(n);
                };

                /**
                 * Set a new range: start, end and step.
                 *
                 * @param {Number} start     The start value
                 * @param {Number} end     The end value
                 * @param {Number} step    Optional. Step size. Must be a positive value.
                 * @param {boolean} prettyStep Optional. If true, the step size is rounded
                 *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
                 */
                StepNumber.prototype.setRange = function(start, end, step, prettyStep) {
                    if (!this.isNumeric(start)) {
                        throw new Error('Parameter \'start\' is not numeric; value: ' + start);
                    }
                    if (!this.isNumeric(end)) {
                        throw new Error('Parameter \'end\' is not numeric; value: ' + start);
                    }
                    if (!this.isNumeric(step)) {
                        throw new Error('Parameter \'step\' is not numeric; value: ' + start);
                    }

                    this._start = start ? start : 0;
                    this._end = end ? end : 0;

                    this.setStep(step, prettyStep);
                };

                /**
                 * Set a new step size
                 * @param {Number} step    New step size. Must be a positive value
                 * @param {boolean} prettyStep Optional. If true, the provided step is rounded
                 *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
                 */
                StepNumber.prototype.setStep = function(step, prettyStep) {
                    if (step === undefined || step <= 0) return;

                    if (prettyStep !== undefined) this.prettyStep = prettyStep;

                    if (this.prettyStep === true) this._step = StepNumber.calculatePrettyStep(step);
                    else this._step = step;
                };

                /**
                 * Calculate a nice step size, closest to the desired step size.
                 * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
                 * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
                 * @param {Number}  step  Desired step size
                 * @return {Number}     Nice step size
                 */
                StepNumber.calculatePrettyStep = function(step) {
                    var log10 = function log10(x) {
                        return Math.log(x) / Math.LN10;
                    };

                    // try three steps (multiple of 1, 2, or 5
                    var step1 = Math.pow(10, Math.round(log10(step))),
                        step2 = 2 * Math.pow(10, Math.round(log10(step / 2))),
                        step5 = 5 * Math.pow(10, Math.round(log10(step / 5)));

                    // choose the best step (closest to minimum step)
                    var prettyStep = step1;
                    if (Math.abs(step2 - step) <= Math.abs(prettyStep - step)) prettyStep = step2;
                    if (Math.abs(step5 - step) <= Math.abs(prettyStep - step)) prettyStep = step5;

                    // for safety
                    if (prettyStep <= 0) {
                        prettyStep = 1;
                    }

                    return prettyStep;
                };

                /**
                 * returns the current value of the step
                 * @return {Number} current value
                 */
                StepNumber.prototype.getCurrent = function() {
                    return parseFloat(this._current.toPrecision(this.precision));
                };

                /**
                 * returns the current step size
                 * @return {Number} current step size
                 */
                StepNumber.prototype.getStep = function() {
                    return this._step;
                };

                /**
                 * Set the current to its starting value.
                 *
                 * By default, this will be the largest value smaller than start, which
                 * is a multiple of the step size.
                 *
                 * Parameters checkFirst is optional, default false.
                 * If set to true, move the current value one step if smaller than start.
                 */
                StepNumber.prototype.start = function(checkFirst) {
                    if (checkFirst === undefined) {
                        checkFirst = false;
                    }

                    this._current = this._start - this._start % this._step;

                    if (checkFirst) {
                        if (this.getCurrent() < this._start) {
                            this.next();
                        }
                    }
                };

                /**
                 * Do a step, add the step size to the current value
                 */
                StepNumber.prototype.next = function() {
                    this._current += this._step;
                };

                /**
                 * Returns true whether the end is reached
                 * @return {boolean}  True if the current value has passed the end value.
                 */
                StepNumber.prototype.end = function() {
                    return this._current > this._end;
                };

                module.exports = StepNumber;

                /***/
            }),
            /* 110 */
            /***/
            (function(module, exports) {

                'use strict';

                /**
                 * @prototype Range
                 *
                 * Helper class to make working with related min and max values easier.
                 *
                 * The range is inclusive; a given value is considered part of the range if:
                 *
                 *    this.min <= value <= this.max
                 */
                function Range() {
                    this.min = undefined;
                    this.max = undefined;
                }

                /**
                 * Adjust the range so that the passed value fits in it.
                 *
                 * If the value is outside of the current extremes, adjust
                 * the min or max so that the value is within the range.
                 *
                 * @param {number} value Numeric value to fit in range
                 */
                Range.prototype.adjust = function(value) {
                    if (value === undefined) return;

                    if (this.min === undefined || this.min > value) {
                        this.min = value;
                    }

                    if (this.max === undefined || this.max < value) {
                        this.max = value;
                    }
                };

                /**
                 * Adjust the current range so that the passed range fits in it.
                 *
                 * @param {Range} range Range instance to fit in current instance
                 */
                Range.prototype.combine = function(range) {
                    this.add(range.min);
                    this.add(range.max);
                };

                /**
                 * Expand the range by the given value
                 *
                 * min will be lowered by given value;
                 * max will be raised by given value
                 *
                 * Shrinking by passing a negative value is allowed.
                 *
                 * @param {number} val Amount by which to expand or shrink current range with
                 */
                Range.prototype.expand = function(val) {
                    if (val === undefined) {
                        return;
                    }

                    var newMin = this.min - val;
                    var newMax = this.max + val;

                    // Note that following allows newMin === newMax.
                    // This should be OK, since method expand() allows this also.
                    if (newMin > newMax) {
                        throw new Error('Passed expansion value makes range invalid');
                    }

                    this.min = newMin;
                    this.max = newMax;
                };

                /**
                 * Determine the full range width of current instance.
                 *
                 * @returns {num} The calculated width of this range
                 */
                Range.prototype.range = function() {
                    return this.max - this.min;
                };

                /**
                 * Determine the central point of current instance.
                 *
                 * @returns {number} the value in the middle of min and max
                 */
                Range.prototype.center = function() {
                    return (this.min + this.max) / 2;
                };

                module.exports = Range;

                /***/
            }),
            /* 111 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                ////////////////////////////////////////////////////////////////////////////////
                // This modules handles the options for Graph3d.
                //
                ////////////////////////////////////////////////////////////////////////////////
                var util = __webpack_require__(1);
                var Camera = __webpack_require__(102);
                var Point3d = __webpack_require__(100);

                // enumerate the available styles
                var STYLE = {
                    BAR: 0,
                    BARCOLOR: 1,
                    BARSIZE: 2,
                    DOT: 3,
                    DOTLINE: 4,
                    DOTCOLOR: 5,
                    DOTSIZE: 6,
                    GRID: 7,
                    LINE: 8,
                    SURFACE: 9
                };

                // The string representations of the styles
                var STYLENAME = {
                    'dot': STYLE.DOT,
                    'dot-line': STYLE.DOTLINE,
                    'dot-color': STYLE.DOTCOLOR,
                    'dot-size': STYLE.DOTSIZE,
                    'line': STYLE.LINE,
                    'grid': STYLE.GRID,
                    'surface': STYLE.SURFACE,
                    'bar': STYLE.BAR,
                    'bar-color': STYLE.BARCOLOR,
                    'bar-size': STYLE.BARSIZE
                };

                /**
                 * Field names in the options hash which are of relevance to the user.
                 *
                 * Specifically, these are the fields which require no special handling,
                 * and can be directly copied over.
                 */
                var OPTIONKEYS = ['width', 'height', 'filterLabel', 'legendLabel', 'xLabel', 'yLabel', 'zLabel', 'xValueLabel', 'yValueLabel', 'zValueLabel', 'showXAxis', 'showYAxis', 'showZAxis', 'showGrid', 'showPerspective', 'showShadow', 'keepAspectRatio', 'verticalRatio', 'dotSizeRatio', 'dotSizeMinFraction', 'dotSizeMaxFraction', 'showAnimationControls', 'animationInterval', 'animationPreload', 'animationAutoStart', 'axisColor', 'gridColor', 'xCenter', 'yCenter'];

                /**
                 * Field names in the options hash which are of relevance to the user.
                 *
                 * Same as OPTIONKEYS, but internally these fields are stored with 
                 * prefix 'default' in the name.
                 */
                var PREFIXEDOPTIONKEYS = ['xBarWidth', 'yBarWidth', 'valueMin', 'valueMax', 'xMin', 'xMax', 'xStep', 'yMin', 'yMax', 'yStep', 'zMin', 'zMax', 'zStep'];

                // Placeholder for DEFAULTS reference
                var DEFAULTS = undefined;

                /**
                 * Check if given hash is empty.
                 *
                 * Source: http://stackoverflow.com/a/679937
                 */
                function isEmpty(obj) {
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop)) return false;
                    }

                    return true;
                }

                /**
                 * Make first letter of parameter upper case.
                 *
                 * Source: http://stackoverflow.com/a/1026087
                 */
                function capitalize(str) {
                    if (str === undefined || str === "" || typeof str != "string") {
                        return str;
                    }

                    return str.charAt(0).toUpperCase() + str.slice(1);
                }

                /**
                 * Add a prefix to a field name, taking style guide into account
                 */
                function prefixFieldName(prefix, fieldName) {
                    if (prefix === undefined || prefix === "") {
                        return fieldName;
                    }

                    return prefix + capitalize(fieldName);
                }

                /**
                 * Forcibly copy fields from src to dst in a controlled manner.
                 *
                 * A given field in dst will always be overwitten. If this field
                 * is undefined or not present in src, the field in dst will 
                 * be explicitly set to undefined.
                 * 
                 * The intention here is to be able to reset all option fields.
                 * 
                 * Only the fields mentioned in array 'fields' will be handled.
                 *
                 * @param fields array with names of fields to copy
                 * @param prefix optional; prefix to use for the target fields.
                 */
                function forceCopy(src, dst, fields, prefix) {
                    var srcKey;
                    var dstKey;

                    for (var i in fields) {
                        srcKey = fields[i];
                        dstKey = prefixFieldName(prefix, srcKey);

                        dst[dstKey] = src[srcKey];
                    }
                }

                /**
                 * Copy fields from src to dst in a safe and controlled manner.
                 *
                 * Only the fields mentioned in array 'fields' will be copied over,
                 * and only if these are actually defined.
                 *
                 * @param fields array with names of fields to copy
                 * @param prefix optional; prefix to use for the target fields.
                 */
                function safeCopy(src, dst, fields, prefix) {
                    var srcKey;
                    var dstKey;

                    for (var i in fields) {
                        srcKey = fields[i];
                        if (src[srcKey] === undefined) continue;

                        dstKey = prefixFieldName(prefix, srcKey);

                        dst[dstKey] = src[srcKey];
                    }
                }

                /**
                 * Initialize dst with the values in src.
                 *
                 * src is the hash with the default values. 
                 * A reference DEFAULTS to this hash is stored locally for 
                 * further handling.
                 *
                 * For now, dst is assumed to be a Graph3d instance.
                 */
                function setDefaults(src, dst) {
                    if (src === undefined || isEmpty(src)) {
                        throw new Error('No DEFAULTS passed');
                    }
                    if (dst === undefined) {
                        throw new Error('No dst passed');
                    }

                    // Remember defaults for future reference
                    DEFAULTS = src;

                    // Handle the defaults which can be simply copied over
                    forceCopy(src, dst, OPTIONKEYS);
                    forceCopy(src, dst, PREFIXEDOPTIONKEYS, 'default');

                    // Handle the more complex ('special') fields
                    setSpecialSettings(src, dst);

                    // Following are internal fields, not part of the user settings
                    dst.margin = 10; // px
                    dst.showGrayBottom = false; // TODO: this does not work correctly
                    dst.showTooltip = false;
                    dst.onclick_callback = null;
                    dst.eye = new Point3d(0, 0, -1); // TODO: set eye.z about 3/4 of the width of the window?
                }

                function setOptions(options, dst) {
                    if (options === undefined) {
                        return;
                    }
                    if (dst === undefined) {
                        throw new Error('No dst passed');
                    }

                    if (DEFAULTS === undefined || isEmpty(DEFAULTS)) {
                        throw new Error('DEFAULTS not set for module Settings');
                    }

                    // Handle the parameters which can be simply copied over
                    safeCopy(options, dst, OPTIONKEYS);
                    safeCopy(options, dst, PREFIXEDOPTIONKEYS, 'default');

                    // Handle the more complex ('special') fields
                    setSpecialSettings(options, dst);
                }

                /**
                 * Special handling for certain parameters
                 *
                 * 'Special' here means: setting requires more than a simple copy
                 */
                function setSpecialSettings(src, dst) {
                    if (src.backgroundColor !== undefined) {
                        setBackgroundColor(src.backgroundColor, dst);
                    }

                    setDataColor(src.dataColor, dst);
                    setStyle(src.style, dst);
                    setShowLegend(src.showLegend, dst);
                    setCameraPosition(src.cameraPosition, dst);

                    // As special fields go, this is an easy one; just a translation of the name.
                    // Can't use this.tooltip directly, because that field exists internally
                    if (src.tooltip !== undefined) {
                        dst.showTooltip = src.tooltip;
                    }
                    if (src.onclick != undefined) {
                        dst.onclick_callback = src.onclick;
                    }

                    if (src.tooltipStyle !== undefined) {
                        util.selectiveDeepExtend(['tooltipStyle'], dst, src);
                    }
                }

                /**
                 * Set the value of setting 'showLegend'
                 *
                 * This depends on the value of the style fields, so it must be called
                 * after the style field has been initialized.
                 */
                function setShowLegend(showLegend, dst) {
                    if (showLegend === undefined) {
                        // If the default was auto, make a choice for this field
                        var isAutoByDefault = DEFAULTS.showLegend === undefined;

                        if (isAutoByDefault) {
                            // these styles default to having legends
                            var isLegendGraphStyle = dst.style === STYLE.DOTCOLOR || dst.style === STYLE.DOTSIZE;

                            dst.showLegend = isLegendGraphStyle;
                        } else {
                            // Leave current value as is
                        }
                    } else {
                        dst.showLegend = showLegend;
                    }
                }

                /**
                 * Retrieve the style index from given styleName
                 * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
                 * @return {Number} styleNumber Enumeration value representing the style, or -1
                 *                when not found
                 */
                function getStyleNumberByName(styleName) {
                    var number = STYLENAME[styleName];

                    if (number === undefined) {
                        return -1;
                    }

                    return number;
                }

                /**
                 * Check if given number is a valid style number.
                 *
                 * @return true if valid, false otherwise
                 */
                function checkStyleNumber(style) {
                    var valid = false;

                    for (var n in STYLE) {
                        if (STYLE[n] === style) {
                            valid = true;
                            break;
                        }
                    }

                    return valid;
                }

                function setStyle(style, dst) {
                    if (style === undefined) {
                        return; // Nothing to do
                    }

                    var styleNumber;

                    if (typeof style === 'string') {
                        styleNumber = getStyleNumberByName(style);

                        if (styleNumber === -1) {
                            throw new Error('Style \'' + style + '\' is invalid');
                        }
                    } else {
                        // Do a pedantic check on style number value
                        if (!checkStyleNumber(style)) {
                            throw new Error('Style \'' + style + '\' is invalid');
                        }

                        styleNumber = style;
                    }

                    dst.style = styleNumber;
                }

                /**
                 * Set the background styling for the graph
                 * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
                 */
                function setBackgroundColor(backgroundColor, dst) {
                    var fill = 'white';
                    var stroke = 'gray';
                    var strokeWidth = 1;

                    if (typeof backgroundColor === 'string') {
                        fill = backgroundColor;
                        stroke = 'none';
                        strokeWidth = 0;
                    } else if ((typeof backgroundColor === 'undefined' ? 'undefined' : (0, _typeof3['default'])(backgroundColor)) === 'object') {
                        if (backgroundColor.fill !== undefined) fill = backgroundColor.fill;
                        if (backgroundColor.stroke !== undefined) stroke = backgroundColor.stroke;
                        if (backgroundColor.strokeWidth !== undefined) strokeWidth = backgroundColor.strokeWidth;
                    } else {
                        throw new Error('Unsupported type of backgroundColor');
                    }

                    dst.frame.style.backgroundColor = fill;
                    dst.frame.style.borderColor = stroke;
                    dst.frame.style.borderWidth = strokeWidth + 'px';
                    dst.frame.style.borderStyle = 'solid';
                }

                function setDataColor(dataColor, dst) {
                    if (dataColor === undefined) {
                        return; // Nothing to do
                    }

                    if (dst.dataColor === undefined) {
                        dst.dataColor = {};
                    }

                    if (typeof dataColor === 'string') {
                        dst.dataColor.fill = dataColor;
                        dst.dataColor.stroke = dataColor;
                    } else {
                        if (dataColor.fill) {
                            dst.dataColor.fill = dataColor.fill;
                        }
                        if (dataColor.stroke) {
                            dst.dataColor.stroke = dataColor.stroke;
                        }
                        if (dataColor.strokeWidth !== undefined) {
                            dst.dataColor.strokeWidth = dataColor.strokeWidth;
                        }
                    }
                }

                function setCameraPosition(cameraPosition, dst) {
                    var camPos = cameraPosition;
                    if (camPos === undefined) {
                        return;
                    }

                    if (dst.camera === undefined) {
                        dst.camera = new Camera();
                    }

                    dst.camera.setArmRotation(camPos.horizontal, camPos.vertical);
                    dst.camera.setArmLength(camPos.distance);
                }

                module.exports.STYLE = STYLE;
                module.exports.setDefaults = setDefaults;
                module.exports.setOptions = setOptions;
                module.exports.setCameraPosition = setCameraPosition;

                /***/
            }),
            /* 112 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // Only load hammer.js when in a browser environment
                // (loading hammer.js in a node.js environment gives errors)
                if (typeof window !== 'undefined') {
                    var propagating = __webpack_require__(113);
                    var Hammer = window['Hammer'] || __webpack_require__(114);
                    module.exports = propagating(Hammer, {
                        preventDefault: 'mouse'
                    });
                } else {
                    module.exports = function() {
                        throw Error('hammer.js is only available in a browser, not in node.js.');
                    };
                }

                /***/
            }),
            /* 113 */
            /***/
            (function(module, exports, __webpack_require__) {

                var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
                'use strict';

                (function(factory) {
                    if (true) {
                        // AMD. Register as an anonymous module.
                        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    } else if (typeof exports === 'object') {
                        // Node. Does not work with strict CommonJS, but
                        // only CommonJS-like environments that support module.exports,
                        // like Node.
                        module.exports = factory();
                    } else {
                        // Browser globals (root is window)
                        window.propagating = factory();
                    }
                }(function() {
                    var _firstTarget = null; // singleton, will contain the target element where the touch event started

                    /**
                     * Extend an Hammer.js instance with event propagation.
                     *
                     * Features:
                     * - Events emitted by hammer will propagate in order from child to parent
                     *   elements.
                     * - Events are extended with a function `event.stopPropagation()` to stop
                     *   propagation to parent elements.
                     * - An option `preventDefault` to stop all default browser behavior.
                     *
                     * Usage:
                     *   var hammer = propagatingHammer(new Hammer(element));
                     *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
                     *
                     * @param {Hammer.Manager} hammer   An hammer instance.
                     * @param {Object} [options]        Available options:
                     *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
                     *                                    Enforce preventing the default browser behavior.
                     *                                    Cannot be set to `false`.
                     * @return {Hammer.Manager} Returns the same hammer instance with extended
                     *                          functionality
                     */
                    return function propagating(hammer, options) {
                        var _options = options || {
                            preventDefault: false
                        };

                        if (hammer.Manager) {
                            // This looks like the Hammer constructor.
                            // Overload the constructors with our own.
                            var Hammer = hammer;

                            var PropagatingHammer = function(element, options) {
                                var o = Object.create(_options);
                                if (options) Hammer.assign(o, options);
                                return propagating(new Hammer(element, o), o);
                            };
                            Hammer.assign(PropagatingHammer, Hammer);

                            PropagatingHammer.Manager = function(element, options) {
                                var o = Object.create(_options);
                                if (options) Hammer.assign(o, options);
                                return propagating(new Hammer.Manager(element, o), o);
                            };

                            return PropagatingHammer;
                        }

                        // create a wrapper object which will override the functions
                        // `on`, `off`, `destroy`, and `emit` of the hammer instance
                        var wrapper = Object.create(hammer);

                        // attach to DOM element
                        var element = hammer.element;

                        if (!element.hammer) element.hammer = [];
                        element.hammer.push(wrapper);

                        // register an event to catch the start of a gesture and store the
                        // target in a singleton
                        hammer.on('hammer.input', function(event) {
                            if (_options.preventDefault === true || (_options.preventDefault === event.pointerType)) {
                                event.preventDefault();
                            }
                            if (event.isFirst) {
                                _firstTarget = event.target;
                            }
                        });

                        /** @type {Object.<String, Array.<function>>} */
                        wrapper._handlers = {};

                        /**
                         * Register a handler for one or multiple events
                         * @param {String} events    A space separated string with events
                         * @param {function} handler A callback function, called as handler(event)
                         * @returns {Hammer.Manager} Returns the hammer instance
                         */
                        wrapper.on = function(events, handler) {
                            // register the handler
                            split(events).forEach(function(event) {
                                var _handlers = wrapper._handlers[event];
                                if (!_handlers) {
                                    wrapper._handlers[event] = _handlers = [];

                                    // register the static, propagated handler
                                    hammer.on(event, propagatedHandler);
                                }
                                _handlers.push(handler);
                            });

                            return wrapper;
                        };

                        /**
                         * Unregister a handler for one or multiple events
                         * @param {String} events      A space separated string with events
                         * @param {function} [handler] Optional. The registered handler. If not
                         *                             provided, all handlers for given events
                         *                             are removed.
                         * @returns {Hammer.Manager}   Returns the hammer instance
                         */
                        wrapper.off = function(events, handler) {
                            // unregister the handler
                            split(events).forEach(function(event) {
                                var _handlers = wrapper._handlers[event];
                                if (_handlers) {
                                    _handlers = handler ? _handlers.filter(function(h) {
                                        return h !== handler;
                                    }) : [];

                                    if (_handlers.length > 0) {
                                        wrapper._handlers[event] = _handlers;
                                    } else {
                                        // remove static, propagated handler
                                        hammer.off(event, propagatedHandler);
                                        delete wrapper._handlers[event];
                                    }
                                }
                            });

                            return wrapper;
                        };

                        /**
                         * Emit to the event listeners
                         * @param {string} eventType
                         * @param {Event} event
                         */
                        wrapper.emit = function(eventType, event) {
                            _firstTarget = event.target;
                            hammer.emit(eventType, event);
                        };

                        wrapper.destroy = function() {
                            // Detach from DOM element
                            var hammers = hammer.element.hammer;
                            var idx = hammers.indexOf(wrapper);
                            if (idx !== -1) hammers.splice(idx, 1);
                            if (!hammers.length) delete hammer.element.hammer;

                            // clear all handlers
                            wrapper._handlers = {};

                            // call original hammer destroy
                            hammer.destroy();
                        };

                        // split a string with space separated words
                        function split(events) {
                            return events.match(/[^ ]+/g);
                        }

                        /**
                         * A static event handler, applying event propagation.
                         * @param {Object} event
                         */
                        function propagatedHandler(event) {
                            // let only a single hammer instance handle this event
                            if (event.type !== 'hammer.input') {
                                // it is possible that the same srcEvent is used with multiple hammer events,
                                // we keep track on which events are handled in an object _handled
                                if (!event.srcEvent._handled) {
                                    event.srcEvent._handled = {};
                                }

                                if (event.srcEvent._handled[event.type]) {
                                    return;
                                } else {
                                    event.srcEvent._handled[event.type] = true;
                                }
                            }

                            // attach a stopPropagation function to the event
                            var stopped = false;
                            event.stopPropagation = function() {
                                stopped = true;
                            };

                            //wrap the srcEvent's stopPropagation to also stop hammer propagation:
                            var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);
                            if (typeof srcStop == "function") {
                                event.srcEvent.stopPropagation = function() {
                                    srcStop();
                                    event.stopPropagation();
                                }
                            }

                            // attach firstTarget property to the event
                            event.firstTarget = _firstTarget;

                            // propagate over all elements (until stopped)
                            var elem = _firstTarget;
                            while (elem && !stopped) {
                                var elemHammer = elem.hammer;
                                if (elemHammer) {
                                    var _handlers;
                                    for (var k = 0; k < elemHammer.length; k++) {
                                        _handlers = elemHammer[k]._handlers[event.type];
                                        if (_handlers)
                                            for (var i = 0; i < _handlers.length && !stopped; i++) {
                                                _handlers[i](event);
                                            }
                                    }
                                }
                                elem = elem.parentNode;
                            }
                        }

                        return wrapper;
                    };
                }));


                /***/
            }),
            /* 114 */
            /***/
            (function(module, exports, __webpack_require__) {

                var __WEBPACK_AMD_DEFINE_RESULT__;
                /*! Hammer.JS - v2.0.7 - 2016-04-22
                 * http://hammerjs.github.io/
                 *
                 * Copyright (c) 2016 Jorik Tangelder;
                 * Licensed under the MIT license */
                (function(window, document, exportName, undefined) {
                    'use strict';

                    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
                    var TEST_ELEMENT = document.createElement('div');

                    var TYPE_FUNCTION = 'function';

                    var round = Math.round;
                    var abs = Math.abs;
                    var now = Date.now;

                    /**
                     * set a timeout with a given scope
                     * @param {Function} fn
                     * @param {Number} timeout
                     * @param {Object} context
                     * @returns {number}
                     */
                    function setTimeoutContext(fn, timeout, context) {
                        return setTimeout(bindFn(fn, context), timeout);
                    }

                    /**
                     * if the argument is an array, we want to execute the fn on each entry
                     * if it aint an array we don't want to do a thing.
                     * this is used by all the methods that accept a single and array argument.
                     * @param {*|Array} arg
                     * @param {String} fn
                     * @param {Object} [context]
                     * @returns {Boolean}
                     */
                    function invokeArrayArg(arg, fn, context) {
                        if (Array.isArray(arg)) {
                            each(arg, context[fn], context);
                            return true;
                        }
                        return false;
                    }

                    /**
                     * walk objects and arrays
                     * @param {Object} obj
                     * @param {Function} iterator
                     * @param {Object} context
                     */
                    function each(obj, iterator, context) {
                        var i;

                        if (!obj) {
                            return;
                        }

                        if (obj.forEach) {
                            obj.forEach(iterator, context);
                        } else if (obj.length !== undefined) {
                            i = 0;
                            while (i < obj.length) {
                                iterator.call(context, obj[i], i, obj);
                                i++;
                            }
                        } else {
                            for (i in obj) {
                                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
                            }
                        }
                    }

                    /**
                     * wrap a method with a deprecation warning and stack trace
                     * @param {Function} method
                     * @param {String} name
                     * @param {String} message
                     * @returns {Function} A new function wrapping the supplied method.
                     */
                    function deprecate(method, name, message) {
                        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
                        return function() {
                            var e = new Error('get-stack-trace');
                            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
                                .replace(/^\s+at\s+/gm, '')
                                .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

                            var log = window.console && (window.console.warn || window.console.log);
                            if (log) {
                                log.call(window.console, deprecationMessage, stack);
                            }
                            return method.apply(this, arguments);
                        };
                    }

                    /**
                     * extend object.
                     * means that properties in dest will be overwritten by the ones in src.
                     * @param {Object} target
                     * @param {...Object} objects_to_assign
                     * @returns {Object} target
                     */
                    var assign;
                    if (typeof Object.assign !== 'function') {
                        assign = function assign(target) {
                            if (target === undefined || target === null) {
                                throw new TypeError('Cannot convert undefined or null to object');
                            }

                            var output = Object(target);
                            for (var index = 1; index < arguments.length; index++) {
                                var source = arguments[index];
                                if (source !== undefined && source !== null) {
                                    for (var nextKey in source) {
                                        if (source.hasOwnProperty(nextKey)) {
                                            output[nextKey] = source[nextKey];
                                        }
                                    }
                                }
                            }
                            return output;
                        };
                    } else {
                        assign = Object.assign;
                    }

                    /**
                     * extend object.
                     * means that properties in dest will be overwritten by the ones in src.
                     * @param {Object} dest
                     * @param {Object} src
                     * @param {Boolean} [merge=false]
                     * @returns {Object} dest
                     */
                    var extend = deprecate(function extend(dest, src, merge) {
                        var keys = Object.keys(src);
                        var i = 0;
                        while (i < keys.length) {
                            if (!merge || (merge && dest[keys[i]] === undefined)) {
                                dest[keys[i]] = src[keys[i]];
                            }
                            i++;
                        }
                        return dest;
                    }, 'extend', 'Use `assign`.');

                    /**
                     * merge the values from src in the dest.
                     * means that properties that exist in dest will not be overwritten by src
                     * @param {Object} dest
                     * @param {Object} src
                     * @returns {Object} dest
                     */
                    var merge = deprecate(function merge(dest, src) {
                        return extend(dest, src, true);
                    }, 'merge', 'Use `assign`.');

                    /**
                     * simple class inheritance
                     * @param {Function} child
                     * @param {Function} base
                     * @param {Object} [properties]
                     */
                    function inherit(child, base, properties) {
                        var baseP = base.prototype,
                            childP;

                        childP = child.prototype = Object.create(baseP);
                        childP.constructor = child;
                        childP._super = baseP;

                        if (properties) {
                            assign(childP, properties);
                        }
                    }

                    /**
                     * simple function bind
                     * @param {Function} fn
                     * @param {Object} context
                     * @returns {Function}
                     */
                    function bindFn(fn, context) {
                        return function boundFn() {
                            return fn.apply(context, arguments);
                        };
                    }

                    /**
                     * let a boolean value also be a function that must return a boolean
                     * this first item in args will be used as the context
                     * @param {Boolean|Function} val
                     * @param {Array} [args]
                     * @returns {Boolean}
                     */
                    function boolOrFn(val, args) {
                        if (typeof val == TYPE_FUNCTION) {
                            return val.apply(args ? args[0] || undefined : undefined, args);
                        }
                        return val;
                    }

                    /**
                     * use the val2 when val1 is undefined
                     * @param {*} val1
                     * @param {*} val2
                     * @returns {*}
                     */
                    function ifUndefined(val1, val2) {
                        return (val1 === undefined) ? val2 : val1;
                    }

                    /**
                     * addEventListener with multiple events at once
                     * @param {EventTarget} target
                     * @param {String} types
                     * @param {Function} handler
                     */
                    function addEventListeners(target, types, handler) {
                        each(splitStr(types), function(type) {
                            target.addEventListener(type, handler, false);
                        });
                    }

                    /**
                     * removeEventListener with multiple events at once
                     * @param {EventTarget} target
                     * @param {String} types
                     * @param {Function} handler
                     */
                    function removeEventListeners(target, types, handler) {
                        each(splitStr(types), function(type) {
                            target.removeEventListener(type, handler, false);
                        });
                    }

                    /**
                     * find if a node is in the given parent
                     * @method hasParent
                     * @param {HTMLElement} node
                     * @param {HTMLElement} parent
                     * @return {Boolean} found
                     */
                    function hasParent(node, parent) {
                        while (node) {
                            if (node == parent) {
                                return true;
                            }
                            node = node.parentNode;
                        }
                        return false;
                    }

                    /**
                     * small indexOf wrapper
                     * @param {String} str
                     * @param {String} find
                     * @returns {Boolean} found
                     */
                    function inStr(str, find) {
                        return str.indexOf(find) > -1;
                    }

                    /**
                     * split string on whitespace
                     * @param {String} str
                     * @returns {Array} words
                     */
                    function splitStr(str) {
                        return str.trim().split(/\s+/g);
                    }

                    /**
                     * find if a array contains the object using indexOf or a simple polyFill
                     * @param {Array} src
                     * @param {String} find
                     * @param {String} [findByKey]
                     * @return {Boolean|Number} false when not found, or the index
                     */
                    function inArray(src, find, findByKey) {
                        if (src.indexOf && !findByKey) {
                            return src.indexOf(find);
                        } else {
                            var i = 0;
                            while (i < src.length) {
                                if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                                    return i;
                                }
                                i++;
                            }
                            return -1;
                        }
                    }

                    /**
                     * convert array-like objects to real arrays
                     * @param {Object} obj
                     * @returns {Array}
                     */
                    function toArray(obj) {
                        return Array.prototype.slice.call(obj, 0);
                    }

                    /**
                     * unique array with objects based on a key (like 'id') or just by the array's value
                     * @param {Array} src [{id:1},{id:2},{id:1}]
                     * @param {String} [key]
                     * @param {Boolean} [sort=False]
                     * @returns {Array} [{id:1},{id:2}]
                     */
                    function uniqueArray(src, key, sort) {
                        var results = [];
                        var values = [];
                        var i = 0;

                        while (i < src.length) {
                            var val = key ? src[i][key] : src[i];
                            if (inArray(values, val) < 0) {
                                results.push(src[i]);
                            }
                            values[i] = val;
                            i++;
                        }

                        if (sort) {
                            if (!key) {
                                results = results.sort();
                            } else {
                                results = results.sort(function sortUniqueArray(a, b) {
                                    return a[key] > b[key];
                                });
                            }
                        }

                        return results;
                    }

                    /**
                     * get the prefixed property
                     * @param {Object} obj
                     * @param {String} property
                     * @returns {String|Undefined} prefixed
                     */
                    function prefixed(obj, property) {
                        var prefix, prop;
                        var camelProp = property[0].toUpperCase() + property.slice(1);

                        var i = 0;
                        while (i < VENDOR_PREFIXES.length) {
                            prefix = VENDOR_PREFIXES[i];
                            prop = (prefix) ? prefix + camelProp : property;

                            if (prop in obj) {
                                return prop;
                            }
                            i++;
                        }
                        return undefined;
                    }

                    /**
                     * get a unique id
                     * @returns {number} uniqueId
                     */
                    var _uniqueId = 1;

                    function uniqueId() {
                        return _uniqueId++;
                    }

                    /**
                     * get the window object of an element
                     * @param {HTMLElement} element
                     * @returns {DocumentView|Window}
                     */
                    function getWindowForElement(element) {
                        var doc = element.ownerDocument || element;
                        return (doc.defaultView || doc.parentWindow || window);
                    }

                    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

                    var SUPPORT_TOUCH = ('ontouchstart' in window);
                    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
                    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

                    var INPUT_TYPE_TOUCH = 'touch';
                    var INPUT_TYPE_PEN = 'pen';
                    var INPUT_TYPE_MOUSE = 'mouse';
                    var INPUT_TYPE_KINECT = 'kinect';

                    var COMPUTE_INTERVAL = 25;

                    var INPUT_START = 1;
                    var INPUT_MOVE = 2;
                    var INPUT_END = 4;
                    var INPUT_CANCEL = 8;

                    var DIRECTION_NONE = 1;
                    var DIRECTION_LEFT = 2;
                    var DIRECTION_RIGHT = 4;
                    var DIRECTION_UP = 8;
                    var DIRECTION_DOWN = 16;

                    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
                    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
                    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

                    var PROPS_XY = ['x', 'y'];
                    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

                    /**
                     * create new input type manager
                     * @param {Manager} manager
                     * @param {Function} callback
                     * @returns {Input}
                     * @constructor
                     */
                    function Input(manager, callback) {
                        var self = this;
                        this.manager = manager;
                        this.callback = callback;
                        this.element = manager.element;
                        this.target = manager.options.inputTarget;

                        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
                        // so when disabled the input events are completely bypassed.
                        this.domHandler = function(ev) {
                            if (boolOrFn(manager.options.enable, [manager])) {
                                self.handler(ev);
                            }
                        };

                        this.init();

                    }

                    Input.prototype = {
                        /**
                         * should handle the inputEvent data and trigger the callback
                         * @virtual
                         */
                        handler: function() {},

                        /**
                         * bind the events
                         */
                        init: function() {
                            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
                            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
                            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                        },

                        /**
                         * unbind the events
                         */
                        destroy: function() {
                            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
                            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
                            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                        }
                    };

                    /**
                     * create new input type manager
                     * called by the Manager constructor
                     * @param {Hammer} manager
                     * @returns {Input}
                     */
                    function createInputInstance(manager) {
                        var Type;
                        var inputClass = manager.options.inputClass;

                        if (inputClass) {
                            Type = inputClass;
                        } else if (SUPPORT_POINTER_EVENTS) {
                            Type = PointerEventInput;
                        } else if (SUPPORT_ONLY_TOUCH) {
                            Type = TouchInput;
                        } else if (!SUPPORT_TOUCH) {
                            Type = MouseInput;
                        } else {
                            Type = TouchMouseInput;
                        }
                        return new(Type)(manager, inputHandler);
                    }

                    /**
                     * handle input events
                     * @param {Manager} manager
                     * @param {String} eventType
                     * @param {Object} input
                     */
                    function inputHandler(manager, eventType, input) {
                        var pointersLen = input.pointers.length;
                        var changedPointersLen = input.changedPointers.length;
                        var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
                        var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

                        input.isFirst = !!isFirst;
                        input.isFinal = !!isFinal;

                        if (isFirst) {
                            manager.session = {};
                        }

                        // source event is the normalized value of the domEvents
                        // like 'touchstart, mouseup, pointerdown'
                        input.eventType = eventType;

                        // compute scale, rotation etc
                        computeInputData(manager, input);

                        // emit secret event
                        manager.emit('hammer.input', input);

                        manager.recognize(input);
                        manager.session.prevInput = input;
                    }

                    /**
                     * extend the data with some usable properties like scale, rotate, velocity etc
                     * @param {Object} manager
                     * @param {Object} input
                     */
                    function computeInputData(manager, input) {
                        var session = manager.session;
                        var pointers = input.pointers;
                        var pointersLength = pointers.length;

                        // store the first input to calculate the distance and direction
                        if (!session.firstInput) {
                            session.firstInput = simpleCloneInputData(input);
                        }

                        // to compute scale and rotation we need to store the multiple touches
                        if (pointersLength > 1 && !session.firstMultiple) {
                            session.firstMultiple = simpleCloneInputData(input);
                        } else if (pointersLength === 1) {
                            session.firstMultiple = false;
                        }

                        var firstInput = session.firstInput;
                        var firstMultiple = session.firstMultiple;
                        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

                        var center = input.center = getCenter(pointers);
                        input.timeStamp = now();
                        input.deltaTime = input.timeStamp - firstInput.timeStamp;

                        input.angle = getAngle(offsetCenter, center);
                        input.distance = getDistance(offsetCenter, center);

                        computeDeltaXY(session, input);
                        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

                        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
                        input.overallVelocityX = overallVelocity.x;
                        input.overallVelocityY = overallVelocity.y;
                        input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

                        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
                        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

                        input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
                            session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

                        computeIntervalInputData(session, input);

                        // find the correct target
                        var target = manager.element;
                        if (hasParent(input.srcEvent.target, target)) {
                            target = input.srcEvent.target;
                        }
                        input.target = target;
                    }

                    function computeDeltaXY(session, input) {
                        var center = input.center;
                        var offset = session.offsetDelta || {};
                        var prevDelta = session.prevDelta || {};
                        var prevInput = session.prevInput || {};

                        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
                            prevDelta = session.prevDelta = {
                                x: prevInput.deltaX || 0,
                                y: prevInput.deltaY || 0
                            };

                            offset = session.offsetDelta = {
                                x: center.x,
                                y: center.y
                            };
                        }

                        input.deltaX = prevDelta.x + (center.x - offset.x);
                        input.deltaY = prevDelta.y + (center.y - offset.y);
                    }

                    /**
                     * velocity is calculated every x ms
                     * @param {Object} session
                     * @param {Object} input
                     */
                    function computeIntervalInputData(session, input) {
                        var last = session.lastInterval || input,
                            deltaTime = input.timeStamp - last.timeStamp,
                            velocity, velocityX, velocityY, direction;

                        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
                            var deltaX = input.deltaX - last.deltaX;
                            var deltaY = input.deltaY - last.deltaY;

                            var v = getVelocity(deltaTime, deltaX, deltaY);
                            velocityX = v.x;
                            velocityY = v.y;
                            velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
                            direction = getDirection(deltaX, deltaY);

                            session.lastInterval = input;
                        } else {
                            // use latest velocity info if it doesn't overtake a minimum period
                            velocity = last.velocity;
                            velocityX = last.velocityX;
                            velocityY = last.velocityY;
                            direction = last.direction;
                        }

                        input.velocity = velocity;
                        input.velocityX = velocityX;
                        input.velocityY = velocityY;
                        input.direction = direction;
                    }

                    /**
                     * create a simple clone from the input used for storage of firstInput and firstMultiple
                     * @param {Object} input
                     * @returns {Object} clonedInputData
                     */
                    function simpleCloneInputData(input) {
                        // make a simple copy of the pointers because we will get a reference if we don't
                        // we only need clientXY for the calculations
                        var pointers = [];
                        var i = 0;
                        while (i < input.pointers.length) {
                            pointers[i] = {
                                clientX: round(input.pointers[i].clientX),
                                clientY: round(input.pointers[i].clientY)
                            };
                            i++;
                        }

                        return {
                            timeStamp: now(),
                            pointers: pointers,
                            center: getCenter(pointers),
                            deltaX: input.deltaX,
                            deltaY: input.deltaY
                        };
                    }

                    /**
                     * get the center of all the pointers
                     * @param {Array} pointers
                     * @return {Object} center contains `x` and `y` properties
                     */
                    function getCenter(pointers) {
                        var pointersLength = pointers.length;

                        // no need to loop when only one touch
                        if (pointersLength === 1) {
                            return {
                                x: round(pointers[0].clientX),
                                y: round(pointers[0].clientY)
                            };
                        }

                        var x = 0,
                            y = 0,
                            i = 0;
                        while (i < pointersLength) {
                            x += pointers[i].clientX;
                            y += pointers[i].clientY;
                            i++;
                        }

                        return {
                            x: round(x / pointersLength),
                            y: round(y / pointersLength)
                        };
                    }

                    /**
                     * calculate the velocity between two points. unit is in px per ms.
                     * @param {Number} deltaTime
                     * @param {Number} x
                     * @param {Number} y
                     * @return {Object} velocity `x` and `y`
                     */
                    function getVelocity(deltaTime, x, y) {
                        return {
                            x: x / deltaTime || 0,
                            y: y / deltaTime || 0
                        };
                    }

                    /**
                     * get the direction between two points
                     * @param {Number} x
                     * @param {Number} y
                     * @return {Number} direction
                     */
                    function getDirection(x, y) {
                        if (x === y) {
                            return DIRECTION_NONE;
                        }

                        if (abs(x) >= abs(y)) {
                            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                        }
                        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    }

                    /**
                     * calculate the absolute distance between two points
                     * @param {Object} p1 {x, y}
                     * @param {Object} p2 {x, y}
                     * @param {Array} [props] containing x and y keys
                     * @return {Number} distance
                     */
                    function getDistance(p1, p2, props) {
                        if (!props) {
                            props = PROPS_XY;
                        }
                        var x = p2[props[0]] - p1[props[0]],
                            y = p2[props[1]] - p1[props[1]];

                        return Math.sqrt((x * x) + (y * y));
                    }

                    /**
                     * calculate the angle between two coordinates
                     * @param {Object} p1
                     * @param {Object} p2
                     * @param {Array} [props] containing x and y keys
                     * @return {Number} angle
                     */
                    function getAngle(p1, p2, props) {
                        if (!props) {
                            props = PROPS_XY;
                        }
                        var x = p2[props[0]] - p1[props[0]],
                            y = p2[props[1]] - p1[props[1]];
                        return Math.atan2(y, x) * 180 / Math.PI;
                    }

                    /**
                     * calculate the rotation degrees between two pointersets
                     * @param {Array} start array of pointers
                     * @param {Array} end array of pointers
                     * @return {Number} rotation
                     */
                    function getRotation(start, end) {
                        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
                    }

                    /**
                     * calculate the scale factor between two pointersets
                     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
                     * @param {Array} start array of pointers
                     * @param {Array} end array of pointers
                     * @return {Number} scale
                     */
                    function getScale(start, end) {
                        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
                    }

                    var MOUSE_INPUT_MAP = {
                        mousedown: INPUT_START,
                        mousemove: INPUT_MOVE,
                        mouseup: INPUT_END
                    };

                    var MOUSE_ELEMENT_EVENTS = 'mousedown';
                    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

                    /**
                     * Mouse events input
                     * @constructor
                     * @extends Input
                     */
                    function MouseInput() {
                        this.evEl = MOUSE_ELEMENT_EVENTS;
                        this.evWin = MOUSE_WINDOW_EVENTS;

                        this.pressed = false; // mousedown state

                        Input.apply(this, arguments);
                    }

                    inherit(MouseInput, Input, {
                        /**
                         * handle mouse events
                         * @param {Object} ev
                         */
                        handler: function MEhandler(ev) {
                            var eventType = MOUSE_INPUT_MAP[ev.type];

                            // on start we want to have the left mouse button down
                            if (eventType & INPUT_START && ev.button === 0) {
                                this.pressed = true;
                            }

                            if (eventType & INPUT_MOVE && ev.which !== 1) {
                                eventType = INPUT_END;
                            }

                            // mouse must be down
                            if (!this.pressed) {
                                return;
                            }

                            if (eventType & INPUT_END) {
                                this.pressed = false;
                            }

                            this.callback(this.manager, eventType, {
                                pointers: [ev],
                                changedPointers: [ev],
                                pointerType: INPUT_TYPE_MOUSE,
                                srcEvent: ev
                            });
                        }
                    });

                    var POINTER_INPUT_MAP = {
                        pointerdown: INPUT_START,
                        pointermove: INPUT_MOVE,
                        pointerup: INPUT_END,
                        pointercancel: INPUT_CANCEL,
                        pointerout: INPUT_CANCEL
                    };

                    // in IE10 the pointer types is defined as an enum
                    var IE10_POINTER_TYPE_ENUM = {
                        2: INPUT_TYPE_TOUCH,
                        3: INPUT_TYPE_PEN,
                        4: INPUT_TYPE_MOUSE,
                        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
                    };

                    var POINTER_ELEMENT_EVENTS = 'pointerdown';
                    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

                    // IE10 has prefixed support, and case-sensitive
                    if (window.MSPointerEvent && !window.PointerEvent) {
                        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
                        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
                    }

                    /**
                     * Pointer events input
                     * @constructor
                     * @extends Input
                     */
                    function PointerEventInput() {
                        this.evEl = POINTER_ELEMENT_EVENTS;
                        this.evWin = POINTER_WINDOW_EVENTS;

                        Input.apply(this, arguments);

                        this.store = (this.manager.session.pointerEvents = []);
                    }

                    inherit(PointerEventInput, Input, {
                        /**
                         * handle mouse events
                         * @param {Object} ev
                         */
                        handler: function PEhandler(ev) {
                            var store = this.store;
                            var removePointer = false;

                            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
                            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
                            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

                            var isTouch = (pointerType == INPUT_TYPE_TOUCH);

                            // get index of the event in the store
                            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

                            // start and mouse must be down
                            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                                if (storeIndex < 0) {
                                    store.push(ev);
                                    storeIndex = store.length - 1;
                                }
                            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                                removePointer = true;
                            }

                            // it not found, so the pointer hasn't been down (so it's probably a hover)
                            if (storeIndex < 0) {
                                return;
                            }

                            // update the event in the store
                            store[storeIndex] = ev;

                            this.callback(this.manager, eventType, {
                                pointers: store,
                                changedPointers: [ev],
                                pointerType: pointerType,
                                srcEvent: ev
                            });

                            if (removePointer) {
                                // remove from the store
                                store.splice(storeIndex, 1);
                            }
                        }
                    });

                    var SINGLE_TOUCH_INPUT_MAP = {
                        touchstart: INPUT_START,
                        touchmove: INPUT_MOVE,
                        touchend: INPUT_END,
                        touchcancel: INPUT_CANCEL
                    };

                    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
                    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

                    /**
                     * Touch events input
                     * @constructor
                     * @extends Input
                     */
                    function SingleTouchInput() {
                        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
                        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
                        this.started = false;

                        Input.apply(this, arguments);
                    }

                    inherit(SingleTouchInput, Input, {
                        handler: function TEhandler(ev) {
                            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

                            // should we handle the touch events?
                            if (type === INPUT_START) {
                                this.started = true;
                            }

                            if (!this.started) {
                                return;
                            }

                            var touches = normalizeSingleTouches.call(this, ev, type);

                            // when done, reset the started state
                            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                                this.started = false;
                            }

                            this.callback(this.manager, type, {
                                pointers: touches[0],
                                changedPointers: touches[1],
                                pointerType: INPUT_TYPE_TOUCH,
                                srcEvent: ev
                            });
                        }
                    });

                    /**
                     * @this {TouchInput}
                     * @param {Object} ev
                     * @param {Number} type flag
                     * @returns {undefined|Array} [all, changed]
                     */
                    function normalizeSingleTouches(ev, type) {
                        var all = toArray(ev.touches);
                        var changed = toArray(ev.changedTouches);

                        if (type & (INPUT_END | INPUT_CANCEL)) {
                            all = uniqueArray(all.concat(changed), 'identifier', true);
                        }

                        return [all, changed];
                    }

                    var TOUCH_INPUT_MAP = {
                        touchstart: INPUT_START,
                        touchmove: INPUT_MOVE,
                        touchend: INPUT_END,
                        touchcancel: INPUT_CANCEL
                    };

                    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

                    /**
                     * Multi-user touch events input
                     * @constructor
                     * @extends Input
                     */
                    function TouchInput() {
                        this.evTarget = TOUCH_TARGET_EVENTS;
                        this.targetIds = {};

                        Input.apply(this, arguments);
                    }

                    inherit(TouchInput, Input, {
                        handler: function MTEhandler(ev) {
                            var type = TOUCH_INPUT_MAP[ev.type];
                            var touches = getTouches.call(this, ev, type);
                            if (!touches) {
                                return;
                            }

                            this.callback(this.manager, type, {
                                pointers: touches[0],
                                changedPointers: touches[1],
                                pointerType: INPUT_TYPE_TOUCH,
                                srcEvent: ev
                            });
                        }
                    });

                    /**
                     * @this {TouchInput}
                     * @param {Object} ev
                     * @param {Number} type flag
                     * @returns {undefined|Array} [all, changed]
                     */
                    function getTouches(ev, type) {
                        var allTouches = toArray(ev.touches);
                        var targetIds = this.targetIds;

                        // when there is only one touch, the process can be simplified
                        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
                            targetIds[allTouches[0].identifier] = true;
                            return [allTouches, allTouches];
                        }

                        var i,
                            targetTouches,
                            changedTouches = toArray(ev.changedTouches),
                            changedTargetTouches = [],
                            target = this.target;

                        // get target touches from touches
                        targetTouches = allTouches.filter(function(touch) {
                            return hasParent(touch.target, target);
                        });

                        // collect touches
                        if (type === INPUT_START) {
                            i = 0;
                            while (i < targetTouches.length) {
                                targetIds[targetTouches[i].identifier] = true;
                                i++;
                            }
                        }

                        // filter changed touches to only contain touches that exist in the collected target ids
                        i = 0;
                        while (i < changedTouches.length) {
                            if (targetIds[changedTouches[i].identifier]) {
                                changedTargetTouches.push(changedTouches[i]);
                            }

                            // cleanup removed touches
                            if (type & (INPUT_END | INPUT_CANCEL)) {
                                delete targetIds[changedTouches[i].identifier];
                            }
                            i++;
                        }

                        if (!changedTargetTouches.length) {
                            return;
                        }

                        return [
                            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
                            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
                            changedTargetTouches
                        ];
                    }

                    /**
                     * Combined touch and mouse input
                     *
                     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
                     * This because touch devices also emit mouse events while doing a touch.
                     *
                     * @constructor
                     * @extends Input
                     */

                    var DEDUP_TIMEOUT = 2500;
                    var DEDUP_DISTANCE = 25;

                    function TouchMouseInput() {
                        Input.apply(this, arguments);

                        var handler = bindFn(this.handler, this);
                        this.touch = new TouchInput(this.manager, handler);
                        this.mouse = new MouseInput(this.manager, handler);

                        this.primaryTouch = null;
                        this.lastTouches = [];
                    }

                    inherit(TouchMouseInput, Input, {
                        /**
                         * handle mouse and touch events
                         * @param {Hammer} manager
                         * @param {String} inputEvent
                         * @param {Object} inputData
                         */
                        handler: function TMEhandler(manager, inputEvent, inputData) {
                            var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
                                isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

                            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
                                return;
                            }

                            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
                            if (isTouch) {
                                recordTouches.call(this, inputEvent, inputData);
                            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
                                return;
                            }

                            this.callback(manager, inputEvent, inputData);
                        },

                        /**
                         * remove the event listeners
                         */
                        destroy: function destroy() {
                            this.touch.destroy();
                            this.mouse.destroy();
                        }
                    });

                    function recordTouches(eventType, eventData) {
                        if (eventType & INPUT_START) {
                            this.primaryTouch = eventData.changedPointers[0].identifier;
                            setLastTouch.call(this, eventData);
                        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                            setLastTouch.call(this, eventData);
                        }
                    }

                    function setLastTouch(eventData) {
                        var touch = eventData.changedPointers[0];

                        if (touch.identifier === this.primaryTouch) {
                            var lastTouch = { x: touch.clientX, y: touch.clientY };
                            this.lastTouches.push(lastTouch);
                            var lts = this.lastTouches;
                            var removeLastTouch = function() {
                                var i = lts.indexOf(lastTouch);
                                if (i > -1) {
                                    lts.splice(i, 1);
                                }
                            };
                            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
                        }
                    }

                    function isSyntheticEvent(eventData) {
                        var x = eventData.srcEvent.clientX,
                            y = eventData.srcEvent.clientY;
                        for (var i = 0; i < this.lastTouches.length; i++) {
                            var t = this.lastTouches[i];
                            var dx = Math.abs(x - t.x),
                                dy = Math.abs(y - t.y);
                            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
                                return true;
                            }
                        }
                        return false;
                    }

                    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
                    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

                    // magical touchAction value
                    var TOUCH_ACTION_COMPUTE = 'compute';
                    var TOUCH_ACTION_AUTO = 'auto';
                    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
                    var TOUCH_ACTION_NONE = 'none';
                    var TOUCH_ACTION_PAN_X = 'pan-x';
                    var TOUCH_ACTION_PAN_Y = 'pan-y';
                    var TOUCH_ACTION_MAP = getTouchActionProps();

                    /**
                     * Touch Action
                     * sets the touchAction property or uses the js alternative
                     * @param {Manager} manager
                     * @param {String} value
                     * @constructor
                     */
                    function TouchAction(manager, value) {
                        this.manager = manager;
                        this.set(value);
                    }

                    TouchAction.prototype = {
                        /**
                         * set the touchAction value on the element or enable the polyfill
                         * @param {String} value
                         */
                        set: function(value) {
                            // find out the touch-action by the event handlers
                            if (value == TOUCH_ACTION_COMPUTE) {
                                value = this.compute();
                            }

                            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
                                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
                            }
                            this.actions = value.toLowerCase().trim();
                        },

                        /**
                         * just re-set the touchAction value
                         */
                        update: function() {
                            this.set(this.manager.options.touchAction);
                        },

                        /**
                         * compute the value for the touchAction property based on the recognizer's settings
                         * @returns {String} value
                         */
                        compute: function() {
                            var actions = [];
                            each(this.manager.recognizers, function(recognizer) {
                                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                                    actions = actions.concat(recognizer.getTouchAction());
                                }
                            });
                            return cleanTouchActions(actions.join(' '));
                        },

                        /**
                         * this method is called on each input cycle and provides the preventing of the browser behavior
                         * @param {Object} input
                         */
                        preventDefaults: function(input) {
                            var srcEvent = input.srcEvent;
                            var direction = input.offsetDirection;

                            // if the touch action did prevented once this session
                            if (this.manager.session.prevented) {
                                srcEvent.preventDefault();
                                return;
                            }

                            var actions = this.actions;
                            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
                            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
                            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

                            if (hasNone) {
                                //do not prevent defaults if this is a tap gesture

                                var isTapPointer = input.pointers.length === 1;
                                var isTapMovement = input.distance < 2;
                                var isTapTouchTime = input.deltaTime < 250;

                                if (isTapPointer && isTapMovement && isTapTouchTime) {
                                    return;
                                }
                            }

                            if (hasPanX && hasPanY) {
                                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                                return;
                            }

                            if (hasNone ||
                                (hasPanY && direction & DIRECTION_HORIZONTAL) ||
                                (hasPanX && direction & DIRECTION_VERTICAL)) {
                                return this.preventSrc(srcEvent);
                            }
                        },

                        /**
                         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
                         * @param {Object} srcEvent
                         */
                        preventSrc: function(srcEvent) {
                            this.manager.session.prevented = true;
                            srcEvent.preventDefault();
                        }
                    };

                    /**
                     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
                     * @param {String} actions
                     * @returns {*}
                     */
                    function cleanTouchActions(actions) {
                        // none
                        if (inStr(actions, TOUCH_ACTION_NONE)) {
                            return TOUCH_ACTION_NONE;
                        }

                        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
                        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

                        // if both pan-x and pan-y are set (different recognizers
                        // for different directions, e.g. horizontal pan but vertical swipe?)
                        // we need none (as otherwise with pan-x pan-y combined none of these
                        // recognizers will work, since the browser would handle all panning
                        if (hasPanX && hasPanY) {
                            return TOUCH_ACTION_NONE;
                        }

                        // pan-x OR pan-y
                        if (hasPanX || hasPanY) {
                            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
                        }

                        // manipulation
                        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
                            return TOUCH_ACTION_MANIPULATION;
                        }

                        return TOUCH_ACTION_AUTO;
                    }

                    function getTouchActionProps() {
                        if (!NATIVE_TOUCH_ACTION) {
                            return false;
                        }
                        var touchMap = {};
                        var cssSupports = window.CSS && window.CSS.supports;
                        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

                            // If css.supports is not supported but there is native touch-action assume it supports
                            // all values. This is the case for IE 10 and 11.
                            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
                        });
                        return touchMap;
                    }

                    /**
                     * Recognizer flow explained; *
                     * All recognizers have the initial state of POSSIBLE when a input session starts.
                     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
                     * Example session for mouse-input: mousedown -> mousemove -> mouseup
                     *
                     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
                     * which determines with state it should be.
                     *
                     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
                     * POSSIBLE to give it another change on the next cycle.
                     *
                     *               Possible
                     *                  |
                     *            +-----+---------------+
                     *            |                     |
                     *      +-----+-----+               |
                     *      |           |               |
                     *   Failed      Cancelled          |
                     *                          +-------+------+
                     *                          |              |
                     *                      Recognized       Began
                     *                                         |
                     *                                      Changed
                     *                                         |
                     *                                  Ended/Recognized
                     */
                    var STATE_POSSIBLE = 1;
                    var STATE_BEGAN = 2;
                    var STATE_CHANGED = 4;
                    var STATE_ENDED = 8;
                    var STATE_RECOGNIZED = STATE_ENDED;
                    var STATE_CANCELLED = 16;
                    var STATE_FAILED = 32;

                    /**
                     * Recognizer
                     * Every recognizer needs to extend from this class.
                     * @constructor
                     * @param {Object} options
                     */
                    function Recognizer(options) {
                        this.options = assign({}, this.defaults, options || {});

                        this.id = uniqueId();

                        this.manager = null;

                        // default is enable true
                        this.options.enable = ifUndefined(this.options.enable, true);

                        this.state = STATE_POSSIBLE;

                        this.simultaneous = {};
                        this.requireFail = [];
                    }

                    Recognizer.prototype = {
                        /**
                         * @virtual
                         * @type {Object}
                         */
                        defaults: {},

                        /**
                         * set options
                         * @param {Object} options
                         * @return {Recognizer}
                         */
                        set: function(options) {
                            assign(this.options, options);

                            // also update the touchAction, in case something changed about the directions/enabled state
                            this.manager && this.manager.touchAction.update();
                            return this;
                        },

                        /**
                         * recognize simultaneous with an other recognizer.
                         * @param {Recognizer} otherRecognizer
                         * @returns {Recognizer} this
                         */
                        recognizeWith: function(otherRecognizer) {
                            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                                return this;
                            }

                            var simultaneous = this.simultaneous;
                            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                            if (!simultaneous[otherRecognizer.id]) {
                                simultaneous[otherRecognizer.id] = otherRecognizer;
                                otherRecognizer.recognizeWith(this);
                            }
                            return this;
                        },

                        /**
                         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
                         * @param {Recognizer} otherRecognizer
                         * @returns {Recognizer} this
                         */
                        dropRecognizeWith: function(otherRecognizer) {
                            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                                return this;
                            }

                            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                            delete this.simultaneous[otherRecognizer.id];
                            return this;
                        },

                        /**
                         * recognizer can only run when an other is failing
                         * @param {Recognizer} otherRecognizer
                         * @returns {Recognizer} this
                         */
                        requireFailure: function(otherRecognizer) {
                            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                                return this;
                            }

                            var requireFail = this.requireFail;
                            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                            if (inArray(requireFail, otherRecognizer) === -1) {
                                requireFail.push(otherRecognizer);
                                otherRecognizer.requireFailure(this);
                            }
                            return this;
                        },

                        /**
                         * drop the requireFailure link. it does not remove the link on the other recognizer.
                         * @param {Recognizer} otherRecognizer
                         * @returns {Recognizer} this
                         */
                        dropRequireFailure: function(otherRecognizer) {
                            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                                return this;
                            }

                            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                            var index = inArray(this.requireFail, otherRecognizer);
                            if (index > -1) {
                                this.requireFail.splice(index, 1);
                            }
                            return this;
                        },

                        /**
                         * has require failures boolean
                         * @returns {boolean}
                         */
                        hasRequireFailures: function() {
                            return this.requireFail.length > 0;
                        },

                        /**
                         * if the recognizer can recognize simultaneous with an other recognizer
                         * @param {Recognizer} otherRecognizer
                         * @returns {Boolean}
                         */
                        canRecognizeWith: function(otherRecognizer) {
                            return !!this.simultaneous[otherRecognizer.id];
                        },

                        /**
                         * You should use `tryEmit` instead of `emit` directly to check
                         * that all the needed recognizers has failed before emitting.
                         * @param {Object} input
                         */
                        emit: function(input) {
                            var self = this;
                            var state = this.state;

                            function emit(event) {
                                self.manager.emit(event, input);
                            }

                            // 'panstart' and 'panmove'
                            if (state < STATE_ENDED) {
                                emit(self.options.event + stateStr(state));
                            }

                            emit(self.options.event); // simple 'eventName' events

                            if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
                                emit(input.additionalEvent);
                            }

                            // panend and pancancel
                            if (state >= STATE_ENDED) {
                                emit(self.options.event + stateStr(state));
                            }
                        },

                        /**
                         * Check that all the require failure recognizers has failed,
                         * if true, it emits a gesture event,
                         * otherwise, setup the state to FAILED.
                         * @param {Object} input
                         */
                        tryEmit: function(input) {
                            if (this.canEmit()) {
                                return this.emit(input);
                            }
                            // it's failing anyway
                            this.state = STATE_FAILED;
                        },

                        /**
                         * can we emit?
                         * @returns {boolean}
                         */
                        canEmit: function() {
                            var i = 0;
                            while (i < this.requireFail.length) {
                                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                                    return false;
                                }
                                i++;
                            }
                            return true;
                        },

                        /**
                         * update the recognizer
                         * @param {Object} inputData
                         */
                        recognize: function(inputData) {
                            // make a new copy of the inputData
                            // so we can change the inputData without messing up the other recognizers
                            var inputDataClone = assign({}, inputData);

                            // is is enabled and allow recognizing?
                            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                                this.reset();
                                this.state = STATE_FAILED;
                                return;
                            }

                            // reset when we've reached the end
                            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                                this.state = STATE_POSSIBLE;
                            }

                            this.state = this.process(inputDataClone);

                            // the recognizer has recognized a gesture
                            // so trigger an event
                            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                                this.tryEmit(inputDataClone);
                            }
                        },

                        /**
                         * return the state of the recognizer
                         * the actual recognizing happens in this method
                         * @virtual
                         * @param {Object} inputData
                         * @returns {Const} STATE
                         */
                        process: function(inputData) {}, // jshint ignore:line

                        /**
                         * return the preferred touch-action
                         * @virtual
                         * @returns {Array}
                         */
                        getTouchAction: function() {},

                        /**
                         * called when the gesture isn't allowed to recognize
                         * like when another is being recognized or it is disabled
                         * @virtual
                         */
                        reset: function() {}
                    };

                    /**
                     * get a usable string, used as event postfix
                     * @param {Const} state
                     * @returns {String} state
                     */
                    function stateStr(state) {
                        if (state & STATE_CANCELLED) {
                            return 'cancel';
                        } else if (state & STATE_ENDED) {
                            return 'end';
                        } else if (state & STATE_CHANGED) {
                            return 'move';
                        } else if (state & STATE_BEGAN) {
                            return 'start';
                        }
                        return '';
                    }

                    /**
                     * direction cons to string
                     * @param {Const} direction
                     * @returns {String}
                     */
                    function directionStr(direction) {
                        if (direction == DIRECTION_DOWN) {
                            return 'down';
                        } else if (direction == DIRECTION_UP) {
                            return 'up';
                        } else if (direction == DIRECTION_LEFT) {
                            return 'left';
                        } else if (direction == DIRECTION_RIGHT) {
                            return 'right';
                        }
                        return '';
                    }

                    /**
                     * get a recognizer by name if it is bound to a manager
                     * @param {Recognizer|String} otherRecognizer
                     * @param {Recognizer} recognizer
                     * @returns {Recognizer}
                     */
                    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
                        var manager = recognizer.manager;
                        if (manager) {
                            return manager.get(otherRecognizer);
                        }
                        return otherRecognizer;
                    }

                    /**
                     * This recognizer is just used as a base for the simple attribute recognizers.
                     * @constructor
                     * @extends Recognizer
                     */
                    function AttrRecognizer() {
                        Recognizer.apply(this, arguments);
                    }

                    inherit(AttrRecognizer, Recognizer, {
                        /**
                         * @namespace
                         * @memberof AttrRecognizer
                         */
                        defaults: {
                            /**
                             * @type {Number}
                             * @default 1
                             */
                            pointers: 1
                        },

                        /**
                         * Used to check if it the recognizer receives valid input, like input.distance > 10.
                         * @memberof AttrRecognizer
                         * @param {Object} input
                         * @returns {Boolean} recognized
                         */
                        attrTest: function(input) {
                            var optionPointers = this.options.pointers;
                            return optionPointers === 0 || input.pointers.length === optionPointers;
                        },

                        /**
                         * Process the input and return the state for the recognizer
                         * @memberof AttrRecognizer
                         * @param {Object} input
                         * @returns {*} State
                         */
                        process: function(input) {
                            var state = this.state;
                            var eventType = input.eventType;

                            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
                            var isValid = this.attrTest(input);

                            // on cancel input and we've recognized before, return STATE_CANCELLED
                            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                                return state | STATE_CANCELLED;
                            } else if (isRecognized || isValid) {
                                if (eventType & INPUT_END) {
                                    return state | STATE_ENDED;
                                } else if (!(state & STATE_BEGAN)) {
                                    return STATE_BEGAN;
                                }
                                return state | STATE_CHANGED;
                            }
                            return STATE_FAILED;
                        }
                    });

                    /**
                     * Pan
                     * Recognized when the pointer is down and moved in the allowed direction.
                     * @constructor
                     * @extends AttrRecognizer
                     */
                    function PanRecognizer() {
                        AttrRecognizer.apply(this, arguments);

                        this.pX = null;
                        this.pY = null;
                    }

                    inherit(PanRecognizer, AttrRecognizer, {
                        /**
                         * @namespace
                         * @memberof PanRecognizer
                         */
                        defaults: {
                            event: 'pan',
                            threshold: 10,
                            pointers: 1,
                            direction: DIRECTION_ALL
                        },

                        getTouchAction: function() {
                            var direction = this.options.direction;
                            var actions = [];
                            if (direction & DIRECTION_HORIZONTAL) {
                                actions.push(TOUCH_ACTION_PAN_Y);
                            }
                            if (direction & DIRECTION_VERTICAL) {
                                actions.push(TOUCH_ACTION_PAN_X);
                            }
                            return actions;
                        },

                        directionTest: function(input) {
                            var options = this.options;
                            var hasMoved = true;
                            var distance = input.distance;
                            var direction = input.direction;
                            var x = input.deltaX;
                            var y = input.deltaY;

                            // lock to axis?
                            if (!(direction & options.direction)) {
                                if (options.direction & DIRECTION_HORIZONTAL) {
                                    direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                                    hasMoved = x != this.pX;
                                    distance = Math.abs(input.deltaX);
                                } else {
                                    direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                                    hasMoved = y != this.pY;
                                    distance = Math.abs(input.deltaY);
                                }
                            }
                            input.direction = direction;
                            return hasMoved && distance > options.threshold && direction & options.direction;
                        },

                        attrTest: function(input) {
                            return AttrRecognizer.prototype.attrTest.call(this, input) &&
                                (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
                        },

                        emit: function(input) {

                            this.pX = input.deltaX;
                            this.pY = input.deltaY;

                            var direction = directionStr(input.direction);

                            if (direction) {
                                input.additionalEvent = this.options.event + direction;
                            }
                            this._super.emit.call(this, input);
                        }
                    });

                    /**
                     * Pinch
                     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
                     * @constructor
                     * @extends AttrRecognizer
                     */
                    function PinchRecognizer() {
                        AttrRecognizer.apply(this, arguments);
                    }

                    inherit(PinchRecognizer, AttrRecognizer, {
                        /**
                         * @namespace
                         * @memberof PinchRecognizer
                         */
                        defaults: {
                            event: 'pinch',
                            threshold: 0,
                            pointers: 2
                        },

                        getTouchAction: function() {
                            return [TOUCH_ACTION_NONE];
                        },

                        attrTest: function(input) {
                            return this._super.attrTest.call(this, input) &&
                                (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
                        },

                        emit: function(input) {
                            if (input.scale !== 1) {
                                var inOut = input.scale < 1 ? 'in' : 'out';
                                input.additionalEvent = this.options.event + inOut;
                            }
                            this._super.emit.call(this, input);
                        }
                    });

                    /**
                     * Press
                     * Recognized when the pointer is down for x ms without any movement.
                     * @constructor
                     * @extends Recognizer
                     */
                    function PressRecognizer() {
                        Recognizer.apply(this, arguments);

                        this._timer = null;
                        this._input = null;
                    }

                    inherit(PressRecognizer, Recognizer, {
                        /**
                         * @namespace
                         * @memberof PressRecognizer
                         */
                        defaults: {
                            event: 'press',
                            pointers: 1,
                            time: 251, // minimal time of the pointer to be pressed
                            threshold: 9 // a minimal movement is ok, but keep it low
                        },

                        getTouchAction: function() {
                            return [TOUCH_ACTION_AUTO];
                        },

                        process: function(input) {
                            var options = this.options;
                            var validPointers = input.pointers.length === options.pointers;
                            var validMovement = input.distance < options.threshold;
                            var validTime = input.deltaTime > options.time;

                            this._input = input;

                            // we only allow little movement
                            // and we've reached an end event, so a tap is possible
                            if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
                                this.reset();
                            } else if (input.eventType & INPUT_START) {
                                this.reset();
                                this._timer = setTimeoutContext(function() {
                                    this.state = STATE_RECOGNIZED;
                                    this.tryEmit();
                                }, options.time, this);
                            } else if (input.eventType & INPUT_END) {
                                return STATE_RECOGNIZED;
                            }
                            return STATE_FAILED;
                        },

                        reset: function() {
                            clearTimeout(this._timer);
                        },

                        emit: function(input) {
                            if (this.state !== STATE_RECOGNIZED) {
                                return;
                            }

                            if (input && (input.eventType & INPUT_END)) {
                                this.manager.emit(this.options.event + 'up', input);
                            } else {
                                this._input.timeStamp = now();
                                this.manager.emit(this.options.event, this._input);
                            }
                        }
                    });

                    /**
                     * Rotate
                     * Recognized when two or more pointer are moving in a circular motion.
                     * @constructor
                     * @extends AttrRecognizer
                     */
                    function RotateRecognizer() {
                        AttrRecognizer.apply(this, arguments);
                    }

                    inherit(RotateRecognizer, AttrRecognizer, {
                        /**
                         * @namespace
                         * @memberof RotateRecognizer
                         */
                        defaults: {
                            event: 'rotate',
                            threshold: 0,
                            pointers: 2
                        },

                        getTouchAction: function() {
                            return [TOUCH_ACTION_NONE];
                        },

                        attrTest: function(input) {
                            return this._super.attrTest.call(this, input) &&
                                (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
                        }
                    });

                    /**
                     * Swipe
                     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
                     * @constructor
                     * @extends AttrRecognizer
                     */
                    function SwipeRecognizer() {
                        AttrRecognizer.apply(this, arguments);
                    }

                    inherit(SwipeRecognizer, AttrRecognizer, {
                        /**
                         * @namespace
                         * @memberof SwipeRecognizer
                         */
                        defaults: {
                            event: 'swipe',
                            threshold: 10,
                            velocity: 0.3,
                            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                            pointers: 1
                        },

                        getTouchAction: function() {
                            return PanRecognizer.prototype.getTouchAction.call(this);
                        },

                        attrTest: function(input) {
                            var direction = this.options.direction;
                            var velocity;

                            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                                velocity = input.overallVelocity;
                            } else if (direction & DIRECTION_HORIZONTAL) {
                                velocity = input.overallVelocityX;
                            } else if (direction & DIRECTION_VERTICAL) {
                                velocity = input.overallVelocityY;
                            }

                            return this._super.attrTest.call(this, input) &&
                                direction & input.offsetDirection &&
                                input.distance > this.options.threshold &&
                                input.maxPointers == this.options.pointers &&
                                abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
                        },

                        emit: function(input) {
                            var direction = directionStr(input.offsetDirection);
                            if (direction) {
                                this.manager.emit(this.options.event + direction, input);
                            }

                            this.manager.emit(this.options.event, input);
                        }
                    });

                    /**
                     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
                     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
                     * a single tap.
                     *
                     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
                     * multi-taps being recognized.
                     * @constructor
                     * @extends Recognizer
                     */
                    function TapRecognizer() {
                        Recognizer.apply(this, arguments);

                        // previous time and center,
                        // used for tap counting
                        this.pTime = false;
                        this.pCenter = false;

                        this._timer = null;
                        this._input = null;
                        this.count = 0;
                    }

                    inherit(TapRecognizer, Recognizer, {
                        /**
                         * @namespace
                         * @memberof PinchRecognizer
                         */
                        defaults: {
                            event: 'tap',
                            pointers: 1,
                            taps: 1,
                            interval: 300, // max time between the multi-tap taps
                            time: 250, // max time of the pointer to be down (like finger on the screen)
                            threshold: 9, // a minimal movement is ok, but keep it low
                            posThreshold: 10 // a multi-tap can be a bit off the initial position
                        },

                        getTouchAction: function() {
                            return [TOUCH_ACTION_MANIPULATION];
                        },

                        process: function(input) {
                            var options = this.options;

                            var validPointers = input.pointers.length === options.pointers;
                            var validMovement = input.distance < options.threshold;
                            var validTouchTime = input.deltaTime < options.time;

                            this.reset();

                            if ((input.eventType & INPUT_START) && (this.count === 0)) {
                                return this.failTimeout();
                            }

                            // we only allow little movement
                            // and we've reached an end event, so a tap is possible
                            if (validMovement && validTouchTime && validPointers) {
                                if (input.eventType != INPUT_END) {
                                    return this.failTimeout();
                                }

                                var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
                                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                                this.pTime = input.timeStamp;
                                this.pCenter = input.center;

                                if (!validMultiTap || !validInterval) {
                                    this.count = 1;
                                } else {
                                    this.count += 1;
                                }

                                this._input = input;

                                // if tap count matches we have recognized it,
                                // else it has began recognizing...
                                var tapCount = this.count % options.taps;
                                if (tapCount === 0) {
                                    // no failing requirements, immediately trigger the tap event
                                    // or wait as long as the multitap interval to trigger
                                    if (!this.hasRequireFailures()) {
                                        return STATE_RECOGNIZED;
                                    } else {
                                        this._timer = setTimeoutContext(function() {
                                            this.state = STATE_RECOGNIZED;
                                            this.tryEmit();
                                        }, options.interval, this);
                                        return STATE_BEGAN;
                                    }
                                }
                            }
                            return STATE_FAILED;
                        },

                        failTimeout: function() {
                            this._timer = setTimeoutContext(function() {
                                this.state = STATE_FAILED;
                            }, this.options.interval, this);
                            return STATE_FAILED;
                        },

                        reset: function() {
                            clearTimeout(this._timer);
                        },

                        emit: function() {
                            if (this.state == STATE_RECOGNIZED) {
                                this._input.tapCount = this.count;
                                this.manager.emit(this.options.event, this._input);
                            }
                        }
                    });

                    /**
                     * Simple way to create a manager with a default set of recognizers.
                     * @param {HTMLElement} element
                     * @param {Object} [options]
                     * @constructor
                     */
                    function Hammer(element, options) {
                        options = options || {};
                        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
                        return new Manager(element, options);
                    }

                    /**
                     * @const {string}
                     */
                    Hammer.VERSION = '2.0.7';

                    /**
                     * default settings
                     * @namespace
                     */
                    Hammer.defaults = {
                        /**
                         * set if DOM events are being triggered.
                         * But this is slower and unused by simple implementations, so disabled by default.
                         * @type {Boolean}
                         * @default false
                         */
                        domEvents: false,

                        /**
                         * The value for the touchAction property/fallback.
                         * When set to `compute` it will magically set the correct value based on the added recognizers.
                         * @type {String}
                         * @default compute
                         */
                        touchAction: TOUCH_ACTION_COMPUTE,

                        /**
                         * @type {Boolean}
                         * @default true
                         */
                        enable: true,

                        /**
                         * EXPERIMENTAL FEATURE -- can be removed/changed
                         * Change the parent input target element.
                         * If Null, then it is being set the to main element.
                         * @type {Null|EventTarget}
                         * @default null
                         */
                        inputTarget: null,

                        /**
                         * force an input class
                         * @type {Null|Function}
                         * @default null
                         */
                        inputClass: null,

                        /**
                         * Default recognizer setup when calling `Hammer()`
                         * When creating a new Manager these will be skipped.
                         * @type {Array}
                         */
                        preset: [
                            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
                            [RotateRecognizer, { enable: false }],
                            [PinchRecognizer, { enable: false },
                                ['rotate']
                            ],
                            [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }],
                            [PanRecognizer, { direction: DIRECTION_HORIZONTAL },
                                ['swipe']
                            ],
                            [TapRecognizer],
                            [TapRecognizer, { event: 'doubletap', taps: 2 },
                                ['tap']
                            ],
                            [PressRecognizer]
                        ],

                        /**
                         * Some CSS properties can be used to improve the working of Hammer.
                         * Add them to this method and they will be set when creating a new Manager.
                         * @namespace
                         */
                        cssProps: {
                            /**
                             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
                             * @type {String}
                             * @default 'none'
                             */
                            userSelect: 'none',

                            /**
                             * Disable the Windows Phone grippers when pressing an element.
                             * @type {String}
                             * @default 'none'
                             */
                            touchSelect: 'none',

                            /**
                             * Disables the default callout shown when you touch and hold a touch target.
                             * On iOS, when you touch and hold a touch target such as a link, Safari displays
                             * a callout containing information about the link. This property allows you to disable that callout.
                             * @type {String}
                             * @default 'none'
                             */
                            touchCallout: 'none',

                            /**
                             * Specifies whether zooming is enabled. Used by IE10>
                             * @type {String}
                             * @default 'none'
                             */
                            contentZooming: 'none',

                            /**
                             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
                             * @type {String}
                             * @default 'none'
                             */
                            userDrag: 'none',

                            /**
                             * Overrides the highlight color shown when the user taps a link or a JavaScript
                             * clickable element in iOS. This property obeys the alpha value, if specified.
                             * @type {String}
                             * @default 'rgba(0,0,0,0)'
                             */
                            tapHighlightColor: 'rgba(0,0,0,0)'
                        }
                    };

                    var STOP = 1;
                    var FORCED_STOP = 2;

                    /**
                     * Manager
                     * @param {HTMLElement} element
                     * @param {Object} [options]
                     * @constructor
                     */
                    function Manager(element, options) {
                        this.options = assign({}, Hammer.defaults, options || {});

                        this.options.inputTarget = this.options.inputTarget || element;

                        this.handlers = {};
                        this.session = {};
                        this.recognizers = [];
                        this.oldCssProps = {};

                        this.element = element;
                        this.input = createInputInstance(this);
                        this.touchAction = new TouchAction(this, this.options.touchAction);

                        toggleCssProps(this, true);

                        each(this.options.recognizers, function(item) {
                            var recognizer = this.add(new(item[0])(item[1]));
                            item[2] && recognizer.recognizeWith(item[2]);
                            item[3] && recognizer.requireFailure(item[3]);
                        }, this);
                    }

                    Manager.prototype = {
                        /**
                         * set options
                         * @param {Object} options
                         * @returns {Manager}
                         */
                        set: function(options) {
                            assign(this.options, options);

                            // Options that need a little more setup
                            if (options.touchAction) {
                                this.touchAction.update();
                            }
                            if (options.inputTarget) {
                                // Clean up existing event listeners and reinitialize
                                this.input.destroy();
                                this.input.target = options.inputTarget;
                                this.input.init();
                            }
                            return this;
                        },

                        /**
                         * stop recognizing for this session.
                         * This session will be discarded, when a new [input]start event is fired.
                         * When forced, the recognizer cycle is stopped immediately.
                         * @param {Boolean} [force]
                         */
                        stop: function(force) {
                            this.session.stopped = force ? FORCED_STOP : STOP;
                        },

                        /**
                         * run the recognizers!
                         * called by the inputHandler function on every movement of the pointers (touches)
                         * it walks through all the recognizers and tries to detect the gesture that is being made
                         * @param {Object} inputData
                         */
                        recognize: function(inputData) {
                            var session = this.session;
                            if (session.stopped) {
                                return;
                            }

                            // run the touch-action polyfill
                            this.touchAction.preventDefaults(inputData);

                            var recognizer;
                            var recognizers = this.recognizers;

                            // this holds the recognizer that is being recognized.
                            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
                            // if no recognizer is detecting a thing, it is set to `null`
                            var curRecognizer = session.curRecognizer;

                            // reset when the last recognizer is recognized
                            // or when we're in a new session
                            if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
                                curRecognizer = session.curRecognizer = null;
                            }

                            var i = 0;
                            while (i < recognizers.length) {
                                recognizer = recognizers[i];

                                // find out if we are allowed try to recognize the input for this one.
                                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                                //      that is being recognized.
                                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                                //      this can be setup with the `recognizeWith()` method on the recognizer.
                                if (session.stopped !== FORCED_STOP && ( // 1
                                        !curRecognizer || recognizer == curRecognizer || // 2
                                        recognizer.canRecognizeWith(curRecognizer))) { // 3
                                    recognizer.recognize(inputData);
                                } else {
                                    recognizer.reset();
                                }

                                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                                // current active recognizer. but only if we don't already have an active recognizer
                                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                                    curRecognizer = session.curRecognizer = recognizer;
                                }
                                i++;
                            }
                        },

                        /**
                         * get a recognizer by its event name.
                         * @param {Recognizer|String} recognizer
                         * @returns {Recognizer|Null}
                         */
                        get: function(recognizer) {
                            if (recognizer instanceof Recognizer) {
                                return recognizer;
                            }

                            var recognizers = this.recognizers;
                            for (var i = 0; i < recognizers.length; i++) {
                                if (recognizers[i].options.event == recognizer) {
                                    return recognizers[i];
                                }
                            }
                            return null;
                        },

                        /**
                         * add a recognizer to the manager
                         * existing recognizers with the same event name will be removed
                         * @param {Recognizer} recognizer
                         * @returns {Recognizer|Manager}
                         */
                        add: function(recognizer) {
                            if (invokeArrayArg(recognizer, 'add', this)) {
                                return this;
                            }

                            // remove existing
                            var existing = this.get(recognizer.options.event);
                            if (existing) {
                                this.remove(existing);
                            }

                            this.recognizers.push(recognizer);
                            recognizer.manager = this;

                            this.touchAction.update();
                            return recognizer;
                        },

                        /**
                         * remove a recognizer by name or instance
                         * @param {Recognizer|String} recognizer
                         * @returns {Manager}
                         */
                        remove: function(recognizer) {
                            if (invokeArrayArg(recognizer, 'remove', this)) {
                                return this;
                            }

                            recognizer = this.get(recognizer);

                            // let's make sure this recognizer exists
                            if (recognizer) {
                                var recognizers = this.recognizers;
                                var index = inArray(recognizers, recognizer);

                                if (index !== -1) {
                                    recognizers.splice(index, 1);
                                    this.touchAction.update();
                                }
                            }

                            return this;
                        },

                        /**
                         * bind event
                         * @param {String} events
                         * @param {Function} handler
                         * @returns {EventEmitter} this
                         */
                        on: function(events, handler) {
                            if (events === undefined) {
                                return;
                            }
                            if (handler === undefined) {
                                return;
                            }

                            var handlers = this.handlers;
                            each(splitStr(events), function(event) {
                                handlers[event] = handlers[event] || [];
                                handlers[event].push(handler);
                            });
                            return this;
                        },

                        /**
                         * unbind event, leave emit blank to remove all handlers
                         * @param {String} events
                         * @param {Function} [handler]
                         * @returns {EventEmitter} this
                         */
                        off: function(events, handler) {
                            if (events === undefined) {
                                return;
                            }

                            var handlers = this.handlers;
                            each(splitStr(events), function(event) {
                                if (!handler) {
                                    delete handlers[event];
                                } else {
                                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                                }
                            });
                            return this;
                        },

                        /**
                         * emit event to the listeners
                         * @param {String} event
                         * @param {Object} data
                         */
                        emit: function(event, data) {
                            // we also want to trigger dom events
                            if (this.options.domEvents) {
                                triggerDomEvent(event, data);
                            }

                            // no handlers, so skip it all
                            var handlers = this.handlers[event] && this.handlers[event].slice();
                            if (!handlers || !handlers.length) {
                                return;
                            }

                            data.type = event;
                            data.preventDefault = function() {
                                data.srcEvent.preventDefault();
                            };

                            var i = 0;
                            while (i < handlers.length) {
                                handlers[i](data);
                                i++;
                            }
                        },

                        /**
                         * destroy the manager and unbinds all events
                         * it doesn't unbind dom events, that is the user own responsibility
                         */
                        destroy: function() {
                            this.element && toggleCssProps(this, false);

                            this.handlers = {};
                            this.session = {};
                            this.input.destroy();
                            this.element = null;
                        }
                    };

                    /**
                     * add/remove the css properties as defined in manager.options.cssProps
                     * @param {Manager} manager
                     * @param {Boolean} add
                     */
                    function toggleCssProps(manager, add) {
                        var element = manager.element;
                        if (!element.style) {
                            return;
                        }
                        var prop;
                        each(manager.options.cssProps, function(value, name) {
                            prop = prefixed(element.style, name);
                            if (add) {
                                manager.oldCssProps[prop] = element.style[prop];
                                element.style[prop] = value;
                            } else {
                                element.style[prop] = manager.oldCssProps[prop] || '';
                            }
                        });
                        if (!add) {
                            manager.oldCssProps = {};
                        }
                    }

                    /**
                     * trigger dom event
                     * @param {String} event
                     * @param {Object} data
                     */
                    function triggerDomEvent(event, data) {
                        var gestureEvent = document.createEvent('Event');
                        gestureEvent.initEvent(event, true, true);
                        gestureEvent.gesture = data;
                        data.target.dispatchEvent(gestureEvent);
                    }

                    assign(Hammer, {
                        INPUT_START: INPUT_START,
                        INPUT_MOVE: INPUT_MOVE,
                        INPUT_END: INPUT_END,
                        INPUT_CANCEL: INPUT_CANCEL,

                        STATE_POSSIBLE: STATE_POSSIBLE,
                        STATE_BEGAN: STATE_BEGAN,
                        STATE_CHANGED: STATE_CHANGED,
                        STATE_ENDED: STATE_ENDED,
                        STATE_RECOGNIZED: STATE_RECOGNIZED,
                        STATE_CANCELLED: STATE_CANCELLED,
                        STATE_FAILED: STATE_FAILED,

                        DIRECTION_NONE: DIRECTION_NONE,
                        DIRECTION_LEFT: DIRECTION_LEFT,
                        DIRECTION_RIGHT: DIRECTION_RIGHT,
                        DIRECTION_UP: DIRECTION_UP,
                        DIRECTION_DOWN: DIRECTION_DOWN,
                        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
                        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
                        DIRECTION_ALL: DIRECTION_ALL,

                        Manager: Manager,
                        Input: Input,
                        TouchAction: TouchAction,

                        TouchInput: TouchInput,
                        MouseInput: MouseInput,
                        PointerEventInput: PointerEventInput,
                        TouchMouseInput: TouchMouseInput,
                        SingleTouchInput: SingleTouchInput,

                        Recognizer: Recognizer,
                        AttrRecognizer: AttrRecognizer,
                        Tap: TapRecognizer,
                        Pan: PanRecognizer,
                        Swipe: SwipeRecognizer,
                        Pinch: PinchRecognizer,
                        Rotate: RotateRecognizer,
                        Press: PressRecognizer,

                        on: addEventListeners,
                        off: removeEventListeners,
                        each: each,
                        merge: merge,
                        extend: extend,
                        assign: assign,
                        inherit: inherit,
                        bindFn: bindFn,
                        prefixed: prefixed
                    });

                    // this prevents errors when Hammer is loaded in the presence of an AMD
                    //  style loader but by script tag, not by the loader.
                    var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
                    freeGlobal.Hammer = Hammer;

                    if (true) {
                        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                            return Hammer;
                        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    } else if (typeof module != 'undefined' && module.exports) {
                        module.exports = Hammer;
                    } else {
                        window[exportName] = Hammer;
                    }

                })(window, document, 'Hammer');


                /***/
            }),
            /* 115 */
            /***/
            (function(module, exports, __webpack_require__) {

                var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
                "use strict";
                /**
                 * Created by Alex on 11/6/2014.
                 */

                // https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
                // if the module has no dependencies, the above pattern can be simplified to
                (function(root, factory) {
                    if (true) {
                        // AMD. Register as an anonymous module.
                        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    } else if (typeof exports === 'object') {
                        // Node. Does not work with strict CommonJS, but
                        // only CommonJS-like environments that support module.exports,
                        // like Node.
                        module.exports = factory();
                    } else {
                        // Browser globals (root is window)
                        root.keycharm = factory();
                    }
                }(this, function() {

                    function keycharm(options) {
                        var preventDefault = options && options.preventDefault || false;

                        var container = options && options.container || window;

                        var _exportFunctions = {};
                        var _bound = { keydown: {}, keyup: {} };
                        var _keys = {};
                        var i;

                        // a - z
                        for (i = 97; i <= 122; i++) { _keys[String.fromCharCode(i)] = { code: 65 + (i - 97), shift: false }; }
                        // A - Z
                        for (i = 65; i <= 90; i++) { _keys[String.fromCharCode(i)] = { code: i, shift: true }; }
                        // 0 - 9
                        for (i = 0; i <= 9; i++) { _keys['' + i] = { code: 48 + i, shift: false }; }
                        // F1 - F12
                        for (i = 1; i <= 12; i++) { _keys['F' + i] = { code: 111 + i, shift: false }; }
                        // num0 - num9
                        for (i = 0; i <= 9; i++) { _keys['num' + i] = { code: 96 + i, shift: false }; }

                        // numpad misc
                        _keys['num*'] = { code: 106, shift: false };
                        _keys['num+'] = { code: 107, shift: false };
                        _keys['num-'] = { code: 109, shift: false };
                        _keys['num/'] = { code: 111, shift: false };
                        _keys['num.'] = { code: 110, shift: false };
                        // arrows
                        _keys['left'] = { code: 37, shift: false };
                        _keys['up'] = { code: 38, shift: false };
                        _keys['right'] = { code: 39, shift: false };
                        _keys['down'] = { code: 40, shift: false };
                        // extra keys
                        _keys['space'] = { code: 32, shift: false };
                        _keys['enter'] = { code: 13, shift: false };
                        _keys['shift'] = { code: 16, shift: undefined };
                        _keys['esc'] = { code: 27, shift: false };
                        _keys['backspace'] = { code: 8, shift: false };
                        _keys['tab'] = { code: 9, shift: false };
                        _keys['ctrl'] = { code: 17, shift: false };
                        _keys['alt'] = { code: 18, shift: false };
                        _keys['delete'] = { code: 46, shift: false };
                        _keys['pageup'] = { code: 33, shift: false };
                        _keys['pagedown'] = { code: 34, shift: false };
                        // symbols
                        _keys['='] = { code: 187, shift: false };
                        _keys['-'] = { code: 189, shift: false };
                        _keys[']'] = { code: 221, shift: false };
                        _keys['['] = { code: 219, shift: false };



                        var down = function(event) { handleEvent(event, 'keydown'); };
                        var up = function(event) { handleEvent(event, 'keyup'); };

                        // handle the actualy bound key with the event
                        var handleEvent = function(event, type) {
                            if (_bound[type][event.keyCode] !== undefined) {
                                var bound = _bound[type][event.keyCode];
                                for (var i = 0; i < bound.length; i++) {
                                    if (bound[i].shift === undefined) {
                                        bound[i].fn(event);
                                    } else if (bound[i].shift == true && event.shiftKey == true) {
                                        bound[i].fn(event);
                                    } else if (bound[i].shift == false && event.shiftKey == false) {
                                        bound[i].fn(event);
                                    }
                                }

                                if (preventDefault == true) {
                                    event.preventDefault();
                                }
                            }
                        };

                        // bind a key to a callback
                        _exportFunctions.bind = function(key, callback, type) {
                            if (type === undefined) {
                                type = 'keydown';
                            }
                            if (_keys[key] === undefined) {
                                throw new Error("unsupported key: " + key);
                            }
                            if (_bound[type][_keys[key].code] === undefined) {
                                _bound[type][_keys[key].code] = [];
                            }
                            _bound[type][_keys[key].code].push({ fn: callback, shift: _keys[key].shift });
                        };


                        // bind all keys to a call back (demo purposes)
                        _exportFunctions.bindAll = function(callback, type) {
                            if (type === undefined) {
                                type = 'keydown';
                            }
                            for (var key in _keys) {
                                if (_keys.hasOwnProperty(key)) {
                                    _exportFunctions.bind(key, callback, type);
                                }
                            }
                        };

                        // get the key label from an event
                        _exportFunctions.getKey = function(event) {
                            for (var key in _keys) {
                                if (_keys.hasOwnProperty(key)) {
                                    if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
                                        return key;
                                    } else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
                                        return key;
                                    } else if (event.keyCode == _keys[key].code && key == 'shift') {
                                        return key;
                                    }
                                }
                            }
                            return "unknown key, currently not supported";
                        };

                        // unbind either a specific callback from a key or all of them (by leaving callback undefined)
                        _exportFunctions.unbind = function(key, callback, type) {
                            if (type === undefined) {
                                type = 'keydown';
                            }
                            if (_keys[key] === undefined) {
                                throw new Error("unsupported key: " + key);
                            }
                            if (callback !== undefined) {
                                var newBindings = [];
                                var bound = _bound[type][_keys[key].code];
                                if (bound !== undefined) {
                                    for (var i = 0; i < bound.length; i++) {
                                        if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {
                                            newBindings.push(_bound[type][_keys[key].code][i]);
                                        }
                                    }
                                }
                                _bound[type][_keys[key].code] = newBindings;
                            } else {
                                _bound[type][_keys[key].code] = [];
                            }
                        };

                        // reset all bound variables.
                        _exportFunctions.reset = function() {
                            _bound = { keydown: {}, keyup: {} };
                        };

                        // unbind all listeners and reset all variables.
                        _exportFunctions.destroy = function() {
                            _bound = { keydown: {}, keyup: {} };
                            container.removeEventListener('keydown', down, true);
                            container.removeEventListener('keyup', up, true);
                        };

                        // create listeners.
                        container.addEventListener('keydown', down, true);
                        container.addEventListener('keyup', up, true);

                        // return the public functions.
                        return _exportFunctions;
                    }

                    return keycharm;
                }));




                /***/
            }),
            /* 116 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // utils
                exports.util = __webpack_require__(1);
                exports.DOMutil = __webpack_require__(88);

                // data
                exports.DataSet = __webpack_require__(89);
                exports.DataView = __webpack_require__(93);
                exports.Queue = __webpack_require__(92);

                // Timeline
                exports.Timeline = __webpack_require__(117);
                exports.Graph2d = __webpack_require__(148);
                exports.timeline = {
                    Core: __webpack_require__(122),
                    DateUtil: __webpack_require__(121),
                    Range: __webpack_require__(118),
                    stack: __webpack_require__(126),
                    TimeStep: __webpack_require__(124),

                    components: {
                        items: {
                            Item: __webpack_require__(128),
                            BackgroundItem: __webpack_require__(132),
                            BoxItem: __webpack_require__(130),
                            PointItem: __webpack_require__(131),
                            RangeItem: __webpack_require__(127)
                        },

                        BackgroundGroup: __webpack_require__(129),
                        Component: __webpack_require__(120),
                        CurrentTime: __webpack_require__(143),
                        CustomTime: __webpack_require__(141),
                        DataAxis: __webpack_require__(150),
                        DataScale: __webpack_require__(151),
                        GraphGroup: __webpack_require__(152),
                        Group: __webpack_require__(125),
                        ItemSet: __webpack_require__(123),
                        Legend: __webpack_require__(156),
                        LineGraph: __webpack_require__(149),
                        TimeAxis: __webpack_require__(139)
                    }
                };

                // bundled external libraries
                exports.moment = __webpack_require__(82);
                exports.Hammer = __webpack_require__(112);
                exports.keycharm = __webpack_require__(115);

                /***/
            }),
            /* 117 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Emitter = __webpack_require__(99);
                var Hammer = __webpack_require__(112);
                var moment = __webpack_require__(82);
                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var Range = __webpack_require__(118);
                var Core = __webpack_require__(122);
                var TimeAxis = __webpack_require__(139);
                var CurrentTime = __webpack_require__(143);
                var CustomTime = __webpack_require__(141);
                var ItemSet = __webpack_require__(123);

                var printStyle = __webpack_require__(144).printStyle;
                var allOptions = __webpack_require__(145).allOptions;
                var configureOptions = __webpack_require__(145).configureOptions;

                var Configurator = __webpack_require__(146)['default'];
                var Validator = __webpack_require__(144)['default'];

                /**
                 * Create a timeline visualization
                 * @param {HTMLElement} container
                 * @param {vis.DataSet | vis.DataView | Array} [items]
                 * @param {vis.DataSet | vis.DataView | Array} [groups]
                 * @param {Object} [options]  See Timeline.setOptions for the available options.
                 * @constructor
                 * @extends Core
                 */
                function Timeline(container, items, groups, options) {

                    if (!(this instanceof Timeline)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }

                    // if the third element is options, the forth is groups (optionally);
                    if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
                        var forthArgument = options;
                        options = groups;
                        groups = forthArgument;
                    }

                    // TODO: REMOVE THIS in the next MAJOR release
                    // see https://github.com/almende/vis/issues/2511
                    if (options && options.throttleRedraw) {
                        console.warn("Timeline option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
                    }

                    var me = this;
                    this.defaultOptions = {
                        start: null,
                        end: null,
                        autoResize: true,
                        orientation: {
                            axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
                            item: 'bottom' // not relevant
                        },
                        moment: moment,
                        width: null,
                        height: null,
                        maxHeight: null,
                        minHeight: null
                    };
                    this.options = util.deepExtend({}, this.defaultOptions);

                    // Create the DOM, props, and emitter
                    this._create(container);
                    if (!options || options && typeof options.rtl == "undefined") {
                        var directionFromDom,
                            domNode = this.dom.root;
                        while (!directionFromDom && domNode) {
                            directionFromDom = window.getComputedStyle(domNode, null).direction;
                            domNode = domNode.parentElement;
                        }
                        this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
                    } else {
                        this.options.rtl = options.rtl;
                    }

                    this.options.rollingMode = options && options.rollingMode;

                    // all components listed here will be repainted automatically
                    this.components = [];

                    this.body = {
                        dom: this.dom,
                        domProps: this.props,
                        emitter: {
                            on: this.on.bind(this),
                            off: this.off.bind(this),
                            emit: this.emit.bind(this)
                        },
                        hiddenDates: [],
                        util: {
                            getScale: function getScale() {
                                return me.timeAxis.step.scale;
                            },
                            getStep: function getStep() {
                                return me.timeAxis.step.step;
                            },

                            toScreen: me._toScreen.bind(me),
                            toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
                            toTime: me._toTime.bind(me),
                            toGlobalTime: me._toGlobalTime.bind(me)
                        }
                    };

                    // range
                    this.range = new Range(this.body, this.options);
                    this.components.push(this.range);
                    this.body.range = this.range;

                    // time axis
                    this.timeAxis = new TimeAxis(this.body, this.options);
                    this.timeAxis2 = null; // used in case of orientation option 'both'
                    this.components.push(this.timeAxis);

                    // current time bar
                    this.currentTime = new CurrentTime(this.body, this.options);
                    this.components.push(this.currentTime);

                    // item set
                    this.itemSet = new ItemSet(this.body, this.options);
                    this.components.push(this.itemSet);

                    this.itemsData = null; // DataSet
                    this.groupsData = null; // DataSet

                    this.dom.root.onclick = function(event) {
                        me.emit('click', me.getEventProperties(event));
                    };
                    this.dom.root.ondblclick = function(event) {
                        me.emit('doubleClick', me.getEventProperties(event));
                    };
                    this.dom.root.oncontextmenu = function(event) {
                        me.emit('contextmenu', me.getEventProperties(event));
                    };
                    this.dom.root.onmouseover = function(event) {
                        me.emit('mouseOver', me.getEventProperties(event));
                    };
                    if (window.PointerEvent) {
                        this.dom.root.onpointerdown = function(event) {
                            me.emit('mouseDown', me.getEventProperties(event));
                        };
                        this.dom.root.onpointermove = function(event) {
                            me.emit('mouseMove', me.getEventProperties(event));
                        };
                        this.dom.root.onpointerup = function(event) {
                            me.emit('mouseUp', me.getEventProperties(event));
                        };
                    } else {
                        this.dom.root.onmousemove = function(event) {
                            me.emit('mouseMove', me.getEventProperties(event));
                        };
                        this.dom.root.onmousedown = function(event) {
                            me.emit('mouseDown', me.getEventProperties(event));
                        };
                        this.dom.root.onmouseup = function(event) {
                            me.emit('mouseUp', me.getEventProperties(event));
                        };
                    }

                    //Single time autoscale/fit
                    this.fitDone = false;
                    this.on('changed', function() {
                        if (this.itemsData == null || this.options.rollingMode) return;
                        if (!me.fitDone) {
                            me.fitDone = true;
                            if (me.options.start != undefined || me.options.end != undefined) {
                                if (me.options.start == undefined || me.options.end == undefined) {
                                    var range = me.getItemRange();
                                }

                                var start = me.options.start != undefined ? me.options.start : range.min;
                                var end = me.options.end != undefined ? me.options.end : range.max;
                                me.setWindow(start, end, { animation: false });
                            } else {
                                me.fit({ animation: false });
                            }
                        }
                    });

                    // apply options
                    if (options) {
                        this.setOptions(options);
                    }

                    // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
                    if (groups) {
                        this.setGroups(groups);
                    }

                    // create itemset
                    if (items) {
                        this.setItems(items);
                    }

                    // draw for the first time
                    this._redraw();
                }

                // Extend the functionality from Core
                Timeline.prototype = new Core();

                /**
                 * Load a configurator
                 * @return {Object}
                 * @private
                 */
                Timeline.prototype._createConfigurator = function() {
                    return new Configurator(this, this.dom.container, configureOptions);
                };

                /**
                 * Force a redraw. The size of all items will be recalculated.
                 * Can be useful to manually redraw when option autoResize=false and the window
                 * has been resized, or when the items CSS has been changed.
                 *
                 * Note: this function will be overridden on construction with a trottled version
                 */
                Timeline.prototype.redraw = function() {
                    this.itemSet && this.itemSet.markDirty({ refreshItems: true });
                    this._redraw();
                };

                Timeline.prototype.setOptions = function(options) {
                    // validate options
                    var errorFound = Validator.validate(options, allOptions);

                    if (errorFound === true) {
                        console.log('%cErrors have been found in the supplied options object.', printStyle);
                    }
                    Core.prototype.setOptions.call(this, options);

                    if ('type' in options) {
                        if (options.type !== this.options.type) {
                            this.options.type = options.type;

                            // force recreation of all items
                            var itemsData = this.itemsData;
                            if (itemsData) {
                                var selection = this.getSelection();
                                this.setItems(null); // remove all
                                this.setItems(itemsData); // add all
                                this.setSelection(selection); // restore selection
                            }
                        }
                    }
                };

                /**
                 * Set items
                 * @param {vis.DataSet | Array | null} items
                 */
                Timeline.prototype.setItems = function(items) {
                    // convert to type DataSet when needed
                    var newDataSet;
                    if (!items) {
                        newDataSet = null;
                    } else if (items instanceof DataSet || items instanceof DataView) {
                        newDataSet = items;
                    } else {
                        // turn an array into a dataset
                        newDataSet = new DataSet(items, {
                            type: {
                                start: 'Date',
                                end: 'Date'
                            }
                        });
                    }

                    // set items
                    this.itemsData = newDataSet;
                    this.itemSet && this.itemSet.setItems(newDataSet);
                };

                /**
                 * Set groups
                 * @param {vis.DataSet | Array} groups
                 */
                Timeline.prototype.setGroups = function(groups) {
                    // convert to type DataSet when needed
                    var newDataSet;
                    if (!groups) {
                        newDataSet = null;
                    } else {
                        var filter = function filter(group) {
                            return group.visible !== false;
                        };
                        if (groups instanceof DataSet || groups instanceof DataView) {
                            newDataSet = new DataView(groups, { filter: filter });
                        } else {
                            // turn an array into a dataset
                            newDataSet = new DataSet(groups.filter(filter));
                        }
                    }

                    this.groupsData = newDataSet;
                    this.itemSet.setGroups(newDataSet);
                };

                /**
                 * Set both items and groups in one go
                 * @param {{items: Array | vis.DataSet, groups: Array | vis.DataSet}} data
                 */
                Timeline.prototype.setData = function(data) {
                    if (data && data.groups) {
                        this.setGroups(data.groups);
                    }

                    if (data && data.items) {
                        this.setItems(data.items);
                    }
                };

                /**
                 * Set selected items by their id. Replaces the current selection
                 * Unknown id's are silently ignored.
                 * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
                 *                                selected. If ids is an empty array, all items will be
                 *                                unselected.
                 * @param {Object} [options]      Available options:
                 *                                `focus: boolean`
                 *                                    If true, focus will be set to the selected item(s)
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 *                                    Only applicable when option focus is true.
                 */
                Timeline.prototype.setSelection = function(ids, options) {
                    this.itemSet && this.itemSet.setSelection(ids);

                    if (options && options.focus) {
                        this.focus(ids, options);
                    }
                };

                /**
                 * Get the selected items by their id
                 * @return {Array} ids  The ids of the selected items
                 */
                Timeline.prototype.getSelection = function() {
                    return this.itemSet && this.itemSet.getSelection() || [];
                };

                /**
                 * Adjust the visible window such that the selected item (or multiple items)
                 * are centered on screen.
                 * @param {String | String[]} id     An item id or array with item ids
                 * @param {Object} [options]      Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 */
                Timeline.prototype.focus = function(id, options) {
                    if (!this.itemsData || id == undefined) return;

                    var ids = Array.isArray(id) ? id : [id];

                    // get the specified item(s)
                    var itemsData = this.itemsData.getDataSet().get(ids, {
                        type: {
                            start: 'Date',
                            end: 'Date'
                        }
                    });

                    // calculate minimum start and maximum end of specified items
                    var start = null;
                    var end = null;
                    itemsData.forEach(function(itemData) {
                        var s = itemData.start.valueOf();
                        var e = 'end' in itemData ? itemData.end.valueOf() : itemData.start.valueOf();

                        if (start === null || s < start) {
                            start = s;
                        }

                        if (end === null || e > end) {
                            end = e;
                        }
                    });

                    if (start !== null && end !== null) {
                        // calculate the new middle and interval for the window
                        var middle = (start + end) / 2;
                        var interval = Math.max(this.range.end - this.range.start, (end - start) * 1.1);

                        var animation = options && options.animation !== undefined ? options.animation : true;
                        this.range.setRange(middle - interval / 2, middle + interval / 2, { animation: animation });
                    }
                };

                /**
                 * Set Timeline window such that it fits all items
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 */
                Timeline.prototype.fit = function(options) {
                    var animation = options && options.animation !== undefined ? options.animation : true;
                    var range;

                    var dataset = this.itemsData && this.itemsData.getDataSet();
                    if (dataset.length === 1 && dataset.get()[0].end === undefined) {
                        // a single item -> don't fit, just show a range around the item from -4 to +3 days
                        range = this.getDataRange();
                        this.moveTo(range.min.valueOf(), { animation: animation });
                    } else {
                        // exactly fit the items (plus a small margin)
                        range = this.getItemRange();
                        this.range.setRange(range.min, range.max, { animation: animation });
                    }
                };

                /**
                 * Determine the range of the items, taking into account their actual width
                 * and a margin of 10 pixels on both sides.
                 * @return {{min: Date | null, max: Date | null}}
                 */
                Timeline.prototype.getItemRange = function() {
                    // get a rough approximation for the range based on the items start and end dates
                    var range = this.getDataRange();
                    var min = range.min !== null ? range.min.valueOf() : null;
                    var max = range.max !== null ? range.max.valueOf() : null;
                    var minItem = null;
                    var maxItem = null;

                    if (min != null && max != null) {
                        var getStart = function getStart(item) {
                            return util.convert(item.data.start, 'Date').valueOf();
                        };

                        var getEnd = function getEnd(item) {
                            var end = item.data.end != undefined ? item.data.end : item.data.start;
                            return util.convert(end, 'Date').valueOf();
                        };

                        // calculate the date of the left side and right side of the items given


                        var interval = max - min; // ms
                        if (interval <= 0) {
                            interval = 10;
                        }
                        var factor = interval / this.props.center.width;

                        util.forEach(this.itemSet.items, function(item) {
                            if (item.groupShowing) {
                                item.show();
                                item.repositionX();
                            }

                            var start = getStart(item);
                            var end = getEnd(item);

                            if (this.options.rtl) {
                                var startSide = start - (item.getWidthRight() + 10) * factor;
                                var endSide = end + (item.getWidthLeft() + 10) * factor;
                            } else {
                                var startSide = start - (item.getWidthLeft() + 10) * factor;
                                var endSide = end + (item.getWidthRight() + 10) * factor;
                            }

                            if (startSide < min) {
                                min = startSide;
                                minItem = item;
                            }
                            if (endSide > max) {
                                max = endSide;
                                maxItem = item;
                            }
                        }.bind(this));

                        if (minItem && maxItem) {
                            var lhs = minItem.getWidthLeft() + 10;
                            var rhs = maxItem.getWidthRight() + 10;
                            var delta = this.props.center.width - lhs - rhs; // px

                            if (delta > 0) {
                                if (this.options.rtl) {
                                    min = getStart(minItem) - rhs * interval / delta; // ms
                                    max = getEnd(maxItem) + lhs * interval / delta; // ms
                                } else {
                                    min = getStart(minItem) - lhs * interval / delta; // ms
                                    max = getEnd(maxItem) + rhs * interval / delta; // ms
                                }
                            }
                        }
                    }

                    return {
                        min: min != null ? new Date(min) : null,
                        max: max != null ? new Date(max) : null
                    };
                };

                /**
                 * Calculate the data range of the items start and end dates
                 * @returns {{min: Date | null, max: Date | null}}
                 */
                Timeline.prototype.getDataRange = function() {
                    var min = null;
                    var max = null;

                    var dataset = this.itemsData && this.itemsData.getDataSet();
                    if (dataset) {
                        dataset.forEach(function(item) {
                            var start = util.convert(item.start, 'Date').valueOf();
                            var end = util.convert(item.end != undefined ? item.end : item.start, 'Date').valueOf();
                            if (min === null || start < min) {
                                min = start;
                            }
                            if (max === null || end > max) {
                                max = end;
                            }
                        });
                    }

                    return {
                        min: min != null ? new Date(min) : null,
                        max: max != null ? new Date(max) : null
                    };
                };

                /**
                 * Generate Timeline related information from an event
                 * @param {Event} event
                 * @return {Object} An object with related information, like on which area
                 *                  The event happened, whether clicked on an item, etc.
                 */
                Timeline.prototype.getEventProperties = function(event) {
                    var clientX = event.center ? event.center.x : event.clientX;
                    var clientY = event.center ? event.center.y : event.clientY;
                    if (this.options.rtl) {
                        var x = util.getAbsoluteRight(this.dom.centerContainer) - clientX;
                    } else {
                        var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
                    }
                    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);

                    var item = this.itemSet.itemFromTarget(event);
                    var group = this.itemSet.groupFromTarget(event);
                    var customTime = CustomTime.customTimeFromTarget(event);

                    var snap = this.itemSet.options.snap || null;
                    var scale = this.body.util.getScale();
                    var step = this.body.util.getStep();
                    var time = this._toTime(x);
                    var snappedTime = snap ? snap(time, scale, step) : time;

                    var element = util.getTarget(event);
                    var what = null;
                    if (item != null) {
                        what = 'item';
                    } else if (customTime != null) {
                        what = 'custom-time';
                    } else if (util.hasParent(element, this.timeAxis.dom.foreground)) {
                        what = 'axis';
                    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
                        what = 'axis';
                    } else if (util.hasParent(element, this.itemSet.dom.labelSet)) {
                        what = 'group-label';
                    } else if (util.hasParent(element, this.currentTime.bar)) {
                        what = 'current-time';
                    } else if (util.hasParent(element, this.dom.center)) {
                        what = 'background';
                    }

                    return {
                        event: event,
                        item: item ? item.id : null,
                        group: group ? group.groupId : null,
                        what: what,
                        pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
                        pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
                        x: x,
                        y: y,
                        time: time,
                        snappedTime: snappedTime
                    };
                };

                /**
                 * Toggle Timeline rolling mode
                 */

                Timeline.prototype.toggleRollingMode = function() {
                    if (this.range.rolling) {
                        this.range.stopRolling();
                    } else {
                        if (this.options.rollingMode == undefined) {
                            this.setOptions(this.options);
                        }
                        this.range.startRolling();
                    }
                };

                module.exports = Timeline;

                /***/
            }),
            /* 118 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var hammerUtil = __webpack_require__(119);
                var moment = __webpack_require__(82);
                var Component = __webpack_require__(120);
                var DateUtil = __webpack_require__(121);

                /**
                 * @constructor Range
                 * A Range controls a numeric range with a start and end value.
                 * The Range adjusts the range based on mouse events or programmatic changes,
                 * and triggers events when the range is changing or has been changed.
                 * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
                 * @param {Object} [options]    See description at Range.setOptions
                 */
                function Range(body, options) {
                    var now = moment().hours(0).minutes(0).seconds(0).milliseconds(0);
                    var start = now.clone().add(-3, 'days').valueOf();
                    var end = now.clone().add(3, 'days').valueOf();

                    if (options === undefined) {
                        this.start = start;
                        this.end = end;
                    } else {
                        this.start = options.start || start;
                        this.end = options.end || end;
                    }

                    this.rolling = false;

                    this.body = body;
                    this.deltaDifference = 0;
                    this.scaleOffset = 0;
                    this.startToFront = false;
                    this.endToFront = true;

                    // default options
                    this.defaultOptions = {
                        rtl: false,
                        start: null,
                        end: null,
                        moment: moment,
                        direction: 'horizontal', // 'horizontal' or 'vertical'
                        moveable: true,
                        zoomable: true,
                        min: null,
                        max: null,
                        zoomMin: 10, // milliseconds
                        zoomMax: 1000 * 60 * 60 * 24 * 365 * 10000, // milliseconds
                        rollingMode: {
                            follow: false,
                            offset: 0.5
                        }
                    };
                    this.options = util.extend({}, this.defaultOptions);
                    this.props = {
                        touch: {}
                    };
                    this.animationTimer = null;

                    // drag listeners for dragging
                    this.body.emitter.on('panstart', this._onDragStart.bind(this));
                    this.body.emitter.on('panmove', this._onDrag.bind(this));
                    this.body.emitter.on('panend', this._onDragEnd.bind(this));

                    // mouse wheel for zooming
                    this.body.emitter.on('mousewheel', this._onMouseWheel.bind(this));

                    // pinch to zoom
                    this.body.emitter.on('touch', this._onTouch.bind(this));
                    this.body.emitter.on('pinch', this._onPinch.bind(this));

                    // on click of rolling mode button
                    this.body.dom.rollingModeBtn.addEventListener('click', this.startRolling.bind(this));

                    this.setOptions(options);
                }

                Range.prototype = new Component();

                /**
                 * Set options for the range controller
                 * @param {Object} options      Available options:
                 *                              {Number | Date | String} start  Start date for the range
                 *                              {Number | Date | String} end    End date for the range
                 *                              {Number} min    Minimum value for start
                 *                              {Number} max    Maximum value for end
                 *                              {Number} zoomMin    Set a minimum value for
                 *                                                  (end - start).
                 *                              {Number} zoomMax    Set a maximum value for
                 *                                                  (end - start).
                 *                              {Boolean} moveable Enable moving of the range
                 *                                                 by dragging. True by default
                 *                              {Boolean} zoomable Enable zooming of the range
                 *                                                 by pinching/scrolling. True by default
                 */
                Range.prototype.setOptions = function(options) {
                    if (options) {
                        // copy the options that we know
                        var fields = ['animation', 'direction', 'min', 'max', 'zoomMin', 'zoomMax', 'moveable', 'zoomable', 'moment', 'activate', 'hiddenDates', 'zoomKey', 'rtl', 'showCurrentTime', 'rollingMode', 'horizontalScroll'];
                        util.selectiveExtend(fields, this.options, options);

                        if (options.rollingMode && options.rollingMode.follow) {
                            this.startRolling();
                        }
                        if ('start' in options || 'end' in options) {
                            // apply a new range. both start and end are optional
                            this.setRange(options.start, options.end);
                        }
                    }
                };

                /**
                 * Test whether direction has a valid value
                 * @param {String} direction    'horizontal' or 'vertical'
                 */
                function validateDirection(direction) {
                    if (direction != 'horizontal' && direction != 'vertical') {
                        throw new TypeError('Unknown direction "' + direction + '". ' + 'Choose "horizontal" or "vertical".');
                    }
                }

                /**
                 * Start auto refreshing the current time bar
                 */
                Range.prototype.startRolling = function() {
                    var me = this;

                    function update() {
                        me.stopRolling();
                        me.rolling = true;

                        var interval = me.end - me.start;
                        var t = util.convert(new Date(), 'Date').valueOf();

                        var start = t - interval * me.options.rollingMode.offset;
                        var end = t + interval * (1 - me.options.rollingMode.offset);
                        var animation = me.options && me.options.animation !== undefined ? me.options.animation : true;

                        var options = {
                            animation: false
                        };
                        me.setRange(start, end, options);

                        // determine interval to refresh
                        var scale = me.conversion(me.body.domProps.center.width).scale;
                        var interval = 1 / scale / 10;
                        if (interval < 30) interval = 30;
                        if (interval > 1000) interval = 1000;

                        me.body.dom.rollingModeBtn.style.visibility = "hidden";
                        // start a renderTimer to adjust for the new time
                        me.currentTimeTimer = setTimeout(update, interval);
                    }

                    update();
                };

                /**
                 * Stop auto refreshing the current time bar
                 */
                Range.prototype.stopRolling = function() {
                    if (this.currentTimeTimer !== undefined) {
                        clearTimeout(this.currentTimeTimer);
                        this.rolling = false;
                        this.body.dom.rollingModeBtn.style.visibility = "visible";
                    }
                };

                /**
                 * Set a new start and end range
                 * @param {Date | Number | String} [start]
                 * @param {Date | Number | String} [end]
                 * @param {Object} options      Available options:
                 *                              {Boolean | {duration: number, easingFunction: string}} [animation=false]
                 *                                    If true, the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 *                              {Boolean} [byUser=false]
                 *                              {Event}  event  Mouse event
                 *                              {Function} a callback funtion to be executed at the end of this function 
                 *
                 */

                Range.prototype.setRange = function(start, end, options, callback) {
                    if (!options) {
                        options = {};
                    }
                    if (options.byUser !== true) {
                        options.byUser = false;
                    }
                    var me = this;
                    var finalStart = start != undefined ? util.convert(start, 'Date').valueOf() : null;
                    var finalEnd = end != undefined ? util.convert(end, 'Date').valueOf() : null;
                    this._cancelAnimation();

                    if (options.animation) {
                        // true or an Object
                        var initStart = this.start;
                        var initEnd = this.end;
                        var duration = (0, _typeof3['default'])(options.animation) === 'object' && 'duration' in options.animation ? options.animation.duration : 500;
                        var easingName = (0, _typeof3['default'])(options.animation) === 'object' && 'easingFunction' in options.animation ? options.animation.easingFunction : 'easeInOutQuad';
                        var easingFunction = util.easingFunctions[easingName];
                        if (!easingFunction) {
                            throw new Error('Unknown easing function ' + (0, _stringify2['default'])(easingName) + '. ' + 'Choose from: ' + (0, _keys2['default'])(util.easingFunctions).join(', '));
                        }

                        var initTime = new Date().valueOf();
                        var anyChanged = false;

                        var next = function next() {
                            if (!me.props.touch.dragging) {
                                var now = new Date().valueOf();
                                var time = now - initTime;
                                var ease = easingFunction(time / duration);
                                var done = time > duration;
                                var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
                                var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;

                                changed = me._applyRange(s, e);
                                DateUtil.updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
                                anyChanged = anyChanged || changed;

                                var params = {
                                    start: new Date(me.start),
                                    end: new Date(me.end),
                                    byUser: options.byUser,
                                    event: options.event
                                };

                                if (changed) {
                                    me.body.emitter.emit('rangechange', params);
                                }

                                if (done) {
                                    if (anyChanged) {
                                        me.body.emitter.emit('rangechanged', params);
                                        if (callback) {
                                            return callback();
                                        }
                                    }
                                } else {
                                    // animate with as high as possible frame rate, leave 20 ms in between
                                    // each to prevent the browser from blocking
                                    me.animationTimer = setTimeout(next, 20);
                                }
                            }
                        };

                        return next();
                    } else {
                        var changed = this._applyRange(finalStart, finalEnd);
                        DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
                        if (changed) {
                            var params = {
                                start: new Date(this.start),
                                end: new Date(this.end),
                                byUser: options.byUser,
                                event: options.event
                            };

                            this.body.emitter.emit('rangechange', params);
                            clearTimeout(me.timeoutID);
                            me.timeoutID = setTimeout(function() {
                                me.body.emitter.emit('rangechanged', params);
                            }, 200);
                            if (callback) {
                                return callback();
                            }
                        }
                    }
                };

                /**
                 * Get the number of milliseconds per pixel.
                 */
                Range.prototype.getMillisecondsPerPixel = function() {
                    return (this.end - this.start) / this.body.dom.center.clientWidth;
                };

                /**
                 * Stop an animation
                 * @private
                 */
                Range.prototype._cancelAnimation = function() {
                    if (this.animationTimer) {
                        clearTimeout(this.animationTimer);
                        this.animationTimer = null;
                    }
                };

                /**
                 * Set a new start and end range. This method is the same as setRange, but
                 * does not trigger a range change and range changed event, and it returns
                 * true when the range is changed
                 * @param {Number} [start]
                 * @param {Number} [end]
                 * @return {Boolean} changed
                 * @private
                 */
                Range.prototype._applyRange = function(start, end) {
                    var newStart = start != null ? util.convert(start, 'Date').valueOf() : this.start,
                        newEnd = end != null ? util.convert(end, 'Date').valueOf() : this.end,
                        max = this.options.max != null ? util.convert(this.options.max, 'Date').valueOf() : null,
                        min = this.options.min != null ? util.convert(this.options.min, 'Date').valueOf() : null,
                        diff;

                    // check for valid number
                    if (isNaN(newStart) || newStart === null) {
                        throw new Error('Invalid start "' + start + '"');
                    }
                    if (isNaN(newEnd) || newEnd === null) {
                        throw new Error('Invalid end "' + end + '"');
                    }

                    // prevent end < start
                    if (newEnd < newStart) {
                        newEnd = newStart;
                    }

                    // prevent start < min
                    if (min !== null) {
                        if (newStart < min) {
                            diff = min - newStart;
                            newStart += diff;
                            newEnd += diff;

                            // prevent end > max
                            if (max != null) {
                                if (newEnd > max) {
                                    newEnd = max;
                                }
                            }
                        }
                    }

                    // prevent end > max
                    if (max !== null) {
                        if (newEnd > max) {
                            diff = newEnd - max;
                            newStart -= diff;
                            newEnd -= diff;

                            // prevent start < min
                            if (min != null) {
                                if (newStart < min) {
                                    newStart = min;
                                }
                            }
                        }
                    }

                    // prevent (end-start) < zoomMin
                    if (this.options.zoomMin !== null) {
                        var zoomMin = parseFloat(this.options.zoomMin);
                        if (zoomMin < 0) {
                            zoomMin = 0;
                        }
                        if (newEnd - newStart < zoomMin) {
                            // compensate for a scale of 0.5 ms
                            var compensation = 0.5;
                            if (this.end - this.start === zoomMin && newStart >= this.start - compensation && newEnd <= this.end) {
                                // ignore this action, we are already zoomed to the minimum
                                newStart = this.start;
                                newEnd = this.end;
                            } else {
                                // zoom to the minimum
                                diff = zoomMin - (newEnd - newStart);
                                newStart -= diff / 2;
                                newEnd += diff / 2;
                            }
                        }
                    }

                    // prevent (end-start) > zoomMax
                    if (this.options.zoomMax !== null) {
                        var zoomMax = parseFloat(this.options.zoomMax);
                        if (zoomMax < 0) {
                            zoomMax = 0;
                        }

                        if (newEnd - newStart > zoomMax) {
                            if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
                                // ignore this action, we are already zoomed to the maximum
                                newStart = this.start;
                                newEnd = this.end;
                            } else {
                                // zoom to the maximum
                                diff = newEnd - newStart - zoomMax;
                                newStart += diff / 2;
                                newEnd -= diff / 2;
                            }
                        }
                    }

                    var changed = this.start != newStart || this.end != newEnd;

                    // if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)
                    if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
                        this.body.emitter.emit('checkRangedItems');
                    }

                    this.start = newStart;
                    this.end = newEnd;
                    return changed;
                };

                /**
                 * Retrieve the current range.
                 * @return {Object} An object with start and end properties
                 */
                Range.prototype.getRange = function() {
                    return {
                        start: this.start,
                        end: this.end
                    };
                };

                /**
                 * Calculate the conversion offset and scale for current range, based on
                 * the provided width
                 * @param {Number} width
                 * @returns {{offset: number, scale: number}} conversion
                 */
                Range.prototype.conversion = function(width, totalHidden) {
                    return Range.conversion(this.start, this.end, width, totalHidden);
                };

                /**
                 * Static method to calculate the conversion offset and scale for a range,
                 * based on the provided start, end, and width
                 * @param {Number} start
                 * @param {Number} end
                 * @param {Number} width
                 * @returns {{offset: number, scale: number}} conversion
                 */
                Range.conversion = function(start, end, width, totalHidden) {
                    if (totalHidden === undefined) {
                        totalHidden = 0;
                    }
                    if (width != 0 && end - start != 0) {
                        return {
                            offset: start,
                            scale: width / (end - start - totalHidden)
                        };
                    } else {
                        return {
                            offset: 0,
                            scale: 1
                        };
                    }
                };

                /**
                 * Start dragging horizontally or vertically
                 * @param {Event} event
                 * @private
                 */
                Range.prototype._onDragStart = function(event) {
                    this.deltaDifference = 0;
                    this.previousDelta = 0;

                    // only allow dragging when configured as movable
                    if (!this.options.moveable) return;

                    // only start dragging when the mouse is inside the current range
                    if (!this._isInsideRange(event)) return;

                    // refuse to drag when we where pinching to prevent the timeline make a jump
                    // when releasing the fingers in opposite order from the touch screen
                    if (!this.props.touch.allowDragging) return;

                    this.stopRolling();

                    this.props.touch.start = this.start;
                    this.props.touch.end = this.end;
                    this.props.touch.dragging = true;

                    if (this.body.dom.root) {
                        this.body.dom.root.style.cursor = 'move';
                    }
                };

                /**
                 * Perform dragging operation
                 * @param {Event} event
                 * @private
                 */
                Range.prototype._onDrag = function(event) {
                    if (!event) return;

                    if (!this.props.touch.dragging) return;

                    // only allow dragging when configured as movable
                    if (!this.options.moveable) return;

                    // TODO: this may be redundant in hammerjs2
                    // refuse to drag when we where pinching to prevent the timeline make a jump
                    // when releasing the fingers in opposite order from the touch screen
                    if (!this.props.touch.allowDragging) return;

                    var direction = this.options.direction;
                    validateDirection(direction);
                    var delta = direction == 'horizontal' ? event.deltaX : event.deltaY;
                    delta -= this.deltaDifference;
                    var interval = this.props.touch.end - this.props.touch.start;

                    // normalize dragging speed if cutout is in between.
                    var duration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
                    interval -= duration;

                    var width = direction == 'horizontal' ? this.body.domProps.center.width : this.body.domProps.center.height;

                    if (this.options.rtl) {
                        var diffRange = delta / width * interval;
                    } else {
                        var diffRange = -delta / width * interval;
                    }

                    var newStart = this.props.touch.start + diffRange;
                    var newEnd = this.props.touch.end + diffRange;

                    // snapping times away from hidden zones
                    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
                    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);
                    if (safeStart != newStart || safeEnd != newEnd) {
                        this.deltaDifference += delta;
                        this.props.touch.start = safeStart;
                        this.props.touch.end = safeEnd;
                        this._onDrag(event);
                        return;
                    }

                    this.previousDelta = delta;
                    this._applyRange(newStart, newEnd);

                    var startDate = new Date(this.start);
                    var endDate = new Date(this.end);

                    // fire a rangechange event
                    this.body.emitter.emit('rangechange', {
                        start: startDate,
                        end: endDate,
                        byUser: true,
                        event: event
                    });

                    // fire a panmove event
                    this.body.emitter.emit('panmove');
                };

                /**
                 * Stop dragging operation
                 * @param {event} event
                 * @private
                 */
                Range.prototype._onDragEnd = function(event) {
                    if (!this.props.touch.dragging) return;

                    // only allow dragging when configured as movable
                    if (!this.options.moveable) return;

                    // TODO: this may be redundant in hammerjs2
                    // refuse to drag when we where pinching to prevent the timeline make a jump
                    // when releasing the fingers in opposite order from the touch screen
                    if (!this.props.touch.allowDragging) return;

                    this.props.touch.dragging = false;
                    if (this.body.dom.root) {
                        this.body.dom.root.style.cursor = 'auto';
                    }

                    // fire a rangechanged event
                    this.body.emitter.emit('rangechanged', {
                        start: new Date(this.start),
                        end: new Date(this.end),
                        byUser: true,
                        event: event
                    });
                };

                /**
                 * Event handler for mouse wheel event, used to zoom
                 * Code from http://adomas.org/javascript-mouse-wheel/
                 * @param {Event} event
                 * @private
                 */
                Range.prototype._onMouseWheel = function(event) {
                    // retrieve delta
                    var delta = 0;
                    if (event.wheelDelta) {
                        /* IE/Opera. */
                        delta = event.wheelDelta / 120;
                    } else if (event.detail) {
                        /* Mozilla case. */
                        // In Mozilla, sign of delta is different than in IE.
                        // Also, delta is multiple of 3.
                        delta = -event.detail / 3;
                    }

                    // don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable
                    if (this.options.zoomKey && !event[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
                        if (this.options.horizontalScroll) {
                            // Prevent default actions caused by mouse wheel
                            // (else the page and timeline both scroll)
                            event.preventDefault();

                            // calculate a single scroll jump relative to the range scale
                            var diff = delta * (this.end - this.start) / 20;
                            // calculate new start and end
                            var newStart = this.start - diff;
                            var newEnd = this.end - diff;

                            var options = {
                                animation: false,
                                byUser: true,
                                event: event
                            };
                            this.setRange(newStart, newEnd, options);
                        }
                        return;
                    }

                    // only allow zooming when configured as zoomable and moveable
                    if (!(this.options.zoomable && this.options.moveable)) return;

                    // only zoom when the mouse is inside the current range
                    if (!this._isInsideRange(event)) return;

                    // If delta is nonzero, handle it.
                    // Basically, delta is now positive if wheel was scrolled up,
                    // and negative, if wheel was scrolled down.
                    if (delta) {
                        // perform the zoom action. Delta is normally 1 or -1

                        // adjust a negative delta such that zooming in with delta 0.1
                        // equals zooming out with a delta -0.1
                        var scale;
                        if (delta < 0) {
                            scale = 1 - delta / 5;
                        } else {
                            scale = 1 / (1 + delta / 5);
                        }

                        // calculate center, the date to zoom around
                        var pointerDate;
                        if (this.rolling) {
                            pointerDate = this.start + (this.end - this.start) * this.options.rollingMode.offset;
                        } else {
                            var pointer = this.getPointer({ x: event.clientX, y: event.clientY }, this.body.dom.center);
                            pointerDate = this._pointerToDate(pointer);
                        }
                        this.zoom(scale, pointerDate, delta, event);

                        // Prevent default actions caused by mouse wheel
                        // (else the page and timeline both scroll)
                        event.preventDefault();
                    }
                };

                /**
                 * Start of a touch gesture
                 * @private
                 */
                Range.prototype._onTouch = function(event) {
                    this.props.touch.start = this.start;
                    this.props.touch.end = this.end;
                    this.props.touch.allowDragging = true;
                    this.props.touch.center = null;
                    this.scaleOffset = 0;
                    this.deltaDifference = 0;
                };

                /**
                 * Handle pinch event
                 * @param {Event} event
                 * @private
                 */
                Range.prototype._onPinch = function(event) {
                    // only allow zooming when configured as zoomable and moveable
                    if (!(this.options.zoomable && this.options.moveable)) return;

                    this.props.touch.allowDragging = false;

                    if (!this.props.touch.center) {
                        this.props.touch.center = this.getPointer(event.center, this.body.dom.center);
                    }

                    this.stopRolling();

                    var scale = 1 / (event.scale + this.scaleOffset);
                    var centerDate = this._pointerToDate(this.props.touch.center);

                    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
                    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
                    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

                    // calculate new start and end
                    var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
                    var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale;

                    // snapping times away from hidden zones
                    this.startToFront = 1 - scale <= 0; // used to do the right auto correction with periodic hidden times
                    this.endToFront = scale - 1 <= 0; // used to do the right auto correction with periodic hidden times

                    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
                    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);
                    if (safeStart != newStart || safeEnd != newEnd) {
                        this.props.touch.start = safeStart;
                        this.props.touch.end = safeEnd;
                        this.scaleOffset = 1 - event.scale;
                        newStart = safeStart;
                        newEnd = safeEnd;
                    }

                    var options = {
                        animation: false,
                        byUser: true,
                        event: event
                    };
                    this.setRange(newStart, newEnd, options);

                    this.startToFront = false; // revert to default
                    this.endToFront = true; // revert to default
                };

                /**
                 * Test whether the mouse from a mouse event is inside the visible window,
                 * between the current start and end date
                 * @param {Object} event
                 * @return {boolean} Returns true when inside the visible window
                 * @private
                 */
                Range.prototype._isInsideRange = function(event) {
                    // calculate the time where the mouse is, check whether inside
                    // and no scroll action should happen.
                    var clientX = event.center ? event.center.x : event.clientX;
                    if (this.options.rtl) {
                        var x = clientX - util.getAbsoluteLeft(this.body.dom.centerContainer);
                    } else {
                        var x = util.getAbsoluteRight(this.body.dom.centerContainer) - clientX;
                    }
                    var time = this.body.util.toTime(x);

                    return time >= this.start && time <= this.end;
                };

                /**
                 * Helper function to calculate the center date for zooming
                 * @param {{x: Number, y: Number}} pointer
                 * @return {number} date
                 * @private
                 */
                Range.prototype._pointerToDate = function(pointer) {
                    var conversion;
                    var direction = this.options.direction;

                    validateDirection(direction);

                    if (direction == 'horizontal') {
                        return this.body.util.toTime(pointer.x).valueOf();
                    } else {
                        var height = this.body.domProps.center.height;
                        conversion = this.conversion(height);
                        return pointer.y / conversion.scale + conversion.offset;
                    }
                };

                /**
                 * Get the pointer location relative to the location of the dom element
                 * @param {{x: Number, y: Number}} touch
                 * @param {Element} element   HTML DOM element
                 * @return {{x: Number, y: Number}} pointer
                 * @private
                 */
                Range.prototype.getPointer = function(touch, element) {
                    if (this.options.rtl) {
                        return {
                            x: util.getAbsoluteRight(element) - touch.x,
                            y: touch.y - util.getAbsoluteTop(element)
                        };
                    } else {
                        return {
                            x: touch.x - util.getAbsoluteLeft(element),
                            y: touch.y - util.getAbsoluteTop(element)
                        };
                    }
                };

                /**
                 * Zoom the range the given scale in or out. Start and end date will
                 * be adjusted, and the timeline will be redrawn. You can optionally give a
                 * date around which to zoom.
                 * For example, try scale = 0.9 or 1.1
                 * @param {Number} scale      Scaling factor. Values above 1 will zoom out,
                 *                            values below 1 will zoom in.
                 * @param {Number} [center]   Value representing a date around which will
                 *                            be zoomed.
                 */
                Range.prototype.zoom = function(scale, center, delta, event) {
                    // if centerDate is not provided, take it half between start Date and end Date
                    if (center == null) {
                        center = (this.start + this.end) / 2;
                    }

                    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
                    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
                    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

                    // calculate new start and end
                    var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
                    var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale;

                    // snapping times away from hidden zones
                    this.startToFront = delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
                    this.endToFront = -delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
                    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
                    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);
                    if (safeStart != newStart || safeEnd != newEnd) {
                        newStart = safeStart;
                        newEnd = safeEnd;
                    }

                    var options = {
                        animation: false,
                        byUser: true,
                        event: event
                    };
                    this.setRange(newStart, newEnd, options);

                    this.startToFront = false; // revert to default
                    this.endToFront = true; // revert to default
                };

                /**
                 * Move the range with a given delta to the left or right. Start and end
                 * value will be adjusted. For example, try delta = 0.1 or -0.1
                 * @param {Number}  delta     Moving amount. Positive value will move right,
                 *                            negative value will move left
                 */
                Range.prototype.move = function(delta) {
                    // zoom start Date and end Date relative to the centerDate
                    var diff = this.end - this.start;

                    // apply new values
                    var newStart = this.start + diff * delta;
                    var newEnd = this.end + diff * delta;

                    // TODO: reckon with min and max range

                    this.start = newStart;
                    this.end = newEnd;
                };

                /**
                 * Move the range to a new center point
                 * @param {Number} moveTo      New center point of the range
                 */
                Range.prototype.moveTo = function(moveTo) {
                    var center = (this.start + this.end) / 2;

                    var diff = center - moveTo;

                    // calculate new start and end
                    var newStart = this.start - diff;
                    var newEnd = this.end - diff;

                    var options = {
                        animation: false,
                        byUser: true,
                        event: null
                    };
                    this.setRange(newStart, newEnd, options);
                };

                module.exports = Range;

                /***/
            }),
            /* 119 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Hammer = __webpack_require__(112);

                /**
                 * Register a touch event, taking place before a gesture
                 * @param {Hammer} hammer       A hammer instance
                 * @param {function} callback   Callback, called as callback(event)
                 */
                exports.onTouch = function(hammer, callback) {
                    callback.inputHandler = function(event) {
                        if (event.isFirst) {
                            callback(event);
                        }
                    };

                    hammer.on('hammer.input', callback.inputHandler);
                };

                /**
                 * Register a release event, taking place after a gesture
                 * @param {Hammer} hammer       A hammer instance
                 * @param {function} callback   Callback, called as callback(event)
                 */
                exports.onRelease = function(hammer, callback) {
                    callback.inputHandler = function(event) {
                        if (event.isFinal) {
                            callback(event);
                        }
                    };

                    return hammer.on('hammer.input', callback.inputHandler);
                };

                /**
                 * Unregister a touch event, taking place before a gesture
                 * @param {Hammer} hammer       A hammer instance
                 * @param {function} callback   Callback, called as callback(event)
                 */
                exports.offTouch = function(hammer, callback) {
                    hammer.off('hammer.input', callback.inputHandler);
                };

                /**
                 * Unregister a release event, taking place before a gesture
                 * @param {Hammer} hammer       A hammer instance
                 * @param {function} callback   Callback, called as callback(event)
                 */
                exports.offRelease = exports.offTouch;

                /**
                 * Hack the PinchRecognizer such that it doesn't prevent default behavior
                 * for vertical panning.
                 *
                 * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
                 *
                 * @param {Hammer.Pinch} pinchRecognizer
                 * @return {Hammer.Pinch} returns the pinchRecognizer
                 */
                exports.disablePreventDefaultVertically = function(pinchRecognizer) {
                    var TOUCH_ACTION_PAN_Y = 'pan-y';

                    pinchRecognizer.getTouchAction = function() {
                        // default method returns [TOUCH_ACTION_NONE]
                        return [TOUCH_ACTION_PAN_Y];
                    };

                    return pinchRecognizer;
                };

                /***/
            }),
            /* 120 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var util = __webpack_require__(1);

                /**
                 * Prototype for visual components
                 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
                 * @param {Object} [options]
                 */
                function Component(body, options) {
                    this.options = null;
                    this.props = null;
                }

                /**
                 * Set options for the component. The new options will be merged into the
                 * current options.
                 * @param {Object} options
                 */
                Component.prototype.setOptions = function(options) {
                    if (options) {
                        util.extend(this.options, options);
                    }
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                Component.prototype.redraw = function() {
                    // should be implemented by the component
                    return false;
                };

                /**
                 * Destroy the component. Cleanup DOM and event listeners
                 */
                Component.prototype.destroy = function() {
                    // should be implemented by the component
                };

                /**
                 * Test whether the component is resized since the last time _isResized() was
                 * called.
                 * @return {Boolean} Returns true if the component is resized
                 * @protected
                 */
                Component.prototype._isResized = function() {
                    var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;

                    this.props._previousWidth = this.props.width;
                    this.props._previousHeight = this.props.height;

                    return resized;
                };

                module.exports = Component;

                /***/
            }),
            /* 121 */
            /***/
            (function(module, exports) {

                "use strict";

                /**
                 * used in Core to convert the options into a volatile variable
                 * 
                 * @param {function} moment
                 * @param {Object} body
                 * @param {Array | Object} hiddenDates
                 */
                exports.convertHiddenOptions = function(moment, body, hiddenDates) {
                    if (hiddenDates && !Array.isArray(hiddenDates)) {
                        return exports.convertHiddenOptions(moment, body, [hiddenDates]);
                    }

                    body.hiddenDates = [];
                    if (hiddenDates) {
                        if (Array.isArray(hiddenDates) == true) {
                            for (var i = 0; i < hiddenDates.length; i++) {
                                if (hiddenDates[i].repeat === undefined) {
                                    var dateItem = {};
                                    dateItem.start = moment(hiddenDates[i].start).toDate().valueOf();
                                    dateItem.end = moment(hiddenDates[i].end).toDate().valueOf();
                                    body.hiddenDates.push(dateItem);
                                }
                            }
                            body.hiddenDates.sort(function(a, b) {
                                return a.start - b.start;
                            }); // sort by start time
                        }
                    }
                };

                /**
                 * create new entrees for the repeating hidden dates
                 * @param {function} moment
                 * @param {Object} body
                 * @param {Array | Object} hiddenDates
                 */
                exports.updateHiddenDates = function(moment, body, hiddenDates) {
                    if (hiddenDates && !Array.isArray(hiddenDates)) {
                        return exports.updateHiddenDates(moment, body, [hiddenDates]);
                    }

                    if (hiddenDates && body.domProps.centerContainer.width !== undefined) {
                        exports.convertHiddenOptions(moment, body, hiddenDates);

                        var start = moment(body.range.start);
                        var end = moment(body.range.end);

                        var totalRange = body.range.end - body.range.start;
                        var pixelTime = totalRange / body.domProps.centerContainer.width;

                        for (var i = 0; i < hiddenDates.length; i++) {
                            if (hiddenDates[i].repeat !== undefined) {
                                var startDate = moment(hiddenDates[i].start);
                                var endDate = moment(hiddenDates[i].end);

                                if (startDate._d == "Invalid Date") {
                                    throw new Error("Supplied start date is not valid: " + hiddenDates[i].start);
                                }
                                if (endDate._d == "Invalid Date") {
                                    throw new Error("Supplied end date is not valid: " + hiddenDates[i].end);
                                }

                                var duration = endDate - startDate;
                                if (duration >= 4 * pixelTime) {

                                    var offset = 0;
                                    var runUntil = end.clone();
                                    switch (hiddenDates[i].repeat) {
                                        case "daily":
                                            // case of time
                                            if (startDate.day() != endDate.day()) {
                                                offset = 1;
                                            }
                                            startDate.dayOfYear(start.dayOfYear());
                                            startDate.year(start.year());
                                            startDate.subtract(7, 'days');

                                            endDate.dayOfYear(start.dayOfYear());
                                            endDate.year(start.year());
                                            endDate.subtract(7 - offset, 'days');

                                            runUntil.add(1, 'weeks');
                                            break;
                                        case "weekly":
                                            var dayOffset = endDate.diff(startDate, 'days');
                                            var day = startDate.day();

                                            // set the start date to the range.start
                                            startDate.date(start.date());
                                            startDate.month(start.month());
                                            startDate.year(start.year());
                                            endDate = startDate.clone();

                                            // force
                                            startDate.day(day);
                                            endDate.day(day);
                                            endDate.add(dayOffset, 'days');

                                            startDate.subtract(1, 'weeks');
                                            endDate.subtract(1, 'weeks');

                                            runUntil.add(1, 'weeks');
                                            break;
                                        case "monthly":
                                            if (startDate.month() != endDate.month()) {
                                                offset = 1;
                                            }
                                            startDate.month(start.month());
                                            startDate.year(start.year());
                                            startDate.subtract(1, 'months');

                                            endDate.month(start.month());
                                            endDate.year(start.year());
                                            endDate.subtract(1, 'months');
                                            endDate.add(offset, 'months');

                                            runUntil.add(1, 'months');
                                            break;
                                        case "yearly":
                                            if (startDate.year() != endDate.year()) {
                                                offset = 1;
                                            }
                                            startDate.year(start.year());
                                            startDate.subtract(1, 'years');
                                            endDate.year(start.year());
                                            endDate.subtract(1, 'years');
                                            endDate.add(offset, 'years');

                                            runUntil.add(1, 'years');
                                            break;
                                        default:
                                            console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                                            return;
                                    }
                                    while (startDate < runUntil) {
                                        body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
                                        switch (hiddenDates[i].repeat) {
                                            case "daily":
                                                startDate.add(1, 'days');
                                                endDate.add(1, 'days');
                                                break;
                                            case "weekly":
                                                startDate.add(1, 'weeks');
                                                endDate.add(1, 'weeks');
                                                break;
                                            case "monthly":
                                                startDate.add(1, 'months');
                                                endDate.add(1, 'months');
                                                break;
                                            case "yearly":
                                                startDate.add(1, 'y');
                                                endDate.add(1, 'y');
                                                break;
                                            default:
                                                console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                                                return;
                                        }
                                    }
                                    body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
                                }
                            }
                        }
                        // remove duplicates, merge where possible
                        exports.removeDuplicates(body);
                        // ensure the new positions are not on hidden dates
                        var startHidden = exports.isHidden(body.range.start, body.hiddenDates);
                        var endHidden = exports.isHidden(body.range.end, body.hiddenDates);
                        var rangeStart = body.range.start;
                        var rangeEnd = body.range.end;
                        if (startHidden.hidden == true) {
                            rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
                        }
                        if (endHidden.hidden == true) {
                            rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
                        }
                        if (startHidden.hidden == true || endHidden.hidden == true) {
                            body.range._applyRange(rangeStart, rangeEnd);
                        }
                    }
                };

                /**
                 * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
                 * Scales with N^2
                 * @param body
                 */
                exports.removeDuplicates = function(body) {
                    var hiddenDates = body.hiddenDates;
                    var safeDates = [];
                    for (var i = 0; i < hiddenDates.length; i++) {
                        for (var j = 0; j < hiddenDates.length; j++) {
                            if (i != j && hiddenDates[j].remove != true && hiddenDates[i].remove != true) {
                                // j inside i
                                if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
                                    hiddenDates[j].remove = true;
                                }
                                // j start inside i
                                else if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].start <= hiddenDates[i].end) {
                                    hiddenDates[i].end = hiddenDates[j].end;
                                    hiddenDates[j].remove = true;
                                }
                                // j end inside i
                                else if (hiddenDates[j].end >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
                                    hiddenDates[i].start = hiddenDates[j].start;
                                    hiddenDates[j].remove = true;
                                }
                            }
                        }
                    }

                    for (var i = 0; i < hiddenDates.length; i++) {
                        if (hiddenDates[i].remove !== true) {
                            safeDates.push(hiddenDates[i]);
                        }
                    }

                    body.hiddenDates = safeDates;
                    body.hiddenDates.sort(function(a, b) {
                        return a.start - b.start;
                    }); // sort by start time
                };

                exports.printDates = function(dates) {
                    for (var i = 0; i < dates.length; i++) {
                        console.log(i, new Date(dates[i].start), new Date(dates[i].end), dates[i].start, dates[i].end, dates[i].remove);
                    }
                };

                /**
                 * Used in TimeStep to avoid the hidden times.
                 * @param {function} moment
                 * @param {TimeStep} timeStep
                 * @param previousTime
                 */
                exports.stepOverHiddenDates = function(moment, timeStep, previousTime) {
                    var stepInHidden = false;
                    var currentValue = timeStep.current.valueOf();
                    for (var i = 0; i < timeStep.hiddenDates.length; i++) {
                        var startDate = timeStep.hiddenDates[i].start;
                        var endDate = timeStep.hiddenDates[i].end;
                        if (currentValue >= startDate && currentValue < endDate) {
                            stepInHidden = true;
                            break;
                        }
                    }

                    if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
                        var prevValue = moment(previousTime);
                        var newValue = moment(endDate);
                        //check if the next step should be major
                        if (prevValue.year() != newValue.year()) {
                            timeStep.switchedYear = true;
                        } else if (prevValue.month() != newValue.month()) {
                            timeStep.switchedMonth = true;
                        } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
                            timeStep.switchedDay = true;
                        }

                        timeStep.current = newValue;
                    }
                };

                ///**
                // * Used in TimeStep to avoid the hidden times.
                // * @param timeStep
                // * @param previousTime
                // */
                //exports.checkFirstStep = function(timeStep) {
                //  var stepInHidden = false;
                //  var currentValue = timeStep.current.valueOf();
                //  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
                //    var startDate = timeStep.hiddenDates[i].start;
                //    var endDate = timeStep.hiddenDates[i].end;
                //    if (currentValue >= startDate && currentValue < endDate) {
                //      stepInHidden = true;
                //      break;
                //    }
                //  }
                //
                //  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
                //    var newValue = moment(endDate);
                //    timeStep.current = newValue.toDate();
                //  }
                //};

                /**
                 * replaces the Core toScreen methods
                 * @param Core
                 * @param time
                 * @param width
                 * @returns {number}
                 */
                exports.toScreen = function(Core, time, width) {
                    if (Core.body.hiddenDates.length == 0) {
                        var conversion = Core.range.conversion(width);
                        return (time.valueOf() - conversion.offset) * conversion.scale;
                    } else {
                        var hidden = exports.isHidden(time, Core.body.hiddenDates);
                        if (hidden.hidden == true) {
                            time = hidden.startDate;
                        }

                        var duration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
                        if (time < Core.range.start) {
                            var conversion = Core.range.conversion(width, duration);
                            var hiddenBeforeStart = exports.getHiddenDurationBeforeStart(Core.body.hiddenDates, time, conversion.offset);
                            time = Core.options.moment(time).toDate().valueOf();
                            time = time + hiddenBeforeStart;
                            return -(conversion.offset - time.valueOf()) * conversion.scale;
                        } else if (time > Core.range.end) {
                            var rangeAfterEnd = { start: Core.range.start, end: time };
                            time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, rangeAfterEnd, time);
                            var conversion = Core.range.conversion(width, duration);
                            return (time.valueOf() - conversion.offset) * conversion.scale;
                        } else {
                            time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, Core.range, time);
                            var conversion = Core.range.conversion(width, duration);
                            return (time.valueOf() - conversion.offset) * conversion.scale;
                        }
                    }
                };

                /**
                 * Replaces the core toTime methods
                 * @param body
                 * @param range
                 * @param x
                 * @param width
                 * @returns {Date}
                 */
                exports.toTime = function(Core, x, width) {
                    if (Core.body.hiddenDates.length == 0) {
                        var conversion = Core.range.conversion(width);
                        return new Date(x / conversion.scale + conversion.offset);
                    } else {
                        var hiddenDuration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
                        var totalDuration = Core.range.end - Core.range.start - hiddenDuration;
                        var partialDuration = totalDuration * x / width;
                        var accumulatedHiddenDuration = exports.getAccumulatedHiddenDuration(Core.body.hiddenDates, Core.range, partialDuration);

                        var newTime = new Date(accumulatedHiddenDuration + partialDuration + Core.range.start);
                        return newTime;
                    }
                };

                /**
                 * Support function
                 *
                 * @param hiddenDates
                 * @param range
                 * @returns {number}
                 */
                exports.getHiddenDurationBetween = function(hiddenDates, start, end) {
                    var duration = 0;
                    for (var i = 0; i < hiddenDates.length; i++) {
                        var startDate = hiddenDates[i].start;
                        var endDate = hiddenDates[i].end;
                        // if time after the cutout, and the
                        if (startDate >= start && endDate < end) {
                            duration += endDate - startDate;
                        }
                    }
                    return duration;
                };

                /**
                 * Support function
                 *
                 * @param hiddenDates
                 * @param start
                 * @param end
                 * @returns {number}
                 */
                exports.getHiddenDurationBeforeStart = function(hiddenDates, start, end) {
                    var duration = 0;
                    for (var i = 0; i < hiddenDates.length; i++) {
                        var startDate = hiddenDates[i].start;
                        var endDate = hiddenDates[i].end;

                        if (startDate >= start && endDate <= end) {
                            duration += endDate - startDate;
                        }
                    }
                    return duration;
                };

                /**
                 * Support function
                 * @param moment
                 * @param hiddenDates
                 * @param range
                 * @param time
                 * @returns {{duration: number, time: *, offset: number}}
                 */
                exports.correctTimeForHidden = function(moment, hiddenDates, range, time) {
                    time = moment(time).toDate().valueOf();
                    time -= exports.getHiddenDurationBefore(moment, hiddenDates, range, time);
                    return time;
                };

                exports.getHiddenDurationBefore = function(moment, hiddenDates, range, time) {
                    var timeOffset = 0;
                    time = moment(time).toDate().valueOf();

                    for (var i = 0; i < hiddenDates.length; i++) {
                        var startDate = hiddenDates[i].start;
                        var endDate = hiddenDates[i].end;
                        // if time after the cutout, and the
                        if (startDate >= range.start && endDate < range.end) {
                            if (time >= endDate) {
                                timeOffset += endDate - startDate;
                            }
                        }
                    }
                    return timeOffset;
                };

                /**
                 * sum the duration from start to finish, including the hidden duration,
                 * until the required amount has been reached, return the accumulated hidden duration
                 * @param hiddenDates
                 * @param range
                 * @param time
                 * @returns {{duration: number, time: *, offset: number}}
                 */
                exports.getAccumulatedHiddenDuration = function(hiddenDates, range, requiredDuration) {
                    var hiddenDuration = 0;
                    var duration = 0;
                    var previousPoint = range.start;
                    //exports.printDates(hiddenDates)
                    for (var i = 0; i < hiddenDates.length; i++) {
                        var startDate = hiddenDates[i].start;
                        var endDate = hiddenDates[i].end;
                        // if time after the cutout, and the
                        if (startDate >= range.start && endDate < range.end) {
                            duration += startDate - previousPoint;
                            previousPoint = endDate;
                            if (duration >= requiredDuration) {
                                break;
                            } else {
                                hiddenDuration += endDate - startDate;
                            }
                        }
                    }

                    return hiddenDuration;
                };

                /**
                 * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
                 * @param hiddenDates
                 * @param time
                 * @param direction
                 * @param correctionEnabled
                 * @returns {*}
                 */
                exports.snapAwayFromHidden = function(hiddenDates, time, direction, correctionEnabled) {
                    var isHidden = exports.isHidden(time, hiddenDates);
                    if (isHidden.hidden == true) {
                        if (direction < 0) {
                            if (correctionEnabled == true) {
                                return isHidden.startDate - (isHidden.endDate - time) - 1;
                            } else {
                                return isHidden.startDate - 1;
                            }
                        } else {
                            if (correctionEnabled == true) {
                                return isHidden.endDate + (time - isHidden.startDate) + 1;
                            } else {
                                return isHidden.endDate + 1;
                            }
                        }
                    } else {
                        return time;
                    }
                };

                /**
                 * Check if a time is hidden
                 *
                 * @param time
                 * @param hiddenDates
                 * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
                 */
                exports.isHidden = function(time, hiddenDates) {
                    for (var i = 0; i < hiddenDates.length; i++) {
                        var startDate = hiddenDates[i].start;
                        var endDate = hiddenDates[i].end;

                        if (time >= startDate && time < endDate) {
                            // if the start is entering a hidden zone
                            return { hidden: true, startDate: startDate, endDate: endDate };
                        }
                    }
                    return { hidden: false, startDate: startDate, endDate: endDate };
                };

                /***/
            }),
            /* 122 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Emitter = __webpack_require__(99);
                var Hammer = __webpack_require__(112);
                var hammerUtil = __webpack_require__(119);
                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var Range = __webpack_require__(118);
                var ItemSet = __webpack_require__(123);
                var TimeAxis = __webpack_require__(139);
                var Activator = __webpack_require__(140);
                var DateUtil = __webpack_require__(121);
                var CustomTime = __webpack_require__(141);

                /**
                 * Create a timeline visualization
                 * @constructor
                 */
                function Core() {}

                // turn Core into an event emitter
                Emitter(Core.prototype);

                /**
                 * Create the main DOM for the Core: a root panel containing left, right,
                 * top, bottom, content, and background panel.
                 * @param {Element} container  The container element where the Core will
                 *                             be attached.
                 * @protected
                 */
                Core.prototype._create = function(container) {
                    this.dom = {};

                    this.dom.container = container;

                    this.dom.root = document.createElement('div');
                    this.dom.background = document.createElement('div');
                    this.dom.backgroundVertical = document.createElement('div');
                    this.dom.backgroundHorizontal = document.createElement('div');
                    this.dom.centerContainer = document.createElement('div');
                    this.dom.leftContainer = document.createElement('div');
                    this.dom.rightContainer = document.createElement('div');
                    this.dom.center = document.createElement('div');
                    this.dom.left = document.createElement('div');
                    this.dom.right = document.createElement('div');
                    this.dom.top = document.createElement('div');
                    this.dom.bottom = document.createElement('div');
                    this.dom.shadowTop = document.createElement('div');
                    this.dom.shadowBottom = document.createElement('div');
                    this.dom.shadowTopLeft = document.createElement('div');
                    this.dom.shadowBottomLeft = document.createElement('div');
                    this.dom.shadowTopRight = document.createElement('div');
                    this.dom.shadowBottomRight = document.createElement('div');
                    this.dom.rollingModeBtn = document.createElement('div');

                    this.dom.root.className = 'vis-timeline';
                    this.dom.background.className = 'vis-panel vis-background';
                    this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical';
                    this.dom.backgroundHorizontal.className = 'vis-panel vis-background vis-horizontal';
                    this.dom.centerContainer.className = 'vis-panel vis-center';
                    this.dom.leftContainer.className = 'vis-panel vis-left';
                    this.dom.rightContainer.className = 'vis-panel vis-right';
                    this.dom.top.className = 'vis-panel vis-top';
                    this.dom.bottom.className = 'vis-panel vis-bottom';
                    this.dom.left.className = 'vis-content';
                    this.dom.center.className = 'vis-content';
                    this.dom.right.className = 'vis-content';
                    this.dom.shadowTop.className = 'vis-shadow vis-top';
                    this.dom.shadowBottom.className = 'vis-shadow vis-bottom';
                    this.dom.shadowTopLeft.className = 'vis-shadow vis-top';
                    this.dom.shadowBottomLeft.className = 'vis-shadow vis-bottom';
                    this.dom.shadowTopRight.className = 'vis-shadow vis-top';
                    this.dom.shadowBottomRight.className = 'vis-shadow vis-bottom';
                    this.dom.rollingModeBtn.className = 'vis-rolling-mode-btn';

                    this.dom.root.appendChild(this.dom.background);
                    this.dom.root.appendChild(this.dom.backgroundVertical);
                    this.dom.root.appendChild(this.dom.backgroundHorizontal);
                    this.dom.root.appendChild(this.dom.centerContainer);
                    this.dom.root.appendChild(this.dom.leftContainer);
                    this.dom.root.appendChild(this.dom.rightContainer);
                    this.dom.root.appendChild(this.dom.top);
                    this.dom.root.appendChild(this.dom.bottom);
                    this.dom.root.appendChild(this.dom.bottom);
                    this.dom.root.appendChild(this.dom.rollingModeBtn);

                    this.dom.centerContainer.appendChild(this.dom.center);
                    this.dom.leftContainer.appendChild(this.dom.left);
                    this.dom.rightContainer.appendChild(this.dom.right);
                    this.dom.centerContainer.appendChild(this.dom.shadowTop);
                    this.dom.centerContainer.appendChild(this.dom.shadowBottom);
                    this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
                    this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
                    this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
                    this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);

                    // size properties of each of the panels
                    this.props = {
                        root: {},
                        background: {},
                        centerContainer: {},
                        leftContainer: {},
                        rightContainer: {},
                        center: {},
                        left: {},
                        right: {},
                        top: {},
                        bottom: {},
                        border: {},
                        scrollTop: 0,
                        scrollTopMin: 0
                    };

                    this.on('rangechange', function() {
                        if (this.initialDrawDone === true) {
                            this._redraw();
                        }
                    }.bind(this));
                    this.on('touch', this._onTouch.bind(this));
                    this.on('panmove', this._onDrag.bind(this));

                    var me = this;
                    this._origRedraw = this._redraw.bind(this);
                    this._redraw = util.throttle(this._origRedraw);

                    this.on('_change', function(properties) {
                        if (me.itemSet && me.itemSet.initialItemSetDrawn && properties && properties.queue == true) {
                            me._redraw();
                        } else {
                            me._origRedraw();
                        }
                    });

                    // create event listeners for all interesting events, these events will be
                    // emitted via emitter
                    this.hammer = new Hammer(this.dom.root);
                    var pinchRecognizer = this.hammer.get('pinch').set({ enable: true });
                    hammerUtil.disablePreventDefaultVertically(pinchRecognizer);
                    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
                    this.listeners = {};

                    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'
                        // TODO: cleanup
                        //'touch', 'pinch',
                        //'tap', 'doubletap', 'hold',
                        //'dragstart', 'drag', 'dragend',
                        //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
                    ];
                    events.forEach(function(type) {
                        var listener = function listener(event) {
                            if (me.isActive()) {
                                me.emit(type, event);
                            }
                        };
                        me.hammer.on(type, listener);
                        me.listeners[type] = listener;
                    });

                    // emulate a touch event (emitted before the start of a pan, pinch, tap, or press)
                    hammerUtil.onTouch(this.hammer, function(event) {
                        me.emit('touch', event);
                    }.bind(this));

                    // emulate a release event (emitted after a pan, pinch, tap, or press)
                    hammerUtil.onRelease(this.hammer, function(event) {
                        me.emit('release', event);
                    }.bind(this));

                    function onMouseWheel(event) {
                        if (this.isActive()) {
                            this.emit('mousewheel', event);
                        }

                        // prevent scrolling if not specified explicitly or when horizontalScroll is true
                        if (!this.options.verticalScroll || this.options.horizontalScroll) return;

                        // prevent scrolling when zoomKey defined or activated
                        if (!this.options.zoomKey || event[this.options.zoomKey]) return;

                        // Prevent default actions caused by mouse wheel
                        // (else the page and timeline both scroll)
                        event.preventDefault();

                        var delta = 0;
                        if (event.wheelDelta) {
                            /* IE/Opera. */
                            delta = event.wheelDelta / 120;
                        } else if (event.detail) {
                            /* Mozilla case. */
                            // In Mozilla, sign of delta is different than in IE.
                            // Also, delta is multiple of 3.
                            delta = -event.detail / 3;
                        }

                        var current = this.props.scrollTop;
                        var adjusted = current + delta * 120;

                        if (this.isActive()) {
                            this._setScrollTop(adjusted);
                            this._redraw();
                            this.emit('scroll', event);
                        }
                    }

                    if (this.dom.centerContainer.addEventListener) {
                        // IE9, Chrome, Safari, Opera
                        this.dom.centerContainer.addEventListener("mousewheel", onMouseWheel.bind(this), false);
                        // Firefox
                        this.dom.centerContainer.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
                    } else {
                        // IE 6/7/8
                        this.dom.centerContainer.attachEvent("onmousewheel", onMouseWheel.bind(this));
                    }

                    function onMouseScrollSide(event) {
                        if (!me.options.verticalScroll) return;
                        event.preventDefault();
                        if (me.isActive()) {
                            var adjusted = -event.target.scrollTop;
                            me._setScrollTop(adjusted);
                            me._redraw();
                            me.emit('scrollSide', event);
                        }
                    }

                    this.dom.left.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
                    this.dom.right.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));

                    var itemAddedToTimeline = false;

                    function handleDragOver(event) {
                        if (event.preventDefault) {
                            event.preventDefault(); // Necessary. Allows us to drop.
                        }

                        // make sure your target is a vis element
                        if (!event.target.className.indexOf("vis") > -1) return;

                        // make sure only one item is added every time you're over the timeline
                        if (itemAddedToTimeline) return;

                        event.dataTransfer.dropEffect = 'move';
                        itemAddedToTimeline = true;
                        return false;
                    }

                    function handleDrop(event) {
                        // prevent redirect to blank page - Firefox
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        }
                        // return when dropping non-vis items 
                        try {
                            var itemData = JSON.parse(event.dataTransfer.getData("text"));
                            if (!itemData.content) return;
                        } catch (err) {
                            return false;
                        }

                        itemAddedToTimeline = false;
                        event.center = {
                            x: event.clientX,
                            y: event.clientY
                        };
                        me.itemSet._onAddItem(event);
                        me.emit('drop', me.getEventProperties(event));
                        return false;
                    }

                    this.dom.center.addEventListener('dragover', handleDragOver.bind(this), false);
                    this.dom.center.addEventListener('drop', handleDrop.bind(this), false);

                    this.customTimes = [];

                    // store state information needed for touch events
                    this.touch = {};

                    this.redrawCount = 0;
                    this.initialDrawDone = false;

                    // attach the root panel to the provided container
                    if (!container) throw new Error('No container provided');
                    container.appendChild(this.dom.root);
                };

                /**
                 * Set options. Options will be passed to all components loaded in the Timeline.
                 * @param {Object} [options]
                 *                           {String} orientation
                 *                              Vertical orientation for the Timeline,
                 *                              can be 'bottom' (default) or 'top'.
                 *                           {String | Number} width
                 *                              Width for the timeline, a number in pixels or
                 *                              a css string like '1000px' or '75%'. '100%' by default.
                 *                           {String | Number} height
                 *                              Fixed height for the Timeline, a number in pixels or
                 *                              a css string like '400px' or '75%'. If undefined,
                 *                              The Timeline will automatically size such that
                 *                              its contents fit.
                 *                           {String | Number} minHeight
                 *                              Minimum height for the Timeline, a number in pixels or
                 *                              a css string like '400px' or '75%'.
                 *                           {String | Number} maxHeight
                 *                              Maximum height for the Timeline, a number in pixels or
                 *                              a css string like '400px' or '75%'.
                 *                           {Number | Date | String} start
                 *                              Start date for the visible window
                 *                           {Number | Date | String} end
                 *                              End date for the visible window
                 */
                Core.prototype.setOptions = function(options) {
                    if (options) {
                        // copy the known options
                        var fields = ['width', 'height', 'minHeight', 'maxHeight', 'autoResize', 'start', 'end', 'clickToUse', 'dataAttributes', 'hiddenDates', 'locale', 'locales', 'moment', 'rtl', 'zoomKey', 'horizontalScroll', 'verticalScroll'];
                        util.selectiveExtend(fields, this.options, options);

                        this.dom.rollingModeBtn.style.visibility = 'hidden';

                        if (this.options.rtl) {
                            this.dom.container.style.direction = "rtl";
                            this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical-rtl';
                        }

                        if (this.options.verticalScroll) {
                            if (this.options.rtl) {
                                this.dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
                            } else {
                                this.dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
                            }
                        }

                        this.options.orientation = { item: undefined, axis: undefined };
                        if ('orientation' in options) {
                            if (typeof options.orientation === 'string') {
                                this.options.orientation = {
                                    item: options.orientation,
                                    axis: options.orientation
                                };
                            } else if ((0, _typeof3['default'])(options.orientation) === 'object') {
                                if ('item' in options.orientation) {
                                    this.options.orientation.item = options.orientation.item;
                                }
                                if ('axis' in options.orientation) {
                                    this.options.orientation.axis = options.orientation.axis;
                                }
                            }
                        }

                        if (this.options.orientation.axis === 'both') {
                            if (!this.timeAxis2) {
                                var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);
                                timeAxis2.setOptions = function(options) {
                                    var _options = options ? util.extend({}, options) : {};
                                    _options.orientation = 'top'; // override the orientation option, always top
                                    TimeAxis.prototype.setOptions.call(timeAxis2, _options);
                                };
                                this.components.push(timeAxis2);
                            }
                        } else {
                            if (this.timeAxis2) {
                                var index = this.components.indexOf(this.timeAxis2);
                                if (index !== -1) {
                                    this.components.splice(index, 1);
                                }
                                this.timeAxis2.destroy();
                                this.timeAxis2 = null;
                            }
                        }

                        // if the graph2d's drawPoints is a function delegate the callback to the onRender property
                        if (typeof options.drawPoints == 'function') {
                            options.drawPoints = {
                                onRender: options.drawPoints
                            };
                        }

                        if ('hiddenDates' in this.options) {
                            DateUtil.convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
                        }

                        if ('clickToUse' in options) {
                            if (options.clickToUse) {
                                if (!this.activator) {
                                    this.activator = new Activator(this.dom.root);
                                }
                            } else {
                                if (this.activator) {
                                    this.activator.destroy();
                                    delete this.activator;
                                }
                            }
                        }

                        if ('showCustomTime' in options) {
                            throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');
                        }

                        // enable/disable autoResize
                        this._initAutoResize();
                    }

                    // propagate options to all components
                    this.components.forEach(function(component) {
                        return component.setOptions(options);
                    });

                    // enable/disable configure
                    if ('configure' in options) {
                        if (!this.configurator) {
                            this.configurator = this._createConfigurator();
                        }

                        this.configurator.setOptions(options.configure);

                        // collect the settings of all components, and pass them to the configuration system
                        var appliedOptions = util.deepExtend({}, this.options);
                        this.components.forEach(function(component) {
                            util.deepExtend(appliedOptions, component.options);
                        });
                        this.configurator.setModuleOptions({ global: appliedOptions });
                    }

                    this._redraw();
                };

                /**
                 * Returns true when the Timeline is active.
                 * @returns {boolean}
                 */
                Core.prototype.isActive = function() {
                    return !this.activator || this.activator.active;
                };

                /**
                 * Destroy the Core, clean up all DOM elements and event listeners.
                 */
                Core.prototype.destroy = function() {
                    // unbind datasets
                    this.setItems(null);
                    this.setGroups(null);

                    // remove all event listeners
                    this.off();

                    // stop checking for changed size
                    this._stopAutoResize();

                    // remove from DOM
                    if (this.dom.root.parentNode) {
                        this.dom.root.parentNode.removeChild(this.dom.root);
                    }
                    this.dom = null;

                    // remove Activator
                    if (this.activator) {
                        this.activator.destroy();
                        delete this.activator;
                    }

                    // cleanup hammer touch events
                    for (var event in this.listeners) {
                        if (this.listeners.hasOwnProperty(event)) {
                            delete this.listeners[event];
                        }
                    }
                    this.listeners = null;
                    this.hammer = null;

                    // give all components the opportunity to cleanup
                    this.components.forEach(function(component) {
                        return component.destroy();
                    });

                    this.body = null;
                };

                /**
                 * Set a custom time bar
                 * @param {Date} time
                 * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
                 */
                Core.prototype.setCustomTime = function(time, id) {
                    var customTimes = this.customTimes.filter(function(component) {
                        return id === component.options.id;
                    });

                    if (customTimes.length === 0) {
                        throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
                    }

                    if (customTimes.length > 0) {
                        customTimes[0].setCustomTime(time);
                    }
                };

                /**
                 * Retrieve the current custom time.
                 * @param {number} [id=undefined]    Id of the custom time bar.
                 * @return {Date | undefined} customTime
                 */
                Core.prototype.getCustomTime = function(id) {
                    var customTimes = this.customTimes.filter(function(component) {
                        return component.options.id === id;
                    });

                    if (customTimes.length === 0) {
                        throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
                    }
                    return customTimes[0].getCustomTime();
                };

                /**
                 * Set a custom title for the custom time bar.
                 * @param {String} [title] Custom title
                 * @param {number} [id=undefined]    Id of the custom time bar.
                 */
                Core.prototype.setCustomTimeTitle = function(title, id) {
                    var customTimes = this.customTimes.filter(function(component) {
                        return component.options.id === id;
                    });

                    if (customTimes.length === 0) {
                        throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
                    }
                    if (customTimes.length > 0) {
                        return customTimes[0].setCustomTitle(title);
                    }
                };

                /**
                 * Retrieve meta information from an event.
                 * Should be overridden by classes extending Core
                 * @param {Event} event
                 * @return {Object} An object with related information.
                 */
                Core.prototype.getEventProperties = function(event) {
                    return { event: event };
                };

                /**
                 * Add custom vertical bar
                 * @param {Date | String | Number} [time]  A Date, unix timestamp, or
                 *                                         ISO date string. Time point where
                 *                                         the new bar should be placed.
                 *                                         If not provided, `new Date()` will
                 *                                         be used.
                 * @param {Number | String} [id=undefined] Id of the new bar. Optional
                 * @return {Number | String}               Returns the id of the new bar
                 */
                Core.prototype.addCustomTime = function(time, id) {
                    var timestamp = time !== undefined ? util.convert(time, 'Date').valueOf() : new Date();

                    var exists = this.customTimes.some(function(customTime) {
                        return customTime.options.id === id;
                    });
                    if (exists) {
                        throw new Error('A custom time with id ' + (0, _stringify2['default'])(id) + ' already exists');
                    }

                    var customTime = new CustomTime(this.body, util.extend({}, this.options, {
                        time: timestamp,
                        id: id
                    }));

                    this.customTimes.push(customTime);
                    this.components.push(customTime);
                    this._redraw();

                    return id;
                };

                /**
                 * Remove previously added custom bar
                 * @param {int} id ID of the custom bar to be removed
                 * @return {boolean} True if the bar exists and is removed, false otherwise
                 */
                Core.prototype.removeCustomTime = function(id) {
                    var customTimes = this.customTimes.filter(function(bar) {
                        return bar.options.id === id;
                    });

                    if (customTimes.length === 0) {
                        throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
                    }

                    customTimes.forEach(function(customTime) {
                        this.customTimes.splice(this.customTimes.indexOf(customTime), 1);
                        this.components.splice(this.components.indexOf(customTime), 1);
                        customTime.destroy();
                    }.bind(this));
                };

                /**
                 * Get the id's of the currently visible items.
                 * @returns {Array} The ids of the visible items
                 */
                Core.prototype.getVisibleItems = function() {
                    return this.itemSet && this.itemSet.getVisibleItems() || [];
                };

                /**
                 * Set Core window such that it fits all items
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 * @param {Function} a callback funtion to be executed at the end of this function 
                 */
                Core.prototype.fit = function(options, callback) {
                    var range = this.getDataRange();

                    // skip range set if there is no min and max date
                    if (range.min === null && range.max === null) {
                        return;
                    }

                    // apply a margin of 1% left and right of the data
                    var interval = range.max - range.min;
                    var min = new Date(range.min.valueOf() - interval * 0.01);
                    var max = new Date(range.max.valueOf() + interval * 0.01);
                    var animation = options && options.animation !== undefined ? options.animation : true;
                    this.range.setRange(min, max, { animation: animation }, callback);
                };

                /**
                 * Calculate the data range of the items start and end dates
                 * @returns {{min: Date | null, max: Date | null}}
                 * @protected
                 */
                Core.prototype.getDataRange = function() {
                    // must be implemented by Timeline and Graph2d
                    throw new Error('Cannot invoke abstract method getDataRange');
                };

                /**
                 * Set the visible window. Both parameters are optional, you can change only
                 * start or only end. Syntax:
                 *
                 *     TimeLine.setWindow(start, end)
                 *     TimeLine.setWindow(start, end, options)
                 *     TimeLine.setWindow(range)
                 *
                 * Where start and end can be a Date, number, or string, and range is an
                 * object with properties start and end.
                 *
                 * @param {Date | Number | String | Object} [start] Start date of visible window
                 * @param {Date | Number | String} [end]            End date of visible window
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 * @param {Function} a callback funtion to be executed at the end of this function 
                 */
                Core.prototype.setWindow = function(start, end, options, callback) {
                    if (typeof arguments[2] == "function") {
                        callback = arguments[2];
                        options = {};
                    }
                    var animation;
                    if (arguments.length == 1) {
                        var range = arguments[0];
                        animation = range.animation !== undefined ? range.animation : true;
                        this.range.setRange(range.start, range.end, { animation: animation });
                    } else if (arguments.length == 2 && typeof arguments[1] == "function") {
                        var range = arguments[0];
                        callback = arguments[1];
                        animation = range.animation !== undefined ? range.animation : true;
                        this.range.setRange(range.start, range.end, { animation: animation }, callback);
                    } else {
                        animation = options && options.animation !== undefined ? options.animation : true;
                        this.range.setRange(start, end, { animation: animation }, callback);
                    }
                };

                /**
                 * Move the window such that given time is centered on screen.
                 * @param {Date | Number | String} time
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 * @param {Function} a callback funtion to be executed at the end of this function 
                 */
                Core.prototype.moveTo = function(time, options, callback) {
                    if (typeof arguments[1] == "function") {
                        callback = arguments[1];
                        options = {};
                    }
                    var interval = this.range.end - this.range.start;
                    var t = util.convert(time, 'Date').valueOf();

                    var start = t - interval / 2;
                    var end = t + interval / 2;
                    var animation = options && options.animation !== undefined ? options.animation : true;

                    this.range.setRange(start, end, { animation: animation }, callback);
                };

                /**
                 * Get the visible window
                 * @return {{start: Date, end: Date}}   Visible range
                 */
                Core.prototype.getWindow = function() {
                    var range = this.range.getRange();
                    return {
                        start: new Date(range.start),
                        end: new Date(range.end)
                    };
                };

                /**
                 * Zoom in the window such that given time is centered on screen.
                 * @param {Number} percentage - must be between [0..1]
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 * @param {Function} a callback funtion to be executed at the end of this function 
                 */
                Core.prototype.zoomIn = function(percentage, options, callback) {
                    if (!percentage || percentage < 0 || percentage > 1) return;
                    if (typeof arguments[1] == "function") {
                        callback = arguments[1];
                        options = {};
                    }
                    var range = this.getWindow();
                    var start = range.start.valueOf();
                    var end = range.end.valueOf();
                    var interval = end - start;
                    var newInterval = interval / (1 + percentage);
                    var distance = (interval - newInterval) / 2;
                    var newStart = start + distance;
                    var newEnd = end - distance;

                    this.setWindow(newStart, newEnd, options, callback);
                };

                /**
                 * Zoom out the window such that given time is centered on screen.
                 * @param {Number} percentage - must be between [0..1]
                 * @param {Object} [options]  Available options:
                 *                                `animation: boolean | {duration: number, easingFunction: string}`
                 *                                    If true (default), the range is animated
                 *                                    smoothly to the new window. An object can be
                 *                                    provided to specify duration and easing function.
                 *                                    Default duration is 500 ms, and default easing
                 *                                    function is 'easeInOutQuad'.
                 * @param {Function} a callback funtion to be executed at the end of this function 
                 */
                Core.prototype.zoomOut = function(percentage, options, callback) {
                    if (!percentage || percentage < 0 || percentage > 1) return;
                    if (typeof arguments[1] == "function") {
                        callback = arguments[1];
                        options = {};
                    }
                    var range = this.getWindow();
                    var start = range.start.valueOf();
                    var end = range.end.valueOf();
                    var interval = end - start;
                    var newStart = start - interval * percentage / 2;
                    var newEnd = end + interval * percentage / 2;

                    this.setWindow(newStart, newEnd, options, callback);
                };

                /**
                 * Force a redraw. Can be overridden by implementations of Core
                 *
                 * Note: this function will be overridden on construction with a trottled version
                 */
                Core.prototype.redraw = function() {
                    this._redraw();
                };

                /**
                 * Redraw for internal use. Redraws all components. See also the public
                 * method redraw.
                 * @protected
                 */
                Core.prototype._redraw = function() {
                    this.redrawCount++;
                    var resized = false;
                    var options = this.options;
                    var props = this.props;
                    var dom = this.dom;

                    if (!dom || !dom.container || dom.root.offsetWidth == 0) return; // when destroyed, or invisible

                    DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);

                    // update class names
                    if (options.orientation == 'top') {
                        util.addClassName(dom.root, 'vis-top');
                        util.removeClassName(dom.root, 'vis-bottom');
                    } else {
                        util.removeClassName(dom.root, 'vis-top');
                        util.addClassName(dom.root, 'vis-bottom');
                    }

                    // update root width and height options
                    dom.root.style.maxHeight = util.option.asSize(options.maxHeight, '');
                    dom.root.style.minHeight = util.option.asSize(options.minHeight, '');
                    dom.root.style.width = util.option.asSize(options.width, '');

                    // calculate border widths
                    props.border.left = (dom.centerContainer.offsetWidth - dom.centerContainer.clientWidth) / 2;
                    props.border.right = props.border.left;
                    props.border.top = (dom.centerContainer.offsetHeight - dom.centerContainer.clientHeight) / 2;
                    props.border.bottom = props.border.top;
                    props.borderRootHeight = dom.root.offsetHeight - dom.root.clientHeight;
                    props.borderRootWidth = dom.root.offsetWidth - dom.root.clientWidth;

                    // workaround for a bug in IE: the clientWidth of an element with
                    // a height:0px and overflow:hidden is not calculated and always has value 0
                    if (dom.centerContainer.clientHeight === 0) {
                        props.border.left = props.border.top;
                        props.border.right = props.border.left;
                    }
                    if (dom.root.clientHeight === 0) {
                        props.borderRootWidth = props.borderRootHeight;
                    }

                    // calculate the heights. If any of the side panels is empty, we set the height to
                    // minus the border width, such that the border will be invisible
                    props.center.height = dom.center.offsetHeight;
                    props.left.height = dom.left.offsetHeight;
                    props.right.height = dom.right.offsetHeight;
                    props.top.height = dom.top.clientHeight || -props.border.top;
                    props.bottom.height = dom.bottom.clientHeight || -props.border.bottom;

                    // TODO: compensate borders when any of the panels is empty.

                    // apply auto height
                    // TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)
                    var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
                    var autoHeight = props.top.height + contentHeight + props.bottom.height + props.borderRootHeight + props.border.top + props.border.bottom;
                    dom.root.style.height = util.option.asSize(options.height, autoHeight + 'px');

                    // calculate heights of the content panels
                    props.root.height = dom.root.offsetHeight;
                    props.background.height = props.root.height - props.borderRootHeight;
                    var containerHeight = props.root.height - props.top.height - props.bottom.height - props.borderRootHeight;
                    props.centerContainer.height = containerHeight;
                    props.leftContainer.height = containerHeight;
                    props.rightContainer.height = props.leftContainer.height;

                    // calculate the widths of the panels
                    props.root.width = dom.root.offsetWidth;
                    props.background.width = props.root.width - props.borderRootWidth;

                    if (!this.initialDrawDone) {
                        props.scrollbarWidth = util.getScrollBarWidth();
                    }

                    if (options.verticalScroll) {
                        if (options.rtl) {
                            props.left.width = dom.leftContainer.clientWidth || -props.border.left;
                            props.right.width = dom.rightContainer.clientWidth + props.scrollbarWidth || -props.border.right;
                        } else {
                            props.left.width = dom.leftContainer.clientWidth + props.scrollbarWidth || -props.border.left;
                            props.right.width = dom.rightContainer.clientWidth || -props.border.right;
                        }
                    } else {
                        props.left.width = dom.leftContainer.clientWidth || -props.border.left;
                        props.right.width = dom.rightContainer.clientWidth || -props.border.right;
                    }

                    this._setDOM();

                    // update the scrollTop, feasible range for the offset can be changed
                    // when the height of the Core or of the contents of the center changed
                    var offset = this._updateScrollTop();

                    // reposition the scrollable contents
                    if (options.orientation.item != 'top') {
                        offset += Math.max(props.centerContainer.height - props.center.height - props.border.top - props.border.bottom, 0);
                    }
                    dom.center.style.top = offset + 'px';

                    // show shadows when vertical scrolling is available
                    var visibilityTop = props.scrollTop == 0 ? 'hidden' : '';
                    var visibilityBottom = props.scrollTop == props.scrollTopMin ? 'hidden' : '';
                    dom.shadowTop.style.visibility = visibilityTop;
                    dom.shadowBottom.style.visibility = visibilityBottom;
                    dom.shadowTopLeft.style.visibility = visibilityTop;
                    dom.shadowBottomLeft.style.visibility = visibilityBottom;
                    dom.shadowTopRight.style.visibility = visibilityTop;
                    dom.shadowBottomRight.style.visibility = visibilityBottom;

                    if (options.verticalScroll) {
                        dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
                        dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';

                        dom.shadowTopRight.style.visibility = "hidden";
                        dom.shadowBottomRight.style.visibility = "hidden";
                        dom.shadowTopLeft.style.visibility = "hidden";
                        dom.shadowBottomLeft.style.visibility = "hidden";

                        dom.left.style.top = '0px';
                        dom.right.style.top = '0px';
                    }

                    if (!options.verticalScroll || props.center.height < props.centerContainer.height) {
                        dom.left.style.top = offset + 'px';
                        dom.right.style.top = offset + 'px';
                        dom.rightContainer.className = dom.rightContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
                        dom.leftContainer.className = dom.leftContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
                        props.left.width = dom.leftContainer.clientWidth || -props.border.left;
                        props.right.width = dom.rightContainer.clientWidth || -props.border.right;
                        this._setDOM();
                    }

                    // enable/disable vertical panning
                    var contentsOverflow = props.center.height > props.centerContainer.height;
                    this.hammer.get('pan').set({
                        direction: contentsOverflow ? Hammer.DIRECTION_ALL : Hammer.DIRECTION_HORIZONTAL
                    });

                    // redraw all components
                    this.components.forEach(function(component) {
                        resized = component.redraw() || resized;
                    });
                    var MAX_REDRAW = 5;
                    if (resized) {
                        if (this.redrawCount < MAX_REDRAW) {
                            this.body.emitter.emit('_change');
                            return;
                        } else {
                            console.log('WARNING: infinite loop in redraw?');
                        }
                    } else {
                        this.redrawCount = 0;
                    }
                    this.initialDrawDone = true;

                    //Emit public 'changed' event for UI updates, see issue #1592
                    this.body.emitter.emit("changed");
                };

                Core.prototype._setDOM = function() {
                    var props = this.props;
                    var dom = this.dom;

                    props.leftContainer.width = props.left.width;
                    props.rightContainer.width = props.right.width;
                    var centerWidth = props.root.width - props.left.width - props.right.width - props.borderRootWidth;
                    props.center.width = centerWidth;
                    props.centerContainer.width = centerWidth;
                    props.top.width = centerWidth;
                    props.bottom.width = centerWidth;

                    // resize the panels
                    dom.background.style.height = props.background.height + 'px';
                    dom.backgroundVertical.style.height = props.background.height + 'px';
                    dom.backgroundHorizontal.style.height = props.centerContainer.height + 'px';
                    dom.centerContainer.style.height = props.centerContainer.height + 'px';
                    dom.leftContainer.style.height = props.leftContainer.height + 'px';
                    dom.rightContainer.style.height = props.rightContainer.height + 'px';

                    dom.background.style.width = props.background.width + 'px';
                    dom.backgroundVertical.style.width = props.centerContainer.width + 'px';
                    dom.backgroundHorizontal.style.width = props.background.width + 'px';
                    dom.centerContainer.style.width = props.center.width + 'px';
                    dom.top.style.width = props.top.width + 'px';
                    dom.bottom.style.width = props.bottom.width + 'px';

                    // reposition the panels
                    dom.background.style.left = '0';
                    dom.background.style.top = '0';
                    dom.backgroundVertical.style.left = props.left.width + props.border.left + 'px';
                    dom.backgroundVertical.style.top = '0';
                    dom.backgroundHorizontal.style.left = '0';
                    dom.backgroundHorizontal.style.top = props.top.height + 'px';
                    dom.centerContainer.style.left = props.left.width + 'px';
                    dom.centerContainer.style.top = props.top.height + 'px';
                    dom.leftContainer.style.left = '0';
                    dom.leftContainer.style.top = props.top.height + 'px';
                    dom.rightContainer.style.left = props.left.width + props.center.width + 'px';
                    dom.rightContainer.style.top = props.top.height + 'px';
                    dom.top.style.left = props.left.width + 'px';
                    dom.top.style.top = '0';
                    dom.bottom.style.left = props.left.width + 'px';
                    dom.bottom.style.top = props.top.height + props.centerContainer.height + 'px';
                    dom.center.style.left = '0';
                    dom.left.style.left = '0';
                    dom.right.style.left = '0';
                };

                // TODO: deprecated since version 1.1.0, remove some day
                Core.prototype.repaint = function() {
                    throw new Error('Function repaint is deprecated. Use redraw instead.');
                };

                /**
                 * Set a current time. This can be used for example to ensure that a client's
                 * time is synchronized with a shared server time.
                 * Only applicable when option `showCurrentTime` is true.
                 * @param {Date | String | Number} time     A Date, unix timestamp, or
                 *                                          ISO date string.
                 */
                Core.prototype.setCurrentTime = function(time) {
                    if (!this.currentTime) {
                        throw new Error('Option showCurrentTime must be true');
                    }

                    this.currentTime.setCurrentTime(time);
                };

                /**
                 * Get the current time.
                 * Only applicable when option `showCurrentTime` is true.
                 * @return {Date} Returns the current time.
                 */
                Core.prototype.getCurrentTime = function() {
                    if (!this.currentTime) {
                        throw new Error('Option showCurrentTime must be true');
                    }

                    return this.currentTime.getCurrentTime();
                };

                /**
                 * Convert a position on screen (pixels) to a datetime
                 * @param {int}     x    Position on the screen in pixels
                 * @return {Date}   time The datetime the corresponds with given position x
                 * @protected
                 */
                // TODO: move this function to Range
                Core.prototype._toTime = function(x) {
                    return DateUtil.toTime(this, x, this.props.center.width);
                };

                /**
                 * Convert a position on the global screen (pixels) to a datetime
                 * @param {int}     x    Position on the screen in pixels
                 * @return {Date}   time The datetime the corresponds with given position x
                 * @protected
                 */
                // TODO: move this function to Range
                Core.prototype._toGlobalTime = function(x) {
                    return DateUtil.toTime(this, x, this.props.root.width);
                    //var conversion = this.range.conversion(this.props.root.width);
                    //return new Date(x / conversion.scale + conversion.offset);
                };

                /**
                 * Convert a datetime (Date object) into a position on the screen
                 * @param {Date}   time A date
                 * @return {int}   x    The position on the screen in pixels which corresponds
                 *                      with the given date.
                 * @protected
                 */
                // TODO: move this function to Range
                Core.prototype._toScreen = function(time) {
                    return DateUtil.toScreen(this, time, this.props.center.width);
                };

                /**
                 * Convert a datetime (Date object) into a position on the root
                 * This is used to get the pixel density estimate for the screen, not the center panel
                 * @param {Date}   time A date
                 * @return {int}   x    The position on root in pixels which corresponds
                 *                      with the given date.
                 * @protected
                 */
                // TODO: move this function to Range
                Core.prototype._toGlobalScreen = function(time) {
                    return DateUtil.toScreen(this, time, this.props.root.width);
                    //var conversion = this.range.conversion(this.props.root.width);
                    //return (time.valueOf() - conversion.offset) * conversion.scale;
                };

                /**
                 * Initialize watching when option autoResize is true
                 * @private
                 */
                Core.prototype._initAutoResize = function() {
                    if (this.options.autoResize == true) {
                        this._startAutoResize();
                    } else {
                        this._stopAutoResize();
                    }
                };

                /**
                 * Watch for changes in the size of the container. On resize, the Panel will
                 * automatically redraw itself.
                 * @private
                 */
                Core.prototype._startAutoResize = function() {
                    var me = this;

                    this._stopAutoResize();

                    this._onResize = function() {
                        if (me.options.autoResize != true) {
                            // stop watching when the option autoResize is changed to false
                            me._stopAutoResize();
                            return;
                        }

                        if (me.dom.root) {
                            // check whether the frame is resized
                            // Note: we compare offsetWidth here, not clientWidth. For some reason,
                            // IE does not restore the clientWidth from 0 to the actual width after
                            // changing the timeline's container display style from none to visible
                            if (me.dom.root.offsetWidth != me.props.lastWidth || me.dom.root.offsetHeight != me.props.lastHeight) {
                                me.props.lastWidth = me.dom.root.offsetWidth;
                                me.props.lastHeight = me.dom.root.offsetHeight;
                                me.props.scrollbarWidth = util.getScrollBarWidth();

                                me.body.emitter.emit('_change');
                            }
                        }
                    };

                    // add event listener to window resize
                    util.addEventListener(window, 'resize', this._onResize);

                    //Prevent initial unnecessary redraw
                    if (me.dom.root) {
                        me.props.lastWidth = me.dom.root.offsetWidth;
                        me.props.lastHeight = me.dom.root.offsetHeight;
                    }

                    this.watchTimer = setInterval(this._onResize, 1000);
                };

                /**
                 * Stop watching for a resize of the frame.
                 * @private
                 */
                Core.prototype._stopAutoResize = function() {
                    if (this.watchTimer) {
                        clearInterval(this.watchTimer);
                        this.watchTimer = undefined;
                    }

                    // remove event listener on window.resize
                    if (this._onResize) {
                        util.removeEventListener(window, 'resize', this._onResize);
                        this._onResize = null;
                    }
                };

                /**
                 * Start moving the timeline vertically
                 * @param {Event} event
                 * @private
                 */
                Core.prototype._onTouch = function(event) {
                    this.touch.allowDragging = true;
                    this.touch.initialScrollTop = this.props.scrollTop;
                };

                /**
                 * Start moving the timeline vertically
                 * @param {Event} event
                 * @private
                 */
                Core.prototype._onPinch = function(event) {
                    this.touch.allowDragging = false;
                };

                /**
                 * Move the timeline vertically
                 * @param {Event} event
                 * @private
                 */
                Core.prototype._onDrag = function(event) {
                    if (!event) return;
                    // refuse to drag when we where pinching to prevent the timeline make a jump
                    // when releasing the fingers in opposite order from the touch screen
                    if (!this.touch.allowDragging) return;

                    var delta = event.deltaY;

                    var oldScrollTop = this._getScrollTop();
                    var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);

                    if (this.options.verticalScroll) {
                        this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
                        this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
                    }

                    if (newScrollTop != oldScrollTop) {
                        this.emit("verticalDrag");
                    }
                };

                /**
                 * Apply a scrollTop
                 * @param {Number} scrollTop
                 * @returns {Number} scrollTop  Returns the applied scrollTop
                 * @private
                 */
                Core.prototype._setScrollTop = function(scrollTop) {
                    this.props.scrollTop = scrollTop;
                    this._updateScrollTop();
                    return this.props.scrollTop;
                };

                /**
                 * Update the current scrollTop when the height of  the containers has been changed
                 * @returns {Number} scrollTop  Returns the applied scrollTop
                 * @private
                 */
                Core.prototype._updateScrollTop = function() {
                    // recalculate the scrollTopMin
                    var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.center.height, 0); // is negative or zero
                    if (scrollTopMin != this.props.scrollTopMin) {
                        // in case of bottom orientation, change the scrollTop such that the contents
                        // do not move relative to the time axis at the bottom
                        if (this.options.orientation.item != 'top') {
                            this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
                        }
                        this.props.scrollTopMin = scrollTopMin;
                    }

                    // limit the scrollTop to the feasible scroll range
                    if (this.props.scrollTop > 0) this.props.scrollTop = 0;
                    if (this.props.scrollTop < scrollTopMin) this.props.scrollTop = scrollTopMin;

                    if (this.options.verticalScroll) {
                        this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
                        this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
                    }

                    return this.props.scrollTop;
                };

                /**
                 * Get the current scrollTop
                 * @returns {number} scrollTop
                 * @private
                 */
                Core.prototype._getScrollTop = function() {
                    return this.props.scrollTop;
                };

                /**
                 * Load a configurator
                 * @return {Object}
                 * @private
                 */
                Core.prototype._createConfigurator = function() {
                    throw new Error('Cannot invoke abstract method _createConfigurator');
                };

                module.exports = Core;

                /***/
            }),
            /* 123 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Hammer = __webpack_require__(112);
                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var TimeStep = __webpack_require__(124);
                var Component = __webpack_require__(120);
                var Group = __webpack_require__(125);
                var BackgroundGroup = __webpack_require__(129);
                var BoxItem = __webpack_require__(130);
                var PointItem = __webpack_require__(131);
                var RangeItem = __webpack_require__(127);
                var BackgroundItem = __webpack_require__(132);
                var Popup = __webpack_require__(133)['default'];

                var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items
                var BACKGROUND = '__background__'; // reserved group id for background items without group

                /**
                 * An ItemSet holds a set of items and ranges which can be displayed in a
                 * range. The width is determined by the parent of the ItemSet, and the height
                 * is determined by the size of the items.
                 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
                 * @param {Object} [options]      See ItemSet.setOptions for the available options.
                 * @constructor ItemSet
                 * @extends Component
                 */
                function ItemSet(body, options) {
                    this.body = body;
                    this.defaultOptions = {
                        type: null, // 'box', 'point', 'range', 'background'
                        orientation: {
                            item: 'bottom' // item orientation: 'top' or 'bottom'
                        },
                        align: 'auto', // alignment of box items
                        stack: true,
                        stackSubgroups: true,
                        groupOrderSwap: function groupOrderSwap(fromGroup, toGroup, groups) {
                            var targetOrder = toGroup.order;
                            toGroup.order = fromGroup.order;
                            fromGroup.order = targetOrder;
                        },
                        groupOrder: 'order',

                        selectable: true,
                        multiselect: false,
                        itemsAlwaysDraggable: false,

                        editable: {
                            updateTime: false,
                            updateGroup: false,
                            add: false,
                            remove: false,
                            overrideItems: false
                        },

                        groupEditable: {
                            order: false,
                            add: false,
                            remove: false
                        },

                        snap: TimeStep.snap,

                        onAdd: function onAdd(item, callback) {
                            callback(item);
                        },
                        onUpdate: function onUpdate(item, callback) {
                            callback(item);
                        },
                        onMove: function onMove(item, callback) {
                            callback(item);
                        },
                        onRemove: function onRemove(item, callback) {
                            callback(item);
                        },
                        onMoving: function onMoving(item, callback) {
                            callback(item);
                        },
                        onAddGroup: function onAddGroup(item, callback) {
                            callback(item);
                        },
                        onMoveGroup: function onMoveGroup(item, callback) {
                            callback(item);
                        },
                        onRemoveGroup: function onRemoveGroup(item, callback) {
                            callback(item);
                        },

                        margin: {
                            item: {
                                horizontal: 10,
                                vertical: 10
                            },
                            axis: 20
                        },

                        showTooltips: true,

                        tooltip: {
                            followMouse: false,
                            overflowMethod: 'flip'
                        },

                        tooltipOnItemUpdateTime: false
                    };

                    // options is shared by this ItemSet and all its items
                    this.options = util.extend({}, this.defaultOptions);
                    this.options.rtl = options.rtl;

                    // options for getting items from the DataSet with the correct type
                    this.itemOptions = {
                        type: { start: 'Date', end: 'Date' }
                    };

                    this.conversion = {
                        toScreen: body.util.toScreen,
                        toTime: body.util.toTime
                    };
                    this.dom = {};
                    this.props = {};
                    this.hammer = null;

                    var me = this;
                    this.itemsData = null; // DataSet
                    this.groupsData = null; // DataSet

                    // listeners for the DataSet of the items
                    this.itemListeners = {
                        'add': function add(event, params, senderId) {
                            me._onAdd(params.items);
                        },
                        'update': function update(event, params, senderId) {
                            me._onUpdate(params.items);
                        },
                        'remove': function remove(event, params, senderId) {
                            me._onRemove(params.items);
                        }
                    };

                    // listeners for the DataSet of the groups
                    this.groupListeners = {
                        'add': function add(event, params, senderId) {
                            me._onAddGroups(params.items);
                        },
                        'update': function update(event, params, senderId) {
                            me._onUpdateGroups(params.items);
                        },
                        'remove': function remove(event, params, senderId) {
                            me._onRemoveGroups(params.items);
                        }
                    };

                    this.items = {}; // object with an Item for every data item
                    this.groups = {}; // Group object for every group
                    this.groupIds = [];

                    this.selection = []; // list with the ids of all selected nodes

                    this.popup = null;

                    this.touchParams = {}; // stores properties while dragging
                    this.groupTouchParams = {};
                    // create the HTML DOM

                    this._create();

                    this.setOptions(options);
                }

                ItemSet.prototype = new Component();

                // available item types will be registered here
                ItemSet.types = {
                    background: BackgroundItem,
                    box: BoxItem,
                    range: RangeItem,
                    point: PointItem
                };

                /**
                 * Create the HTML DOM for the ItemSet
                 */
                ItemSet.prototype._create = function() {
                    var frame = document.createElement('div');
                    frame.className = 'vis-itemset';
                    frame['timeline-itemset'] = this;
                    this.dom.frame = frame;

                    // create background panel
                    var background = document.createElement('div');
                    background.className = 'vis-background';
                    frame.appendChild(background);
                    this.dom.background = background;

                    // create foreground panel
                    var foreground = document.createElement('div');
                    foreground.className = 'vis-foreground';
                    frame.appendChild(foreground);
                    this.dom.foreground = foreground;

                    // create axis panel
                    var axis = document.createElement('div');
                    axis.className = 'vis-axis';
                    this.dom.axis = axis;

                    // create labelset
                    var labelSet = document.createElement('div');
                    labelSet.className = 'vis-labelset';
                    this.dom.labelSet = labelSet;

                    // create ungrouped Group
                    this._updateUngrouped();

                    // create background Group
                    var backgroundGroup = new BackgroundGroup(BACKGROUND, null, this);
                    backgroundGroup.show();
                    this.groups[BACKGROUND] = backgroundGroup;

                    // attach event listeners
                    // Note: we bind to the centerContainer for the case where the height
                    //       of the center container is larger than of the ItemSet, so we
                    //       can click in the empty area to create a new item or deselect an item.
                    this.hammer = new Hammer(this.body.dom.centerContainer);

                    // drag items when selected
                    this.hammer.on('hammer.input', function(event) {
                        if (event.isFirst) {
                            this._onTouch(event);
                        }
                    }.bind(this));
                    this.hammer.on('panstart', this._onDragStart.bind(this));
                    this.hammer.on('panmove', this._onDrag.bind(this));
                    this.hammer.on('panend', this._onDragEnd.bind(this));
                    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });

                    // single select (or unselect) when tapping an item
                    this.hammer.on('tap', this._onSelectItem.bind(this));

                    // multi select when holding mouse/touch, or on ctrl+click
                    this.hammer.on('press', this._onMultiSelectItem.bind(this));

                    // add item on doubletap
                    this.hammer.on('doubletap', this._onAddItem.bind(this));

                    if (this.options.rtl) {
                        this.groupHammer = new Hammer(this.body.dom.rightContainer);
                    } else {
                        this.groupHammer = new Hammer(this.body.dom.leftContainer);
                    }

                    this.groupHammer.on('tap', this._onGroupClick.bind(this));
                    this.groupHammer.on('panstart', this._onGroupDragStart.bind(this));
                    this.groupHammer.on('panmove', this._onGroupDrag.bind(this));
                    this.groupHammer.on('panend', this._onGroupDragEnd.bind(this));
                    this.groupHammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_VERTICAL });

                    this.body.dom.centerContainer.addEventListener('mouseover', this._onMouseOver.bind(this));
                    this.body.dom.centerContainer.addEventListener('mouseout', this._onMouseOut.bind(this));
                    this.body.dom.centerContainer.addEventListener('mousemove', this._onMouseMove.bind(this));
                    // right-click on timeline 
                    this.body.dom.centerContainer.addEventListener('contextmenu', this._onDragEnd.bind(this));

                    this.body.dom.centerContainer.addEventListener('mousewheel', this._onMouseWheel.bind(this));

                    // attach to the DOM
                    this.show();
                };

                /**
                 * Set options for the ItemSet. Existing options will be extended/overwritten.
                 * @param {Object} [options] The following options are available:
                 *                           {String} type
                 *                              Default type for the items. Choose from 'box'
                 *                              (default), 'point', 'range', or 'background'.
                 *                              The default style can be overwritten by
                 *                              individual items.
                 *                           {String} align
                 *                              Alignment for the items, only applicable for
                 *                              BoxItem. Choose 'center' (default), 'left', or
                 *                              'right'.
                 *                           {String} orientation.item
                 *                              Orientation of the item set. Choose 'top' or
                 *                              'bottom' (default).
                 *                           {Function} groupOrder
                 *                              A sorting function for ordering groups
                 *                           {Boolean} stack
                 *                              If true (default), items will be stacked on
                 *                              top of each other.
                 *                           {Number} margin.axis
                 *                              Margin between the axis and the items in pixels.
                 *                              Default is 20.
                 *                           {Number} margin.item.horizontal
                 *                              Horizontal margin between items in pixels.
                 *                              Default is 10.
                 *                           {Number} margin.item.vertical
                 *                              Vertical Margin between items in pixels.
                 *                              Default is 10.
                 *                           {Number} margin.item
                 *                              Margin between items in pixels in both horizontal
                 *                              and vertical direction. Default is 10.
                 *                           {Number} margin
                 *                              Set margin for both axis and items in pixels.
                 *                           {Boolean} selectable
                 *                              If true (default), items can be selected.
                 *                           {Boolean} multiselect
                 *                              If true, multiple items can be selected.
                 *                              False by default.
                 *                           {Boolean} editable
                 *                              Set all editable options to true or false
                 *                           {Boolean} editable.updateTime
                 *                              Allow dragging an item to an other moment in time
                 *                           {Boolean} editable.updateGroup
                 *                              Allow dragging an item to an other group
                 *                           {Boolean} editable.add
                 *                              Allow creating new items on double tap
                 *                           {Boolean} editable.remove
                 *                              Allow removing items by clicking the delete button
                 *                              top right of a selected item.
                 *                           {Function(item: Item, callback: Function)} onAdd
                 *                              Callback function triggered when an item is about to be added:
                 *                              when the user double taps an empty space in the Timeline.
                 *                           {Function(item: Item, callback: Function)} onUpdate
                 *                              Callback function fired when an item is about to be updated.
                 *                              This function typically has to show a dialog where the user
                 *                              change the item. If not implemented, nothing happens.
                 *                           {Function(item: Item, callback: Function)} onMove
                 *                              Fired when an item has been moved. If not implemented,
                 *                              the move action will be accepted.
                 *                           {Function(item: Item, callback: Function)} onRemove
                 *                              Fired when an item is about to be deleted.
                 *                              If not implemented, the item will be always removed.
                 */
                ItemSet.prototype.setOptions = function(options) {
                    if (options) {
                        // copy all options that we know
                        var fields = ['type', 'rtl', 'align', 'order', 'stack', 'stackSubgroups', 'selectable', 'multiselect', 'itemsAlwaysDraggable', 'multiselectPerGroup', 'groupOrder', 'dataAttributes', 'template', 'groupTemplate', 'visibleFrameTemplate', 'hide', 'snap', 'groupOrderSwap', 'showTooltips', 'tooltip', 'tooltipOnItemUpdateTime'];
                        util.selectiveExtend(fields, this.options, options);

                        if ('orientation' in options) {
                            if (typeof options.orientation === 'string') {
                                this.options.orientation.item = options.orientation === 'top' ? 'top' : 'bottom';
                            } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'item' in options.orientation) {
                                this.options.orientation.item = options.orientation.item;
                            }
                        }

                        if ('margin' in options) {
                            if (typeof options.margin === 'number') {
                                this.options.margin.axis = options.margin;
                                this.options.margin.item.horizontal = options.margin;
                                this.options.margin.item.vertical = options.margin;
                            } else if ((0, _typeof3['default'])(options.margin) === 'object') {
                                util.selectiveExtend(['axis'], this.options.margin, options.margin);
                                if ('item' in options.margin) {
                                    if (typeof options.margin.item === 'number') {
                                        this.options.margin.item.horizontal = options.margin.item;
                                        this.options.margin.item.vertical = options.margin.item;
                                    } else if ((0, _typeof3['default'])(options.margin.item) === 'object') {
                                        util.selectiveExtend(['horizontal', 'vertical'], this.options.margin.item, options.margin.item);
                                    }
                                }
                            }
                        }

                        if ('editable' in options) {
                            if (typeof options.editable === 'boolean') {
                                this.options.editable.updateTime = options.editable;
                                this.options.editable.updateGroup = options.editable;
                                this.options.editable.add = options.editable;
                                this.options.editable.remove = options.editable;
                                this.options.editable.overrideItems = false;
                            } else if ((0, _typeof3['default'])(options.editable) === 'object') {
                                util.selectiveExtend(['updateTime', 'updateGroup', 'add', 'remove', 'overrideItems'], this.options.editable, options.editable);
                            }
                        }

                        if ('groupEditable' in options) {
                            if (typeof options.groupEditable === 'boolean') {
                                this.options.groupEditable.order = options.groupEditable;
                                this.options.groupEditable.add = options.groupEditable;
                                this.options.groupEditable.remove = options.groupEditable;
                            } else if ((0, _typeof3['default'])(options.groupEditable) === 'object') {
                                util.selectiveExtend(['order', 'add', 'remove'], this.options.groupEditable, options.groupEditable);
                            }
                        }

                        // callback functions
                        var addCallback = function(name) {
                            var fn = options[name];
                            if (fn) {
                                if (!(fn instanceof Function)) {
                                    throw new Error('option ' + name + ' must be a function ' + name + '(item, callback)');
                                }
                                this.options[name] = fn;
                            }
                        }.bind(this);
                        ['onAdd', 'onUpdate', 'onRemove', 'onMove', 'onMoving', 'onAddGroup', 'onMoveGroup', 'onRemoveGroup'].forEach(addCallback);

                        // force the itemSet to refresh: options like orientation and margins may be changed
                        this.markDirty();
                    }
                };

                /**
                 * Mark the ItemSet dirty so it will refresh everything with next redraw.
                 * Optionally, all items can be marked as dirty and be refreshed.
                 * @param {{refreshItems: boolean}} [options]
                 */
                ItemSet.prototype.markDirty = function(options) {
                    this.groupIds = [];

                    if (options && options.refreshItems) {
                        util.forEach(this.items, function(item) {
                            item.dirty = true;
                            if (item.displayed) item.redraw();
                        });
                    }
                };

                /**
                 * Destroy the ItemSet
                 */
                ItemSet.prototype.destroy = function() {
                    this.hide();
                    this.setItems(null);
                    this.setGroups(null);

                    this.hammer = null;

                    this.body = null;
                    this.conversion = null;
                };

                /**
                 * Hide the component from the DOM
                 */
                ItemSet.prototype.hide = function() {
                    // remove the frame containing the items
                    if (this.dom.frame.parentNode) {
                        this.dom.frame.parentNode.removeChild(this.dom.frame);
                    }

                    // remove the axis with dots
                    if (this.dom.axis.parentNode) {
                        this.dom.axis.parentNode.removeChild(this.dom.axis);
                    }

                    // remove the labelset containing all group labels
                    if (this.dom.labelSet.parentNode) {
                        this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
                    }
                };

                /**
                 * Show the component in the DOM (when not already visible).
                 * @return {Boolean} changed
                 */
                ItemSet.prototype.show = function() {
                    // show frame containing the items
                    if (!this.dom.frame.parentNode) {
                        this.body.dom.center.appendChild(this.dom.frame);
                    }

                    // show axis with dots
                    if (!this.dom.axis.parentNode) {
                        this.body.dom.backgroundVertical.appendChild(this.dom.axis);
                    }

                    // show labelset containing labels
                    if (!this.dom.labelSet.parentNode) {
                        if (this.options.rtl) {
                            this.body.dom.right.appendChild(this.dom.labelSet);
                        } else {
                            this.body.dom.left.appendChild(this.dom.labelSet);
                        }
                    }
                };

                /**
                 * Set selected items by their id. Replaces the current selection
                 * Unknown id's are silently ignored.
                 * @param {string[] | string} [ids] An array with zero or more id's of the items to be
                 *                                  selected, or a single item id. If ids is undefined
                 *                                  or an empty array, all items will be unselected.
                 */
                ItemSet.prototype.setSelection = function(ids) {
                    var i, ii, id, item;

                    if (ids == undefined) ids = [];
                    if (!Array.isArray(ids)) ids = [ids];

                    // unselect currently selected items
                    for (i = 0, ii = this.selection.length; i < ii; i++) {
                        id = this.selection[i];
                        item = this.items[id];
                        if (item) item.unselect();
                    }

                    // select items
                    this.selection = [];
                    for (i = 0, ii = ids.length; i < ii; i++) {
                        id = ids[i];
                        item = this.items[id];
                        if (item) {
                            this.selection.push(id);
                            item.select();
                        }
                    }
                };

                /**
                 * Get the selected items by their id
                 * @return {Array} ids  The ids of the selected items
                 */
                ItemSet.prototype.getSelection = function() {
                    return this.selection.concat([]);
                };

                /**
                 * Get the id's of the currently visible items.
                 * @returns {Array} The ids of the visible items
                 */
                ItemSet.prototype.getVisibleItems = function() {
                    var range = this.body.range.getRange();

                    if (this.options.rtl) {
                        var right = this.body.util.toScreen(range.start);
                        var left = this.body.util.toScreen(range.end);
                    } else {
                        var left = this.body.util.toScreen(range.start);
                        var right = this.body.util.toScreen(range.end);
                    }

                    var ids = [];
                    for (var groupId in this.groups) {
                        if (this.groups.hasOwnProperty(groupId)) {
                            var group = this.groups[groupId];
                            var rawVisibleItems = group.isVisible ? group.visibleItems : [];

                            // filter the "raw" set with visibleItems into a set which is really
                            // visible by pixels
                            for (var i = 0; i < rawVisibleItems.length; i++) {
                                var item = rawVisibleItems[i];
                                // TODO: also check whether visible vertically
                                if (this.options.rtl) {
                                    if (item.right < left && item.right + item.width > right) {
                                        ids.push(item.id);
                                    }
                                } else {
                                    if (item.left < right && item.left + item.width > left) {
                                        ids.push(item.id);
                                    }
                                }
                            }
                        }
                    }

                    return ids;
                };

                /**
                 * Deselect a selected item
                 * @param {String | Number} id
                 * @private
                 */
                ItemSet.prototype._deselect = function(id) {
                    var selection = this.selection;
                    for (var i = 0, ii = selection.length; i < ii; i++) {
                        if (selection[i] == id) {
                            // non-strict comparison!
                            selection.splice(i, 1);
                            break;
                        }
                    }
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                ItemSet.prototype.redraw = function() {
                    var margin = this.options.margin,
                        range = this.body.range,
                        asSize = util.option.asSize,
                        options = this.options,
                        orientation = options.orientation.item,
                        resized = false,
                        frame = this.dom.frame;

                    // recalculate absolute position (before redrawing groups)
                    this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;

                    if (this.options.rtl) {
                        this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
                    } else {
                        this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
                    }

                    // update class name
                    frame.className = 'vis-itemset';

                    // reorder the groups (if needed)
                    resized = this._orderGroups() || resized;

                    // check whether zoomed (in that case we need to re-stack everything)
                    // TODO: would be nicer to get this as a trigger from Range
                    var visibleInterval = range.end - range.start;
                    var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
                    var scrolled = range.start != this.lastRangeStart;
                    var forceRestack = zoomed || scrolled;
                    this.lastVisibleInterval = visibleInterval;
                    this.lastRangeStart = range.start;
                    this.props.lastWidth = this.props.width;

                    var firstGroup = this._firstGroup();
                    var firstMargin = {
                        item: margin.item,
                        axis: margin.axis
                    };
                    var nonFirstMargin = {
                        item: margin.item,
                        axis: margin.item.vertical / 2
                    };
                    var height = 0;
                    var minHeight = margin.axis + margin.item.vertical;

                    // redraw the background group
                    this.groups[BACKGROUND].redraw(range, nonFirstMargin, forceRestack);

                    // redraw all regular groups
                    util.forEach(this.groups, function(group) {
                        var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
                        var groupResized = group.redraw(range, groupMargin, forceRestack);
                        resized = groupResized || resized;
                        height += group.height;
                    });
                    height = Math.max(height, minHeight);

                    // update frame height
                    frame.style.height = asSize(height);

                    // calculate actual size
                    this.props.width = frame.offsetWidth;
                    this.props.height = height;

                    // reposition axis
                    this.dom.axis.style.top = asSize(orientation == 'top' ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);
                    if (this.options.rtl) {
                        this.dom.axis.style.right = '0';
                    } else {
                        this.dom.axis.style.left = '0';
                    }

                    this.initialItemSetDrawn = true;
                    // check if this component is resized
                    resized = this._isResized() || resized;

                    return resized;
                };

                /**
                 * Get the first group, aligned with the axis
                 * @return {Group | null} firstGroup
                 * @private
                 */
                ItemSet.prototype._firstGroup = function() {
                    var firstGroupIndex = this.options.orientation.item == 'top' ? 0 : this.groupIds.length - 1;
                    var firstGroupId = this.groupIds[firstGroupIndex];
                    var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED];

                    return firstGroup || null;
                };

                /**
                 * Create or delete the group holding all ungrouped items. This group is used when
                 * there are no groups specified.
                 * @protected
                 */
                ItemSet.prototype._updateUngrouped = function() {
                    var ungrouped = this.groups[UNGROUPED];
                    var background = this.groups[BACKGROUND];
                    var item, itemId;

                    if (this.groupsData) {
                        // remove the group holding all ungrouped items
                        if (ungrouped) {
                            ungrouped.hide();
                            delete this.groups[UNGROUPED];

                            for (itemId in this.items) {
                                if (this.items.hasOwnProperty(itemId)) {
                                    item = this.items[itemId];
                                    item.parent && item.parent.remove(item);
                                    var groupId = this._getGroupId(item.data);
                                    var group = this.groups[groupId];
                                    group && group.add(item) || item.hide();
                                }
                            }
                        }
                    } else {
                        // create a group holding all (unfiltered) items
                        if (!ungrouped) {
                            var id = null;
                            var data = null;
                            ungrouped = new Group(id, data, this);
                            this.groups[UNGROUPED] = ungrouped;

                            for (itemId in this.items) {
                                if (this.items.hasOwnProperty(itemId)) {
                                    item = this.items[itemId];
                                    ungrouped.add(item);
                                }
                            }

                            ungrouped.show();
                        }
                    }
                };

                /**
                 * Get the element for the labelset
                 * @return {HTMLElement} labelSet
                 */
                ItemSet.prototype.getLabelSet = function() {
                    return this.dom.labelSet;
                };

                /**
                 * Set items
                 * @param {vis.DataSet | null} items
                 */
                ItemSet.prototype.setItems = function(items) {
                    var me = this,
                        ids,
                        oldItemsData = this.itemsData;

                    // replace the dataset
                    if (!items) {
                        this.itemsData = null;
                    } else if (items instanceof DataSet || items instanceof DataView) {
                        this.itemsData = items;
                    } else {
                        throw new TypeError('Data must be an instance of DataSet or DataView');
                    }

                    if (oldItemsData) {
                        // unsubscribe from old dataset
                        util.forEach(this.itemListeners, function(callback, event) {
                            oldItemsData.off(event, callback);
                        });

                        // remove all drawn items
                        ids = oldItemsData.getIds();
                        this._onRemove(ids);
                    }

                    if (this.itemsData) {
                        // subscribe to new dataset
                        var id = this.id;
                        util.forEach(this.itemListeners, function(callback, event) {
                            me.itemsData.on(event, callback, id);
                        });

                        // add all new items
                        ids = this.itemsData.getIds();
                        this._onAdd(ids);

                        // update the group holding all ungrouped items
                        this._updateUngrouped();
                    }

                    this.body.emitter.emit('_change', { queue: true });
                };

                /**
                 * Get the current items
                 * @returns {vis.DataSet | null}
                 */
                ItemSet.prototype.getItems = function() {
                    return this.itemsData;
                };

                /**
                 * Set groups
                 * @param {vis.DataSet} groups
                 */
                ItemSet.prototype.setGroups = function(groups) {
                    var me = this,
                        ids;

                    // unsubscribe from current dataset
                    if (this.groupsData) {
                        util.forEach(this.groupListeners, function(callback, event) {
                            me.groupsData.off(event, callback);
                        });

                        // remove all drawn groups
                        ids = this.groupsData.getIds();
                        this.groupsData = null;
                        this._onRemoveGroups(ids); // note: this will cause a redraw
                    }

                    // replace the dataset
                    if (!groups) {
                        this.groupsData = null;
                    } else if (groups instanceof DataSet || groups instanceof DataView) {
                        this.groupsData = groups;
                    } else {
                        throw new TypeError('Data must be an instance of DataSet or DataView');
                    }

                    if (this.groupsData) {
                        // go over all groups nesting
                        var groupsData = this.groupsData;
                        if (this.groupsData instanceof DataView) {
                            groupsData = this.groupsData.getDataSet();
                        }

                        groupsData.get().forEach(function(group) {
                            if (group.nestedGroups) {
                                group.nestedGroups.forEach(function(nestedGroupId) {
                                    var updatedNestedGroup = groupsData.get(nestedGroupId);
                                    updatedNestedGroup.nestedInGroup = group.id;
                                    if (group.showNested == false) {
                                        updatedNestedGroup.visible = false;
                                    }
                                    groupsData.update(updatedNestedGroup);
                                });
                            }
                        });

                        // subscribe to new dataset
                        var id = this.id;
                        util.forEach(this.groupListeners, function(callback, event) {
                            me.groupsData.on(event, callback, id);
                        });

                        // draw all ms
                        ids = this.groupsData.getIds();
                        this._onAddGroups(ids);
                    }

                    // update the group holding all ungrouped items
                    this._updateUngrouped();

                    // update the order of all items in each group
                    this._order();

                    this.body.emitter.emit('_change', { queue: true });
                };

                /**
                 * Get the current groups
                 * @returns {vis.DataSet | null} groups
                 */
                ItemSet.prototype.getGroups = function() {
                    return this.groupsData;
                };

                /**
                 * Remove an item by its id
                 * @param {String | Number} id
                 */
                ItemSet.prototype.removeItem = function(id) {
                    var item = this.itemsData.get(id),
                        dataset = this.itemsData.getDataSet(),
                        itemObj = this.items[id];

                    if (item) {
                        // confirm deletion
                        this.options.onRemove(item, function(item) {
                            if (item) {
                                // remove by id here, it is possible that an item has no id defined
                                // itself, so better not delete by the item itself
                                dataset.remove(id);
                            }
                        });
                    }
                };

                /**
                 * Get the time of an item based on it's data and options.type
                 * @param {Object} itemData
                 * @returns {string} Returns the type
                 * @private
                 */
                ItemSet.prototype._getType = function(itemData) {
                    return itemData.type || this.options.type || (itemData.end ? 'range' : 'box');
                };

                /**
                 * Get the group id for an item
                 * @param {Object} itemData
                 * @returns {string} Returns the groupId
                 * @private
                 */
                ItemSet.prototype._getGroupId = function(itemData) {
                    var type = this._getType(itemData);
                    if (type == 'background' && itemData.group == undefined) {
                        return BACKGROUND;
                    } else {
                        return this.groupsData ? itemData.group : UNGROUPED;
                    }
                };

                /**
                 * Handle updated items
                 * @param {Number[]} ids
                 * @protected
                 */
                ItemSet.prototype._onUpdate = function(ids) {
                    var me = this;

                    ids.forEach(function(id) {
                        var itemData = me.itemsData.get(id, me.itemOptions);
                        var item = me.items[id];
                        var type = itemData ? me._getType(itemData) : null;

                        var constructor = ItemSet.types[type];
                        var selected;

                        if (item) {
                            // update item   	
                            if (!constructor || !(item instanceof constructor)) {
                                // item type has changed, delete the item and recreate it
                                selected = item.selected; // preserve selection of this item
                                me._removeItem(item);
                                item = null;
                            } else {
                                me._updateItem(item, itemData);
                            }
                        }

                        if (!item && itemData) {
                            // create item
                            if (constructor) {
                                item = new constructor(itemData, me.conversion, me.options);
                                item.id = id; // TODO: not so nice setting id afterwards

                                me._addItem(item);
                                if (selected) {
                                    this.selection.push(id);
                                    item.select();
                                }
                            } else if (type == 'rangeoverflow') {
                                // TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
                                throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: ' + '.vis-item.vis-range .vis-item-content {overflow: visible;}');
                            } else {
                                throw new TypeError('Unknown item type "' + type + '"');
                            }
                        }
                    }.bind(this));

                    this._order();
                    this.body.emitter.emit('_change', { queue: true });
                };

                /**
                 * Handle added items
                 * @param {Number[]} ids
                 * @protected
                 */
                ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;

                /**
                 * Handle removed items
                 * @param {Number[]} ids
                 * @protected
                 */
                ItemSet.prototype._onRemove = function(ids) {
                    var count = 0;
                    var me = this;
                    ids.forEach(function(id) {
                        var item = me.items[id];
                        if (item) {
                            count++;
                            me._removeItem(item);
                        }
                    });

                    if (count) {
                        // update order
                        this._order();
                        this.body.emitter.emit('_change', { queue: true });
                    }
                };

                /**
                 * Update the order of item in all groups
                 * @private
                 */
                ItemSet.prototype._order = function() {
                    // reorder the items in all groups
                    // TODO: optimization: only reorder groups affected by the changed items
                    util.forEach(this.groups, function(group) {
                        group.order();
                    });
                };

                /**
                 * Handle updated groups
                 * @param {Number[]} ids
                 * @private
                 */
                ItemSet.prototype._onUpdateGroups = function(ids) {
                    this._onAddGroups(ids);
                };

                /**
                 * Handle changed groups (added or updated)
                 * @param {Number[]} ids
                 * @private
                 */
                ItemSet.prototype._onAddGroups = function(ids) {
                    var me = this;

                    ids.forEach(function(id) {
                        var groupData = me.groupsData.get(id);
                        var group = me.groups[id];

                        if (!group) {
                            // check for reserved ids
                            if (id == UNGROUPED || id == BACKGROUND) {
                                throw new Error('Illegal group id. ' + id + ' is a reserved id.');
                            }

                            var groupOptions = (0, _create2['default'])(me.options);
                            util.extend(groupOptions, {
                                height: null
                            });

                            group = new Group(id, groupData, me);
                            me.groups[id] = group;

                            // add items with this groupId to the new group
                            for (var itemId in me.items) {
                                if (me.items.hasOwnProperty(itemId)) {
                                    var item = me.items[itemId];
                                    if (item.data.group == id) {
                                        group.add(item);
                                    }
                                }
                            }

                            group.order();
                            group.show();
                        } else {
                            // update group
                            group.setData(groupData);
                        }
                    });

                    this.body.emitter.emit('_change', { queue: true });
                };

                /**
                 * Handle removed groups
                 * @param {Number[]} ids
                 * @private
                 */
                ItemSet.prototype._onRemoveGroups = function(ids) {
                    var groups = this.groups;
                    ids.forEach(function(id) {
                        var group = groups[id];

                        if (group) {
                            group.hide();
                            delete groups[id];
                        }
                    });

                    this.markDirty();

                    this.body.emitter.emit('_change', { queue: true });
                };

                /**
                 * Reorder the groups if needed
                 * @return {boolean} changed
                 * @private
                 */
                ItemSet.prototype._orderGroups = function() {
                    if (this.groupsData) {
                        // reorder the groups
                        var groupIds = this.groupsData.getIds({
                            order: this.options.groupOrder
                        });

                        groupIds = this._orderNestedGroups(groupIds);

                        var changed = !util.equalArray(groupIds, this.groupIds);
                        if (changed) {
                            // hide all groups, removes them from the DOM
                            var groups = this.groups;
                            groupIds.forEach(function(groupId) {
                                groups[groupId].hide();
                            });

                            // show the groups again, attach them to the DOM in correct order
                            groupIds.forEach(function(groupId) {
                                groups[groupId].show();
                            });

                            this.groupIds = groupIds;
                        }

                        return changed;
                    } else {
                        return false;
                    }
                };

                /**
                 * Reorder the nested groups
                 * @return {boolean} changed
                 * @private
                 */
                ItemSet.prototype._orderNestedGroups = function(groupIds) {
                    var newGroupIdsOrder = [];

                    groupIds.forEach(function(groupId) {
                        var groupData = this.groupsData.get(groupId);
                        if (!groupData.nestedInGroup) {
                            newGroupIdsOrder.push(groupId);
                        }
                        if (groupData.nestedGroups) {
                            var nestedGroups = this.groupsData.get({
                                filter: function filter(nestedGroup) {
                                    return nestedGroup.nestedInGroup == groupId;
                                },
                                order: this.options.groupOrder
                            });
                            var nestedGroupIds = nestedGroups.map(function(nestedGroup) {
                                return nestedGroup.id;
                            });
                            newGroupIdsOrder = newGroupIdsOrder.concat(nestedGroupIds);
                        }
                    }, this);
                    return newGroupIdsOrder;
                };

                /**
                 * Add a new item
                 * @param {Item} item
                 * @private
                 */
                ItemSet.prototype._addItem = function(item) {
                    this.items[item.id] = item;

                    // add to group
                    var groupId = this._getGroupId(item.data);
                    var group = this.groups[groupId];

                    if (!group) {
                        item.groupShowing = false;
                    } else if (group && group.data && group.data.showNested) {
                        item.groupShowing = true;
                    }

                    if (group) group.add(item);
                };

                /**
                 * Update an existing item
                 * @param {Item} item
                 * @param {Object} itemData
                 * @private
                 */
                ItemSet.prototype._updateItem = function(item, itemData) {
                    // update the items data (will redraw the item when displayed)
                    item.setData(itemData);

                    var groupId = this._getGroupId(item.data);
                    var group = this.groups[groupId];
                    if (!group) {
                        item.groupShowing = false;
                    } else if (group && group.data && group.data.showNested) {
                        item.groupShowing = true;
                    }
                };

                /**
                 * Delete an item from the ItemSet: remove it from the DOM, from the map
                 * with items, and from the map with visible items, and from the selection
                 * @param {Item} item
                 * @private
                 */
                ItemSet.prototype._removeItem = function(item) {
                    // remove from DOM
                    item.hide();

                    // remove from items
                    delete this.items[item.id];

                    // remove from selection
                    var index = this.selection.indexOf(item.id);
                    if (index != -1) this.selection.splice(index, 1);

                    // remove from group
                    item.parent && item.parent.remove(item);
                };

                /**
                 * Create an array containing all items being a range (having an end date)
                 * @param array
                 * @returns {Array}
                 * @private
                 */
                ItemSet.prototype._constructByEndArray = function(array) {
                    var endArray = [];

                    for (var i = 0; i < array.length; i++) {
                        if (array[i] instanceof RangeItem) {
                            endArray.push(array[i]);
                        }
                    }
                    return endArray;
                };

                /**
                 * Register the clicked item on touch, before dragStart is initiated.
                 *
                 * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
                 * already moving. Therefore, the mouse/touch can sometimes be above an other
                 * DOM element than the item itself.
                 *
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onTouch = function(event) {
                    // store the touched item, used in _onDragStart
                    this.touchParams.item = this.itemFromTarget(event);
                    this.touchParams.dragLeftItem = event.target.dragLeftItem || false;
                    this.touchParams.dragRightItem = event.target.dragRightItem || false;
                    this.touchParams.itemProps = null;
                };

                /**
                 * Given an group id, returns the index it has.
                 *
                 * @param {Number} groupID
                 * @private
                 */
                ItemSet.prototype._getGroupIndex = function(groupId) {
                    for (var i = 0; i < this.groupIds.length; i++) {
                        if (groupId == this.groupIds[i]) return i;
                    }
                };

                /**
                 * Start dragging the selected events
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onDragStart = function(event) {
                    if (this.touchParams.itemIsDragging) {
                        return;
                    }
                    var item = this.touchParams.item || null;
                    var me = this;
                    var props;

                    if (item && (item.selected || this.options.itemsAlwaysDraggable)) {

                        if (this.options.editable.overrideItems && !this.options.editable.updateTime && !this.options.editable.updateGroup) {
                            return;
                        }

                        // override options.editable
                        if (item.editable != null && !item.editable.updateTime && !item.editable.updateGroup && !this.options.editable.overrideItems) {
                            return;
                        }

                        var dragLeftItem = this.touchParams.dragLeftItem;
                        var dragRightItem = this.touchParams.dragRightItem;
                        this.touchParams.itemIsDragging = true;
                        this.touchParams.selectedItem = item;

                        if (dragLeftItem) {
                            props = {
                                item: dragLeftItem,
                                initialX: event.center.x,
                                dragLeft: true,
                                data: this._cloneItemData(item.data)
                            };

                            this.touchParams.itemProps = [props];
                        } else if (dragRightItem) {
                            props = {
                                item: dragRightItem,
                                initialX: event.center.x,
                                dragRight: true,
                                data: this._cloneItemData(item.data)
                            };

                            this.touchParams.itemProps = [props];
                        } else {
                            var baseGroupIndex = this._getGroupIndex(item.data.group);

                            var itemsToDrag = this.options.itemsAlwaysDraggable && !item.selected ? [item.id] : this.getSelection();

                            this.touchParams.itemProps = itemsToDrag.map(function(id) {
                                var item = me.items[id];
                                var groupIndex = me._getGroupIndex(item.data.group);
                                return {
                                    item: item,
                                    initialX: event.center.x,
                                    groupOffset: baseGroupIndex - groupIndex,
                                    data: this._cloneItemData(item.data)
                                };
                            }.bind(this));
                        }

                        event.stopPropagation();
                    } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
                        // create a new range item when dragging with ctrl key down
                        this._onDragStartAddItem(event);
                    }
                };

                /**
                 * Start creating a new range item by dragging.
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onDragStartAddItem = function(event) {
                    var snap = this.options.snap || null;

                    if (this.options.rtl) {
                        var xAbs = util.getAbsoluteRight(this.dom.frame);
                        var x = xAbs - event.center.x + 10; // plus 10 to compensate for the drag starting as soon as you've moved 10px
                    } else {
                        var xAbs = util.getAbsoluteLeft(this.dom.frame);
                        var x = event.center.x - xAbs - 10; // minus 10 to compensate for the drag starting as soon as you've moved 10px
                    }

                    var time = this.body.util.toTime(x);
                    var scale = this.body.util.getScale();
                    var step = this.body.util.getStep();
                    var start = snap ? snap(time, scale, step) : time;
                    var end = start;

                    var itemData = {
                        type: 'range',
                        start: start,
                        end: end,
                        content: 'new item'
                    };

                    var id = util.randomUUID();
                    itemData[this.itemsData._fieldId] = id;

                    var group = this.groupFromTarget(event);
                    if (group) {
                        itemData.group = group.groupId;
                    }
                    var newItem = new RangeItem(itemData, this.conversion, this.options);
                    newItem.id = id; // TODO: not so nice setting id afterwards
                    newItem.data = this._cloneItemData(itemData);
                    this._addItem(newItem);
                    this.touchParams.selectedItem = newItem;

                    var props = {
                        item: newItem,
                        initialX: event.center.x,
                        data: newItem.data
                    };

                    if (this.options.rtl) {
                        props.dragLeft = true;
                    } else {
                        props.dragRight = true;
                    }
                    this.touchParams.itemProps = [props];

                    event.stopPropagation();
                };

                /**
                 * Drag selected items
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onDrag = function(event) {
                    if (this.touchParams.itemProps) {
                        event.stopPropagation();

                        var me = this;
                        var snap = this.options.snap || null;

                        if (this.options.rtl) {
                            var xOffset = this.body.dom.root.offsetLeft + this.body.domProps.right.width;
                        } else {
                            var xOffset = this.body.dom.root.offsetLeft + this.body.domProps.left.width;
                        }

                        var scale = this.body.util.getScale();
                        var step = this.body.util.getStep();

                        //only calculate the new group for the item that's actually dragged
                        var selectedItem = this.touchParams.selectedItem;
                        var updateGroupAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateGroup || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateGroup;
                        var newGroupBase = null;
                        if (updateGroupAllowed && selectedItem) {
                            if (selectedItem.data.group != undefined) {
                                // drag from one group to another
                                var group = me.groupFromTarget(event);
                                if (group) {
                                    //we know the offset for all items, so the new group for all items
                                    //will be relative to this one.
                                    newGroupBase = this._getGroupIndex(group.groupId);
                                }
                            }
                        }

                        // move
                        this.touchParams.itemProps.forEach(function(props) {
                            var current = me.body.util.toTime(event.center.x - xOffset);
                            var initial = me.body.util.toTime(props.initialX - xOffset);

                            if (this.options.rtl) {
                                var offset = -(current - initial); // ms
                            } else {
                                var offset = current - initial; // ms
                            }

                            var itemData = this._cloneItemData(props.item.data); // clone the data
                            if (props.item.editable != null && !props.item.editable.updateTime && !props.item.editable.updateGroup && !me.options.editable.overrideItems) {
                                return;
                            }

                            var updateTimeAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateTime || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateTime;
                            if (updateTimeAllowed) {
                                if (props.dragLeft) {
                                    // drag left side of a range item
                                    if (this.options.rtl) {
                                        if (itemData.end != undefined) {
                                            var initialEnd = util.convert(props.data.end, 'Date');
                                            var end = new Date(initialEnd.valueOf() + offset);
                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.end = snap ? snap(end, scale, step) : end;
                                        }
                                    } else {
                                        if (itemData.start != undefined) {
                                            var initialStart = util.convert(props.data.start, 'Date');
                                            var start = new Date(initialStart.valueOf() + offset);
                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.start = snap ? snap(start, scale, step) : start;
                                        }
                                    }
                                } else if (props.dragRight) {
                                    // drag right side of a range item
                                    if (this.options.rtl) {
                                        if (itemData.start != undefined) {
                                            var initialStart = util.convert(props.data.start, 'Date');
                                            var start = new Date(initialStart.valueOf() + offset);
                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.start = snap ? snap(start, scale, step) : start;
                                        }
                                    } else {
                                        if (itemData.end != undefined) {
                                            var initialEnd = util.convert(props.data.end, 'Date');
                                            var end = new Date(initialEnd.valueOf() + offset);
                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.end = snap ? snap(end, scale, step) : end;
                                        }
                                    }
                                } else {
                                    // drag both start and end
                                    if (itemData.start != undefined) {

                                        var initialStart = util.convert(props.data.start, 'Date').valueOf();
                                        var start = new Date(initialStart + offset);

                                        if (itemData.end != undefined) {
                                            var initialEnd = util.convert(props.data.end, 'Date');
                                            var duration = initialEnd.valueOf() - initialStart.valueOf();

                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.start = snap ? snap(start, scale, step) : start;
                                            itemData.end = new Date(itemData.start.valueOf() + duration);
                                        } else {
                                            // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                                            itemData.start = snap ? snap(start, scale, step) : start;
                                        }
                                    }
                                }
                            }

                            if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
                                if (itemData.group != undefined) {
                                    var newOffset = newGroupBase - props.groupOffset;

                                    //make sure we stay in bounds
                                    newOffset = Math.max(0, newOffset);
                                    newOffset = Math.min(me.groupIds.length - 1, newOffset);
                                    itemData.group = me.groupIds[newOffset];
                                }
                            }

                            // confirm moving the item
                            itemData = this._cloneItemData(itemData); // convert start and end to the correct type
                            me.options.onMoving(itemData, function(itemData) {
                                if (itemData) {
                                    props.item.setData(this._cloneItemData(itemData, 'Date'));
                                }
                            }.bind(this));
                        }.bind(this));

                        this.body.emitter.emit('_change');
                    }
                };

                /**
                 * Move an item to another group
                 * @param {Item} item
                 * @param {String | Number} groupId
                 * @private
                 */
                ItemSet.prototype._moveToGroup = function(item, groupId) {
                    var group = this.groups[groupId];
                    if (group && group.groupId != item.data.group) {
                        var oldGroup = item.parent;
                        oldGroup.remove(item);
                        oldGroup.order();

                        item.data.group = group.groupId;

                        group.add(item);
                        group.order();
                    }
                };

                /**
                 * End of dragging selected items
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onDragEnd = function(event) {
                    this.touchParams.itemIsDragging = false;
                    if (this.touchParams.itemProps) {
                        event.stopPropagation();

                        var me = this;
                        var dataset = this.itemsData.getDataSet();
                        var itemProps = this.touchParams.itemProps;
                        this.touchParams.itemProps = null;

                        itemProps.forEach(function(props) {
                            var id = props.item.id;
                            var exists = me.itemsData.get(id, me.itemOptions) != null;

                            if (!exists) {
                                // add a new item
                                me.options.onAdd(props.item.data, function(itemData) {
                                    me._removeItem(props.item); // remove temporary item
                                    if (itemData) {
                                        me.itemsData.getDataSet().add(itemData);
                                    }

                                    // force re-stacking of all items next redraw
                                    me.body.emitter.emit('_change');
                                });
                            } else {
                                // update existing item
                                var itemData = this._cloneItemData(props.item.data); // convert start and end to the correct type
                                me.options.onMove(itemData, function(itemData) {
                                    if (itemData) {
                                        // apply changes
                                        itemData[dataset._fieldId] = id; // ensure the item contains its id (can be undefined)
                                        dataset.update(itemData);
                                    } else {
                                        // restore original values
                                        props.item.setData(props.data);

                                        me.body.emitter.emit('_change');
                                    }
                                });
                            }
                        }.bind(this));
                    }
                };

                ItemSet.prototype._onGroupClick = function(event) {
                    var group = this.groupFromTarget(event);

                    if (!group || !group.nestedGroups) return;

                    var groupsData = this.groupsData;
                    if (this.groupsData instanceof DataView) {
                        groupsData = this.groupsData.getDataSet();
                    }

                    group.showNested = !group.showNested;

                    var nestedGroups = groupsData.get(group.nestedGroups).map(function(nestedGroup) {
                        if (nestedGroup.visible == undefined) {
                            nestedGroup.visible = true;
                        }
                        nestedGroup.visible = !!group.showNested;
                        return nestedGroup;
                    });
                    groupsData.update(nestedGroups);

                    if (group.showNested) {
                        util.removeClassName(group.dom.label, 'collapsed');
                        util.addClassName(group.dom.label, 'expanded');
                    } else {
                        util.removeClassName(group.dom.label, 'expanded');
                        var collapsedDirClassName = this.options.rtl ? 'collapsed-rtl' : 'collapsed';
                        util.addClassName(group.dom.label, collapsedDirClassName);
                    }
                };

                ItemSet.prototype._onGroupDragStart = function(event) {
                    if (this.options.groupEditable.order) {
                        this.groupTouchParams.group = this.groupFromTarget(event);

                        if (this.groupTouchParams.group) {
                            event.stopPropagation();

                            this.groupTouchParams.originalOrder = this.groupsData.getIds({
                                order: this.options.groupOrder
                            });
                        }
                    }
                };

                ItemSet.prototype._onGroupDrag = function(event) {
                    if (this.options.groupEditable.order && this.groupTouchParams.group) {
                        event.stopPropagation();

                        var groupsData = this.groupsData;
                        if (this.groupsData instanceof DataView) {
                            groupsData = this.groupsData.getDataSet();
                        }
                        // drag from one group to another
                        var group = this.groupFromTarget(event);

                        // try to avoid toggling when groups differ in height
                        if (group && group.height != this.groupTouchParams.group.height) {
                            var movingUp = group.top < this.groupTouchParams.group.top;
                            var clientY = event.center ? event.center.y : event.clientY;
                            var targetGroupTop = util.getAbsoluteTop(group.dom.foreground);
                            var draggedGroupHeight = this.groupTouchParams.group.height;
                            if (movingUp) {
                                // skip swapping the groups when the dragged group is not below clientY afterwards
                                if (targetGroupTop + draggedGroupHeight < clientY) {
                                    return;
                                }
                            } else {
                                var targetGroupHeight = group.height;
                                // skip swapping the groups when the dragged group is not below clientY afterwards
                                if (targetGroupTop + targetGroupHeight - draggedGroupHeight > clientY) {
                                    return;
                                }
                            }
                        }

                        if (group && group != this.groupTouchParams.group) {
                            var targetGroup = groupsData.get(group.groupId);
                            var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId);

                            // switch groups
                            if (draggedGroup && targetGroup) {
                                this.options.groupOrderSwap(draggedGroup, targetGroup, groupsData);
                                groupsData.update(draggedGroup);
                                groupsData.update(targetGroup);
                            }

                            // fetch current order of groups
                            var newOrder = groupsData.getIds({
                                order: this.options.groupOrder
                            });

                            // in case of changes since _onGroupDragStart
                            if (!util.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
                                var origOrder = this.groupTouchParams.originalOrder;
                                var draggedId = this.groupTouchParams.group.groupId;
                                var numGroups = Math.min(origOrder.length, newOrder.length);
                                var curPos = 0;
                                var newOffset = 0;
                                var orgOffset = 0;
                                while (curPos < numGroups) {
                                    // as long as the groups are where they should be step down along the groups order
                                    while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
                                        curPos++;
                                    }

                                    // all ok
                                    if (curPos + newOffset >= numGroups) {
                                        break;
                                    }

                                    // not all ok
                                    // if dragged group was move upwards everything below should have an offset
                                    if (newOrder[curPos + newOffset] == draggedId) {
                                        newOffset = 1;
                                        continue;
                                    }
                                    // if dragged group was move downwards everything above should have an offset
                                    else if (origOrder[curPos + orgOffset] == draggedId) {
                                        orgOffset = 1;
                                        continue;
                                    }
                                    // found a group (apart from dragged group) that has the wrong position -> switch with the 
                                    // group at the position where other one should be, fix index arrays and continue
                                    else {
                                        var slippedPosition = newOrder.indexOf(origOrder[curPos + orgOffset]);
                                        var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
                                        var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
                                        this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
                                        groupsData.update(switchGroup);
                                        groupsData.update(shouldBeGroup);

                                        var switchGroupId = newOrder[curPos + newOffset];
                                        newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
                                        newOrder[slippedPosition] = switchGroupId;

                                        curPos++;
                                    }
                                }
                            }
                        }
                    }
                };

                ItemSet.prototype._onGroupDragEnd = function(event) {
                    if (this.options.groupEditable.order && this.groupTouchParams.group) {
                        event.stopPropagation();

                        // update existing group
                        var me = this;
                        var id = me.groupTouchParams.group.groupId;
                        var dataset = me.groupsData.getDataSet();
                        var groupData = util.extend({}, dataset.get(id)); // clone the data
                        me.options.onMoveGroup(groupData, function(groupData) {
                            if (groupData) {
                                // apply changes
                                groupData[dataset._fieldId] = id; // ensure the group contains its id (can be undefined)
                                dataset.update(groupData);
                            } else {

                                // fetch current order of groups
                                var newOrder = dataset.getIds({
                                    order: me.options.groupOrder
                                });

                                // restore original order
                                if (!util.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
                                    var origOrder = me.groupTouchParams.originalOrder;
                                    var numGroups = Math.min(origOrder.length, newOrder.length);
                                    var curPos = 0;
                                    while (curPos < numGroups) {
                                        // as long as the groups are where they should be step down along the groups order
                                        while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
                                            curPos++;
                                        }

                                        // all ok
                                        if (curPos >= numGroups) {
                                            break;
                                        }

                                        // found a group that has the wrong position -> switch with the 
                                        // group at the position where other one should be, fix index arrays and continue
                                        var slippedPosition = newOrder.indexOf(origOrder[curPos]);
                                        var switchGroup = dataset.get(newOrder[curPos]);
                                        var shouldBeGroup = dataset.get(origOrder[curPos]);
                                        me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
                                        dataset.update(switchGroup);
                                        dataset.update(shouldBeGroup);

                                        var switchGroupId = newOrder[curPos];
                                        newOrder[curPos] = origOrder[curPos];
                                        newOrder[slippedPosition] = switchGroupId;

                                        curPos++;
                                    }
                                }
                            }
                        });

                        me.body.emitter.emit('groupDragged', { groupId: id });
                    }
                };

                /**
                 * Handle selecting/deselecting an item when tapping it
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onSelectItem = function(event) {
                    if (!this.options.selectable) return;

                    var ctrlKey = event.srcEvent && (event.srcEvent.ctrlKey || event.srcEvent.metaKey);
                    var shiftKey = event.srcEvent && event.srcEvent.shiftKey;
                    if (ctrlKey || shiftKey) {
                        this._onMultiSelectItem(event);
                        return;
                    }

                    var oldSelection = this.getSelection();

                    var item = this.itemFromTarget(event);
                    var selection = item ? [item.id] : [];
                    this.setSelection(selection);

                    var newSelection = this.getSelection();

                    // emit a select event,
                    // except when old selection is empty and new selection is still empty
                    if (newSelection.length > 0 || oldSelection.length > 0) {
                        this.body.emitter.emit('select', {
                            items: newSelection,
                            event: event
                        });
                    }
                };

                /**
                 * Handle hovering an item
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onMouseOver = function(event) {
                    var item = this.itemFromTarget(event);
                    if (!item) return;

                    // Item we just left
                    var related = this.itemFromRelatedTarget(event);
                    if (item === related) {
                        // We haven't changed item, just element in the item
                        return;
                    }

                    var title = item.getTitle();
                    if (this.options.showTooltips && title) {
                        if (this.popup == null) {
                            this.popup = new Popup(this.body.dom.root, this.options.tooltip.overflowMethod || 'flip');
                        }

                        this.popup.setText(title);
                        var container = this.body.dom.centerContainer;
                        this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
                        this.popup.show();
                    } else {
                        // Hovering over item without a title, hide popup
                        // Needed instead of _just_ in _onMouseOut due to #2572
                        if (this.popup != null) {
                            this.popup.hide();
                        }
                    }

                    this.body.emitter.emit('itemover', {
                        item: item.id,
                        event: event
                    });
                };
                ItemSet.prototype._onMouseOut = function(event) {
                    var item = this.itemFromTarget(event);
                    if (!item) return;

                    // Item we are going to
                    var related = this.itemFromRelatedTarget(event);
                    if (item === related) {
                        // We aren't changing item, just element in the item
                        return;
                    }

                    if (this.popup != null) {
                        this.popup.hide();
                    }

                    this.body.emitter.emit('itemout', {
                        item: item.id,
                        event: event
                    });
                };
                ItemSet.prototype._onMouseMove = function(event) {
                    var item = this.itemFromTarget(event);
                    if (!item) return;

                    if (this.options.showTooltips && this.options.tooltip.followMouse) {
                        if (this.popup) {
                            if (!this.popup.hidden) {
                                var container = this.body.dom.centerContainer;
                                this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
                                this.popup.show(); // Redraw
                            }
                        }
                    }
                };

                /**
                 * Handle mousewheel
                 * @param event
                 * @private
                 */
                ItemSet.prototype._onMouseWheel = function(event) {
                    if (this.touchParams.itemIsDragging) {
                        this._onDragEnd(event);
                    }
                };

                /**
                 * Handle updates of an item on double tap
                 * @param event
                 * @private
                 */
                ItemSet.prototype._onUpdateItem = function(item) {
                    if (!this.options.selectable) return;
                    if (!this.options.editable.add) return;

                    var me = this;

                    if (item) {
                        // execute async handler to update the item (or cancel it)
                        var itemData = me.itemsData.get(item.id); // get a clone of the data from the dataset
                        this.options.onUpdate(itemData, function(itemData) {
                            if (itemData) {
                                me.itemsData.getDataSet().update(itemData);
                            }
                        });
                    }
                };

                /**
                 * Handle creation of an item on double tap
                 * @param event
                 * @private
                 */
                ItemSet.prototype._onAddItem = function(event) {
                    if (!this.options.selectable) return;
                    if (!this.options.editable.add) return;

                    var me = this;
                    var snap = this.options.snap || null;
                    var item = this.itemFromTarget(event);

                    if (!item) {
                        // add item
                        if (this.options.rtl) {
                            var xAbs = util.getAbsoluteRight(this.dom.frame);
                            var x = xAbs - event.center.x;
                        } else {
                            var xAbs = util.getAbsoluteLeft(this.dom.frame);
                            var x = event.center.x - xAbs;
                        }
                        // var xAbs = util.getAbsoluteLeft(this.dom.frame);
                        // var x = event.center.x - xAbs;
                        var start = this.body.util.toTime(x);
                        var scale = this.body.util.getScale();
                        var step = this.body.util.getStep();

                        var newItemData;
                        if (event.type == 'drop') {
                            newItemData = JSON.parse(event.dataTransfer.getData("text"));
                            newItemData.content = newItemData.content ? newItemData.content : 'new item';
                            newItemData.start = newItemData.start ? newItemData.start : snap ? snap(start, scale, step) : start;
                            newItemData.type = newItemData.type || 'box';
                            newItemData[this.itemsData._fieldId] = newItemData.id || util.randomUUID();

                            if (newItemData.type == 'range' && !newItemData.end) {
                                var end = this.body.util.toTime(x + this.props.width / 5);
                                newItemData.end = snap ? snap(end, scale, step) : end;
                            }
                        } else {
                            newItemData = {
                                start: snap ? snap(start, scale, step) : start,
                                content: 'new item'
                            };
                            newItemData[this.itemsData._fieldId] = util.randomUUID();

                            // when default type is a range, add a default end date to the new item
                            if (this.options.type === 'range') {
                                var end = this.body.util.toTime(x + this.props.width / 5);
                                newItemData.end = snap ? snap(end, scale, step) : end;
                            }
                        }

                        var group = this.groupFromTarget(event);
                        if (group) {
                            newItemData.group = group.groupId;
                        }

                        // execute async handler to customize (or cancel) adding an item
                        newItemData = this._cloneItemData(newItemData); // convert start and end to the correct type
                        this.options.onAdd(newItemData, function(item) {
                            if (item) {
                                me.itemsData.getDataSet().add(item);
                                if (event.type == 'drop') {
                                    me.setSelection([item.id]);
                                }
                                // TODO: need to trigger a redraw?
                            }
                        });
                    }
                };

                /**
                 * Handle selecting/deselecting multiple items when holding an item
                 * @param {Event} event
                 * @private
                 */
                ItemSet.prototype._onMultiSelectItem = function(event) {
                    if (!this.options.selectable) return;

                    var item = this.itemFromTarget(event);

                    if (item) {
                        // multi select items (if allowed)

                        var selection = this.options.multiselect ? this.getSelection() // take current selection
                            :
                            []; // deselect current selection

                        var shiftKey = event.srcEvent && event.srcEvent.shiftKey || false;

                        if (shiftKey && this.options.multiselect) {
                            // select all items between the old selection and the tapped item
                            var itemGroup = this.itemsData.get(item.id).group;

                            // when filtering get the group of the last selected item
                            var lastSelectedGroup = undefined;
                            if (this.options.multiselectPerGroup) {
                                if (selection.length > 0) {
                                    lastSelectedGroup = this.itemsData.get(selection[0]).group;
                                }
                            }

                            // determine the selection range
                            if (!this.options.multiselectPerGroup || lastSelectedGroup == undefined || lastSelectedGroup == itemGroup) {
                                selection.push(item.id);
                            }
                            var range = ItemSet._getItemRange(this.itemsData.get(selection, this.itemOptions));

                            if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
                                // select all items within the selection range
                                selection = [];
                                for (var id in this.items) {
                                    if (this.items.hasOwnProperty(id)) {
                                        var _item = this.items[id];
                                        var start = _item.data.start;
                                        var end = _item.data.end !== undefined ? _item.data.end : start;

                                        if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem)) {
                                            selection.push(_item.id); // do not use id but item.id, id itself is stringified
                                        }
                                    }
                                }
                            }
                        } else {
                            // add/remove this item from the current selection
                            var index = selection.indexOf(item.id);
                            if (index == -1) {
                                // item is not yet selected -> select it
                                selection.push(item.id);
                            } else {
                                // item is already selected -> deselect it
                                selection.splice(index, 1);
                            }
                        }

                        this.setSelection(selection);

                        this.body.emitter.emit('select', {
                            items: this.getSelection(),
                            event: event
                        });
                    }
                };

                /**
                 * Calculate the time range of a list of items
                 * @param {Array.<Object>} itemsData
                 * @return {{min: Date, max: Date}} Returns the range of the provided items
                 * @private
                 */
                ItemSet._getItemRange = function(itemsData) {
                    var max = null;
                    var min = null;

                    itemsData.forEach(function(data) {
                        if (min == null || data.start < min) {
                            min = data.start;
                        }

                        if (data.end != undefined) {
                            if (max == null || data.end > max) {
                                max = data.end;
                            }
                        } else {
                            if (max == null || data.start > max) {
                                max = data.start;
                            }
                        }
                    });

                    return {
                        min: min,
                        max: max
                    };
                };

                /**
                 * Find an item from an element:
                 * searches for the attribute 'timeline-item' in the element's tree
                 * @param {HTMLElement} element
                 * @return {Item | null} item
                 */
                ItemSet.prototype.itemFromElement = function(element) {
                    var cur = element;
                    while (cur) {
                        if (cur.hasOwnProperty('timeline-item')) {
                            return cur['timeline-item'];
                        }
                        cur = cur.parentNode;
                    }

                    return null;
                };

                /**
                 * Find an item from an event target:
                 * searches for the attribute 'timeline-item' in the event target's element tree
                 * @param {Event} event
                 * @return {Item | null} item
                 */
                ItemSet.prototype.itemFromTarget = function(event) {
                    return this.itemFromElement(event.target);
                };

                /**
                 * Find an item from an event's related target:
                 * searches for the attribute 'timeline-item' in the related target's element tree
                 * @param {Event} event
                 * @return {Item | null} item
                 */
                ItemSet.prototype.itemFromRelatedTarget = function(event) {
                    return this.itemFromElement(event.relatedTarget);
                };

                /**
                 * Find the Group from an event target:
                 * searches for the attribute 'timeline-group' in the event target's element tree
                 * @param {Event} event
                 * @return {Group | null} group
                 */
                ItemSet.prototype.groupFromTarget = function(event) {
                    var clientY = event.center ? event.center.y : event.clientY;
                    var groupIds = this.groupIds;

                    if (groupIds.length <= 0 && this.groupsData) {
                        groupIds = this.groupsData.getIds({
                            order: this.options.groupOrder
                        });
                    }

                    for (var i = 0; i < groupIds.length; i++) {
                        var groupId = groupIds[i];
                        var group = this.groups[groupId];
                        var foreground = group.dom.foreground;
                        var top = util.getAbsoluteTop(foreground);
                        if (clientY > top && clientY < top + foreground.offsetHeight) {
                            return group;
                        }

                        if (this.options.orientation.item === 'top') {
                            if (i === this.groupIds.length - 1 && clientY > top) {
                                return group;
                            }
                        } else {
                            if (i === 0 && clientY < top + foreground.offset) {
                                return group;
                            }
                        }
                    }

                    return null;
                };

                /**
                 * Find the ItemSet from an event target:
                 * searches for the attribute 'timeline-itemset' in the event target's element tree
                 * @param {Event} event
                 * @return {ItemSet | null} item
                 */
                ItemSet.itemSetFromTarget = function(event) {
                    var target = event.target;
                    while (target) {
                        if (target.hasOwnProperty('timeline-itemset')) {
                            return target['timeline-itemset'];
                        }
                        target = target.parentNode;
                    }

                    return null;
                };

                /**
                 * Clone the data of an item, and "normalize" it: convert the start and end date
                 * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
                 * start and end are converted to Date.
                 * @param {Object} itemData, typically `item.data`
                 * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
                 * @return {Object} The cloned object
                 * @private
                 */
                ItemSet.prototype._cloneItemData = function(itemData, type) {
                    var clone = util.extend({}, itemData);

                    if (!type) {
                        // convert start and end date to the type (Date, Moment, ...) configured in the DataSet
                        type = this.itemsData.getDataSet()._options.type;
                    }

                    if (clone.start != undefined) {
                        clone.start = util.convert(clone.start, type && type.start || 'Date');
                    }
                    if (clone.end != undefined) {
                        clone.end = util.convert(clone.end, type && type.end || 'Date');
                    }

                    return clone;
                };

                module.exports = ItemSet;

                /***/
            }),
            /* 124 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var moment = __webpack_require__(82);
                var DateUtil = __webpack_require__(121);
                var util = __webpack_require__(1);

                /**
                 * @constructor  TimeStep
                 * The class TimeStep is an iterator for dates. You provide a start date and an
                 * end date. The class itself determines the best scale (step size) based on the
                 * provided start Date, end Date, and minimumStep.
                 *
                 * If minimumStep is provided, the step size is chosen as close as possible
                 * to the minimumStep but larger than minimumStep. If minimumStep is not
                 * provided, the scale is set to 1 DAY.
                 * The minimumStep should correspond with the onscreen size of about 6 characters
                 *
                 * Alternatively, you can set a scale by hand.
                 * After creation, you can initialize the class by executing first(). Then you
                 * can iterate from the start date to the end date via next(). You can check if
                 * the end date is reached with the function hasNext(). After each step, you can
                 * retrieve the current date via getCurrent().
                 * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
                 * days, to years.
                 *
                 * Version: 1.2
                 *
                 * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
                 *                               or new Date(2010, 9, 21, 23, 45, 00)
                 * @param {Date} [end]           The end date
                 * @param {Number} [minimumStep] Optional. Minimum step size in milliseconds
                 */
                function TimeStep(start, end, minimumStep, hiddenDates) {
                    this.moment = moment;

                    // variables
                    this.current = this.moment();
                    this._start = this.moment();
                    this._end = this.moment();

                    this.autoScale = true;
                    this.scale = 'day';
                    this.step = 1;

                    // initialize the range
                    this.setRange(start, end, minimumStep);

                    // hidden Dates options
                    this.switchedDay = false;
                    this.switchedMonth = false;
                    this.switchedYear = false;
                    if (Array.isArray(hiddenDates)) {
                        this.hiddenDates = hiddenDates;
                    } else if (hiddenDates != undefined) {
                        this.hiddenDates = [hiddenDates];
                    } else {
                        this.hiddenDates = [];
                    }

                    this.format = TimeStep.FORMAT; // default formatting
                }

                // Time formatting
                TimeStep.FORMAT = {
                    minorLabels: {
                        millisecond: 'SSS',
                        second: 's',
                        minute: 'HH:mm',
                        hour: 'HH:mm',
                        weekday: 'ddd D',
                        day: 'D',
                        week: 'w',
                        month: 'MMM',
                        year: 'YYYY'
                    },
                    majorLabels: {
                        millisecond: 'HH:mm:ss',
                        second: 'D MMMM HH:mm',
                        minute: 'ddd D MMMM',
                        hour: 'ddd D MMMM',
                        weekday: 'MMMM YYYY',
                        day: 'MMMM YYYY',
                        week: 'MMMM YYYY',
                        month: 'YYYY',
                        year: ''
                    }
                };

                /**
                 * Set custom constructor function for moment. Can be used to set dates
                 * to UTC or to set a utcOffset.
                 * @param {function} moment
                 */
                TimeStep.prototype.setMoment = function(moment) {
                    this.moment = moment;

                    // update the date properties, can have a new utcOffset
                    this.current = this.moment(this.current.valueOf());
                    this._start = this.moment(this._start.valueOf());
                    this._end = this.moment(this._end.valueOf());
                };

                /**
                 * Set custom formatting for the minor an major labels of the TimeStep.
                 * Both `minorLabels` and `majorLabels` are an Object with properties:
                 * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
                 * @param {{minorLabels: Object, majorLabels: Object}} format
                 */
                TimeStep.prototype.setFormat = function(format) {
                    var defaultFormat = util.deepExtend({}, TimeStep.FORMAT);
                    this.format = util.deepExtend(defaultFormat, format);
                };

                /**
                 * Set a new range
                 * If minimumStep is provided, the step size is chosen as close as possible
                 * to the minimumStep but larger than minimumStep. If minimumStep is not
                 * provided, the scale is set to 1 DAY.
                 * The minimumStep should correspond with the onscreen size of about 6 characters
                 * @param {Date} [start]      The start date and time.
                 * @param {Date} [end]        The end date and time.
                 * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
                 */
                TimeStep.prototype.setRange = function(start, end, minimumStep) {
                    if (!(start instanceof Date) || !(end instanceof Date)) {
                        throw "No legal start or end date in method setRange";
                    }

                    this._start = start != undefined ? this.moment(start.valueOf()) : new Date();
                    this._end = end != undefined ? this.moment(end.valueOf()) : new Date();

                    if (this.autoScale) {
                        this.setMinimumStep(minimumStep);
                    }
                };

                /**
                 * Set the range iterator to the start date.
                 */
                TimeStep.prototype.start = function() {
                    this.current = this._start.clone();
                    this.roundToMinor();
                };

                /**
                 * Round the current date to the first minor date value
                 * This must be executed once when the current date is set to start Date
                 */
                TimeStep.prototype.roundToMinor = function() {
                    // round to floor
                    // IMPORTANT: we have no breaks in this switch! (this is no bug)
                    // noinspection FallThroughInSwitchStatementJS
                    switch (this.scale) {
                        case 'year':
                            this.current.year(this.step * Math.floor(this.current.year() / this.step));
                            this.current.month(0);
                        case 'month':
                            this.current.date(1);
                        case 'week':
                            this.current.weekday(0);
                        case 'day': // intentional fall through
                        case 'weekday':
                            this.current.hours(0);
                        case 'hour':
                            this.current.minutes(0);
                        case 'minute':
                            this.current.seconds(0);
                        case 'second':
                            this.current.milliseconds(0);
                            //case 'millisecond': // nothing to do for milliseconds
                    }

                    if (this.step != 1) {
                        // round down to the first minor value that is a multiple of the current step size
                        switch (this.scale) {
                            case 'millisecond':
                                this.current.subtract(this.current.milliseconds() % this.step, 'milliseconds');
                                break;
                            case 'second':
                                this.current.subtract(this.current.seconds() % this.step, 'seconds');
                                break;
                            case 'minute':
                                this.current.subtract(this.current.minutes() % this.step, 'minutes');
                                break;
                            case 'hour':
                                this.current.subtract(this.current.hours() % this.step, 'hours');
                                break;
                            case 'weekday': // intentional fall through
                            case 'day':
                                this.current.subtract((this.current.date() - 1) % this.step, 'day');
                                break;
                            case 'week':
                                this.current.subtract(this.current.week() % this.step, 'week');
                                break;
                            case 'month':
                                this.current.subtract(this.current.month() % this.step, 'month');
                                break;
                            case 'year':
                                this.current.subtract(this.current.year() % this.step, 'year');
                                break;
                            default:
                                break;
                        }
                    }
                };

                /**
                 * Check if the there is a next step
                 * @return {boolean}  true if the current date has not passed the end date
                 */
                TimeStep.prototype.hasNext = function() {
                    return this.current.valueOf() <= this._end.valueOf();
                };

                /**
                 * Do the next step
                 */
                TimeStep.prototype.next = function() {
                    var prev = this.current.valueOf();

                    // Two cases, needed to prevent issues with switching daylight savings
                    // (end of March and end of October)
                    switch (this.scale) {
                        case 'millisecond':
                            this.current.add(this.step, 'millisecond');
                            break;
                        case 'second':
                            this.current.add(this.step, 'second');
                            break;
                        case 'minute':
                            this.current.add(this.step, 'minute');
                            break;
                        case 'hour':
                            this.current.add(this.step, 'hour');

                            if (this.current.month() < 6) {
                                this.current.subtract(this.current.hours() % this.step, 'hour');
                            } else {
                                if (this.current.hours() % this.step !== 0) {
                                    this.current.add(this.step - this.current.hours() % this.step, 'hour');
                                }
                            }
                            break;
                        case 'weekday': // intentional fall through
                        case 'day':
                            this.current.add(this.step, 'day');
                            break;
                        case 'week':
                            if (this.current.weekday() !== 0) {
                                // we had a month break not correlating with a week's start before
                                this.current.weekday(0); // switch back to week cycles
                                this.current.add(this.step, 'week');
                            } else {
                                // first day of the week
                                var nextWeek = this.current.clone();
                                nextWeek.add(1, 'week');
                                if (nextWeek.isSame(this.current, 'month')) {
                                    // is the first day of the next week in the same month?
                                    this.current.add(this.step, 'week'); // the default case
                                } else {
                                    // inject a step at each first day of the month
                                    this.current.add(this.step, 'week');
                                    this.current.date(1);
                                }
                            }
                            break;
                        case 'month':
                            this.current.add(this.step, 'month');
                            break;
                        case 'year':
                            this.current.add(this.step, 'year');
                            break;
                        default:
                            break;
                    }

                    if (this.step != 1) {
                        // round down to the correct major value
                        switch (this.scale) {
                            case 'millisecond':
                                if (this.current.milliseconds() > 0 && this.current.milliseconds() < this.step) this.current.milliseconds(0);
                                break;
                            case 'second':
                                if (this.current.seconds() > 0 && this.current.seconds() < this.step) this.current.seconds(0);
                                break;
                            case 'minute':
                                if (this.current.minutes() > 0 && this.current.minutes() < this.step) this.current.minutes(0);
                                break;
                            case 'hour':
                                if (this.current.hours() > 0 && this.current.hours() < this.step) this.current.hours(0);
                                break;
                            case 'weekday': // intentional fall through
                            case 'day':
                                if (this.current.date() < this.step + 1) this.current.date(1);
                                break;
                            case 'week':
                                if (this.current.week() < this.step) this.current.week(1);
                                break; // week numbering starts at 1, not 0
                            case 'month':
                                if (this.current.month() < this.step) this.current.month(0);
                                break;
                            case 'year':
                                break; // nothing to do for year
                            default:
                                break;
                        }
                    }

                    // safety mechanism: if current time is still unchanged, move to the end
                    if (this.current.valueOf() == prev) {
                        this.current = this._end.clone();
                    }

                    // Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates
                    this.switchedDay = false;
                    this.switchedMonth = false;
                    this.switchedYear = false;

                    DateUtil.stepOverHiddenDates(this.moment, this, prev);
                };

                /**
                 * Get the current datetime
                 * @return {Moment}  current The current date
                 */
                TimeStep.prototype.getCurrent = function() {
                    return this.current;
                };

                /**
                 * Set a custom scale. Autoscaling will be disabled.
                 * For example setScale('minute', 5) will result
                 * in minor steps of 5 minutes, and major steps of an hour.
                 *
                 * @param {{scale: string, step: number}} params
                 *                               An object containing two properties:
                 *                               - A string 'scale'. Choose from 'millisecond', 'second',
                 *                                 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
                 *                               - A number 'step'. A step size, by default 1.
                 *                                 Choose for example 1, 2, 5, or 10.
                 */
                TimeStep.prototype.setScale = function(params) {
                    if (params && typeof params.scale == 'string') {
                        this.scale = params.scale;
                        this.step = params.step > 0 ? params.step : 1;
                        this.autoScale = false;
                    }
                };

                /**
                 * Enable or disable autoscaling
                 * @param {boolean} enable  If true, autoascaling is set true
                 */
                TimeStep.prototype.setAutoScale = function(enable) {
                    this.autoScale = enable;
                };

                /**
                 * Automatically determine the scale that bests fits the provided minimum step
                 * @param {Number} [minimumStep]  The minimum step size in milliseconds
                 */
                TimeStep.prototype.setMinimumStep = function(minimumStep) {
                    if (minimumStep == undefined) {
                        return;
                    }

                    //var b = asc + ds;

                    var stepYear = 1000 * 60 * 60 * 24 * 30 * 12;
                    var stepMonth = 1000 * 60 * 60 * 24 * 30;
                    var stepDay = 1000 * 60 * 60 * 24;
                    var stepHour = 1000 * 60 * 60;
                    var stepMinute = 1000 * 60;
                    var stepSecond = 1000;
                    var stepMillisecond = 1;

                    // find the smallest step that is larger than the provided minimumStep
                    if (stepYear * 1000 > minimumStep) {
                        this.scale = 'year';
                        this.step = 1000;
                    }
                    if (stepYear * 500 > minimumStep) {
                        this.scale = 'year';
                        this.step = 500;
                    }
                    if (stepYear * 100 > minimumStep) {
                        this.scale = 'year';
                        this.step = 100;
                    }
                    if (stepYear * 50 > minimumStep) {
                        this.scale = 'year';
                        this.step = 50;
                    }
                    if (stepYear * 10 > minimumStep) {
                        this.scale = 'year';
                        this.step = 10;
                    }
                    if (stepYear * 5 > minimumStep) {
                        this.scale = 'year';
                        this.step = 5;
                    }
                    if (stepYear > minimumStep) {
                        this.scale = 'year';
                        this.step = 1;
                    }
                    if (stepMonth * 3 > minimumStep) {
                        this.scale = 'month';
                        this.step = 3;
                    }
                    if (stepMonth > minimumStep) {
                        this.scale = 'month';
                        this.step = 1;
                    }
                    if (stepDay * 5 > minimumStep) {
                        this.scale = 'day';
                        this.step = 5;
                    }
                    if (stepDay * 2 > minimumStep) {
                        this.scale = 'day';
                        this.step = 2;
                    }
                    if (stepDay > minimumStep) {
                        this.scale = 'day';
                        this.step = 1;
                    }
                    if (stepDay / 2 > minimumStep) {
                        this.scale = 'weekday';
                        this.step = 1;
                    }
                    if (stepHour * 4 > minimumStep) {
                        this.scale = 'hour';
                        this.step = 4;
                    }
                    if (stepHour > minimumStep) {
                        this.scale = 'hour';
                        this.step = 1;
                    }
                    if (stepMinute * 15 > minimumStep) {
                        this.scale = 'minute';
                        this.step = 15;
                    }
                    if (stepMinute * 10 > minimumStep) {
                        this.scale = 'minute';
                        this.step = 10;
                    }
                    if (stepMinute * 5 > minimumStep) {
                        this.scale = 'minute';
                        this.step = 5;
                    }
                    if (stepMinute > minimumStep) {
                        this.scale = 'minute';
                        this.step = 1;
                    }
                    if (stepSecond * 15 > minimumStep) {
                        this.scale = 'second';
                        this.step = 15;
                    }
                    if (stepSecond * 10 > minimumStep) {
                        this.scale = 'second';
                        this.step = 10;
                    }
                    if (stepSecond * 5 > minimumStep) {
                        this.scale = 'second';
                        this.step = 5;
                    }
                    if (stepSecond > minimumStep) {
                        this.scale = 'second';
                        this.step = 1;
                    }
                    if (stepMillisecond * 200 > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 200;
                    }
                    if (stepMillisecond * 100 > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 100;
                    }
                    if (stepMillisecond * 50 > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 50;
                    }
                    if (stepMillisecond * 10 > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 10;
                    }
                    if (stepMillisecond * 5 > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 5;
                    }
                    if (stepMillisecond > minimumStep) {
                        this.scale = 'millisecond';
                        this.step = 1;
                    }
                };

                /**
                 * Snap a date to a rounded value.
                 * The snap intervals are dependent on the current scale and step.
                 * Static function
                 * @param {Date} date    the date to be snapped.
                 * @param {string} scale Current scale, can be 'millisecond', 'second',
                 *                       'minute', 'hour', 'weekday, 'day', 'week', 'month', 'year'.
                 * @param {number} step  Current step (1, 2, 4, 5, ...
                 * @return {Date} snappedDate
                 */
                TimeStep.snap = function(date, scale, step) {
                    var clone = moment(date);

                    if (scale == 'year') {
                        var year = clone.year() + Math.round(clone.month() / 12);
                        clone.year(Math.round(year / step) * step);
                        clone.month(0);
                        clone.date(0);
                        clone.hours(0);
                        clone.minutes(0);
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'month') {
                        if (clone.date() > 15) {
                            clone.date(1);
                            clone.add(1, 'month');
                            // important: first set Date to 1, after that change the month.
                        } else {
                            clone.date(1);
                        }

                        clone.hours(0);
                        clone.minutes(0);
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'week') {
                        if (clone.weekday() > 2) {
                            // doing it the momentjs locale aware way
                            clone.weekday(0);
                            clone.add(1, 'week');
                        } else {
                            clone.weekday(0);
                        }

                        clone.hours(0);
                        clone.minutes(0);
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'day') {
                        //noinspection FallthroughInSwitchStatementJS
                        switch (step) {
                            case 5:
                            case 2:
                                clone.hours(Math.round(clone.hours() / 24) * 24);
                                break;
                            default:
                                clone.hours(Math.round(clone.hours() / 12) * 12);
                                break;
                        }
                        clone.minutes(0);
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'weekday') {
                        //noinspection FallthroughInSwitchStatementJS
                        switch (step) {
                            case 5:
                            case 2:
                                clone.hours(Math.round(clone.hours() / 12) * 12);
                                break;
                            default:
                                clone.hours(Math.round(clone.hours() / 6) * 6);
                                break;
                        }
                        clone.minutes(0);
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'hour') {
                        switch (step) {
                            case 4:
                                clone.minutes(Math.round(clone.minutes() / 60) * 60);
                                break;
                            default:
                                clone.minutes(Math.round(clone.minutes() / 30) * 30);
                                break;
                        }
                        clone.seconds(0);
                        clone.milliseconds(0);
                    } else if (scale == 'minute') {
                        //noinspection FallthroughInSwitchStatementJS
                        switch (step) {
                            case 15:
                            case 10:
                                clone.minutes(Math.round(clone.minutes() / 5) * 5);
                                clone.seconds(0);
                                break;
                            case 5:
                                clone.seconds(Math.round(clone.seconds() / 60) * 60);
                                break;
                            default:
                                clone.seconds(Math.round(clone.seconds() / 30) * 30);
                                break;
                        }
                        clone.milliseconds(0);
                    } else if (scale == 'second') {
                        //noinspection FallthroughInSwitchStatementJS
                        switch (step) {
                            case 15:
                            case 10:
                                clone.seconds(Math.round(clone.seconds() / 5) * 5);
                                clone.milliseconds(0);
                                break;
                            case 5:
                                clone.milliseconds(Math.round(clone.milliseconds() / 1000) * 1000);
                                break;
                            default:
                                clone.milliseconds(Math.round(clone.milliseconds() / 500) * 500);
                                break;
                        }
                    } else if (scale == 'millisecond') {
                        var _step = step > 5 ? step / 2 : 1;
                        clone.milliseconds(Math.round(clone.milliseconds() / _step) * _step);
                    }

                    return clone;
                };

                /**
                 * Check if the current value is a major value (for example when the step
                 * is DAY, a major value is each first day of the MONTH)
                 * @return {boolean} true if current date is major, else false.
                 */
                TimeStep.prototype.isMajor = function() {
                    if (this.switchedYear == true) {
                        switch (this.scale) {
                            case 'year':
                            case 'month':
                            case 'week':
                            case 'weekday':
                            case 'day':
                            case 'hour':
                            case 'minute':
                            case 'second':
                            case 'millisecond':
                                return true;
                            default:
                                return false;
                        }
                    } else if (this.switchedMonth == true) {
                        switch (this.scale) {
                            case 'week':
                            case 'weekday':
                            case 'day':
                            case 'hour':
                            case 'minute':
                            case 'second':
                            case 'millisecond':
                                return true;
                            default:
                                return false;
                        }
                    } else if (this.switchedDay == true) {
                        switch (this.scale) {
                            case 'millisecond':
                            case 'second':
                            case 'minute':
                            case 'hour':
                                return true;
                            default:
                                return false;
                        }
                    }

                    var date = this.moment(this.current);
                    switch (this.scale) {
                        case 'millisecond':
                            return date.milliseconds() == 0;
                        case 'second':
                            return date.seconds() == 0;
                        case 'minute':
                            return date.hours() == 0 && date.minutes() == 0;
                        case 'hour':
                            return date.hours() == 0;
                        case 'weekday': // intentional fall through
                        case 'day':
                            return date.date() == 1;
                        case 'week':
                            return date.date() == 1;
                        case 'month':
                            return date.month() == 0;
                        case 'year':
                            return false;
                        default:
                            return false;
                    }
                };

                /**
                 * Returns formatted text for the minor axislabel, depending on the current
                 * date and the scale. For example when scale is MINUTE, the current time is
                 * formatted as "hh:mm".
                 * @param {Date} [date] custom date. if not provided, current date is taken
                 */
                TimeStep.prototype.getLabelMinor = function(date) {
                    if (date == undefined) {
                        date = this.current;
                    }
                    if (date instanceof Date) {
                        date = this.moment(date);
                    }

                    if (typeof this.format.minorLabels === "function") {
                        return this.format.minorLabels(date, this.scale, this.step);
                    }

                    var format = this.format.minorLabels[this.scale];
                    // noinspection FallThroughInSwitchStatementJS
                    switch (this.scale) {
                        case 'week':
                            if (this.isMajor() && date.weekday() !== 0) {
                                return "";
                            }
                        default:
                            return format && format.length > 0 ? this.moment(date).format(format) : '';
                    }
                };

                /**
                 * Returns formatted text for the major axis label, depending on the current
                 * date and the scale. For example when scale is MINUTE, the major scale is
                 * hours, and the hour will be formatted as "hh".
                 * @param {Date} [date] custom date. if not provided, current date is taken
                 */
                TimeStep.prototype.getLabelMajor = function(date) {
                    if (date == undefined) {
                        date = this.current;
                    }
                    if (date instanceof Date) {
                        date = this.moment(date);
                    }

                    if (typeof this.format.majorLabels === "function") {
                        return this.format.majorLabels(date, this.scale, this.step);
                    }

                    var format = this.format.majorLabels[this.scale];
                    return format && format.length > 0 ? this.moment(date).format(format) : '';
                };

                TimeStep.prototype.getClassName = function() {
                    var _moment = this.moment;
                    var m = this.moment(this.current);
                    var current = m.locale ? m.locale('en') : m.lang('en'); // old versions of moment have .lang() function
                    var step = this.step;
                    var classNames = [];

                    function even(value) {
                        return value / step % 2 == 0 ? ' vis-even' : ' vis-odd';
                    }

                    function today(date) {
                        if (date.isSame(new Date(), 'day')) {
                            return ' vis-today';
                        }
                        if (date.isSame(_moment().add(1, 'day'), 'day')) {
                            return ' vis-tomorrow';
                        }
                        if (date.isSame(_moment().add(-1, 'day'), 'day')) {
                            return ' vis-yesterday';
                        }
                        return '';
                    }

                    function currentWeek(date) {
                        return date.isSame(new Date(), 'week') ? ' vis-current-week' : '';
                    }

                    function currentMonth(date) {
                        return date.isSame(new Date(), 'month') ? ' vis-current-month' : '';
                    }

                    function currentYear(date) {
                        return date.isSame(new Date(), 'year') ? ' vis-current-year' : '';
                    }

                    switch (this.scale) {
                        case 'millisecond':
                            classNames.push(today(current));
                            classNames.push(even(current.milliseconds()));
                            break;
                        case 'second':
                            classNames.push(today(current));
                            classNames.push(even(current.seconds()));
                            break;
                        case 'minute':
                            classNames.push(today(current));
                            classNames.push(even(current.minutes()));
                            break;
                        case 'hour':
                            classNames.push('vis-h' + current.hours() + this.step == 4 ? '-h' + (current.hours() + 4) : '');
                            classNames.push(today(current));
                            classNames.push(even(current.hours()));
                            break;
                        case 'weekday':
                            classNames.push('vis-' + current.format('dddd').toLowerCase());
                            classNames.push(today(current));
                            classNames.push(currentWeek(current));
                            classNames.push(even(current.date()));
                            break;
                        case 'day':
                            classNames.push('vis-day' + current.date());
                            classNames.push('vis-' + current.format('MMMM').toLowerCase());
                            classNames.push(today(current));
                            classNames.push(currentMonth(current));
                            classNames.push(this.step <= 2 ? today(current) : '');
                            classNames.push(this.step <= 2 ? 'vis-' + current.format('dddd').toLowerCase() : '');
                            classNames.push(even(current.date() - 1));
                            break;
                        case 'week':
                            classNames.push('vis-week' + current.format('w'));
                            classNames.push(currentWeek(current));
                            classNames.push(even(current.week()));
                            break;
                        case 'month':
                            classNames.push('vis-' + current.format('MMMM').toLowerCase());
                            classNames.push(currentMonth(current));
                            classNames.push(even(current.month()));
                            break;
                        case 'year':
                            classNames.push('vis-year' + current.year());
                            classNames.push(currentYear(current));
                            classNames.push(even(current.year()));
                            break;
                    }
                    return classNames.filter(String).join(" ");
                };

                module.exports = TimeStep;

                /***/
            }),
            /* 125 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var stack = __webpack_require__(126);
                var RangeItem = __webpack_require__(127);

                /**
                 * @constructor Group
                 * @param {Number | String} groupId
                 * @param {Object} data
                 * @param {ItemSet} itemSet
                 */
                function Group(groupId, data, itemSet) {
                    this.groupId = groupId;
                    this.subgroups = {};
                    this.subgroupIndex = 0;
                    this.subgroupOrderer = data && data.subgroupOrder;
                    this.itemSet = itemSet;
                    this.isVisible = null;
                    this.stackDirty = true; // if true, items will be restacked on next redraw

                    if (data && data.nestedGroups) {
                        this.nestedGroups = data.nestedGroups;
                        if (data.showNested == false) {
                            this.showNested = false;
                        } else {
                            this.showNested = true;
                        }
                    }

                    this.nestedInGroup = null;

                    this.dom = {};
                    this.props = {
                        label: {
                            width: 0,
                            height: 0
                        }
                    };
                    this.className = null;

                    this.items = {}; // items filtered by groupId of this group
                    this.visibleItems = []; // items currently visible in window
                    this.itemsInRange = []; // items currently in range
                    this.orderedItems = {
                        byStart: [],
                        byEnd: []
                    };
                    this.checkRangedItems = false; // needed to refresh the ranged items if the window is programatically changed with NO overlap.
                    var me = this;
                    this.itemSet.body.emitter.on("checkRangedItems", function() {
                        me.checkRangedItems = true;
                    });

                    this._create();

                    this.setData(data);
                }

                /**
                 * Create DOM elements for the group
                 * @private
                 */
                Group.prototype._create = function() {
                    var label = document.createElement('div');
                    if (this.itemSet.options.groupEditable.order) {
                        label.className = 'vis-label draggable';
                    } else {
                        label.className = 'vis-label';
                    }
                    this.dom.label = label;

                    var inner = document.createElement('div');
                    inner.className = 'vis-inner';
                    label.appendChild(inner);
                    this.dom.inner = inner;

                    var foreground = document.createElement('div');
                    foreground.className = 'vis-group';
                    foreground['timeline-group'] = this;
                    this.dom.foreground = foreground;

                    this.dom.background = document.createElement('div');
                    this.dom.background.className = 'vis-group';

                    this.dom.axis = document.createElement('div');
                    this.dom.axis.className = 'vis-group';

                    // create a hidden marker to detect when the Timelines container is attached
                    // to the DOM, or the style of a parent of the Timeline is changed from
                    // display:none is changed to visible.
                    this.dom.marker = document.createElement('div');
                    this.dom.marker.style.visibility = 'hidden';
                    this.dom.marker.style.position = 'absolute';
                    this.dom.marker.innerHTML = '';
                    this.dom.background.appendChild(this.dom.marker);
                };

                /**
                 * Set the group data for this group
                 * @param {Object} data   Group data, can contain properties content and className
                 */
                Group.prototype.setData = function(data) {
                    // update contents
                    var content;
                    var templateFunction;

                    if (this.itemSet.options && this.itemSet.options.groupTemplate) {
                        templateFunction = this.itemSet.options.groupTemplate.bind(this);
                        content = templateFunction(data, this.dom.inner);
                    } else {
                        content = data && data.content;
                    }

                    if (content instanceof Element) {
                        this.dom.inner.appendChild(content);
                        while (this.dom.inner.firstChild) {
                            this.dom.inner.removeChild(this.dom.inner.firstChild);
                        }
                        this.dom.inner.appendChild(content);
                    } else if (content instanceof Object) {
                        templateFunction(data, this.dom.inner);
                    } else if (content !== undefined && content !== null) {
                        this.dom.inner.innerHTML = content;
                    } else {
                        this.dom.inner.innerHTML = this.groupId || ''; // groupId can be null
                    }

                    // update title
                    this.dom.label.title = data && data.title || '';
                    if (!this.dom.inner.firstChild) {
                        util.addClassName(this.dom.inner, 'vis-hidden');
                    } else {
                        util.removeClassName(this.dom.inner, 'vis-hidden');
                    }

                    if (data && data.nestedGroups) {
                        if (!this.nestedGroups || this.nestedGroups != data.nestedGroups) {
                            this.nestedGroups = data.nestedGroups;
                        }

                        if (data.showNested !== undefined || this.showNested === undefined) {
                            if (data.showNested == false) {
                                this.showNested = false;
                            } else {
                                this.showNested = true;
                            }
                        }

                        util.addClassName(this.dom.label, 'vis-nesting-group');
                        var collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
                        if (this.showNested) {
                            util.removeClassName(this.dom.label, collapsedDirClassName);
                            util.addClassName(this.dom.label, 'expanded');
                        } else {
                            util.removeClassName(this.dom.label, 'expanded');
                            util.addClassName(this.dom.label, collapsedDirClassName);
                        }
                    } else if (this.nestedGroups) {
                        this.nestedGroups = null;

                        var collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
                        util.removeClassName(this.dom.label, collapsedDirClassName);
                        util.removeClassName(this.dom.label, 'expanded');
                        util.removeClassName(this.dom.label, 'vis-nesting-group');
                    }

                    if (data && data.nestedInGroup) {
                        util.addClassName(this.dom.label, 'vis-nested-group');
                        if (this.itemSet.options && this.itemSet.options.rtl) {
                            this.dom.inner.style.paddingRight = '30px';
                        } else {
                            this.dom.inner.style.paddingLeft = '30px';
                        }
                    }

                    // update className
                    var className = data && data.className || null;
                    if (className != this.className) {
                        if (this.className) {
                            util.removeClassName(this.dom.label, this.className);
                            util.removeClassName(this.dom.foreground, this.className);
                            util.removeClassName(this.dom.background, this.className);
                            util.removeClassName(this.dom.axis, this.className);
                        }
                        util.addClassName(this.dom.label, className);
                        util.addClassName(this.dom.foreground, className);
                        util.addClassName(this.dom.background, className);
                        util.addClassName(this.dom.axis, className);
                        this.className = className;
                    }

                    // update style
                    if (this.style) {
                        util.removeCssText(this.dom.label, this.style);
                        this.style = null;
                    }
                    if (data && data.style) {
                        util.addCssText(this.dom.label, data.style);
                        this.style = data.style;
                    }
                };

                /**
                 * Get the width of the group label
                 * @return {number} width
                 */
                Group.prototype.getLabelWidth = function() {
                    return this.props.label.width;
                };

                /**
                 * Repaint this group
                 * @param {{start: number, end: number}} range
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 * @param {boolean} [forceRestack=false]  Force restacking of all items
                 * @return {boolean} Returns true if the group is resized
                 */
                Group.prototype.redraw = function(range, margin, forceRestack) {
                    var resized = false;

                    // force recalculation of the height of the items when the marker height changed
                    // (due to the Timeline being attached to the DOM or changed from display:none to visible)
                    var markerHeight = this.dom.marker.clientHeight;
                    if (markerHeight != this.lastMarkerHeight) {
                        this.lastMarkerHeight = markerHeight;
                        util.forEach(this.items, function(item) {
                            item.dirty = true;
                            if (item.displayed) item.redraw();
                        });

                        forceRestack = true;
                    }

                    // recalculate the height of the subgroups
                    this._calculateSubGroupHeights(margin);

                    // calculate actual size and position
                    var foreground = this.dom.foreground;
                    this.top = foreground.offsetTop;
                    this.right = foreground.offsetLeft;
                    this.width = foreground.offsetWidth;

                    var lastIsVisible = this.isVisible;
                    this.isVisible = this._isGroupVisible(range, margin);

                    var restack = forceRestack || this.stackDirty || this.isVisible && !lastIsVisible;

                    // if restacking, reposition visible items vertically 
                    if (restack) {
                        if (typeof this.itemSet.options.order === 'function') {
                            // a custom order function
                            // brute force restack of all items

                            // show all items
                            var me = this;
                            var limitSize = false;
                            util.forEach(this.items, function(item) {
                                if (!item.displayed) {
                                    item.redraw();
                                    me.visibleItems.push(item);
                                }
                                item.repositionX(limitSize);
                            });

                            // order all items and force a restacking
                            var customOrderedItems = this.orderedItems.byStart.slice().sort(function(a, b) {
                                return me.itemSet.options.order(a.data, b.data);
                            });
                            stack.stack(customOrderedItems, margin, true /* restack=true */ );
                            this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);
                        } else {
                            // no custom order function, lazy stacking
                            this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

                            if (this.itemSet.options.stack) {
                                // TODO: ugly way to access options...
                                stack.stack(this.visibleItems, margin, true /* restack=true */ );
                            } else {
                                // no stacking
                                stack.nostack(this.visibleItems, margin, this.subgroups, this.itemSet.options.stackSubgroups);
                            }
                        }

                        this.stackDirty = false;
                    }

                    this._updateSubgroupsSizes();

                    // recalculate the height of the group
                    var height = this._calculateHeight(margin);

                    // calculate actual size and position
                    var foreground = this.dom.foreground;
                    this.top = foreground.offsetTop;
                    this.right = foreground.offsetLeft;
                    this.width = foreground.offsetWidth;
                    resized = util.updateProperty(this, 'height', height) || resized;
                    // recalculate size of label
                    resized = util.updateProperty(this.props.label, 'width', this.dom.inner.clientWidth) || resized;
                    resized = util.updateProperty(this.props.label, 'height', this.dom.inner.clientHeight) || resized;

                    // apply new height
                    this.dom.background.style.height = height + 'px';
                    this.dom.foreground.style.height = height + 'px';
                    this.dom.label.style.height = height + 'px';

                    // update vertical position of items after they are re-stacked and the height of the group is calculated
                    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
                        var item = this.visibleItems[i];
                        item.repositionY(margin);
                        if (!this.isVisible && this.groupId != "__background__") {
                            if (item.displayed) item.hide();
                        }
                    }

                    if (!this.isVisible && this.height) {
                        return resized = false;
                    }

                    return resized;
                };

                /**
                 * recalculate the height of the subgroups
                 * @private
                 */
                Group.prototype._calculateSubGroupHeights = function(margin) {
                    if ((0, _keys2['default'])(this.subgroups).length > 0) {
                        var me = this;

                        this.resetSubgroups();

                        util.forEach(this.visibleItems, function(item) {
                            if (item.data.subgroup !== undefined) {
                                me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height + margin.item.vertical);
                                me.subgroups[item.data.subgroup].visible = true;
                            }
                        });
                    }
                };

                /**
                 * check if group is visible
                 * @private
                 */
                Group.prototype._isGroupVisible = function(range, margin) {
                    var isVisible = this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
                    return isVisible;
                };

                /**
                 * recalculate the height of the group
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 * @returns {number} Returns the height
                 * @private
                 */
                Group.prototype._calculateHeight = function(margin) {
                    // recalculate the height of the group
                    var height;
                    var itemsInRange = this.visibleItems;
                    if (itemsInRange.length > 0) {
                        var min = itemsInRange[0].top;
                        var max = itemsInRange[0].top + itemsInRange[0].height;
                        util.forEach(itemsInRange, function(item) {
                            min = Math.min(min, item.top);
                            max = Math.max(max, item.top + item.height);
                        });
                        if (min > margin.axis) {
                            // there is an empty gap between the lowest item and the axis
                            var offset = min - margin.axis;
                            max -= offset;
                            util.forEach(itemsInRange, function(item) {
                                item.top -= offset;
                            });
                        }
                        height = max + margin.item.vertical / 2;
                    } else {
                        height = 0;
                    }
                    height = Math.max(height, this.props.label.height);

                    return height;
                };

                /**
                 * Show this group: attach to the DOM
                 */
                Group.prototype.show = function() {
                    if (!this.dom.label.parentNode) {
                        this.itemSet.dom.labelSet.appendChild(this.dom.label);
                    }

                    if (!this.dom.foreground.parentNode) {
                        this.itemSet.dom.foreground.appendChild(this.dom.foreground);
                    }

                    if (!this.dom.background.parentNode) {
                        this.itemSet.dom.background.appendChild(this.dom.background);
                    }

                    if (!this.dom.axis.parentNode) {
                        this.itemSet.dom.axis.appendChild(this.dom.axis);
                    }
                };

                /**
                 * Hide this group: remove from the DOM
                 */
                Group.prototype.hide = function() {
                    var label = this.dom.label;
                    if (label.parentNode) {
                        label.parentNode.removeChild(label);
                    }

                    var foreground = this.dom.foreground;
                    if (foreground.parentNode) {
                        foreground.parentNode.removeChild(foreground);
                    }

                    var background = this.dom.background;
                    if (background.parentNode) {
                        background.parentNode.removeChild(background);
                    }

                    var axis = this.dom.axis;
                    if (axis.parentNode) {
                        axis.parentNode.removeChild(axis);
                    }
                };

                /**
                 * Add an item to the group
                 * @param {Item} item
                 */
                Group.prototype.add = function(item) {
                    this.items[item.id] = item;
                    item.setParent(this);
                    this.stackDirty = true;
                    // add to
                    if (item.data.subgroup !== undefined) {
                        this._addToSubgroup(item);
                        this.orderSubgroups();
                    }

                    if (this.visibleItems.indexOf(item) == -1) {
                        var range = this.itemSet.body.range; // TODO: not nice accessing the range like this
                        this._checkIfVisible(item, this.visibleItems, range);
                    }
                };

                Group.prototype._addToSubgroup = function(item, subgroupId) {
                    subgroupId = subgroupId || item.data.subgroup;
                    if (subgroupId != undefined && this.subgroups[subgroupId] === undefined) {
                        this.subgroups[subgroupId] = {
                            height: 0,
                            top: 0,
                            start: item.data.start,
                            end: item.data.end,
                            visible: false,
                            index: this.subgroupIndex,
                            items: []
                        };
                        this.subgroupIndex++;
                    }

                    if (new Date(item.data.start) < new Date(this.subgroups[subgroupId].start)) {
                        this.subgroups[subgroupId].start = item.data.start;
                    }
                    if (new Date(item.data.end) > new Date(this.subgroups[subgroupId].end)) {
                        this.subgroups[subgroupId].end = item.data.end;
                    }

                    this.subgroups[subgroupId].items.push(item);
                };

                Group.prototype._updateSubgroupsSizes = function() {
                    var me = this;
                    if (me.subgroups) {
                        for (var subgroup in me.subgroups) {
                            var newStart = me.subgroups[subgroup].items[0].data.start;
                            var newEnd = me.subgroups[subgroup].items[0].data.end;

                            me.subgroups[subgroup].items.forEach(function(item) {
                                if (new Date(item.data.start) < new Date(newStart)) {
                                    newStart = item.data.start;
                                }
                                if (new Date(item.data.end) > new Date(newEnd)) {
                                    newEnd = item.data.end;
                                }
                            });

                            me.subgroups[subgroup].start = newStart;
                            me.subgroups[subgroup].end = newEnd;
                        }
                    }
                };

                Group.prototype.orderSubgroups = function() {
                    if (this.subgroupOrderer !== undefined) {
                        var sortArray = [];
                        if (typeof this.subgroupOrderer == 'string') {
                            for (var subgroup in this.subgroups) {
                                sortArray.push({ subgroup: subgroup, sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer] });
                            }
                            sortArray.sort(function(a, b) {
                                return a.sortField - b.sortField;
                            });
                        } else if (typeof this.subgroupOrderer == 'function') {
                            for (var subgroup in this.subgroups) {
                                sortArray.push(this.subgroups[subgroup].items[0].data);
                            }
                            sortArray.sort(this.subgroupOrderer);
                        }

                        if (sortArray.length > 0) {
                            for (var i = 0; i < sortArray.length; i++) {
                                this.subgroups[sortArray[i].subgroup].index = i;
                            }
                        }
                    }
                };

                Group.prototype.resetSubgroups = function() {
                    for (var subgroup in this.subgroups) {
                        if (this.subgroups.hasOwnProperty(subgroup)) {
                            this.subgroups[subgroup].visible = false;
                            this.subgroups[subgroup].height = 0;
                        }
                    }
                };

                /**
                 * Remove an item from the group
                 * @param {Item} item
                 */
                Group.prototype.remove = function(item) {
                    delete this.items[item.id];
                    item.setParent(null);
                    this.stackDirty = true;

                    // remove from visible items
                    var index = this.visibleItems.indexOf(item);
                    if (index != -1) this.visibleItems.splice(index, 1);

                    if (item.data.subgroup !== undefined) {
                        this._removeFromSubgroup(item);
                        this.orderSubgroups();
                    }
                };

                Group.prototype._removeFromSubgroup = function(item, subgroupId) {
                    subgroupId = subgroupId || item.data.subgroup;
                    if (subgroupId != undefined) {
                        var subgroup = this.subgroups[subgroupId];
                        if (subgroup) {
                            var itemIndex = subgroup.items.indexOf(item);
                            //  Check the item is actually in this subgroup. How should items not in the group be handled?
                            if (itemIndex >= 0) {
                                subgroup.items.splice(itemIndex, 1);
                                if (!subgroup.items.length) {
                                    delete this.subgroups[subgroupId];
                                } else {
                                    this._updateSubgroupsSizes();
                                }
                            }
                        }
                    }
                };

                /**
                 * Remove an item from the corresponding DataSet
                 * @param {Item} item
                 */
                Group.prototype.removeFromDataSet = function(item) {
                    this.itemSet.removeItem(item.id);
                };

                /**
                 * Reorder the items
                 */
                Group.prototype.order = function() {
                    var array = util.toArray(this.items);
                    var startArray = [];
                    var endArray = [];

                    for (var i = 0; i < array.length; i++) {
                        if (array[i].data.end !== undefined) {
                            endArray.push(array[i]);
                        }
                        startArray.push(array[i]);
                    }
                    this.orderedItems = {
                        byStart: startArray,
                        byEnd: endArray
                    };

                    stack.orderByStart(this.orderedItems.byStart);
                    stack.orderByEnd(this.orderedItems.byEnd);
                };

                /**
                 * Update the visible items
                 * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
                 * @param {Item[]} visibleItems                             The previously visible items.
                 * @param {{start: number, end: number}} range              Visible range
                 * @return {Item[]} visibleItems                            The new visible items.
                 * @private
                 */
                Group.prototype._updateItemsInRange = function(orderedItems, oldVisibleItems, range) {
                    var visibleItems = [];
                    var visibleItemsLookup = {}; // we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems

                    var interval = (range.end - range.start) / 4;
                    var lowerBound = range.start - interval;
                    var upperBound = range.end + interval;

                    // this function is used to do the binary search.
                    var searchFunction = function searchFunction(value) {
                        if (value < lowerBound) {
                            return -1;
                        } else if (value <= upperBound) {
                            return 0;
                        } else {
                            return 1;
                        }
                    };

                    // first check if the items that were in view previously are still in view.
                    // IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
                    // also cleans up invisible items.
                    if (oldVisibleItems.length > 0) {
                        for (var i = 0; i < oldVisibleItems.length; i++) {
                            this._checkIfVisibleWithReference(oldVisibleItems[i], visibleItems, visibleItemsLookup, range);
                        }
                    }

                    // we do a binary search for the items that have only start values.
                    var initialPosByStart = util.binarySearchCustom(orderedItems.byStart, searchFunction, 'data', 'start');

                    // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.
                    this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function(item) {
                        return item.data.start < lowerBound || item.data.start > upperBound;
                    });

                    // if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
                    // We therefore have to brute force check all items in the byEnd list
                    if (this.checkRangedItems == true) {
                        this.checkRangedItems = false;
                        for (i = 0; i < orderedItems.byEnd.length; i++) {
                            this._checkIfVisibleWithReference(orderedItems.byEnd[i], visibleItems, visibleItemsLookup, range);
                        }
                    } else {
                        // we do a binary search for the items that have defined end times.
                        var initialPosByEnd = util.binarySearchCustom(orderedItems.byEnd, searchFunction, 'data', 'end');

                        // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.
                        this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function(item) {
                            return item.data.end < lowerBound || item.data.end > upperBound;
                        });
                    }

                    // finally, we reposition all the visible items.
                    for (var i = 0; i < visibleItems.length; i++) {
                        var item = visibleItems[i];
                        if (!item.displayed) item.show();
                        // reposition item horizontally
                        item.repositionX();
                    }

                    return visibleItems;
                };

                Group.prototype._traceVisible = function(initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
                    if (initialPos != -1) {
                        for (var i = initialPos; i >= 0; i--) {
                            var item = items[i];
                            if (breakCondition(item)) {
                                break;
                            } else {
                                if (visibleItemsLookup[item.id] === undefined) {
                                    visibleItemsLookup[item.id] = true;
                                    visibleItems.push(item);
                                }
                            }
                        }

                        for (var i = initialPos + 1; i < items.length; i++) {
                            var item = items[i];
                            if (breakCondition(item)) {
                                break;
                            } else {
                                if (visibleItemsLookup[item.id] === undefined) {
                                    visibleItemsLookup[item.id] = true;
                                    visibleItems.push(item);
                                }
                            }
                        }
                    }
                };

                /**
                 * this function is very similar to the _checkIfInvisible() but it does not
                 * return booleans, hides the item if it should not be seen and always adds to
                 * the visibleItems.
                 * this one is for brute forcing and hiding.
                 *
                 * @param {Item} item
                 * @param {Array} visibleItems
                 * @param {{start:number, end:number}} range
                 * @private
                 */
                Group.prototype._checkIfVisible = function(item, visibleItems, range) {
                    if (item.isVisible(range)) {
                        if (!item.displayed) item.show();
                        // reposition item horizontally
                        item.repositionX();
                        visibleItems.push(item);
                    } else {
                        if (item.displayed) item.hide();
                    }
                };

                /**
                 * this function is very similar to the _checkIfInvisible() but it does not
                 * return booleans, hides the item if it should not be seen and always adds to
                 * the visibleItems.
                 * this one is for brute forcing and hiding.
                 *
                 * @param {Item} item
                 * @param {Array} visibleItems
                 * @param {{start:number, end:number}} range
                 * @private
                 */
                Group.prototype._checkIfVisibleWithReference = function(item, visibleItems, visibleItemsLookup, range) {
                    if (item.isVisible(range)) {
                        if (visibleItemsLookup[item.id] === undefined) {
                            visibleItemsLookup[item.id] = true;
                            visibleItems.push(item);
                        }
                    } else {
                        if (item.displayed) item.hide();
                    }
                };

                Group.prototype.changeSubgroup = function(item, oldSubgroup, newSubgroup) {
                    this._removeFromSubgroup(item, oldSubgroup);
                    this._addToSubgroup(item, newSubgroup);
                    this.orderSubgroups();
                };

                module.exports = Group;

                /***/
            }),
            /* 126 */
            /***/
            (function(module, exports) {

                'use strict';

                // Utility functions for ordering and stacking of items
                var EPSILON = 0.001; // used when checking collisions, to prevent round-off errors

                /**
                 * Order items by their start data
                 * @param {Item[]} items
                 */
                exports.orderByStart = function(items) {
                    items.sort(function(a, b) {
                        return a.data.start - b.data.start;
                    });
                };

                /**
                 * Order items by their end date. If they have no end date, their start date
                 * is used.
                 * @param {Item[]} items
                 */
                exports.orderByEnd = function(items) {
                    items.sort(function(a, b) {
                        var aTime = 'end' in a.data ? a.data.end : a.data.start,
                            bTime = 'end' in b.data ? b.data.end : b.data.start;

                        return aTime - bTime;
                    });
                };

                /**
                 * Adjust vertical positions of the items such that they don't overlap each
                 * other.
                 * @param {Item[]} items
                 *            All visible items
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 *            Margins between items and between items and the axis.
                 * @param {boolean} [force=false]
                 *            If true, all items will be repositioned. If false (default), only
                 *            items having a top===null will be re-stacked
                 */
                exports.stack = function(items, margin, force) {
                    if (force) {
                        // reset top position of all items
                        for (var i = 0; i < items.length; i++) {
                            items[i].top = null;
                        }
                    }

                    // calculate new, non-overlapping positions
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        if (item.stack && item.top === null) {
                            // initialize top position
                            item.top = margin.axis;

                            do {
                                // TODO: optimize checking for overlap. when there is a gap without items,
                                //       you only need to check for items from the next item on, not from zero
                                var collidingItem = null;
                                for (var j = 0, jj = items.length; j < jj; j++) {
                                    var other = items[j];
                                    if (other.top !== null && other !== item && other.stack && exports.collision(item, other, margin.item, other.options.rtl)) {
                                        collidingItem = other;
                                        break;
                                    }
                                }

                                if (collidingItem != null) {
                                    // There is a collision. Reposition the items above the colliding element
                                    item.top = collidingItem.top + collidingItem.height + margin.item.vertical;
                                }
                            } while (collidingItem);
                        }
                    }
                };

                /**
                 * Adjust vertical positions of the items without stacking them
                 * @param {Item[]} items
                 *            All visible items
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 *            Margins between items and between items and the axis.
                 * @param {subgroups[]} subgroups
                 *            All subgroups
                 */
                exports.nostack = function(items, margin, subgroups, stackSubgroups) {
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].data.subgroup == undefined) {
                            items[i].top = margin.item.vertical;
                        } else if (items[i].data.subgroup !== undefined && stackSubgroups) {
                            var newTop = 0;
                            for (var subgroup in subgroups) {
                                if (subgroups.hasOwnProperty(subgroup)) {
                                    if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[i].data.subgroup].index) {
                                        newTop += subgroups[subgroup].height;
                                        subgroups[items[i].data.subgroup].top = newTop;
                                    }
                                }
                            }
                            items[i].top = newTop + 0.5 * margin.item.vertical;
                        }
                    }
                    if (!stackSubgroups) {
                        exports.stackSubgroups(items, margin, subgroups);
                    }
                };

                /**
                 * Adjust vertical positions of the subgroups such that they don't overlap each
                 * other.
                 * @param {subgroups[]} subgroups
                 *            All subgroups
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 *            Margins between items and between items and the axis.
                 */
                exports.stackSubgroups = function(items, margin, subgroups) {
                    for (var subgroup in subgroups) {
                        if (subgroups.hasOwnProperty(subgroup)) {

                            subgroups[subgroup].top = 0;
                            do {
                                // TODO: optimize checking for overlap. when there is a gap without items,
                                //       you only need to check for items from the next item on, not from zero
                                var collidingItem = null;
                                for (var otherSubgroup in subgroups) {
                                    if (subgroups[otherSubgroup].top !== null && otherSubgroup !== subgroup && subgroups[subgroup].index > subgroups[otherSubgroup].index && exports.collisionByTimes(subgroups[subgroup], subgroups[otherSubgroup])) {
                                        collidingItem = subgroups[otherSubgroup];
                                        break;
                                    }
                                }

                                if (collidingItem != null) {
                                    // There is a collision. Reposition the subgroups above the colliding element
                                    subgroups[subgroup].top = collidingItem.top + collidingItem.height;
                                }
                            } while (collidingItem);
                        }
                    }
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].data.subgroup !== undefined) {
                            items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;
                        }
                    }
                };

                /**
                 * Test if the two provided items collide
                 * The items must have parameters left, width, top, and height.
                 * @param {Item} a          The first item
                 * @param {Item} b          The second item
                 * @param {{horizontal: number, vertical: number}} margin
                 *                          An object containing a horizontal and vertical
                 *                          minimum required margin.
                 * @param {boolean} rtl
                 * @return {boolean}        true if a and b collide, else false
                 */
                exports.collision = function(a, b, margin, rtl) {
                    if (rtl) {
                        return a.right - margin.horizontal + EPSILON < b.right + b.width && a.right + a.width + margin.horizontal - EPSILON > b.right && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
                    } else {
                        return a.left - margin.horizontal + EPSILON < b.left + b.width && a.left + a.width + margin.horizontal - EPSILON > b.left && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
                    }
                };

                /**
                 * Test if the two provided objects collide
                 * The objects must have parameters start, end, top, and height.
                 * @param {Object} a          The first Object
                 * @param {Object} b          The second Object
                 * @return {boolean}        true if a and b collide, else false
                 */
                exports.collisionByTimes = function(a, b) {
                    return a.start <= b.start && a.end >= b.start && a.top < b.top + b.height && a.top + a.height > b.top || b.start <= a.start && b.end >= a.start && b.top < a.top + a.height && b.top + b.height > a.top;
                };

                /***/
            }),
            /* 127 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Hammer = __webpack_require__(112);
                var Item = __webpack_require__(128);

                /**
                 * @constructor RangeItem
                 * @extends Item
                 * @param {Object} data             Object containing parameters start, end
                 *                                  content, className.
                 * @param {{toScreen: function, toTime: function}} conversion
                 *                                  Conversion functions from time to screen and vice versa
                 * @param {Object} [options]        Configuration options
                 *                                  // TODO: describe options
                 */
                function RangeItem(data, conversion, options) {
                    this.props = {
                        content: {
                            width: 0
                        }
                    };
                    this.overflow = false; // if contents can overflow (css styling), this flag is set to true
                    this.options = options;
                    // validate data
                    if (data) {
                        if (data.start == undefined) {
                            throw new Error('Property "start" missing in item ' + data.id);
                        }
                        if (data.end == undefined) {
                            throw new Error('Property "end" missing in item ' + data.id);
                        }
                    }

                    Item.call(this, data, conversion, options);
                }

                RangeItem.prototype = new Item(null, null, null);

                RangeItem.prototype.baseClassName = 'vis-item vis-range';

                /**
                 * Check whether this item is visible inside given range
                 * @returns {{start: Number, end: Number}} range with a timestamp for start and end
                 * @returns {boolean} True if visible
                 */
                RangeItem.prototype.isVisible = function(range) {
                    // determine visibility
                    return this.data.start < range.end && this.data.end > range.start;
                };

                /**
                 * Repaint the item
                 */
                RangeItem.prototype.redraw = function() {
                    var dom = this.dom;
                    if (!dom) {
                        // create DOM
                        this.dom = {};
                        dom = this.dom;

                        // background box
                        dom.box = document.createElement('div');
                        // className is updated in redraw()

                        // frame box (to prevent the item contents from overflowing)
                        dom.frame = document.createElement('div');
                        dom.frame.className = 'vis-item-overflow';
                        dom.box.appendChild(dom.frame);

                        // visible frame box (showing the frame that is always visible)
                        dom.visibleFrame = document.createElement('div');
                        dom.visibleFrame.className = 'vis-item-visible-frame';
                        dom.box.appendChild(dom.visibleFrame);

                        // contents box
                        dom.content = document.createElement('div');
                        dom.content.className = 'vis-item-content';
                        dom.frame.appendChild(dom.content);

                        // attach this item as attribute
                        dom.box['timeline-item'] = this;

                        this.dirty = true;
                    }

                    // append DOM to parent DOM
                    if (!this.parent) {
                        throw new Error('Cannot redraw item: no parent attached');
                    }
                    if (!dom.box.parentNode) {
                        var foreground = this.parent.dom.foreground;
                        if (!foreground) {
                            throw new Error('Cannot redraw item: parent has no foreground container element');
                        }
                        foreground.appendChild(dom.box);
                    }
                    this.displayed = true;

                    // Update DOM when item is marked dirty. An item is marked dirty when:
                    // - the item is not yet rendered
                    // - the item's data is changed
                    // - the item is selected/deselected
                    if (this.dirty) {
                        this._updateContents(this.dom.content);
                        this._updateDataAttributes(this.dom.box);
                        this._updateStyle(this.dom.box);

                        var editable = this.editable.updateTime || this.editable.updateGroup;

                        // update class
                        var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
                        dom.box.className = this.baseClassName + className;

                        // determine from css whether this box has overflow
                        this.overflow = window.getComputedStyle(dom.frame).overflow !== 'hidden';

                        // recalculate size
                        // turn off max-width to be able to calculate the real width
                        // this causes an extra browser repaint/reflow, but so be it
                        this.dom.content.style.maxWidth = 'none';
                        this.props.content.width = this.dom.content.offsetWidth;
                        this.height = this.dom.box.offsetHeight;
                        this.dom.content.style.maxWidth = '';

                        this.dirty = false;
                    }

                    this._repaintOnItemUpdateTimeTooltip(dom.box);
                    this._repaintDeleteButton(dom.box);
                    this._repaintDragCenter();
                    this._repaintDragLeft();
                    this._repaintDragRight();
                };

                /**
                 * Show the item in the DOM (when not already visible). The items DOM will
                 * be created when needed.
                 */
                RangeItem.prototype.show = function() {
                    if (!this.displayed) {
                        this.redraw();
                    }
                };

                /**
                 * Hide the item from the DOM (when visible)
                 * @return {Boolean} changed
                 */
                RangeItem.prototype.hide = function() {
                    if (this.displayed) {
                        var box = this.dom.box;

                        if (box.parentNode) {
                            box.parentNode.removeChild(box);
                        }

                        this.displayed = false;
                    }
                };

                /**
                 * Reposition the item horizontally
                 * @param {boolean} [limitSize=true] If true (default), the width of the range
                 *                                   item will be limited, as the browser cannot
                 *                                   display very wide divs. This means though
                 *                                   that the applied left and width may
                 *                                   not correspond to the ranges start and end
                 * @Override
                 */
                RangeItem.prototype.repositionX = function(limitSize) {
                    var parentWidth = this.parent.width;
                    var start = this.conversion.toScreen(this.data.start);
                    var end = this.conversion.toScreen(this.data.end);
                    var contentStartPosition;
                    var contentWidth;

                    // limit the width of the range, as browsers cannot draw very wide divs
                    if (limitSize === undefined || limitSize === true) {
                        if (start < -parentWidth) {
                            start = -parentWidth;
                        }
                        if (end > 2 * parentWidth) {
                            end = 2 * parentWidth;
                        }
                    }

                    // add 0.5 to compensate floating-point values rounding
                    var boxWidth = Math.max(end - start + 0.5, 1);

                    if (this.overflow) {
                        if (this.options.rtl) {
                            this.right = start;
                        } else {
                            this.left = start;
                        }
                        this.width = boxWidth + this.props.content.width;
                        contentWidth = this.props.content.width;

                        // Note: The calculation of width is an optimistic calculation, giving
                        //       a width which will not change when moving the Timeline
                        //       So no re-stacking needed, which is nicer for the eye;
                    } else {
                        if (this.options.rtl) {
                            this.right = start;
                        } else {
                            this.left = start;
                        }
                        this.width = boxWidth;
                        contentWidth = Math.min(end - start, this.props.content.width);
                    }

                    if (this.options.rtl) {
                        this.dom.box.style.right = this.right + 'px';
                    } else {
                        this.dom.box.style.left = this.left + 'px';
                    }
                    this.dom.box.style.width = boxWidth + 'px';

                    switch (this.options.align) {
                        case 'left':
                            if (this.options.rtl) {
                                this.dom.content.style.right = '0';
                            } else {
                                this.dom.content.style.left = '0';
                            }
                            break;

                        case 'right':
                            if (this.options.rtl) {
                                this.dom.content.style.right = Math.max(boxWidth - contentWidth, 0) + 'px';
                            } else {
                                this.dom.content.style.left = Math.max(boxWidth - contentWidth, 0) + 'px';
                            }
                            break;

                        case 'center':
                            if (this.options.rtl) {
                                this.dom.content.style.right = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
                            } else {
                                this.dom.content.style.left = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
                            }

                            break;

                        default:
                            // 'auto'
                            // when range exceeds left of the window, position the contents at the left of the visible area
                            if (this.overflow) {
                                if (end > 0) {
                                    contentStartPosition = Math.max(-start, 0);
                                } else {
                                    contentStartPosition = -contentWidth; // ensure it's not visible anymore
                                }
                            } else {
                                if (start < 0) {
                                    contentStartPosition = -start;
                                } else {
                                    contentStartPosition = 0;
                                }
                            }
                            if (this.options.rtl) {
                                this.dom.content.style.right = contentStartPosition + 'px';
                            } else {
                                this.dom.content.style.left = contentStartPosition + 'px';
                                this.dom.content.style.width = 'calc(100% - ' + contentStartPosition + 'px)';
                            }
                    }
                };

                /**
                 * Reposition the item vertically
                 * @Override
                 */
                RangeItem.prototype.repositionY = function() {
                    var orientation = this.options.orientation.item;
                    var box = this.dom.box;

                    if (orientation == 'top') {
                        box.style.top = this.top + 'px';
                    } else {
                        box.style.top = this.parent.height - this.top - this.height + 'px';
                    }
                };

                /**
                 * Repaint a drag area on the left side of the range when the range is selected
                 * @protected
                 */
                RangeItem.prototype._repaintDragLeft = function() {
                    if (this.selected && this.options.editable.updateTime && !this.dom.dragLeft) {
                        // create and show drag area
                        var dragLeft = document.createElement('div');
                        dragLeft.className = 'vis-drag-left';
                        dragLeft.dragLeftItem = this;

                        this.dom.box.appendChild(dragLeft);
                        this.dom.dragLeft = dragLeft;
                    } else if (!this.selected && this.dom.dragLeft) {
                        // delete drag area
                        if (this.dom.dragLeft.parentNode) {
                            this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
                        }
                        this.dom.dragLeft = null;
                    }
                };

                /**
                 * Repaint a drag area on the right side of the range when the range is selected
                 * @protected
                 */
                RangeItem.prototype._repaintDragRight = function() {
                    if (this.selected && this.options.editable.updateTime && !this.dom.dragRight) {
                        // create and show drag area
                        var dragRight = document.createElement('div');
                        dragRight.className = 'vis-drag-right';
                        dragRight.dragRightItem = this;

                        this.dom.box.appendChild(dragRight);
                        this.dom.dragRight = dragRight;
                    } else if (!this.selected && this.dom.dragRight) {
                        // delete drag area
                        if (this.dom.dragRight.parentNode) {
                            this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
                        }
                        this.dom.dragRight = null;
                    }
                };

                module.exports = RangeItem;

                /***/
            }),
            /* 128 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Hammer = __webpack_require__(112);
                var util = __webpack_require__(1);
                var moment = __webpack_require__(82);

                /**
                 * @constructor Item
                 * @param {Object} data             Object containing (optional) parameters type,
                 *                                  start, end, content, group, className.
                 * @param {{toScreen: function, toTime: function}} conversion
                 *                                  Conversion functions from time to screen and vice versa
                 * @param {Object} options          Configuration options
                 *                                  // TODO: describe available options
                 */
                function Item(data, conversion, options) {
                    this.id = null;
                    this.parent = null;
                    this.data = data;
                    this.dom = null;
                    this.conversion = conversion || {};
                    this.options = options || {};
                    this.selected = false;
                    this.displayed = false;
                    this.groupShowing = true;
                    this.dirty = true;

                    this.top = null;
                    this.right = null;
                    this.left = null;
                    this.width = null;
                    this.height = null;

                    this.editable = null;
                    this._updateEditStatus();
                }

                Item.prototype.stack = true;

                /**
                 * Select current item
                 */
                Item.prototype.select = function() {
                    this.selected = true;
                    this.dirty = true;
                    if (this.displayed) this.redraw();
                };

                /**
                 * Unselect current item
                 */
                Item.prototype.unselect = function() {
                    this.selected = false;
                    this.dirty = true;
                    if (this.displayed) this.redraw();
                };

                /**
                 * Set data for the item. Existing data will be updated. The id should not
                 * be changed. When the item is displayed, it will be redrawn immediately.
                 * @param {Object} data
                 */
                Item.prototype.setData = function(data) {
                    var groupChanged = data.group != undefined && this.data.group != data.group;
                    if (groupChanged && this.parent != null) {
                        this.parent.itemSet._moveToGroup(this, data.group);
                    }
                    this.parent.stackDirty = true;

                    var subGroupChanged = data.subgroup != undefined && this.data.subgroup != data.subgroup;
                    if (subGroupChanged && this.parent != null) {
                        this.parent.changeSubgroup(this, this.data.subgroup, data.subgroup);
                    }

                    this.data = data;
                    this._updateEditStatus();
                    this.dirty = true;
                    if (this.displayed) this.redraw();
                };

                /**
                 * Set a parent for the item
                 * @param {Group} parent
                 */
                Item.prototype.setParent = function(parent) {
                    if (this.displayed) {
                        this.hide();
                        this.parent = parent;
                        if (this.parent) {
                            this.show();
                        }
                    } else {
                        this.parent = parent;
                    }
                };

                /**
                 * Check whether this item is visible inside given range
                 * @returns {{start: Number, end: Number}} range with a timestamp for start and end
                 * @returns {boolean} True if visible
                 */
                Item.prototype.isVisible = function(range) {
                    return false;
                };

                /**
                 * Show the Item in the DOM (when not already visible)
                 * @return {Boolean} changed
                 */
                Item.prototype.show = function() {
                    return false;
                };

                /**
                 * Hide the Item from the DOM (when visible)
                 * @return {Boolean} changed
                 */
                Item.prototype.hide = function() {
                    return false;
                };

                /**
                 * Repaint the item
                 */
                Item.prototype.redraw = function() {
                    // should be implemented by the item
                };

                /**
                 * Reposition the Item horizontally
                 */
                Item.prototype.repositionX = function() {
                    // should be implemented by the item
                };

                /**
                 * Reposition the Item vertically
                 */
                Item.prototype.repositionY = function() {
                    // should be implemented by the item
                };

                /**
                 * Repaint a drag area on the center of the item when the item is selected
                 * @protected
                 */
                Item.prototype._repaintDragCenter = function() {
                    if (this.selected && this.options.editable.updateTime && !this.dom.dragCenter) {
                        var me = this;
                        // create and show drag area
                        var dragCenter = document.createElement('div');
                        dragCenter.className = 'vis-drag-center';
                        dragCenter.dragCenterItem = this;
                        var hammer = new Hammer(dragCenter);

                        hammer.on('tap', function(event) {
                            me.parent.itemSet.body.emitter.emit('click', {
                                event: event,
                                item: me.id
                            });
                        });
                        hammer.on('doubletap', function(event) {
                            event.stopPropagation();
                            me.parent.itemSet._onUpdateItem(me);
                            me.parent.itemSet.body.emitter.emit('doubleClick', {
                                event: event,
                                item: me.id
                            });
                        });

                        if (this.dom.box) {
                            this.dom.box.appendChild(dragCenter);
                        } else if (this.dom.point) {
                            this.dom.point.appendChild(dragCenter);
                        }

                        this.dom.dragCenter = dragCenter;
                    } else if (!this.selected && this.dom.dragCenter) {
                        // delete drag area
                        if (this.dom.dragCenter.parentNode) {
                            this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
                        }
                        this.dom.dragCenter = null;
                    }
                };

                /**
                 * Repaint a delete button on the top right of the item when the item is selected
                 * @param {HTMLElement} anchor
                 * @protected
                 */
                Item.prototype._repaintDeleteButton = function(anchor) {
                    var editable = (this.options.editable.overrideItems || this.editable == null) && this.options.editable.remove || !this.options.editable.overrideItems && this.editable != null && this.editable.remove;

                    if (this.selected && editable && !this.dom.deleteButton) {
                        // create and show button
                        var me = this;

                        var deleteButton = document.createElement('div');

                        if (this.options.rtl) {
                            deleteButton.className = 'vis-delete-rtl';
                        } else {
                            deleteButton.className = 'vis-delete';
                        }
                        deleteButton.title = 'Delete this item';
                        // TODO: be able to destroy the delete button
                        new Hammer(deleteButton).on('tap', function(event) {
                            event.stopPropagation();
                            me.parent.removeFromDataSet(me);
                        });

                        anchor.appendChild(deleteButton);
                        this.dom.deleteButton = deleteButton;
                    } else if (!this.selected && this.dom.deleteButton) {
                        // remove button
                        if (this.dom.deleteButton.parentNode) {
                            this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
                        }
                        this.dom.deleteButton = null;
                    }
                };

                /**
                 * Repaint a onChange tooltip on the top right of the item when the item is selected
                 * @param {HTMLElement} anchor
                 * @protected
                 */
                Item.prototype._repaintOnItemUpdateTimeTooltip = function(anchor) {
                    if (!this.options.tooltipOnItemUpdateTime) return;

                    var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;

                    if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
                        // create and show tooltip
                        var me = this;

                        var onItemUpdateTimeTooltip = document.createElement('div');

                        onItemUpdateTimeTooltip.className = 'vis-onUpdateTime-tooltip';
                        anchor.appendChild(onItemUpdateTimeTooltip);
                        this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
                    } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
                        // remove button
                        if (this.dom.onItemUpdateTimeTooltip.parentNode) {
                            this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
                        }
                        this.dom.onItemUpdateTimeTooltip = null;
                    }

                    // position onChange tooltip
                    if (this.dom.onItemUpdateTimeTooltip) {

                        // only show when editing
                        this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? 'visible' : 'hidden';

                        // position relative to item's content
                        if (this.options.rtl) {
                            this.dom.onItemUpdateTimeTooltip.style.right = this.dom.content.style.right;
                        } else {
                            this.dom.onItemUpdateTimeTooltip.style.left = this.dom.content.style.left;
                        }

                        // position above or below the item depending on the item's position in the window
                        var tooltipOffset = 50; // TODO: should be tooltip height (depends on template)
                        var scrollTop = this.parent.itemSet.body.domProps.scrollTop;

                        // TODO: this.top for orientation:true is actually the items distance from the bottom... 
                        // (should be this.bottom)
                        var itemDistanceFromTop;
                        if (this.options.orientation.item == 'top') {
                            itemDistanceFromTop = this.top;
                        } else {
                            itemDistanceFromTop = this.parent.height - this.top - this.height;
                        }
                        var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;

                        if (isCloseToTop) {
                            this.dom.onItemUpdateTimeTooltip.style.bottom = "";
                            this.dom.onItemUpdateTimeTooltip.style.top = this.height + 2 + "px";
                        } else {
                            this.dom.onItemUpdateTimeTooltip.style.top = "";
                            this.dom.onItemUpdateTimeTooltip.style.bottom = this.height + 2 + "px";
                        }

                        // handle tooltip content
                        var content;
                        var templateFunction;

                        if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
                            templateFunction = this.options.tooltipOnItemUpdateTime.template.bind(this);
                            content = templateFunction(this.data);
                        } else {
                            content = 'start: ' + moment(this.data.start).format('MM/DD/YYYY hh:mm');
                            if (this.data.end) {
                                content += '<br> end: ' + moment(this.data.end).format('MM/DD/YYYY hh:mm');
                            }
                        }
                        this.dom.onItemUpdateTimeTooltip.innerHTML = content;
                    }
                };

                /**
                 * Set HTML contents for the item
                 * @param {Element} element   HTML element to fill with the contents
                 * @private
                 */
                Item.prototype._updateContents = function(element) {
                    var content;
                    var templateFunction;
                    var itemVisibleFrameContent;
                    var visibleFrameTemplateFunction;
                    var itemData = this.parent.itemSet.itemsData.get(this.id); // get a clone of the data from the dataset

                    var frameElement = this.dom.box || this.dom.point;
                    var itemVisibleFrameContentElement = frameElement.getElementsByClassName('vis-item-visible-frame')[0];

                    if (this.options.visibleFrameTemplate) {
                        visibleFrameTemplateFunction = this.options.visibleFrameTemplate.bind(this);
                        itemVisibleFrameContent = visibleFrameTemplateFunction(itemData, frameElement);
                    } else {
                        itemVisibleFrameContent = '';
                    }

                    if (itemVisibleFrameContentElement) {
                        if (itemVisibleFrameContent instanceof Object && !(itemVisibleFrameContent instanceof Element)) {
                            visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement);
                        } else {
                            var changed = this._contentToString(this.itemVisibleFrameContent) !== this._contentToString(itemVisibleFrameContent);
                            if (changed) {
                                // only replace the content when changed
                                if (itemVisibleFrameContent instanceof Element) {
                                    itemVisibleFrameContentElement.innerHTML = '';
                                    itemVisibleFrameContentElement.appendChild(itemVisibleFrameContent);
                                } else if (itemVisibleFrameContent != undefined) {
                                    itemVisibleFrameContentElement.innerHTML = itemVisibleFrameContent;
                                } else {
                                    if (!(this.data.type == 'background' && this.data.content === undefined)) {
                                        throw new Error('Property "content" missing in item ' + this.id);
                                    }
                                }

                                this.itemVisibleFrameContent = itemVisibleFrameContent;
                            }
                        }
                    }

                    if (this.options.template) {
                        templateFunction = this.options.template.bind(this);
                        content = templateFunction(itemData, element, this.data);
                    } else {
                        content = this.data.content;
                    }

                    if (content instanceof Object && !(content instanceof Element)) {
                        templateFunction(itemData, element);
                    } else {
                        var changed = this._contentToString(this.content) !== this._contentToString(content);
                        if (changed) {
                            // only replace the content when changed
                            if (content instanceof Element) {
                                element.innerHTML = '';
                                element.appendChild(content);
                            } else if (content != undefined) {
                                element.innerHTML = content;
                            } else {
                                if (!(this.data.type == 'background' && this.data.content === undefined)) {
                                    throw new Error('Property "content" missing in item ' + this.id);
                                }
                            }
                            this.content = content;
                        }
                    }
                };

                /**
                 * Process dataAttributes timeline option and set as data- attributes on dom.content
                 * @param {Element} element   HTML element to which the attributes will be attached
                 * @private
                 */
                Item.prototype._updateDataAttributes = function(element) {
                    if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
                        var attributes = [];

                        if (Array.isArray(this.options.dataAttributes)) {
                            attributes = this.options.dataAttributes;
                        } else if (this.options.dataAttributes == 'all') {
                            attributes = (0, _keys2['default'])(this.data);
                        } else {
                            return;
                        }

                        for (var i = 0; i < attributes.length; i++) {
                            var name = attributes[i];
                            var value = this.data[name];

                            if (value != null) {
                                element.setAttribute('data-' + name, value);
                            } else {
                                element.removeAttribute('data-' + name);
                            }
                        }
                    }
                };

                /**
                 * Update custom styles of the element
                 * @param element
                 * @private
                 */
                Item.prototype._updateStyle = function(element) {
                    // remove old styles
                    if (this.style) {
                        util.removeCssText(element, this.style);
                        this.style = null;
                    }

                    // append new styles
                    if (this.data.style) {
                        util.addCssText(element, this.data.style);
                        this.style = this.data.style;
                    }
                };

                /**
                 * Stringify the items contents
                 * @param {string | Element | undefined} content
                 * @returns {string | undefined}
                 * @private
                 */
                Item.prototype._contentToString = function(content) {
                    if (typeof content === 'string') return content;
                    if (content && 'outerHTML' in content) return content.outerHTML;
                    return content;
                };

                /**
                 * Update the editability of this item.
                 */
                Item.prototype._updateEditStatus = function() {
                    if (this.options) {
                        if (typeof this.options.editable === 'boolean') {
                            this.editable = {
                                updateTime: this.options.editable,
                                updateGroup: this.options.editable,
                                remove: this.options.editable
                            };
                        } else if ((0, _typeof3['default'])(this.options.editable) === 'object') {
                            this.editable = {};
                            util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.options.editable);
                        };
                    }
                    // Item data overrides, except if options.editable.overrideItems is set.
                    if (!this.options || !this.options.editable || this.options.editable.overrideItems !== true) {
                        if (this.data) {
                            if (typeof this.data.editable === 'boolean') {
                                this.editable = {
                                    updateTime: this.data.editable,
                                    updateGroup: this.data.editable,
                                    remove: this.data.editable
                                };
                            } else if ((0, _typeof3['default'])(this.data.editable) === 'object') {
                                // TODO: in vis.js 5.0, we should change this to not reset options from the timeline configuration.
                                // Basically just remove the next line...
                                this.editable = {};
                                util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.data.editable);
                            }
                        }
                    }
                };

                /**
                 * Return the width of the item left from its start date
                 * @return {number}
                 */
                Item.prototype.getWidthLeft = function() {
                    return 0;
                };

                /**
                 * Return the width of the item right from the max of its start and end date
                 * @return {number}
                 */
                Item.prototype.getWidthRight = function() {
                    return 0;
                };

                /**
                 * Return the title of the item
                 * @return {string | undefined}
                 */
                Item.prototype.getTitle = function() {
                    return this.data.title;
                };

                module.exports = Item;

                /***/
            }),
            /* 129 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var Group = __webpack_require__(125);

                /**
                 * @constructor BackgroundGroup
                 * @param {Number | String} groupId
                 * @param {Object} data
                 * @param {ItemSet} itemSet
                 */
                function BackgroundGroup(groupId, data, itemSet) {
                    Group.call(this, groupId, data, itemSet);

                    this.width = 0;
                    this.height = 0;
                    this.top = 0;
                    this.left = 0;
                }

                BackgroundGroup.prototype = (0, _create2['default'])(Group.prototype);

                /**
                 * Repaint this group
                 * @param {{start: number, end: number}} range
                 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
                 * @param {boolean} [forceRestack=false]  Force restacking of all items
                 * @return {boolean} Returns true if the group is resized
                 */
                BackgroundGroup.prototype.redraw = function(range, margin, forceRestack) {
                    var resized = false;

                    this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

                    // calculate actual size
                    this.width = this.dom.background.offsetWidth;

                    // apply new height (just always zero for BackgroundGroup
                    this.dom.background.style.height = '0';

                    // update vertical position of items after they are re-stacked and the height of the group is calculated
                    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
                        var item = this.visibleItems[i];
                        item.repositionY(margin);
                    }

                    return resized;
                };

                /**
                 * Show this group: attach to the DOM
                 */
                BackgroundGroup.prototype.show = function() {
                    if (!this.dom.background.parentNode) {
                        this.itemSet.dom.background.appendChild(this.dom.background);
                    }
                };

                module.exports = BackgroundGroup;

                /***/
            }),
            /* 130 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Item = __webpack_require__(128);
                var util = __webpack_require__(1);

                /**
                 * @constructor BoxItem
                 * @extends Item
                 * @param {Object} data             Object containing parameters start
                 *                                  content, className.
                 * @param {{toScreen: function, toTime: function}} conversion
                 *                                  Conversion functions from time to screen and vice versa
                 * @param {Object} [options]        Configuration options
                 *                                  // TODO: describe available options
                 */
                function BoxItem(data, conversion, options) {
                    this.props = {
                        dot: {
                            width: 0,
                            height: 0
                        },
                        line: {
                            width: 0,
                            height: 0
                        }
                    };
                    this.options = options;
                    // validate data
                    if (data) {
                        if (data.start == undefined) {
                            throw new Error('Property "start" missing in item ' + data);
                        }
                    }

                    Item.call(this, data, conversion, options);
                }

                BoxItem.prototype = new Item(null, null, null);

                /**
                 * Check whether this item is visible inside given range
                 * @param {{start: Number, end: Number}} range with a timestamp for start and end
                 * @returns {boolean} True if visible
                 */
                BoxItem.prototype.isVisible = function(range) {
                    // determine visibility
                    var isVisible;
                    var align = this.options.align;
                    var widthInMs = this.width * range.getMillisecondsPerPixel();

                    if (align == 'right') {
                        isVisible = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
                    } else if (align == 'left') {
                        isVisible = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
                    } else {
                        // default or 'center'
                        isVisible = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
                    }
                    return isVisible;
                };

                /**
                 * Repaint the item
                 */
                BoxItem.prototype.redraw = function() {
                    var dom = this.dom;
                    if (!dom) {
                        // create DOM
                        this.dom = {};
                        dom = this.dom;

                        // create main box
                        dom.box = document.createElement('DIV');

                        // contents box (inside the background box). used for making margins
                        dom.content = document.createElement('DIV');
                        dom.content.className = 'vis-item-content';
                        dom.box.appendChild(dom.content);

                        // line to axis
                        dom.line = document.createElement('DIV');
                        dom.line.className = 'vis-line';

                        // dot on axis
                        dom.dot = document.createElement('DIV');
                        dom.dot.className = 'vis-dot';

                        // attach this item as attribute
                        dom.box['timeline-item'] = this;

                        this.dirty = true;
                    }

                    // append DOM to parent DOM
                    if (!this.parent) {
                        throw new Error('Cannot redraw item: no parent attached');
                    }
                    if (!dom.box.parentNode) {
                        var foreground = this.parent.dom.foreground;
                        if (!foreground) throw new Error('Cannot redraw item: parent has no foreground container element');
                        foreground.appendChild(dom.box);
                    }
                    if (!dom.line.parentNode) {
                        var background = this.parent.dom.background;
                        if (!background) throw new Error('Cannot redraw item: parent has no background container element');
                        background.appendChild(dom.line);
                    }
                    if (!dom.dot.parentNode) {
                        var axis = this.parent.dom.axis;
                        if (!background) throw new Error('Cannot redraw item: parent has no axis container element');
                        axis.appendChild(dom.dot);
                    }
                    this.displayed = true;

                    // Update DOM when item is marked dirty. An item is marked dirty when:
                    // - the item is not yet rendered
                    // - the item's data is changed
                    // - the item is selected/deselected
                    if (this.dirty) {
                        this._updateContents(this.dom.content);
                        this._updateDataAttributes(this.dom.box);
                        this._updateStyle(this.dom.box);

                        var editable = this.editable.updateTime || this.editable.updateGroup;

                        // update class
                        var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
                        dom.box.className = 'vis-item vis-box' + className;
                        dom.line.className = 'vis-item vis-line' + className;
                        dom.dot.className = 'vis-item vis-dot' + className;

                        // set initial position in the visible range of the grid so that the
                        // rendered box size can be determinated correctly, even the content
                        // has a dynamic width (fixes #2032).
                        var previousRight = dom.box.style.right;
                        var previousLeft = dom.box.style.left;
                        if (this.options.rtl) {
                            dom.box.style.right = "0px";
                        } else {
                            dom.box.style.left = "0px";
                        }

                        // recalculate size
                        this.props.dot.height = dom.dot.offsetHeight;
                        this.props.dot.width = dom.dot.offsetWidth;
                        this.props.line.width = dom.line.offsetWidth;
                        this.width = dom.box.offsetWidth;
                        this.height = dom.box.offsetHeight;

                        // restore previous position
                        if (this.options.rtl) {
                            dom.box.style.right = previousRight;
                        } else {
                            dom.box.style.left = previousLeft;
                        }

                        this.dirty = false;
                    }

                    this._repaintOnItemUpdateTimeTooltip(dom.box);
                    this._repaintDragCenter();
                    this._repaintDeleteButton(dom.box);
                };

                /**
                 * Show the item in the DOM (when not already displayed). The items DOM will
                 * be created when needed.
                 */
                BoxItem.prototype.show = function() {
                    if (!this.displayed) {
                        this.redraw();
                    }
                };

                /**
                 * Hide the item from the DOM (when visible)
                 */
                BoxItem.prototype.hide = function() {
                    if (this.displayed) {
                        var dom = this.dom;

                        if (dom.box.parentNode) dom.box.parentNode.removeChild(dom.box);
                        if (dom.line.parentNode) dom.line.parentNode.removeChild(dom.line);
                        if (dom.dot.parentNode) dom.dot.parentNode.removeChild(dom.dot);

                        this.displayed = false;
                    }
                };

                /**
                 * Reposition the item horizontally
                 * @Override
                 */
                BoxItem.prototype.repositionX = function() {
                    var start = this.conversion.toScreen(this.data.start);
                    var align = this.options.align;

                    // calculate left position of the box
                    if (align == 'right') {
                        if (this.options.rtl) {
                            this.right = start - this.width;

                            // reposition box, line, and dot
                            this.dom.box.style.right = this.right + 'px';
                            this.dom.line.style.right = start - this.props.line.width + 'px';
                            this.dom.dot.style.right = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
                        } else {
                            this.left = start - this.width;

                            // reposition box, line, and dot
                            this.dom.box.style.left = this.left + 'px';
                            this.dom.line.style.left = start - this.props.line.width + 'px';
                            this.dom.dot.style.left = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
                        }
                    } else if (align == 'left') {
                        if (this.options.rtl) {
                            this.right = start;

                            // reposition box, line, and dot
                            this.dom.box.style.right = this.right + 'px';
                            this.dom.line.style.right = start + 'px';
                            this.dom.dot.style.right = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
                        } else {
                            this.left = start;

                            // reposition box, line, and dot
                            this.dom.box.style.left = this.left + 'px';
                            this.dom.line.style.left = start + 'px';
                            this.dom.dot.style.left = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
                        }
                    } else {
                        // default or 'center'
                        if (this.options.rtl) {
                            this.right = start - this.width / 2;

                            // reposition box, line, and dot
                            this.dom.box.style.right = this.right + 'px';
                            this.dom.line.style.right = start - this.props.line.width + 'px';
                            this.dom.dot.style.right = start - this.props.dot.width / 2 + 'px';
                        } else {
                            this.left = start - this.width / 2;

                            // reposition box, line, and dot
                            this.dom.box.style.left = this.left + 'px';
                            this.dom.line.style.left = start - this.props.line.width / 2 + 'px';
                            this.dom.dot.style.left = start - this.props.dot.width / 2 + 'px';
                        }
                    }
                };

                /**
                 * Reposition the item vertically
                 * @Override
                 */
                BoxItem.prototype.repositionY = function() {
                    var orientation = this.options.orientation.item;
                    var box = this.dom.box;
                    var line = this.dom.line;
                    var dot = this.dom.dot;

                    if (orientation == 'top') {
                        box.style.top = (this.top || 0) + 'px';

                        line.style.top = '0';
                        line.style.height = this.parent.top + this.top + 1 + 'px';
                        line.style.bottom = '';
                    } else {
                        // orientation 'bottom'
                        var itemSetHeight = this.parent.itemSet.props.height; // TODO: this is nasty
                        var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;

                        box.style.top = (this.parent.height - this.top - this.height || 0) + 'px';
                        line.style.top = itemSetHeight - lineHeight + 'px';
                        line.style.bottom = '0';
                    }

                    dot.style.top = -this.props.dot.height / 2 + 'px';
                };

                /**
                 * Return the width of the item left from its start date
                 * @return {number}
                 */
                BoxItem.prototype.getWidthLeft = function() {
                    return this.width / 2;
                };

                /**
                 * Return the width of the item right from its start date
                 * @return {number}
                 */
                BoxItem.prototype.getWidthRight = function() {
                    return this.width / 2;
                };

                module.exports = BoxItem;

                /***/
            }),
            /* 131 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Item = __webpack_require__(128);

                /**
                 * @constructor PointItem
                 * @extends Item
                 * @param {Object} data             Object containing parameters start
                 *                                  content, className.
                 * @param {{toScreen: function, toTime: function}} conversion
                 *                                  Conversion functions from time to screen and vice versa
                 * @param {Object} [options]        Configuration options
                 *                                  // TODO: describe available options
                 */
                function PointItem(data, conversion, options) {
                    this.props = {
                        dot: {
                            top: 0,
                            width: 0,
                            height: 0
                        },
                        content: {
                            height: 0,
                            marginLeft: 0,
                            marginRight: 0
                        }
                    };
                    this.options = options;
                    // validate data
                    if (data) {
                        if (data.start == undefined) {
                            throw new Error('Property "start" missing in item ' + data);
                        }
                    }

                    Item.call(this, data, conversion, options);
                }

                PointItem.prototype = new Item(null, null, null);

                /**
                 * Check whether this item is visible inside given range
                 * @param {{start: Number, end: Number}} range with a timestamp for start and end
                 * @returns {boolean} True if visible
                 */
                PointItem.prototype.isVisible = function(range) {
                    // determine visibility
                    var widthInMs = this.width * range.getMillisecondsPerPixel();

                    return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
                };

                /**
                 * Repaint the item
                 */
                PointItem.prototype.redraw = function() {
                    var dom = this.dom;
                    if (!dom) {
                        // create DOM
                        this.dom = {};
                        dom = this.dom;

                        // background box
                        dom.point = document.createElement('div');
                        // className is updated in redraw()

                        // contents box, right from the dot
                        dom.content = document.createElement('div');
                        dom.content.className = 'vis-item-content';
                        dom.point.appendChild(dom.content);

                        // dot at start
                        dom.dot = document.createElement('div');
                        dom.point.appendChild(dom.dot);

                        // attach this item as attribute
                        dom.point['timeline-item'] = this;

                        this.dirty = true;
                    }

                    // append DOM to parent DOM
                    if (!this.parent) {
                        throw new Error('Cannot redraw item: no parent attached');
                    }
                    if (!dom.point.parentNode) {
                        var foreground = this.parent.dom.foreground;
                        if (!foreground) {
                            throw new Error('Cannot redraw item: parent has no foreground container element');
                        }
                        foreground.appendChild(dom.point);
                    }
                    this.displayed = true;

                    // Update DOM when item is marked dirty. An item is marked dirty when:
                    // - the item is not yet rendered
                    // - the item's data is changed
                    // - the item is selected/deselected
                    if (this.dirty) {
                        this._updateContents(this.dom.content);
                        this._updateDataAttributes(this.dom.point);
                        this._updateStyle(this.dom.point);

                        var editable = this.editable.updateTime || this.editable.updateGroup;
                        // update class
                        var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
                        dom.point.className = 'vis-item vis-point' + className;
                        dom.dot.className = 'vis-item vis-dot' + className;

                        // recalculate size of dot and contents
                        this.props.dot.width = dom.dot.offsetWidth;
                        this.props.dot.height = dom.dot.offsetHeight;
                        this.props.content.height = dom.content.offsetHeight;

                        // resize contents
                        if (this.options.rtl) {
                            dom.content.style.marginRight = 2 * this.props.dot.width + 'px';
                        } else {
                            dom.content.style.marginLeft = 2 * this.props.dot.width + 'px';
                        }
                        //dom.content.style.marginRight = ... + 'px'; // TODO: margin right

                        // recalculate size
                        this.width = dom.point.offsetWidth;
                        this.height = dom.point.offsetHeight;

                        // reposition the dot
                        dom.dot.style.top = (this.height - this.props.dot.height) / 2 + 'px';
                        if (this.options.rtl) {
                            dom.dot.style.right = this.props.dot.width / 2 + 'px';
                        } else {
                            dom.dot.style.left = this.props.dot.width / 2 + 'px';
                        }

                        this.dirty = false;
                    }

                    this._repaintOnItemUpdateTimeTooltip(dom.point);
                    this._repaintDragCenter();
                    this._repaintDeleteButton(dom.point);
                };

                /**
                 * Show the item in the DOM (when not already visible). The items DOM will
                 * be created when needed.
                 */
                PointItem.prototype.show = function() {
                    if (!this.displayed) {
                        this.redraw();
                    }
                };

                /**
                 * Hide the item from the DOM (when visible)
                 */
                PointItem.prototype.hide = function() {
                    if (this.displayed) {
                        if (this.dom.point.parentNode) {
                            this.dom.point.parentNode.removeChild(this.dom.point);
                        }

                        this.displayed = false;
                    }
                };

                /**
                 * Reposition the item horizontally
                 * @Override
                 */
                PointItem.prototype.repositionX = function() {
                    var start = this.conversion.toScreen(this.data.start);

                    if (this.options.rtl) {
                        this.right = start - this.props.dot.width;

                        // reposition point
                        this.dom.point.style.right = this.right + 'px';
                    } else {
                        this.left = start - this.props.dot.width;

                        // reposition point
                        this.dom.point.style.left = this.left + 'px';
                    }
                };

                /**
                 * Reposition the item vertically
                 * @Override
                 */
                PointItem.prototype.repositionY = function() {
                    var orientation = this.options.orientation.item;
                    var point = this.dom.point;
                    if (orientation == 'top') {
                        point.style.top = this.top + 'px';
                    } else {
                        point.style.top = this.parent.height - this.top - this.height + 'px';
                    }
                };

                /**
                 * Return the width of the item left from its start date
                 * @return {number}
                 */
                PointItem.prototype.getWidthLeft = function() {
                    return this.props.dot.width;
                };

                /**
                 * Return the width of the item right from  its start date
                 * @return {number}
                 */
                PointItem.prototype.getWidthRight = function() {
                    return this.props.dot.width;
                };

                module.exports = PointItem;

                /***/
            }),
            /* 132 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Hammer = __webpack_require__(112);
                var Item = __webpack_require__(128);
                var BackgroundGroup = __webpack_require__(129);
                var RangeItem = __webpack_require__(127);

                /**
                 * @constructor BackgroundItem
                 * @extends Item
                 * @param {Object} data             Object containing parameters start, end
                 *                                  content, className.
                 * @param {{toScreen: function, toTime: function}} conversion
                 *                                  Conversion functions from time to screen and vice versa
                 * @param {Object} [options]        Configuration options
                 *                                  // TODO: describe options
                 */
                // TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
                function BackgroundItem(data, conversion, options) {
                    this.props = {
                        content: {
                            width: 0
                        }
                    };
                    this.overflow = false; // if contents can overflow (css styling), this flag is set to true

                    // validate data
                    if (data) {
                        if (data.start == undefined) {
                            throw new Error('Property "start" missing in item ' + data.id);
                        }
                        if (data.end == undefined) {
                            throw new Error('Property "end" missing in item ' + data.id);
                        }
                    }

                    Item.call(this, data, conversion, options);
                }

                BackgroundItem.prototype = new Item(null, null, null);

                BackgroundItem.prototype.baseClassName = 'vis-item vis-background';
                BackgroundItem.prototype.stack = false;

                /**
                 * Check whether this item is visible inside given range
                 * @returns {{start: Number, end: Number}} range with a timestamp for start and end
                 * @returns {boolean} True if visible
                 */
                BackgroundItem.prototype.isVisible = function(range) {
                    // determine visibility
                    return this.data.start < range.end && this.data.end > range.start;
                };

                /**
                 * Repaint the item
                 */
                BackgroundItem.prototype.redraw = function() {
                    var dom = this.dom;
                    if (!dom) {
                        // create DOM
                        this.dom = {};
                        dom = this.dom;

                        // background box
                        dom.box = document.createElement('div');
                        // className is updated in redraw()

                        // frame box (to prevent the item contents from overflowing
                        dom.frame = document.createElement('div');
                        dom.frame.className = 'vis-item-overflow';
                        dom.box.appendChild(dom.frame);

                        // contents box
                        dom.content = document.createElement('div');
                        dom.content.className = 'vis-item-content';
                        dom.frame.appendChild(dom.content);

                        // Note: we do NOT attach this item as attribute to the DOM,
                        //       such that background items cannot be selected
                        //dom.box['timeline-item'] = this;

                        this.dirty = true;
                    }

                    // append DOM to parent DOM
                    if (!this.parent) {
                        throw new Error('Cannot redraw item: no parent attached');
                    }
                    if (!dom.box.parentNode) {
                        var background = this.parent.dom.background;
                        if (!background) {
                            throw new Error('Cannot redraw item: parent has no background container element');
                        }
                        background.appendChild(dom.box);
                    }
                    this.displayed = true;

                    // Update DOM when item is marked dirty. An item is marked dirty when:
                    // - the item is not yet rendered
                    // - the item's data is changed
                    // - the item is selected/deselected
                    if (this.dirty) {
                        this._updateContents(this.dom.content);
                        this._updateDataAttributes(this.dom.content);
                        this._updateStyle(this.dom.box);

                        // update class
                        var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '');
                        dom.box.className = this.baseClassName + className;

                        // determine from css whether this box has overflow
                        this.overflow = window.getComputedStyle(dom.content).overflow !== 'hidden';

                        // recalculate size
                        this.props.content.width = this.dom.content.offsetWidth;
                        this.height = 0; // set height zero, so this item will be ignored when stacking items

                        this.dirty = false;
                    }
                };

                /**
                 * Show the item in the DOM (when not already visible). The items DOM will
                 * be created when needed.
                 */
                BackgroundItem.prototype.show = RangeItem.prototype.show;

                /**
                 * Hide the item from the DOM (when visible)
                 * @return {Boolean} changed
                 */
                BackgroundItem.prototype.hide = RangeItem.prototype.hide;

                /**
                 * Reposition the item horizontally
                 * @Override
                 */
                BackgroundItem.prototype.repositionX = RangeItem.prototype.repositionX;

                /**
                 * Reposition the item vertically
                 * @Override
                 */
                BackgroundItem.prototype.repositionY = function(margin) {
                    var height;
                    var orientation = this.options.orientation.item;

                    // special positioning for subgroups
                    if (this.data.subgroup !== undefined) {
                        // TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset

                        var itemSubgroup = this.data.subgroup;
                        var subgroups = this.parent.subgroups;
                        var subgroupIndex = subgroups[itemSubgroup].index;

                        this.dom.box.style.height = this.parent.subgroups[itemSubgroup].height + 'px';

                        if (orientation == 'top') {
                            this.dom.box.style.top = this.parent.top + this.parent.subgroups[itemSubgroup].top + 'px';
                        } else {
                            this.dom.box.style.top = this.parent.top + this.parent.height - this.parent.subgroups[itemSubgroup].top - this.parent.subgroups[itemSubgroup].height + 'px';
                        }
                        this.dom.box.style.bottom = '';
                    }
                    // and in the case of no subgroups:
                    else {
                        // we want backgrounds with groups to only show in groups.
                        if (this.parent instanceof BackgroundGroup) {
                            // if the item is not in a group:
                            height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
                            this.dom.box.style.bottom = orientation == 'bottom' ? '0' : '';
                            this.dom.box.style.top = orientation == 'top' ? '0' : '';
                        } else {
                            height = this.parent.height;
                            // same alignment for items when orientation is top or bottom
                            this.dom.box.style.top = this.parent.top + 'px';
                            this.dom.box.style.bottom = '';
                        }
                    }
                    this.dom.box.style.height = height + 'px';
                };

                module.exports = BackgroundItem;

                /***/
            }),
            /* 133 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                /**
                 * Popup is a class to create a popup window with some text
                 * @param {Element} container       The container object.
                 * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')
                 */
                var Popup = function() {
                    function Popup(container, overflowMethod) {
                        (0, _classCallCheck3['default'])(this, Popup);

                        this.container = container;
                        this.overflowMethod = overflowMethod || 'cap';

                        this.x = 0;
                        this.y = 0;
                        this.padding = 5;
                        this.hidden = false;

                        // create the frame
                        this.frame = document.createElement('div');
                        this.frame.className = 'vis-tooltip';
                        this.container.appendChild(this.frame);
                    }

                    /**
                     * @param {number} x   Horizontal position of the popup window
                     * @param {number} y   Vertical position of the popup window
                     */


                    (0, _createClass3['default'])(Popup, [{
                        key: 'setPosition',
                        value: function setPosition(x, y) {
                            this.x = parseInt(x);
                            this.y = parseInt(y);
                        }

                        /**
                         * Set the content for the popup window. This can be HTML code or text.
                         * @param {string | Element} content
                         */

                    }, {
                        key: 'setText',
                        value: function setText(content) {
                            if (content instanceof Element) {
                                this.frame.innerHTML = '';
                                this.frame.appendChild(content);
                            } else {
                                this.frame.innerHTML = content; // string containing text or HTML
                            }
                        }

                        /**
                         * Show the popup window
                         * @param {boolean} [doShow]    Show or hide the window
                         */

                    }, {
                        key: 'show',
                        value: function show(doShow) {
                            if (doShow === undefined) {
                                doShow = true;
                            }

                            if (doShow === true) {
                                var height = this.frame.clientHeight;
                                var width = this.frame.clientWidth;
                                var maxHeight = this.frame.parentNode.clientHeight;
                                var maxWidth = this.frame.parentNode.clientWidth;

                                var left = 0,
                                    top = 0;

                                if (this.overflowMethod == 'flip') {
                                    var isLeft = false,
                                        isTop = true; // Where around the position it's located

                                    if (this.y - height < this.padding) {
                                        isTop = false;
                                    }

                                    if (this.x + width > maxWidth - this.padding) {
                                        isLeft = true;
                                    }

                                    if (isLeft) {
                                        left = this.x - width;
                                    } else {
                                        left = this.x;
                                    }

                                    if (isTop) {
                                        top = this.y - height;
                                    } else {
                                        top = this.y;
                                    }
                                } else {
                                    top = this.y - height;
                                    if (top + height + this.padding > maxHeight) {
                                        top = maxHeight - height - this.padding;
                                    }
                                    if (top < this.padding) {
                                        top = this.padding;
                                    }

                                    left = this.x;
                                    if (left + width + this.padding > maxWidth) {
                                        left = maxWidth - width - this.padding;
                                    }
                                    if (left < this.padding) {
                                        left = this.padding;
                                    }
                                }

                                this.frame.style.left = left + "px";
                                this.frame.style.top = top + "px";
                                this.frame.style.visibility = "visible";
                                this.hidden = false;
                            } else {
                                this.hide();
                            }
                        }

                        /**
                         * Hide the popup window
                         */

                    }, {
                        key: 'hide',
                        value: function hide() {
                            this.hidden = true;
                            this.frame.style.visibility = "hidden";
                        }

                        /**
                         * Remove the popup window
                         */

                    }, {
                        key: 'destroy',
                        value: function destroy() {
                            this.frame.parentNode.removeChild(this.frame); // Remove element from DOM
                        }
                    }]);
                    return Popup;
                }();

                exports['default'] = Popup;

                /***/
            }),
            /* 134 */
            /***/
            (function(module, exports) {

                "use strict";

                exports.__esModule = true;

                exports.default = function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                };

                /***/
            }),
            /* 135 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                exports.__esModule = true;

                var _defineProperty = __webpack_require__(136);

                var _defineProperty2 = _interopRequireDefault(_defineProperty);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                exports.default = function() {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || false;
                            descriptor.configurable = true;
                            if ("value" in descriptor) descriptor.writable = true;
                            (0, _defineProperty2.default)(target, descriptor.key, descriptor);
                        }
                    }

                    return function(Constructor, protoProps, staticProps) {
                        if (protoProps) defineProperties(Constructor.prototype, protoProps);
                        if (staticProps) defineProperties(Constructor, staticProps);
                        return Constructor;
                    };
                }();

                /***/
            }),
            /* 136 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(137), __esModule: true };

                /***/
            }),
            /* 137 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(138);
                var $Object = __webpack_require__(17).Object;
                module.exports = function defineProperty(it, key, desc) {
                    return $Object.defineProperty(it, key, desc);
                };

                /***/
            }),
            /* 138 */
            /***/
            (function(module, exports, __webpack_require__) {

                var $export = __webpack_require__(15);
                // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
                $export($export.S + $export.F * !__webpack_require__(25), 'Object', { defineProperty: __webpack_require__(21).f });

                /***/
            }),
            /* 139 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var Component = __webpack_require__(120);
                var TimeStep = __webpack_require__(124);
                var DateUtil = __webpack_require__(121);
                var moment = __webpack_require__(82);

                /**
                 * A horizontal time axis
                 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
                 * @param {Object} [options]        See TimeAxis.setOptions for the available
                 *                                  options.
                 * @constructor TimeAxis
                 * @extends Component
                 */
                function TimeAxis(body, options) {
                    this.dom = {
                        foreground: null,
                        lines: [],
                        majorTexts: [],
                        minorTexts: [],
                        redundant: {
                            lines: [],
                            majorTexts: [],
                            minorTexts: []
                        }
                    };
                    this.props = {
                        range: {
                            start: 0,
                            end: 0,
                            minimumStep: 0
                        },
                        lineTop: 0
                    };

                    this.defaultOptions = {
                        orientation: {
                            axis: 'bottom'
                        }, // axis orientation: 'top' or 'bottom'
                        showMinorLabels: true,
                        showMajorLabels: true,
                        maxMinorChars: 7,
                        format: TimeStep.FORMAT,
                        moment: moment,
                        timeAxis: null
                    };
                    this.options = util.extend({}, this.defaultOptions);

                    this.body = body;

                    // create the HTML DOM
                    this._create();

                    this.setOptions(options);
                }

                TimeAxis.prototype = new Component();

                /**
                 * Set options for the TimeAxis.
                 * Parameters will be merged in current options.
                 * @param {Object} options  Available options:
                 *                          {string} [orientation.axis]
                 *                          {boolean} [showMinorLabels]
                 *                          {boolean} [showMajorLabels]
                 */
                TimeAxis.prototype.setOptions = function(options) {
                    if (options) {
                        // copy all options that we know
                        util.selectiveExtend(['showMinorLabels', 'showMajorLabels', 'maxMinorChars', 'hiddenDates', 'timeAxis', 'moment', 'rtl'], this.options, options);

                        // deep copy the format options
                        util.selectiveDeepExtend(['format'], this.options, options);

                        if ('orientation' in options) {
                            if (typeof options.orientation === 'string') {
                                this.options.orientation.axis = options.orientation;
                            } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'axis' in options.orientation) {
                                this.options.orientation.axis = options.orientation.axis;
                            }
                        }

                        // apply locale to moment.js
                        // TODO: not so nice, this is applied globally to moment.js
                        if ('locale' in options) {
                            if (typeof moment.locale === 'function') {
                                // moment.js 2.8.1+
                                moment.locale(options.locale);
                            } else {
                                moment.lang(options.locale);
                            }
                        }
                    }
                };

                /**
                 * Create the HTML DOM for the TimeAxis
                 */
                TimeAxis.prototype._create = function() {
                    this.dom.foreground = document.createElement('div');
                    this.dom.background = document.createElement('div');

                    this.dom.foreground.className = 'vis-time-axis vis-foreground';
                    this.dom.background.className = 'vis-time-axis vis-background';
                };

                /**
                 * Destroy the TimeAxis
                 */
                TimeAxis.prototype.destroy = function() {
                    // remove from DOM
                    if (this.dom.foreground.parentNode) {
                        this.dom.foreground.parentNode.removeChild(this.dom.foreground);
                    }
                    if (this.dom.background.parentNode) {
                        this.dom.background.parentNode.removeChild(this.dom.background);
                    }

                    this.body = null;
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                TimeAxis.prototype.redraw = function() {
                    var props = this.props;
                    var foreground = this.dom.foreground;
                    var background = this.dom.background;

                    // determine the correct parent DOM element (depending on option orientation)
                    var parent = this.options.orientation.axis == 'top' ? this.body.dom.top : this.body.dom.bottom;
                    var parentChanged = foreground.parentNode !== parent;

                    // calculate character width and height
                    this._calculateCharSize();

                    // TODO: recalculate sizes only needed when parent is resized or options is changed
                    var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== 'none';
                    var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== 'none';

                    // determine the width and height of the elemens for the axis
                    props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
                    props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
                    props.height = props.minorLabelHeight + props.majorLabelHeight;
                    props.width = foreground.offsetWidth;

                    props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == 'top' ? this.body.domProps.bottom.height : this.body.domProps.top.height);
                    props.minorLineWidth = 1; // TODO: really calculate width
                    props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
                    props.majorLineWidth = 1; // TODO: really calculate width

                    //  take foreground and background offline while updating (is almost twice as fast)
                    var foregroundNextSibling = foreground.nextSibling;
                    var backgroundNextSibling = background.nextSibling;
                    foreground.parentNode && foreground.parentNode.removeChild(foreground);
                    background.parentNode && background.parentNode.removeChild(background);

                    foreground.style.height = this.props.height + 'px';

                    this._repaintLabels();

                    // put DOM online again (at the same place)
                    if (foregroundNextSibling) {
                        parent.insertBefore(foreground, foregroundNextSibling);
                    } else {
                        parent.appendChild(foreground);
                    }
                    if (backgroundNextSibling) {
                        this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
                    } else {
                        this.body.dom.backgroundVertical.appendChild(background);
                    }
                    return this._isResized() || parentChanged;
                };

                /**
                 * Repaint major and minor text labels and vertical grid lines
                 * @private
                 */
                TimeAxis.prototype._repaintLabels = function() {
                    var orientation = this.options.orientation.axis;

                    // calculate range and step (step such that we have space for 7 characters per label)
                    var start = util.convert(this.body.range.start, 'Number');
                    var end = util.convert(this.body.range.end, 'Number');
                    var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
                    var minimumStep = timeLabelsize - DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
                    minimumStep -= this.body.util.toTime(0).valueOf();

                    var step = new TimeStep(new Date(start), new Date(end), minimumStep, this.body.hiddenDates);
                    step.setMoment(this.options.moment);
                    if (this.options.format) {
                        step.setFormat(this.options.format);
                    }
                    if (this.options.timeAxis) {
                        step.setScale(this.options.timeAxis);
                    }
                    this.step = step;

                    // Move all DOM elements to a "redundant" list, where they
                    // can be picked for re-use, and clear the lists with lines and texts.
                    // At the end of the function _repaintLabels, left over elements will be cleaned up
                    var dom = this.dom;
                    dom.redundant.lines = dom.lines;
                    dom.redundant.majorTexts = dom.majorTexts;
                    dom.redundant.minorTexts = dom.minorTexts;
                    dom.lines = [];
                    dom.majorTexts = [];
                    dom.minorTexts = [];

                    var current;
                    var next;
                    var x;
                    var xNext;
                    var isMajor, nextIsMajor;
                    var showMinorGrid;
                    var width = 0,
                        prevWidth;
                    var line;
                    var labelMinor;
                    var xFirstMajorLabel = undefined;
                    var count = 0;
                    var MAX = 1000;
                    var className;

                    step.start();
                    next = step.getCurrent();
                    xNext = this.body.util.toScreen(next);
                    while (step.hasNext() && count < MAX) {
                        count++;

                        isMajor = step.isMajor();
                        className = step.getClassName();
                        labelMinor = step.getLabelMinor();

                        current = next;
                        x = xNext;

                        step.next();
                        next = step.getCurrent();
                        nextIsMajor = step.isMajor();
                        xNext = this.body.util.toScreen(next);

                        prevWidth = width;
                        width = xNext - x;
                        switch (step.scale) {
                            case 'week':
                                showMinorGrid = true;
                                break;
                            default:
                                showMinorGrid = width >= prevWidth * 0.4;
                                break; // prevent displaying of the 31th of the month on a scale of 5 days
                        }

                        if (this.options.showMinorLabels && showMinorGrid) {
                            var label = this._repaintMinorText(x, labelMinor, orientation, className);
                            label.style.width = width + 'px'; // set width to prevent overflow
                        }

                        if (isMajor && this.options.showMajorLabels) {
                            if (x > 0) {
                                if (xFirstMajorLabel == undefined) {
                                    xFirstMajorLabel = x;
                                }
                                label = this._repaintMajorText(x, step.getLabelMajor(), orientation, className);
                            }
                            line = this._repaintMajorLine(x, width, orientation, className);
                        } else {
                            // minor line
                            if (showMinorGrid) {
                                line = this._repaintMinorLine(x, width, orientation, className);
                            } else {
                                if (line) {
                                    // adjust the width of the previous grid
                                    line.style.width = parseInt(line.style.width) + width + 'px';
                                }
                            }
                        }
                    }

                    if (count === MAX && !warnedForOverflow) {
                        console.warn('Something is wrong with the Timeline scale. Limited drawing of grid lines to ' + MAX + ' lines.');
                        warnedForOverflow = true;
                    }

                    // create a major label on the left when needed
                    if (this.options.showMajorLabels) {
                        var leftTime = this.body.util.toTime(0),
                            leftText = step.getLabelMajor(leftTime),
                            widthText = leftText.length * (this.props.majorCharWidth || 10) + 10; // upper bound estimation

                        if (xFirstMajorLabel == undefined || widthText < xFirstMajorLabel) {
                            this._repaintMajorText(0, leftText, orientation, className);
                        }
                    }

                    // Cleanup leftover DOM elements from the redundant list
                    util.forEach(this.dom.redundant, function(arr) {
                        while (arr.length) {
                            var elem = arr.pop();
                            if (elem && elem.parentNode) {
                                elem.parentNode.removeChild(elem);
                            }
                        }
                    });
                };

                /**
                 * Create a minor label for the axis at position x
                 * @param {Number} x
                 * @param {String} text
                 * @param {String} orientation   "top" or "bottom" (default)
                 * @param {String} className
                 * @return {Element} Returns the HTML element of the created label
                 * @private
                 */
                TimeAxis.prototype._repaintMinorText = function(x, text, orientation, className) {
                    // reuse redundant label
                    var label = this.dom.redundant.minorTexts.shift();

                    if (!label) {
                        // create new label
                        var content = document.createTextNode('');
                        label = document.createElement('div');
                        label.appendChild(content);
                        this.dom.foreground.appendChild(label);
                    }
                    this.dom.minorTexts.push(label);
                    label.innerHTML = text;

                    label.style.top = orientation == 'top' ? this.props.majorLabelHeight + 'px' : '0';

                    if (this.options.rtl) {
                        label.style.left = "";
                        label.style.right = x + 'px';
                    } else {
                        label.style.left = x + 'px';
                    };
                    label.className = 'vis-text vis-minor ' + className;
                    //label.title = title;  // TODO: this is a heavy operation

                    return label;
                };

                /**
                 * Create a Major label for the axis at position x
                 * @param {Number} x
                 * @param {String} text
                 * @param {String} orientation   "top" or "bottom" (default)
                 * @param {String} className
                 * @return {Element} Returns the HTML element of the created label
                 * @private
                 */
                TimeAxis.prototype._repaintMajorText = function(x, text, orientation, className) {
                    // reuse redundant label
                    var label = this.dom.redundant.majorTexts.shift();

                    if (!label) {
                        // create label
                        var content = document.createElement('div');
                        label = document.createElement('div');
                        label.appendChild(content);
                        this.dom.foreground.appendChild(label);
                    }

                    label.childNodes[0].innerHTML = text;
                    label.className = 'vis-text vis-major ' + className;
                    //label.title = title; // TODO: this is a heavy operation

                    label.style.top = orientation == 'top' ? '0' : this.props.minorLabelHeight + 'px';
                    if (this.options.rtl) {
                        label.style.left = "";
                        label.style.right = x + 'px';
                    } else {
                        label.style.left = x + 'px';
                    };

                    this.dom.majorTexts.push(label);
                    return label;
                };

                /**
                 * Create a minor line for the axis at position x
                 * @param {Number} x
                 * @param {Number} width
                 * @param {String} orientation   "top" or "bottom" (default)
                 * @param {String} className
                 * @return {Element} Returns the created line
                 * @private
                 */
                TimeAxis.prototype._repaintMinorLine = function(x, width, orientation, className) {
                    // reuse redundant line
                    var line = this.dom.redundant.lines.shift();
                    if (!line) {
                        // create vertical line
                        line = document.createElement('div');
                        this.dom.background.appendChild(line);
                    }
                    this.dom.lines.push(line);

                    var props = this.props;
                    if (orientation == 'top') {
                        line.style.top = props.majorLabelHeight + 'px';
                    } else {
                        line.style.top = this.body.domProps.top.height + 'px';
                    }
                    line.style.height = props.minorLineHeight + 'px';
                    if (this.options.rtl) {
                        line.style.left = "";
                        line.style.right = x - props.minorLineWidth / 2 + 'px';
                        line.className = 'vis-grid vis-vertical-rtl vis-minor ' + className;
                    } else {
                        line.style.left = x - props.minorLineWidth / 2 + 'px';
                        line.className = 'vis-grid vis-vertical vis-minor ' + className;
                    };
                    line.style.width = width + 'px';

                    return line;
                };

                /**
                 * Create a Major line for the axis at position x
                 * @param {Number} x
                 * @param {Number} width
                 * @param {String} orientation   "top" or "bottom" (default)
                 * @param {String} className
                 * @return {Element} Returns the created line
                 * @private
                 */
                TimeAxis.prototype._repaintMajorLine = function(x, width, orientation, className) {
                    // reuse redundant line
                    var line = this.dom.redundant.lines.shift();
                    if (!line) {
                        // create vertical line
                        line = document.createElement('div');
                        this.dom.background.appendChild(line);
                    }
                    this.dom.lines.push(line);

                    var props = this.props;
                    if (orientation == 'top') {
                        line.style.top = '0';
                    } else {
                        line.style.top = this.body.domProps.top.height + 'px';
                    }

                    if (this.options.rtl) {
                        line.style.left = "";
                        line.style.right = x - props.majorLineWidth / 2 + 'px';
                        line.className = 'vis-grid vis-vertical-rtl vis-major ' + className;
                    } else {
                        line.style.left = x - props.majorLineWidth / 2 + 'px';
                        line.className = 'vis-grid vis-vertical vis-major ' + className;
                    }

                    line.style.height = props.majorLineHeight + 'px';
                    line.style.width = width + 'px';

                    return line;
                };

                /**
                 * Determine the size of text on the axis (both major and minor axis).
                 * The size is calculated only once and then cached in this.props.
                 * @private
                 */
                TimeAxis.prototype._calculateCharSize = function() {
                    // Note: We calculate char size with every redraw. Size may change, for
                    // example when any of the timelines parents had display:none for example.

                    // determine the char width and height on the minor axis
                    if (!this.dom.measureCharMinor) {
                        this.dom.measureCharMinor = document.createElement('DIV');
                        this.dom.measureCharMinor.className = 'vis-text vis-minor vis-measure';
                        this.dom.measureCharMinor.style.position = 'absolute';

                        this.dom.measureCharMinor.appendChild(document.createTextNode('0'));
                        this.dom.foreground.appendChild(this.dom.measureCharMinor);
                    }
                    this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
                    this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth;

                    // determine the char width and height on the major axis
                    if (!this.dom.measureCharMajor) {
                        this.dom.measureCharMajor = document.createElement('DIV');
                        this.dom.measureCharMajor.className = 'vis-text vis-major vis-measure';
                        this.dom.measureCharMajor.style.position = 'absolute';

                        this.dom.measureCharMajor.appendChild(document.createTextNode('0'));
                        this.dom.foreground.appendChild(this.dom.measureCharMajor);
                    }
                    this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
                    this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
                };

                var warnedForOverflow = false;

                module.exports = TimeAxis;

                /***/
            }),
            /* 140 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var keycharm = __webpack_require__(115);
                var Emitter = __webpack_require__(99);
                var Hammer = __webpack_require__(112);
                var util = __webpack_require__(1);

                /**
                 * Turn an element into an clickToUse element.
                 * When not active, the element has a transparent overlay. When the overlay is
                 * clicked, the mode is changed to active.
                 * When active, the element is displayed with a blue border around it, and
                 * the interactive contents of the element can be used. When clicked outside
                 * the element, the elements mode is changed to inactive.
                 * @param {Element} container
                 * @constructor
                 */
                function Activator(container) {
                    this.active = false;

                    this.dom = {
                        container: container
                    };

                    this.dom.overlay = document.createElement('div');
                    this.dom.overlay.className = 'vis-overlay';

                    this.dom.container.appendChild(this.dom.overlay);

                    this.hammer = Hammer(this.dom.overlay);
                    this.hammer.on('tap', this._onTapOverlay.bind(this));

                    // block all touch events (except tap)
                    var me = this;
                    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];
                    events.forEach(function(event) {
                        me.hammer.on(event, function(event) {
                            event.stopPropagation();
                        });
                    });

                    // attach a click event to the window, in order to deactivate when clicking outside the timeline
                    if (document && document.body) {
                        this.onClick = function(event) {
                            if (!_hasParent(event.target, container)) {
                                me.deactivate();
                            }
                        };
                        document.body.addEventListener('click', this.onClick);
                    }

                    if (this.keycharm !== undefined) {
                        this.keycharm.destroy();
                    }
                    this.keycharm = keycharm();

                    // keycharm listener only bounded when active)
                    this.escListener = this.deactivate.bind(this);
                }

                // turn into an event emitter
                Emitter(Activator.prototype);

                // The currently active activator
                Activator.current = null;

                /**
                 * Destroy the activator. Cleans up all created DOM and event listeners
                 */
                Activator.prototype.destroy = function() {
                    this.deactivate();

                    // remove dom
                    this.dom.overlay.parentNode.removeChild(this.dom.overlay);

                    // remove global event listener
                    if (this.onClick) {
                        document.body.removeEventListener('click', this.onClick);
                    }

                    // cleanup hammer instances
                    this.hammer.destroy();
                    this.hammer = null;
                    // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
                };

                /**
                 * Activate the element
                 * Overlay is hidden, element is decorated with a blue shadow border
                 */
                Activator.prototype.activate = function() {
                    // we allow only one active activator at a time
                    if (Activator.current) {
                        Activator.current.deactivate();
                    }
                    Activator.current = this;

                    this.active = true;
                    this.dom.overlay.style.display = 'none';
                    util.addClassName(this.dom.container, 'vis-active');

                    this.emit('change');
                    this.emit('activate');

                    // ugly hack: bind ESC after emitting the events, as the Network rebinds all
                    // keyboard events on a 'change' event
                    this.keycharm.bind('esc', this.escListener);
                };

                /**
                 * Deactivate the element
                 * Overlay is displayed on top of the element
                 */
                Activator.prototype.deactivate = function() {
                    this.active = false;
                    this.dom.overlay.style.display = '';
                    util.removeClassName(this.dom.container, 'vis-active');
                    this.keycharm.unbind('esc', this.escListener);

                    this.emit('change');
                    this.emit('deactivate');
                };

                /**
                 * Handle a tap event: activate the container
                 * @param event
                 * @private
                 */
                Activator.prototype._onTapOverlay = function(event) {
                    // activate the container
                    this.activate();
                    event.stopPropagation();
                };

                /**
                 * Test whether the element has the requested parent element somewhere in
                 * its chain of parent nodes.
                 * @param {HTMLElement} element
                 * @param {HTMLElement} parent
                 * @returns {boolean} Returns true when the parent is found somewhere in the
                 *                    chain of parent nodes.
                 * @private
                 */
                function _hasParent(element, parent) {
                    while (element) {
                        if (element === parent) {
                            return true;
                        }
                        element = element.parentNode;
                    }
                    return false;
                }

                module.exports = Activator;

                /***/
            }),
            /* 141 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Hammer = __webpack_require__(112);
                var util = __webpack_require__(1);
                var Component = __webpack_require__(120);
                var moment = __webpack_require__(82);
                var locales = __webpack_require__(142);

                /**
                 * A custom time bar
                 * @param {{range: Range, dom: Object}} body
                 * @param {Object} [options]        Available parameters:
                 *                                  {number | string} id
                 *                                  {string} locales
                 *                                  {string} locale
                 * @constructor CustomTime
                 * @extends Component
                 */

                function CustomTime(body, options) {
                    this.body = body;

                    // default options
                    this.defaultOptions = {
                        moment: moment,
                        locales: locales,
                        locale: 'en',
                        id: undefined,
                        title: undefined
                    };
                    this.options = util.extend({}, this.defaultOptions);

                    if (options && options.time) {
                        this.customTime = options.time;
                    } else {
                        this.customTime = new Date();
                    }

                    this.eventParams = {}; // stores state parameters while dragging the bar

                    this.setOptions(options);

                    // create the DOM
                    this._create();
                }

                CustomTime.prototype = new Component();

                /**
                 * Set options for the component. Options will be merged in current options.
                 * @param {Object} options  Available parameters:
                 *                                  {number | string} id
                 *                                  {string} locales
                 *                                  {string} locale
                 */
                CustomTime.prototype.setOptions = function(options) {
                    if (options) {
                        // copy all options that we know
                        util.selectiveExtend(['moment', 'locale', 'locales', 'id'], this.options, options);
                    }
                };

                /**
                 * Create the DOM for the custom time
                 * @private
                 */
                CustomTime.prototype._create = function() {
                    var bar = document.createElement('div');
                    bar['custom-time'] = this;
                    bar.className = 'vis-custom-time ' + (this.options.id || '');
                    bar.style.position = 'absolute';
                    bar.style.top = '0px';
                    bar.style.height = '100%';
                    this.bar = bar;

                    var drag = document.createElement('div');
                    drag.style.position = 'relative';
                    drag.style.top = '0px';
                    drag.style.left = '-10px';
                    drag.style.height = '100%';
                    drag.style.width = '20px';

                    function onMouseWheel(e) {
                        this.body.range._onMouseWheel(e);
                    }

                    if (drag.addEventListener) {
                        // IE9, Chrome, Safari, Opera
                        drag.addEventListener("mousewheel", onMouseWheel.bind(this), false);
                        // Firefox
                        drag.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
                    } else {
                        // IE 6/7/8
                        drag.attachEvent("onmousewheel", onMouseWheel.bind(this));
                    }

                    bar.appendChild(drag);
                    // attach event listeners
                    this.hammer = new Hammer(drag);
                    this.hammer.on('panstart', this._onDragStart.bind(this));
                    this.hammer.on('panmove', this._onDrag.bind(this));
                    this.hammer.on('panend', this._onDragEnd.bind(this));
                    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
                };

                /**
                 * Destroy the CustomTime bar
                 */
                CustomTime.prototype.destroy = function() {
                    this.hide();

                    this.hammer.destroy();
                    this.hammer = null;

                    this.body = null;
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                CustomTime.prototype.redraw = function() {
                    var parent = this.body.dom.backgroundVertical;
                    if (this.bar.parentNode != parent) {
                        // attach to the dom
                        if (this.bar.parentNode) {
                            this.bar.parentNode.removeChild(this.bar);
                        }
                        parent.appendChild(this.bar);
                    }

                    var x = this.body.util.toScreen(this.customTime);

                    var locale = this.options.locales[this.options.locale];
                    if (!locale) {
                        if (!this.warned) {
                            console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
                            this.warned = true;
                        }
                        locale = this.options.locales['en']; // fall back on english when not available
                    }

                    var title = this.options.title;
                    // To hide the title completely use empty string ''.
                    if (title === undefined) {
                        title = locale.time + ': ' + this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');
                        title = title.charAt(0).toUpperCase() + title.substring(1);
                    } else if (typeof title === "function") {
                        title = title.call(this.customTime);
                    }

                    this.bar.style.left = x + 'px';
                    this.bar.title = title;

                    return false;
                };

                /**
                 * Remove the CustomTime from the DOM
                 */
                CustomTime.prototype.hide = function() {
                    // remove the line from the DOM
                    if (this.bar.parentNode) {
                        this.bar.parentNode.removeChild(this.bar);
                    }
                };

                /**
                 * Set custom time.
                 * @param {Date | number | string} time
                 */
                CustomTime.prototype.setCustomTime = function(time) {
                    this.customTime = util.convert(time, 'Date');
                    this.redraw();
                };

                /**
                 * Retrieve the current custom time.
                 * @return {Date} customTime
                 */
                CustomTime.prototype.getCustomTime = function() {
                    return new Date(this.customTime.valueOf());
                };

                /**
                 * Set custom title.
                 * @param {Date | number | string} title
                 */
                CustomTime.prototype.setCustomTitle = function(title) {
                    this.options.title = title;
                };

                /**
                 * Start moving horizontally
                 * @param {Event} event
                 * @private
                 */
                CustomTime.prototype._onDragStart = function(event) {
                    this.eventParams.dragging = true;
                    this.eventParams.customTime = this.customTime;

                    event.stopPropagation();
                };

                /**
                 * Perform moving operating.
                 * @param {Event} event
                 * @private
                 */
                CustomTime.prototype._onDrag = function(event) {
                    if (!this.eventParams.dragging) return;

                    var x = this.body.util.toScreen(this.eventParams.customTime) + event.deltaX;
                    var time = this.body.util.toTime(x);

                    this.setCustomTime(time);

                    // fire a timechange event
                    this.body.emitter.emit('timechange', {
                        id: this.options.id,
                        time: new Date(this.customTime.valueOf()),
                        event: event
                    });

                    event.stopPropagation();
                };

                /**
                 * Stop moving operating.
                 * @param {Event} event
                 * @private
                 */
                CustomTime.prototype._onDragEnd = function(event) {
                    if (!this.eventParams.dragging) return;

                    // fire a timechanged event
                    this.body.emitter.emit('timechanged', {
                        id: this.options.id,
                        time: new Date(this.customTime.valueOf()),
                        event: event
                    });

                    event.stopPropagation();
                };

                /**
                 * Find a custom time from an event target:
                 * searches for the attribute 'custom-time' in the event target's element tree
                 * @param {Event} event
                 * @return {CustomTime | null} customTime
                 */
                CustomTime.customTimeFromTarget = function(event) {
                    var target = event.target;
                    while (target) {
                        if (target.hasOwnProperty('custom-time')) {
                            return target['custom-time'];
                        }
                        target = target.parentNode;
                    }

                    return null;
                };

                module.exports = CustomTime;

                /***/
            }),
            /* 142 */
            /***/
            (function(module, exports) {

                'use strict';

                // English
                exports['en'] = {
                    current: 'current',
                    time: 'time'
                };
                exports['en_EN'] = exports['en'];
                exports['en_US'] = exports['en'];

                // Italiano
                exports['it'] = {
                    current: 'attuale',
                    time: 'tempo'
                };
                exports['it_IT'] = exports['it'];
                exports['it_CH'] = exports['it'];

                // Dutch
                exports['nl'] = {
                    current: 'huidige',
                    time: 'tijd'
                };
                exports['nl_NL'] = exports['nl'];
                exports['nl_BE'] = exports['nl'];

                // German
                exports['de'] = {
                    current: 'Aktuelle',
                    time: 'Zeit'
                };
                exports['de_DE'] = exports['de'];

                // French
                exports['fr'] = {
                    current: 'actuel',
                    time: 'heure'
                };
                exports['fr_FR'] = exports['fr'];
                exports['fr_CA'] = exports['fr'];
                exports['fr_BE'] = exports['fr'];

                // Espanol
                exports['es'] = {
                    current: 'corriente',
                    time: 'hora'
                };
                exports['es_ES'] = exports['es'];

                /***/
            }),
            /* 143 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var util = __webpack_require__(1);
                var Component = __webpack_require__(120);
                var moment = __webpack_require__(82);
                var locales = __webpack_require__(142);

                /**
                 * A current time bar
                 * @param {{range: Range, dom: Object, domProps: Object}} body
                 * @param {Object} [options]        Available parameters:
                 *                                  {Boolean} [showCurrentTime]
                 * @constructor CurrentTime
                 * @extends Component
                 */
                function CurrentTime(body, options) {
                    this.body = body;

                    // default options
                    this.defaultOptions = {
                        rtl: false,
                        showCurrentTime: true,

                        moment: moment,
                        locales: locales,
                        locale: 'en'
                    };
                    this.options = util.extend({}, this.defaultOptions);
                    this.offset = 0;

                    this._create();

                    this.setOptions(options);
                }

                CurrentTime.prototype = new Component();

                /**
                 * Create the HTML DOM for the current time bar
                 * @private
                 */
                CurrentTime.prototype._create = function() {
                    var bar = document.createElement('div');
                    bar.className = 'vis-current-time';
                    bar.style.position = 'absolute';
                    bar.style.top = '0px';
                    bar.style.height = '100%';

                    this.bar = bar;
                };

                /**
                 * Destroy the CurrentTime bar
                 */
                CurrentTime.prototype.destroy = function() {
                    this.options.showCurrentTime = false;
                    this.redraw(); // will remove the bar from the DOM and stop refreshing

                    this.body = null;
                };

                /**
                 * Set options for the component. Options will be merged in current options.
                 * @param {Object} options  Available parameters:
                 *                          {boolean} [showCurrentTime]
                 */
                CurrentTime.prototype.setOptions = function(options) {
                    if (options) {
                        // copy all options that we know
                        util.selectiveExtend(['rtl', 'showCurrentTime', 'moment', 'locale', 'locales'], this.options, options);
                    }
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                CurrentTime.prototype.redraw = function() {
                    if (this.options.showCurrentTime) {
                        var parent = this.body.dom.backgroundVertical;
                        if (this.bar.parentNode != parent) {
                            // attach to the dom
                            if (this.bar.parentNode) {
                                this.bar.parentNode.removeChild(this.bar);
                            }
                            parent.appendChild(this.bar);

                            this.start();
                        }

                        var now = this.options.moment(new Date().valueOf() + this.offset);
                        var x = this.body.util.toScreen(now);

                        var locale = this.options.locales[this.options.locale];
                        if (!locale) {
                            if (!this.warned) {
                                console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
                                this.warned = true;
                            }
                            locale = this.options.locales['en']; // fall back on english when not available
                        }
                        var title = locale.current + ' ' + locale.time + ': ' + now.format('dddd, MMMM Do YYYY, H:mm:ss');
                        title = title.charAt(0).toUpperCase() + title.substring(1);

                        if (this.options.rtl) {
                            this.bar.style.right = x + 'px';
                        } else {
                            this.bar.style.left = x + 'px';
                        }
                        this.bar.title = title;
                    } else {
                        // remove the line from the DOM
                        if (this.bar.parentNode) {
                            this.bar.parentNode.removeChild(this.bar);
                        }
                        this.stop();
                    }

                    return false;
                };

                /**
                 * Start auto refreshing the current time bar
                 */
                CurrentTime.prototype.start = function() {
                    var me = this;

                    function update() {
                        me.stop();

                        // determine interval to refresh
                        var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
                        var interval = 1 / scale / 10;
                        if (interval < 30) interval = 30;
                        if (interval > 1000) interval = 1000;

                        me.redraw();
                        me.body.emitter.emit('currentTimeTick');

                        // start a renderTimer to adjust for the new time
                        me.currentTimeTimer = setTimeout(update, interval);
                    }

                    update();
                };

                /**
                 * Stop auto refreshing the current time bar
                 */
                CurrentTime.prototype.stop = function() {
                    if (this.currentTimeTimer !== undefined) {
                        clearTimeout(this.currentTimeTimer);
                        delete this.currentTimeTimer;
                    }
                };

                /**
                 * Set a current time. This can be used for example to ensure that a client's
                 * time is synchronized with a shared server time.
                 * @param {Date | String | Number} time     A Date, unix timestamp, or
                 *                                          ISO date string.
                 */
                CurrentTime.prototype.setCurrentTime = function(time) {
                    var t = util.convert(time, 'Date').valueOf();
                    var now = new Date().valueOf();
                    this.offset = t - now;
                    this.redraw();
                };

                /**
                 * Get the current time.
                 * @return {Date} Returns the current time.
                 */
                CurrentTime.prototype.getCurrentTime = function() {
                    return new Date(new Date().valueOf() + this.offset);
                };

                module.exports = CurrentTime;

                /***/
            }),
            /* 144 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.printStyle = undefined;

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var errorFound = false;
                var allOptions = void 0;
                var printStyle = 'background: #FFeeee; color: #dd0000';
                /**
                 *  Used to validate options.
                 */

                var Validator = function() {
                    function Validator() {
                        (0, _classCallCheck3['default'])(this, Validator);
                    }

                    /**
                     * Main function to be called
                     * @param options
                     * @param subObject
                     * @returns {boolean}
                     */


                    (0, _createClass3['default'])(Validator, null, [{
                        key: 'validate',
                        value: function validate(options, referenceOptions, subObject) {
                            errorFound = false;
                            allOptions = referenceOptions;
                            var usedOptions = referenceOptions;
                            if (subObject !== undefined) {
                                usedOptions = referenceOptions[subObject];
                            }
                            Validator.parse(options, usedOptions, []);
                            return errorFound;
                        }

                        /**
                         * Will traverse an object recursively and check every value
                         * @param options
                         * @param referenceOptions
                         * @param path
                         */

                    }, {
                        key: 'parse',
                        value: function parse(options, referenceOptions, path) {
                            for (var option in options) {
                                if (options.hasOwnProperty(option)) {
                                    Validator.check(option, options, referenceOptions, path);
                                }
                            }
                        }

                        /**
                         * Check every value. If the value is an object, call the parse function on that object.
                         * @param option
                         * @param options
                         * @param referenceOptions
                         * @param path
                         */

                    }, {
                        key: 'check',
                        value: function check(option, options, referenceOptions, path) {
                            if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
                                Validator.getSuggestion(option, referenceOptions, path);
                            } else if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
                                // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
                                if (Validator.getType(options[option]) === 'object' && referenceOptions['__any__'].__type__ !== undefined) {
                                    // if the any subgroup is not a predefined object int he configurator we do not look deeper into the object.
                                    Validator.checkFields(option, options, referenceOptions, '__any__', referenceOptions['__any__'].__type__, path);
                                } else {
                                    Validator.checkFields(option, options, referenceOptions, '__any__', referenceOptions['__any__'], path);
                                }
                            } else {
                                // Since all options in the reference are objects, we can check whether they are supposed to be object to look for the __type__ field.
                                if (referenceOptions[option].__type__ !== undefined) {
                                    // if this should be an object, we check if the correct type has been supplied to account for shorthand options.
                                    Validator.checkFields(option, options, referenceOptions, option, referenceOptions[option].__type__, path);
                                } else {
                                    Validator.checkFields(option, options, referenceOptions, option, referenceOptions[option], path);
                                }
                            }
                        }

                        /**
                         *
                         * @param {String}  option     | the option property
                         * @param {Object}  options    | The supplied options object
                         * @param {Object}  referenceOptions    | The reference options containing all options and their allowed formats
                         * @param {String}  referenceOption     | Usually this is the same as option, except when handling an __any__ tag.
                         * @param {String}  refOptionType       | This is the type object from the reference options
                         * @param {Array}   path      | where in the object is the option
                         */

                    }, {
                        key: 'checkFields',
                        value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
                            var optionType = Validator.getType(options[option]);
                            var refOptionType = refOptionObj[optionType];
                            if (refOptionType !== undefined) {
                                // if the type is correct, we check if it is supposed to be one of a few select values
                                if (Validator.getType(refOptionType) === 'array') {
                                    if (refOptionType.indexOf(options[option]) === -1) {
                                        console.log('%cInvalid option detected in "' + option + '".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not "' + options[option] + '". ' + Validator.printLocation(path, option), printStyle);
                                        errorFound = true;
                                    } else if (optionType === 'object' && referenceOption !== "__any__") {
                                        path = util.copyAndExtendArray(path, option);
                                        Validator.parse(options[option], referenceOptions[referenceOption], path);
                                    }
                                } else if (optionType === 'object' && referenceOption !== "__any__") {
                                    path = util.copyAndExtendArray(path, option);
                                    Validator.parse(options[option], referenceOptions[referenceOption], path);
                                }
                            } else if (refOptionObj['any'] === undefined) {
                                // type of the field is incorrect and the field cannot be any
                                console.log('%cInvalid type received for "' + option + '". Expected: ' + Validator.print((0, _keys2['default'])(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"' + Validator.printLocation(path, option), printStyle);
                                errorFound = true;
                            }
                        }
                    }, {
                        key: 'getType',
                        value: function getType(object) {
                            var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

                            if (type === 'object') {
                                if (object === null) {
                                    return 'null';
                                }
                                if (object instanceof Boolean) {
                                    return 'boolean';
                                }
                                if (object instanceof Number) {
                                    return 'number';
                                }
                                if (object instanceof String) {
                                    return 'string';
                                }
                                if (Array.isArray(object)) {
                                    return 'array';
                                }
                                if (object instanceof Date) {
                                    return 'date';
                                }
                                if (object.nodeType !== undefined) {
                                    return 'dom';
                                }
                                if (object._isAMomentObject === true) {
                                    return 'moment';
                                }
                                return 'object';
                            } else if (type === 'number') {
                                return 'number';
                            } else if (type === 'boolean') {
                                return 'boolean';
                            } else if (type === 'string') {
                                return 'string';
                            } else if (type === undefined) {
                                return 'undefined';
                            }
                            return type;
                        }
                    }, {
                        key: 'getSuggestion',
                        value: function getSuggestion(option, options, path) {
                            var localSearch = Validator.findInOptions(option, options, path, false);
                            var globalSearch = Validator.findInOptions(option, allOptions, [], true);

                            var localSearchThreshold = 8;
                            var globalSearchThreshold = 4;

                            if (localSearch.indexMatch !== undefined) {
                                console.log('%cUnknown option detected: "' + option + '" in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n', printStyle);
                            } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
                                console.log('%cUnknown option detected: "' + option + '" in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, ''), printStyle);
                            } else if (localSearch.distance <= localSearchThreshold) {
                                console.log('%cUnknown option detected: "' + option + '". Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option), printStyle);
                            } else {
                                console.log('%cUnknown option detected: "' + option + '". Did you mean one of these: ' + Validator.print((0, _keys2['default'])(options)) + Validator.printLocation(path, option), printStyle);
                            }

                            errorFound = true;
                        }

                        /**
                         * traverse the options in search for a match.
                         * @param option
                         * @param options
                         * @param path
                         * @param recursive
                         * @returns {{closestMatch: string, path: Array, distance: number}}
                         */

                    }, {
                        key: 'findInOptions',
                        value: function findInOptions(option, options, path) {
                            var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                            var min = 1e9;
                            var closestMatch = '';
                            var closestMatchPath = [];
                            var lowerCaseOption = option.toLowerCase();
                            var indexMatch = undefined;
                            for (var op in options) {
                                var distance = void 0;
                                if (options[op].__type__ !== undefined && recursive === true) {
                                    var result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));
                                    if (min > result.distance) {
                                        closestMatch = result.closestMatch;
                                        closestMatchPath = result.path;
                                        min = result.distance;
                                        indexMatch = result.indexMatch;
                                    }
                                } else {
                                    if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
                                        indexMatch = op;
                                    }
                                    distance = Validator.levenshteinDistance(option, op);
                                    if (min > distance) {
                                        closestMatch = op;
                                        closestMatchPath = util.copyArray(path);
                                        min = distance;
                                    }
                                }
                            }
                            return { closestMatch: closestMatch, path: closestMatchPath, distance: min, indexMatch: indexMatch };
                        }
                    }, {
                        key: 'printLocation',
                        value: function printLocation(path, option) {
                            var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Problem value found at: \n';

                            var str = '\n\n' + prefix + 'options = {\n';
                            for (var i = 0; i < path.length; i++) {
                                for (var j = 0; j < i + 1; j++) {
                                    str += '  ';
                                }
                                str += path[i] + ': {\n';
                            }
                            for (var _j = 0; _j < path.length + 1; _j++) {
                                str += '  ';
                            }
                            str += option + '\n';
                            for (var _i = 0; _i < path.length + 1; _i++) {
                                for (var _j2 = 0; _j2 < path.length - _i; _j2++) {
                                    str += '  ';
                                }
                                str += '}\n';
                            }
                            return str + '\n\n';
                        }
                    }, {
                        key: 'print',
                        value: function print(options) {
                            return (0, _stringify2['default'])(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
                        }

                        // Compute the edit distance between the two given strings
                        // http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
                        /*
                         Copyright (c) 2011 Andrei Mackenzie
                          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                          The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                         */

                    }, {
                        key: 'levenshteinDistance',
                        value: function levenshteinDistance(a, b) {
                            if (a.length === 0) return b.length;
                            if (b.length === 0) return a.length;

                            var matrix = [];

                            // increment along the first column of each row
                            var i;
                            for (i = 0; i <= b.length; i++) {
                                matrix[i] = [i];
                            }

                            // increment each column in the first row
                            var j;
                            for (j = 0; j <= a.length; j++) {
                                matrix[0][j] = j;
                            }

                            // Fill in the rest of the matrix
                            for (i = 1; i <= b.length; i++) {
                                for (j = 1; j <= a.length; j++) {
                                    if (b.charAt(i - 1) == a.charAt(j - 1)) {
                                        matrix[i][j] = matrix[i - 1][j - 1];
                                    } else {
                                        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
                                            Math.min(matrix[i][j - 1] + 1, // insertion
                                                matrix[i - 1][j] + 1)); // deletion
                                    }
                                }
                            }

                            return matrix[b.length][a.length];
                        }
                    }]);
                    return Validator;
                }();

                exports['default'] = Validator;
                exports.printStyle = printStyle;

                /***/
            }),
            /* 145 */
            /***/
            (function(module, exports) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                /**
                 * This object contains all possible options. It will check if the types are correct, if required if the option is one
                 * of the allowed values.
                 *
                 * __any__ means that the name of the property does not matter.
                 * __type__ is a required field for all objects and contains the allowed types of all objects
                 */
                var string = 'string';
                var bool = 'boolean';
                var number = 'number';
                var array = 'array';
                var date = 'date';
                var object = 'object'; // should only be in a __type__ property
                var dom = 'dom';
                var moment = 'moment';
                var any = 'any';

                var allOptions = {
                    configure: {
                        enabled: { 'boolean': bool },
                        filter: { 'boolean': bool, 'function': 'function' },
                        container: { dom: dom },
                        __type__: { object: object, 'boolean': bool, 'function': 'function' }
                    },

                    //globals :
                    align: { string: string },
                    rtl: { 'boolean': bool, 'undefined': 'undefined' },
                    rollingMode: {
                        follow: { 'boolean': bool },
                        offset: { number: number, 'undefined': 'undefined' },
                        __type__: { object: object }
                    },
                    verticalScroll: { 'boolean': bool, 'undefined': 'undefined' },
                    horizontalScroll: { 'boolean': bool, 'undefined': 'undefined' },
                    autoResize: { 'boolean': bool },
                    throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
                    clickToUse: { 'boolean': bool },
                    dataAttributes: { string: string, array: array },
                    editable: {
                        add: { 'boolean': bool, 'undefined': 'undefined' },
                        remove: { 'boolean': bool, 'undefined': 'undefined' },
                        updateGroup: { 'boolean': bool, 'undefined': 'undefined' },
                        updateTime: { 'boolean': bool, 'undefined': 'undefined' },
                        overrideItems: { 'boolean': bool, 'undefined': 'undefined' },
                        __type__: { 'boolean': bool, object: object }
                    },
                    end: { number: number, date: date, string: string, moment: moment },
                    format: {
                        minorLabels: {
                            millisecond: { string: string, 'undefined': 'undefined' },
                            second: { string: string, 'undefined': 'undefined' },
                            minute: { string: string, 'undefined': 'undefined' },
                            hour: { string: string, 'undefined': 'undefined' },
                            weekday: { string: string, 'undefined': 'undefined' },
                            day: { string: string, 'undefined': 'undefined' },
                            week: { string: string, 'undefined': 'undefined' },
                            month: { string: string, 'undefined': 'undefined' },
                            year: { string: string, 'undefined': 'undefined' },
                            __type__: { object: object, 'function': 'function' }
                        },
                        majorLabels: {
                            millisecond: { string: string, 'undefined': 'undefined' },
                            second: { string: string, 'undefined': 'undefined' },
                            minute: { string: string, 'undefined': 'undefined' },
                            hour: { string: string, 'undefined': 'undefined' },
                            weekday: { string: string, 'undefined': 'undefined' },
                            day: { string: string, 'undefined': 'undefined' },
                            week: { string: string, 'undefined': 'undefined' },
                            month: { string: string, 'undefined': 'undefined' },
                            year: { string: string, 'undefined': 'undefined' },
                            __type__: { object: object, 'function': 'function' }
                        },
                        __type__: { object: object }
                    },
                    moment: { 'function': 'function' },
                    groupOrder: { string: string, 'function': 'function' },
                    groupEditable: {
                        add: { 'boolean': bool, 'undefined': 'undefined' },
                        remove: { 'boolean': bool, 'undefined': 'undefined' },
                        order: { 'boolean': bool, 'undefined': 'undefined' },
                        __type__: { 'boolean': bool, object: object }
                    },
                    groupOrderSwap: { 'function': 'function' },
                    height: { string: string, number: number },
                    hiddenDates: {
                        start: { date: date, number: number, string: string, moment: moment },
                        end: { date: date, number: number, string: string, moment: moment },
                        repeat: { string: string },
                        __type__: { object: object, array: array }
                    },
                    itemsAlwaysDraggable: { 'boolean': bool },
                    locale: { string: string },
                    locales: {
                        __any__: { any: any },
                        __type__: { object: object }
                    },
                    margin: {
                        axis: { number: number },
                        item: {
                            horizontal: { number: number, 'undefined': 'undefined' },
                            vertical: { number: number, 'undefined': 'undefined' },
                            __type__: { object: object, number: number }
                        },
                        __type__: { object: object, number: number }
                    },
                    max: { date: date, number: number, string: string, moment: moment },
                    maxHeight: { number: number, string: string },
                    maxMinorChars: { number: number },
                    min: { date: date, number: number, string: string, moment: moment },
                    minHeight: { number: number, string: string },
                    moveable: { 'boolean': bool },
                    multiselect: { 'boolean': bool },
                    multiselectPerGroup: { 'boolean': bool },
                    onAdd: { 'function': 'function' },
                    onUpdate: { 'function': 'function' },
                    onMove: { 'function': 'function' },
                    onMoving: { 'function': 'function' },
                    onRemove: { 'function': 'function' },
                    onAddGroup: { 'function': 'function' },
                    onMoveGroup: { 'function': 'function' },
                    onRemoveGroup: { 'function': 'function' },
                    order: { 'function': 'function' },
                    orientation: {
                        axis: { string: string, 'undefined': 'undefined' },
                        item: { string: string, 'undefined': 'undefined' },
                        __type__: { string: string, object: object }
                    },
                    selectable: { 'boolean': bool },
                    showCurrentTime: { 'boolean': bool },
                    showMajorLabels: { 'boolean': bool },
                    showMinorLabels: { 'boolean': bool },
                    stack: { 'boolean': bool },
                    stackSubgroups: { 'boolean': bool },
                    snap: { 'function': 'function', 'null': 'null' },
                    start: { date: date, number: number, string: string, moment: moment },
                    template: { 'function': 'function' },
                    groupTemplate: { 'function': 'function' },
                    visibleFrameTemplate: { string: string, 'function': 'function' },
                    showTooltips: { 'boolean': bool },
                    tooltip: {
                        followMouse: { 'boolean': bool },
                        overflowMethod: { 'string': ['cap', 'flip'] },
                        __type__: { object: object }
                    },
                    tooltipOnItemUpdateTime: {
                        template: { 'function': 'function' },
                        __type__: { 'boolean': bool, object: object }
                    },
                    timeAxis: {
                        scale: { string: string, 'undefined': 'undefined' },
                        step: { number: number, 'undefined': 'undefined' },
                        __type__: { object: object }
                    },
                    type: { string: string },
                    width: { string: string, number: number },
                    zoomable: { 'boolean': bool },
                    zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
                    zoomMax: { number: number },
                    zoomMin: { number: number },

                    __type__: { object: object }
                };

                var configureOptions = {
                    global: {
                        align: ['center', 'left', 'right'],
                        direction: false,
                        autoResize: true,
                        clickToUse: false,
                        // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
                        editable: {
                            add: false,
                            remove: false,
                            updateGroup: false,
                            updateTime: false
                        },
                        end: '',
                        format: {
                            minorLabels: {
                                millisecond: 'SSS',
                                second: 's',
                                minute: 'HH:mm',
                                hour: 'HH:mm',
                                weekday: 'ddd D',
                                day: 'D',
                                week: 'w',
                                month: 'MMM',
                                year: 'YYYY'
                            },
                            majorLabels: {
                                millisecond: 'HH:mm:ss',
                                second: 'D MMMM HH:mm',
                                minute: 'ddd D MMMM',
                                hour: 'ddd D MMMM',
                                weekday: 'MMMM YYYY',
                                day: 'MMMM YYYY',
                                week: 'MMMM YYYY',
                                month: 'YYYY',
                                year: ''
                            }
                        },

                        //groupOrder: {string, 'function': 'function'},
                        groupsDraggable: false,
                        height: '',
                        //hiddenDates: {object, array},
                        locale: '',
                        margin: {
                            axis: [20, 0, 100, 1],
                            item: {
                                horizontal: [10, 0, 100, 1],
                                vertical: [10, 0, 100, 1]
                            }
                        },
                        max: '',
                        maxHeight: '',
                        maxMinorChars: [7, 0, 20, 1],
                        min: '',
                        minHeight: '',
                        moveable: false,
                        multiselect: false,
                        multiselectPerGroup: false,
                        //onAdd: {'function': 'function'},
                        //onUpdate: {'function': 'function'},
                        //onMove: {'function': 'function'},
                        //onMoving: {'function': 'function'},
                        //onRename: {'function': 'function'},
                        //order: {'function': 'function'},
                        orientation: {
                            axis: ['both', 'bottom', 'top'],
                            item: ['bottom', 'top']
                        },
                        selectable: true,
                        showCurrentTime: false,
                        showMajorLabels: true,
                        showMinorLabels: true,
                        stack: true,
                        stackSubgroups: true,
                        //snap: {'function': 'function', nada},
                        start: '',
                        //template: {'function': 'function'},
                        //timeAxis: {
                        //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'],
                        //  step: [1, 1, 10, 1]
                        //},
                        showTooltips: true,
                        tooltip: {
                            followMouse: false,
                            overflowMethod: 'flip'
                        },
                        tooltipOnItemUpdateTime: false,
                        type: ['box', 'point', 'range', 'background'],
                        width: '100%',
                        zoomable: true,
                        zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
                        zoomMax: [315360000000000, 10, 315360000000000, 1],
                        zoomMin: [10, 10, 315360000000000, 1]
                    }
                };

                exports.allOptions = allOptions;
                exports.configureOptions = configureOptions;

                /***/
            }),
            /* 146 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var ColorPicker = __webpack_require__(147)['default'];

                /**
                 * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
                 * Boolean options are recognised as Boolean
                 * Number options should be written as array: [default value, min value, max value, stepsize]
                 * Colors should be written as array: ['color', '#ffffff']
                 * Strings with should be written as array: [option1, option2, option3, ..]
                 *
                 * The options are matched with their counterparts in each of the modules and the values used in the configuration are
                 *
                 * @param parentModule        | the location where parentModule.setOptions() can be called
                 * @param defaultContainer    | the default container of the module
                 * @param configureOptions    | the fully configured and predefined options set found in allOptions.js
                 * @param pixelRatio          | canvas pixel ratio
                 */

                var Configurator = function() {
                    function Configurator(parentModule, defaultContainer, configureOptions) {
                        var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        (0, _classCallCheck3['default'])(this, Configurator);

                        this.parent = parentModule;
                        this.changedOptions = [];
                        this.container = defaultContainer;
                        this.allowCreation = false;

                        this.options = {};
                        this.initialized = false;
                        this.popupCounter = 0;
                        this.defaultOptions = {
                            enabled: false,
                            filter: true,
                            container: undefined,
                            showButton: true
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.configureOptions = configureOptions;
                        this.moduleOptions = {};
                        this.domElements = [];
                        this.popupDiv = {};
                        this.popupLimit = 5;
                        this.popupHistory = {};
                        this.colorPicker = new ColorPicker(pixelRatio);
                        this.wrapper = undefined;
                    }

                    /**
                     * refresh all options.
                     * Because all modules parse their options by themselves, we just use their options. We copy them here.
                     *
                     * @param options
                     */


                    (0, _createClass3['default'])(Configurator, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                // reset the popup history because the indices may have been changed.
                                this.popupHistory = {};
                                this._removePopup();

                                var enabled = true;
                                if (typeof options === 'string') {
                                    this.options.filter = options;
                                } else if (options instanceof Array) {
                                    this.options.filter = options.join();
                                } else if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3['default'])(options)) === 'object') {
                                    if (options.container !== undefined) {
                                        this.options.container = options.container;
                                    }
                                    if (options.filter !== undefined) {
                                        this.options.filter = options.filter;
                                    }
                                    if (options.showButton !== undefined) {
                                        this.options.showButton = options.showButton;
                                    }
                                    if (options.enabled !== undefined) {
                                        enabled = options.enabled;
                                    }
                                } else if (typeof options === 'boolean') {
                                    this.options.filter = true;
                                    enabled = options;
                                } else if (typeof options === 'function') {
                                    this.options.filter = options;
                                    enabled = true;
                                }
                                if (this.options.filter === false) {
                                    enabled = false;
                                }

                                this.options.enabled = enabled;
                            }
                            this._clean();
                        }
                    }, {
                        key: 'setModuleOptions',
                        value: function setModuleOptions(moduleOptions) {
                            this.moduleOptions = moduleOptions;
                            if (this.options.enabled === true) {
                                this._clean();
                                if (this.options.container !== undefined) {
                                    this.container = this.options.container;
                                }
                                this._create();
                            }
                        }

                        /**
                         * Create all DOM elements
                         * @private
                         */

                    }, {
                        key: '_create',
                        value: function _create() {
                            var _this = this;

                            this._clean();
                            this.changedOptions = [];

                            var filter = this.options.filter;
                            var counter = 0;
                            var show = false;
                            for (var option in this.configureOptions) {
                                if (this.configureOptions.hasOwnProperty(option)) {
                                    this.allowCreation = false;
                                    show = false;
                                    if (typeof filter === 'function') {
                                        show = filter(option, []);
                                        show = show || this._handleObject(this.configureOptions[option], [option], true);
                                    } else if (filter === true || filter.indexOf(option) !== -1) {
                                        show = true;
                                    }

                                    if (show !== false) {
                                        this.allowCreation = true;

                                        // linebreak between categories
                                        if (counter > 0) {
                                            this._makeItem([]);
                                        }
                                        // a header for the category
                                        this._makeHeader(option);

                                        // get the sub options
                                        this._handleObject(this.configureOptions[option], [option]);
                                    }
                                    counter++;
                                }
                            }

                            if (this.options.showButton === true) {
                                var generateButton = document.createElement('div');
                                generateButton.className = 'vis-configuration vis-config-button';
                                generateButton.innerHTML = 'generate options';
                                generateButton.onclick = function() {
                                    _this._printOptions();
                                };
                                generateButton.onmouseover = function() {
                                    generateButton.className = 'vis-configuration vis-config-button hover';
                                };
                                generateButton.onmouseout = function() {
                                    generateButton.className = 'vis-configuration vis-config-button';
                                };

                                this.optionsContainer = document.createElement('div');
                                this.optionsContainer.className = 'vis-configuration vis-config-option-container';

                                this.domElements.push(this.optionsContainer);
                                this.domElements.push(generateButton);
                            }

                            this._push();
                            //~ this.colorPicker.insertTo(this.container);
                        }

                        /**
                         * draw all DOM elements on the screen
                         * @private
                         */

                    }, {
                        key: '_push',
                        value: function _push() {
                            this.wrapper = document.createElement('div');
                            this.wrapper.className = 'vis-configuration-wrapper';
                            this.container.appendChild(this.wrapper);
                            for (var i = 0; i < this.domElements.length; i++) {
                                this.wrapper.appendChild(this.domElements[i]);
                            }

                            this._showPopupIfNeeded();
                        }

                        /**
                         * delete all DOM elements
                         * @private
                         */

                    }, {
                        key: '_clean',
                        value: function _clean() {
                            for (var i = 0; i < this.domElements.length; i++) {
                                this.wrapper.removeChild(this.domElements[i]);
                            }

                            if (this.wrapper !== undefined) {
                                this.container.removeChild(this.wrapper);
                                this.wrapper = undefined;
                            }
                            this.domElements = [];

                            this._removePopup();
                        }

                        /**
                         * get the value from the actualOptions if it exists
                         * @param {array} path    | where to look for the actual option
                         * @returns {*}
                         * @private
                         */

                    }, {
                        key: '_getValue',
                        value: function _getValue(path) {
                            var base = this.moduleOptions;
                            for (var i = 0; i < path.length; i++) {
                                if (base[path[i]] !== undefined) {
                                    base = base[path[i]];
                                } else {
                                    base = undefined;
                                    break;
                                }
                            }
                            return base;
                        }

                        /**
                         * all option elements are wrapped in an item
                         * @param path
                         * @param domElements
                         * @private
                         */

                    }, {
                        key: '_makeItem',
                        value: function _makeItem(path) {


                            if (this.allowCreation === true) {


                                if (path.length === 3) {
                                    var item = document.createElement('h5');
                                    item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;
                                    for (var _len = arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                        domElements[_key - 1] = arguments[_key];
                                    }
                                    domElements.forEach(function(element) {
                                        item.appendChild(element);
                                    });
                                    this.domElements.push(item);
                                    return this.domElements.length;
                                } else {


                                    var item = document.createElement('h4');
                                    item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;
                                    for (var _len = arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                        domElements[_key - 1] = arguments[_key];
                                    }
                                    domElements.forEach(function(element) {
                                        item.appendChild(element);
                                    });
                                    this.domElements.push(item);
                                    return this.domElements.length;
                                }


                            }
                            return 0;
                        }

                        /**
                         * header for major subjects
                         * @param name
                         * @private
                         */

                    }, {
                        key: '_makeHeader',
                        value: function _makeHeader(name) {
                            var div = document.createElement('div');
                            div.className = 'vis-configuration vis-config-header';
                            div.innerHTML = name;
                            this._makeItem([], div);
                        }

                        /**
                         * make a label, if it is an object label, it gets different styling.
                         * @param name
                         * @param path
                         * @param objectLabel
                         * @returns {HTMLElement}
                         * @private
                         */

                    }, {
                        key: '_makeLabel',
                        value: function _makeLabel(name, path) {
                            var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            var div = document.createElement('div');
                            div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;
                            if (objectLabel === true) {
                                div.innerHTML = '<i><b>' + name + ':</b></i>';
                            } else {
                                div.innerHTML = name + ':';
                            }
                            return div;
                        }

                        /**
                         * make a dropdown list for multiple possible string optoins
                         * @param arr
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_makeDropdown',
                        value: function _makeDropdown(arr, value, path) {
                            var select = document.createElement('select');
                            select.className = 'vis-configuration vis-config-select';
                            var selectedValue = 0;
                            if (value !== undefined) {
                                if (arr.indexOf(value) !== -1) {
                                    selectedValue = arr.indexOf(value);
                                }
                            }

                            for (var i = 0; i < arr.length; i++) {
                                var option = document.createElement('option');
                                option.value = arr[i];
                                if (i === selectedValue) {
                                    option.selected = 'selected';
                                }
                                option.innerHTML = arr[i];
                                select.appendChild(option);
                            }

                            var me = this;
                            select.onchange = function() {
                                me._update(this.value, path);
                            };

                            var label = this._makeLabel(path[path.length - 1], path);
                            this._makeItem(path, label, select);
                        }

                        /**
                         * make a range object for numeric options
                         * @param arr
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_makeRange',
                        value: function _makeRange(arr, value, path) {
                            var defaultValue = arr[0];
                            var min = arr[1];
                            var max = arr[2];
                            var step = arr[3];
                            var range = document.createElement('input');
                            range.className = 'vis-configuration vis-config-range';
                            try {
                                range.type = 'range'; // not supported on IE9
                                range.min = min;
                                range.max = max;
                            } catch (err) {}
                            range.step = step;

                            // set up the popup settings in case they are needed.
                            var popupString = '';
                            var popupValue = 0;

                            if (value !== undefined) {
                                var factor = 1.20;
                                if (value < 0 && value * factor < min) {
                                    range.min = Math.ceil(value * factor);
                                    popupValue = range.min;
                                    popupString = 'range increased';
                                } else if (value / factor < min) {
                                    range.min = Math.ceil(value / factor);
                                    popupValue = range.min;
                                    popupString = 'range increased';
                                }
                                if (value * factor > max && max !== 1) {
                                    range.max = Math.ceil(value * factor);
                                    popupValue = range.max;
                                    popupString = 'range increased';
                                }
                                range.value = value;
                            } else {
                                range.value = defaultValue;
                            }

                            var input = document.createElement('input');
                            input.className = 'vis-configuration vis-config-rangeinput';
                            input.value = range.value;

                            var me = this;
                            range.onchange = function() {
                                input.value = this.value;
                                me._update(Number(this.value), path);
                            };
                            range.oninput = function() {
                                input.value = this.value;
                            };

                            var label = this._makeLabel(path[path.length - 1], path);
                            var itemIndex = this._makeItem(path, label, range, input);

                            // if a popup is needed AND it has not been shown for this value, show it.
                            if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {
                                this.popupHistory[itemIndex] = popupValue;
                                this._setupPopup(popupString, itemIndex);
                            }
                        }

                        /**
                         * prepare the popup
                         * @param string
                         * @param index
                         * @private
                         */

                    }, {
                        key: '_setupPopup',
                        value: function _setupPopup(string, index) {
                            var _this2 = this;

                            if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
                                var div = document.createElement("div");
                                div.id = "vis-configuration-popup";
                                div.className = "vis-configuration-popup";
                                div.innerHTML = string;
                                div.onclick = function() {
                                    _this2._removePopup();
                                };
                                this.popupCounter += 1;
                                this.popupDiv = { html: div, index: index };
                            }
                        }

                        /**
                         * remove the popup from the dom
                         * @private
                         */

                    }, {
                        key: '_removePopup',
                        value: function _removePopup() {
                            if (this.popupDiv.html !== undefined) {
                                this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
                                clearTimeout(this.popupDiv.hideTimeout);
                                clearTimeout(this.popupDiv.deleteTimeout);
                                this.popupDiv = {};
                            }
                        }

                        /**
                         * Show the popup if it is needed.
                         * @private
                         */

                    }, {
                        key: '_showPopupIfNeeded',
                        value: function _showPopupIfNeeded() {
                            var _this3 = this;

                            if (this.popupDiv.html !== undefined) {
                                var correspondingElement = this.domElements[this.popupDiv.index];
                                var rect = correspondingElement.getBoundingClientRect();
                                this.popupDiv.html.style.left = rect.left + "px";
                                this.popupDiv.html.style.top = rect.top - 30 + "px"; // 30 is the height;
                                document.body.appendChild(this.popupDiv.html);
                                this.popupDiv.hideTimeout = setTimeout(function() {
                                    _this3.popupDiv.html.style.opacity = 0;
                                }, 1500);
                                this.popupDiv.deleteTimeout = setTimeout(function() {
                                    _this3._removePopup();
                                }, 1800);
                            }
                        }

                        /**
                         * make a checkbox for boolean options.
                         * @param defaultValue
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_makeCheckbox',
                        value: function _makeCheckbox(defaultValue, value, path) {
                            var checkbox = document.createElement('input');
                            checkbox.type = 'checkbox';
                            checkbox.className = 'vis-configuration vis-config-checkbox';
                            checkbox.checked = defaultValue;
                            if (value !== undefined) {
                                checkbox.checked = value;
                                if (value !== defaultValue) {
                                    if ((typeof defaultValue === 'undefined' ? 'undefined' : (0, _typeof3['default'])(defaultValue)) === 'object') {
                                        if (value !== defaultValue.enabled) {
                                            this.changedOptions.push({ path: path, value: value });
                                        }
                                    } else {
                                        this.changedOptions.push({ path: path, value: value });
                                    }
                                }
                            }

                            var me = this;
                            checkbox.onchange = function() {
                                me._update(this.checked, path);
                            };

                            var label = this._makeLabel(path[path.length - 1], path);
                            this._makeItem(path, label, checkbox);
                        }

                        /**
                         * make a text input field for string options.
                         * @param defaultValue
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_makeTextInput',
                        value: function _makeTextInput(defaultValue, value, path) {
                            var checkbox = document.createElement('input');
                            checkbox.type = 'text';
                            checkbox.className = 'vis-configuration vis-config-text';
                            checkbox.value = value;
                            if (value !== defaultValue) {
                                this.changedOptions.push({ path: path, value: value });
                            }

                            var me = this;
                            checkbox.onchange = function() {
                                me._update(this.value, path);
                            };

                            var label = this._makeLabel(path[path.length - 1], path);
                            this._makeItem(path, label, checkbox);
                        }

                        /**
                         * make a color field with a color picker for color fields
                         * @param arr
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_makeColorField',
                        value: function _makeColorField(arr, value, path) {
                            var _this4 = this;

                            var defaultColor = arr[1];
                            var div = document.createElement('div');
                            value = value === undefined ? defaultColor : value;

                            if (value !== 'none') {
                                div.className = 'vis-configuration vis-config-colorBlock';
                                div.style.backgroundColor = value;
                            } else {
                                div.className = 'vis-configuration vis-config-colorBlock none';
                            }

                            value = value === undefined ? defaultColor : value;
                            div.onclick = function() {
                                _this4._showColorPicker(value, div, path);
                            };

                            var label = this._makeLabel(path[path.length - 1], path);
                            this._makeItem(path, label, div);
                        }

                        /**
                         * used by the color buttons to call the color picker.
                         * @param event
                         * @param value
                         * @param div
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_showColorPicker',
                        value: function _showColorPicker(value, div, path) {
                            var _this5 = this;

                            // clear the callback from this div
                            div.onclick = function() {};

                            this.colorPicker.insertTo(div);
                            this.colorPicker.show();

                            this.colorPicker.setColor(value);
                            this.colorPicker.setUpdateCallback(function(color) {
                                var colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
                                div.style.backgroundColor = colorString;
                                _this5._update(colorString, path);
                            });

                            // on close of the colorpicker, restore the callback.
                            this.colorPicker.setCloseCallback(function() {
                                div.onclick = function() {
                                    _this5._showColorPicker(value, div, path);
                                };
                            });
                        }

                        /**
                         * parse an object and draw the correct items
                         * @param obj
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_handleObject',
                        value: function _handleObject(obj) {
                            var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                            var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            var show = false;
                            var filter = this.options.filter;
                            var visibleInSet = false;
                            for (var subObj in obj) {
                                if (obj.hasOwnProperty(subObj)) {
                                    show = true;
                                    var item = obj[subObj];
                                    var newPath = util.copyAndExtendArray(path, subObj);
                                    if (typeof filter === 'function') {
                                        show = filter(subObj, path);

                                        // if needed we must go deeper into the object.
                                        if (show === false) {
                                            if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {
                                                this.allowCreation = false;
                                                show = this._handleObject(item, newPath, true);
                                                this.allowCreation = checkOnly === false;
                                            }
                                        }
                                    }

                                    if (show !== false) {
                                        visibleInSet = true;
                                        var value = this._getValue(newPath);

                                        if (item instanceof Array) {
                                            this._handleArray(item, value, newPath);
                                        } else if (typeof item === 'string') {
                                            this._makeTextInput(item, value, newPath);
                                        } else if (typeof item === 'boolean') {
                                            this._makeCheckbox(item, value, newPath);
                                        } else if (item instanceof Object) {
                                            // collapse the physics options that are not enabled
                                            var draw = true;
                                            if (path.indexOf('physics') !== -1) {
                                                if (this.moduleOptions.physics.solver !== subObj) {
                                                    draw = false;
                                                }
                                            }

                                            if (draw === true) {
                                                // initially collapse options with an disabled enabled option.
                                                if (item.enabled !== undefined) {
                                                    var enabledPath = util.copyAndExtendArray(newPath, 'enabled');
                                                    var enabledValue = this._getValue(enabledPath);
                                                    if (enabledValue === true) {
                                                        var label = this._makeLabel(subObj, newPath, true);
                                                        this._makeItem(newPath, label);
                                                        visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                                                    } else {
                                                        this._makeCheckbox(item, enabledValue, newPath);
                                                    }
                                                } else {
                                                    var _label = this._makeLabel(subObj, newPath, true);
                                                    this._makeItem(newPath, _label);
                                                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                                                }
                                            }
                                        } else {
                                            console.error('dont know how to handle', item, subObj, newPath);
                                        }
                                    }
                                }
                            }
                            return visibleInSet;
                        }

                        /**
                         * handle the array type of option
                         * @param optionName
                         * @param arr
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_handleArray',
                        value: function _handleArray(arr, value, path) {
                            if (typeof arr[0] === 'string' && arr[0] === 'color') {
                                this._makeColorField(arr, value, path);
                                if (arr[1] !== value) {
                                    this.changedOptions.push({ path: path, value: value });
                                }
                            } else if (typeof arr[0] === 'string') {
                                this._makeDropdown(arr, value, path);
                                if (arr[0] !== value) {
                                    this.changedOptions.push({ path: path, value: value });
                                }
                            } else if (typeof arr[0] === 'number') {
                                this._makeRange(arr, value, path);
                                if (arr[0] !== value) {
                                    this.changedOptions.push({ path: path, value: Number(value) });
                                }
                            }
                        }

                        /**
                         * called to update the network with the new settings.
                         * @param value
                         * @param path
                         * @private
                         */

                    }, {
                        key: '_update',
                        value: function _update(value, path) {
                            var options = this._constructOptions(value, path);

                            if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
                                this.parent.body.emitter.emit("configChange", options);
                            }
                            this.initialized = true;
                            this.parent.setOptions(options);
                        }
                    }, {
                        key: '_constructOptions',
                        value: function _constructOptions(value, path) {
                            var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                            var pointer = optionsObj;

                            // when dropdown boxes can be string or boolean, we typecast it into correct types
                            value = value === 'true' ? true : value;
                            value = value === 'false' ? false : value;

                            for (var i = 0; i < path.length; i++) {
                                if (path[i] !== 'global') {
                                    if (pointer[path[i]] === undefined) {
                                        pointer[path[i]] = {};
                                    }
                                    if (i !== path.length - 1) {
                                        pointer = pointer[path[i]];
                                    } else {
                                        pointer[path[i]] = value;
                                    }
                                }
                            }
                            return optionsObj;
                        }
                    }, {
                        key: '_printOptions',
                        value: function _printOptions() {
                            var options = this.getOptions();
                            this.optionsContainer.innerHTML = '<pre>var options = ' + (0, _stringify2['default'])(options, null, 2) + '</pre>';
                        }
                    }, {
                        key: 'getOptions',
                        value: function getOptions() {
                            var options = {};
                            for (var i = 0; i < this.changedOptions.length; i++) {
                                this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);
                            }
                            return options;
                        }
                    }]);
                    return Configurator;
                }();

                exports['default'] = Configurator;

                /***/
            }),
            /* 147 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Hammer = __webpack_require__(112);
                var hammerUtil = __webpack_require__(119);
                var util = __webpack_require__(1);

                var ColorPicker = function() {
                    function ColorPicker() {
                        var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        (0, _classCallCheck3['default'])(this, ColorPicker);

                        this.pixelRatio = pixelRatio;
                        this.generated = false;
                        this.centerCoordinates = { x: 289 / 2, y: 289 / 2 };
                        this.r = 289 * 0.49;
                        this.color = { r: 255, g: 255, b: 255, a: 1.0 };
                        this.hueCircle = undefined;
                        this.initialColor = { r: 255, g: 255, b: 255, a: 1.0 };
                        this.previousColor = undefined;
                        this.applied = false;

                        // bound by
                        this.updateCallback = function() {};
                        this.closeCallback = function() {};

                        // create all DOM elements
                        this._create();
                    }

                    /**
                     * this inserts the colorPicker into a div from the DOM
                     * @param container
                     */


                    (0, _createClass3['default'])(ColorPicker, [{
                        key: 'insertTo',
                        value: function insertTo(container) {
                            if (this.hammer !== undefined) {
                                this.hammer.destroy();
                                this.hammer = undefined;
                            }
                            this.container = container;
                            this.container.appendChild(this.frame);
                            this._bindHammer();

                            this._setSize();
                        }

                        /**
                         * the callback is executed on apply and save. Bind it to the application
                         * @param callback
                         */

                    }, {
                        key: 'setUpdateCallback',
                        value: function setUpdateCallback(callback) {
                            if (typeof callback === 'function') {
                                this.updateCallback = callback;
                            } else {
                                throw new Error("Function attempted to set as colorPicker update callback is not a function.");
                            }
                        }

                        /**
                         * the callback is executed on apply and save. Bind it to the application
                         * @param callback
                         */

                    }, {
                        key: 'setCloseCallback',
                        value: function setCloseCallback(callback) {
                            if (typeof callback === 'function') {
                                this.closeCallback = callback;
                            } else {
                                throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
                            }
                        }
                    }, {
                        key: '_isColorString',
                        value: function _isColorString(color) {
                            var htmlColors = { black: '#000000', navy: '#000080', darkblue: '#00008B', mediumblue: '#0000CD', blue: '#0000FF', darkgreen: '#006400', green: '#008000', teal: '#008080', darkcyan: '#008B8B', deepskyblue: '#00BFFF', darkturquoise: '#00CED1', mediumspringgreen: '#00FA9A', lime: '#00FF00', springgreen: '#00FF7F', aqua: '#00FFFF', cyan: '#00FFFF', midnightblue: '#191970', dodgerblue: '#1E90FF', lightseagreen: '#20B2AA', forestgreen: '#228B22', seagreen: '#2E8B57', darkslategray: '#2F4F4F', limegreen: '#32CD32', mediumseagreen: '#3CB371', turquoise: '#40E0D0', royalblue: '#4169E1', steelblue: '#4682B4', darkslateblue: '#483D8B', mediumturquoise: '#48D1CC', indigo: '#4B0082', darkolivegreen: '#556B2F', cadetblue: '#5F9EA0', cornflowerblue: '#6495ED', mediumaquamarine: '#66CDAA', dimgray: '#696969', slateblue: '#6A5ACD', olivedrab: '#6B8E23', slategray: '#708090', lightslategray: '#778899', mediumslateblue: '#7B68EE', lawngreen: '#7CFC00', chartreuse: '#7FFF00', aquamarine: '#7FFFD4', maroon: '#800000', purple: '#800080', olive: '#808000', gray: '#808080', skyblue: '#87CEEB', lightskyblue: '#87CEFA', blueviolet: '#8A2BE2', darkred: '#8B0000', darkmagenta: '#8B008B', saddlebrown: '#8B4513', darkseagreen: '#8FBC8F', lightgreen: '#90EE90', mediumpurple: '#9370D8', darkviolet: '#9400D3', palegreen: '#98FB98', darkorchid: '#9932CC', yellowgreen: '#9ACD32', sienna: '#A0522D', brown: '#A52A2A', darkgray: '#A9A9A9', lightblue: '#ADD8E6', greenyellow: '#ADFF2F', paleturquoise: '#AFEEEE', lightsteelblue: '#B0C4DE', powderblue: '#B0E0E6', firebrick: '#B22222', darkgoldenrod: '#B8860B', mediumorchid: '#BA55D3', rosybrown: '#BC8F8F', darkkhaki: '#BDB76B', silver: '#C0C0C0', mediumvioletred: '#C71585', indianred: '#CD5C5C', peru: '#CD853F', chocolate: '#D2691E', tan: '#D2B48C', lightgrey: '#D3D3D3', palevioletred: '#D87093', thistle: '#D8BFD8', orchid: '#DA70D6', goldenrod: '#DAA520', crimson: '#DC143C', gainsboro: '#DCDCDC', plum: '#DDA0DD', burlywood: '#DEB887', lightcyan: '#E0FFFF', lavender: '#E6E6FA', darksalmon: '#E9967A', violet: '#EE82EE', palegoldenrod: '#EEE8AA', lightcoral: '#F08080', khaki: '#F0E68C', aliceblue: '#F0F8FF', honeydew: '#F0FFF0', azure: '#F0FFFF', sandybrown: '#F4A460', wheat: '#F5DEB3', beige: '#F5F5DC', whitesmoke: '#F5F5F5', mintcream: '#F5FFFA', ghostwhite: '#F8F8FF', salmon: '#FA8072', antiquewhite: '#FAEBD7', linen: '#FAF0E6', lightgoldenrodyellow: '#FAFAD2', oldlace: '#FDF5E6', red: '#FF0000', fuchsia: '#FF00FF', magenta: '#FF00FF', deeppink: '#FF1493', orangered: '#FF4500', tomato: '#FF6347', hotpink: '#FF69B4', coral: '#FF7F50', darkorange: '#FF8C00', lightsalmon: '#FFA07A', orange: '#FFA500', lightpink: '#FFB6C1', pink: '#FFC0CB', gold: '#FFD700', peachpuff: '#FFDAB9', navajowhite: '#FFDEAD', moccasin: '#FFE4B5', bisque: '#FFE4C4', mistyrose: '#FFE4E1', blanchedalmond: '#FFEBCD', papayawhip: '#FFEFD5', lavenderblush: '#FFF0F5', seashell: '#FFF5EE', cornsilk: '#FFF8DC', lemonchiffon: '#FFFACD', floralwhite: '#FFFAF0', snow: '#FFFAFA', yellow: '#FFFF00', lightyellow: '#FFFFE0', ivory: '#FFFFF0', white: '#FFFFFF' };
                            if (typeof color === 'string') {
                                return htmlColors[color];
                            }
                        }

                        /**
                         * Set the color of the colorPicker
                         * Supported formats:
                         * 'red'                   --> HTML color string
                         * '#ffffff'               --> hex string
                         * 'rbg(255,255,255)'      --> rgb string
                         * 'rgba(255,255,255,1.0)' --> rgba string
                         * {r:255,g:255,b:255}     --> rgb object
                         * {r:255,g:255,b:255,a:1.0} --> rgba object
                         * @param color
                         * @param setInitial
                         */

                    }, {
                        key: 'setColor',
                        value: function setColor(color) {
                            var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            if (color === 'none') {
                                return;
                            }

                            var rgba = void 0;

                            // if a html color shorthand is used, convert to hex
                            var htmlColor = this._isColorString(color);
                            if (htmlColor !== undefined) {
                                color = htmlColor;
                            }

                            // check format
                            if (util.isString(color) === true) {
                                if (util.isValidRGB(color) === true) {
                                    var rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');
                                    rgba = { r: rgbaArray[0], g: rgbaArray[1], b: rgbaArray[2], a: 1.0 };
                                } else if (util.isValidRGBA(color) === true) {
                                    var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');
                                    rgba = { r: _rgbaArray[0], g: _rgbaArray[1], b: _rgbaArray[2], a: _rgbaArray[3] };
                                } else if (util.isValidHex(color) === true) {
                                    var rgbObj = util.hexToRGB(color);
                                    rgba = { r: rgbObj.r, g: rgbObj.g, b: rgbObj.b, a: 1.0 };
                                }
                            } else {
                                if (color instanceof Object) {
                                    if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {
                                        var alpha = color.a !== undefined ? color.a : '1.0';
                                        rgba = { r: color.r, g: color.g, b: color.b, a: alpha };
                                    }
                                }
                            }

                            // set color
                            if (rgba === undefined) {
                                throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + (0, _stringify2['default'])(color));
                            } else {
                                this._setColor(rgba, setInitial);
                            }
                        }

                        /**
                         * this shows the color picker.
                         * The hue circle is constructed once and stored.
                         */

                    }, {
                        key: 'show',
                        value: function show() {
                            if (this.closeCallback !== undefined) {
                                this.closeCallback();
                                this.closeCallback = undefined;
                            }

                            this.applied = false;
                            this.frame.style.display = 'block';
                            this._generateHueCircle();
                        }

                        // ------------------------------------------ PRIVATE ----------------------------- //

                        /**
                         * Hide the picker. Is called by the cancel button.
                         * Optional boolean to store the previous color for easy access later on.
                         * @param storePrevious
                         * @private
                         */

                    }, {
                        key: '_hide',
                        value: function _hide() {
                            var _this = this;

                            var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                            // store the previous color for next time;
                            if (storePrevious === true) {
                                this.previousColor = util.extend({}, this.color);
                            }

                            if (this.applied === true) {
                                this.updateCallback(this.initialColor);
                            }

                            this.frame.style.display = 'none';

                            // call the closing callback, restoring the onclick method.
                            // this is in a setTimeout because it will trigger the show again before the click is done.
                            setTimeout(function() {
                                if (_this.closeCallback !== undefined) {
                                    _this.closeCallback();
                                    _this.closeCallback = undefined;
                                }
                            }, 0);
                        }

                        /**
                         * bound to the save button. Saves and hides.
                         * @private
                         */

                    }, {
                        key: '_save',
                        value: function _save() {
                            this.updateCallback(this.color);
                            this.applied = false;
                            this._hide();
                        }

                        /**
                         * Bound to apply button. Saves but does not close. Is undone by the cancel button.
                         * @private
                         */

                    }, {
                        key: '_apply',
                        value: function _apply() {
                            this.applied = true;
                            this.updateCallback(this.color);
                            this._updatePicker(this.color);
                        }

                        /**
                         * load the color from the previous session.
                         * @private
                         */

                    }, {
                        key: '_loadLast',
                        value: function _loadLast() {
                            if (this.previousColor !== undefined) {
                                this.setColor(this.previousColor, false);
                            } else {
                                alert("There is no last color to load...");
                            }
                        }

                        /**
                         * set the color, place the picker
                         * @param rgba
                         * @param setInitial
                         * @private
                         */

                    }, {
                        key: '_setColor',
                        value: function _setColor(rgba) {
                            var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            // store the initial color
                            if (setInitial === true) {
                                this.initialColor = util.extend({}, rgba);
                            }

                            this.color = rgba;
                            var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);

                            var angleConvert = 2 * Math.PI;
                            var radius = this.r * hsv.s;
                            var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
                            var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);

                            this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';
                            this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';

                            this._updatePicker(rgba);
                        }

                        /**
                         * bound to opacity control
                         * @param value
                         * @private
                         */

                    }, {
                        key: '_setOpacity',
                        value: function _setOpacity(value) {
                            this.color.a = value / 100;
                            this._updatePicker(this.color);
                        }

                        /**
                         * bound to brightness control
                         * @param value
                         * @private
                         */

                    }, {
                        key: '_setBrightness',
                        value: function _setBrightness(value) {
                            var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
                            hsv.v = value / 100;
                            var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
                            rgba['a'] = this.color.a;
                            this.color = rgba;
                            this._updatePicker();
                        }

                        /**
                         * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
                         * @param rgba
                         * @private
                         */

                    }, {
                        key: '_updatePicker',
                        value: function _updatePicker() {
                            var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;

                            var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
                            var ctx = this.colorPickerCanvas.getContext('2d');
                            if (this.pixelRation === undefined) {
                                this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
                            }
                            ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

                            // clear the canvas
                            var w = this.colorPickerCanvas.clientWidth;
                            var h = this.colorPickerCanvas.clientHeight;
                            ctx.clearRect(0, 0, w, h);

                            ctx.putImageData(this.hueCircle, 0, 0);
                            ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';
                            ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
                            ctx.fill();

                            this.brightnessRange.value = 100 * hsv.v;
                            this.opacityRange.value = 100 * rgba.a;

                            this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
                            this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
                        }

                        /**
                         * used by create to set the size of the canvas.
                         * @private
                         */

                    }, {
                        key: '_setSize',
                        value: function _setSize() {
                            this.colorPickerCanvas.style.width = '100%';
                            this.colorPickerCanvas.style.height = '100%';

                            this.colorPickerCanvas.width = 289 * this.pixelRatio;
                            this.colorPickerCanvas.height = 289 * this.pixelRatio;
                        }

                        /**
                         * create all dom elements
                         * TODO: cleanup, lots of similar dom elements
                         * @private
                         */

                    }, {
                        key: '_create',
                        value: function _create() {
                            this.frame = document.createElement('div');
                            this.frame.className = 'vis-color-picker';

                            this.colorPickerDiv = document.createElement('div');
                            this.colorPickerSelector = document.createElement('div');
                            this.colorPickerSelector.className = 'vis-selector';
                            this.colorPickerDiv.appendChild(this.colorPickerSelector);

                            this.colorPickerCanvas = document.createElement('canvas');
                            this.colorPickerDiv.appendChild(this.colorPickerCanvas);

                            if (!this.colorPickerCanvas.getContext) {
                                var noCanvas = document.createElement('DIV');
                                noCanvas.style.color = 'red';
                                noCanvas.style.fontWeight = 'bold';
                                noCanvas.style.padding = '10px';
                                noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
                                this.colorPickerCanvas.appendChild(noCanvas);
                            } else {
                                var ctx = this.colorPickerCanvas.getContext("2d");
                                this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

                                this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                            }

                            this.colorPickerDiv.className = 'vis-color';

                            this.opacityDiv = document.createElement('div');
                            this.opacityDiv.className = 'vis-opacity';

                            this.brightnessDiv = document.createElement('div');
                            this.brightnessDiv.className = 'vis-brightness';

                            this.arrowDiv = document.createElement('div');
                            this.arrowDiv.className = 'vis-arrow';

                            this.opacityRange = document.createElement('input');
                            try {
                                this.opacityRange.type = 'range'; // Not supported on IE9
                                this.opacityRange.min = '0';
                                this.opacityRange.max = '100';
                            } catch (err) {}
                            this.opacityRange.value = '100';
                            this.opacityRange.className = 'vis-range';

                            this.brightnessRange = document.createElement('input');
                            try {
                                this.brightnessRange.type = 'range'; // Not supported on IE9
                                this.brightnessRange.min = '0';
                                this.brightnessRange.max = '100';
                            } catch (err) {}
                            this.brightnessRange.value = '100';
                            this.brightnessRange.className = 'vis-range';

                            this.opacityDiv.appendChild(this.opacityRange);
                            this.brightnessDiv.appendChild(this.brightnessRange);

                            var me = this;
                            this.opacityRange.onchange = function() {
                                me._setOpacity(this.value);
                            };
                            this.opacityRange.oninput = function() {
                                me._setOpacity(this.value);
                            };
                            this.brightnessRange.onchange = function() {
                                me._setBrightness(this.value);
                            };
                            this.brightnessRange.oninput = function() {
                                me._setBrightness(this.value);
                            };

                            this.brightnessLabel = document.createElement("div");
                            this.brightnessLabel.className = "vis-label vis-brightness";
                            this.brightnessLabel.innerHTML = 'brightness:';

                            this.opacityLabel = document.createElement("div");
                            this.opacityLabel.className = "vis-label vis-opacity";
                            this.opacityLabel.innerHTML = 'opacity:';

                            this.newColorDiv = document.createElement("div");
                            this.newColorDiv.className = "vis-new-color";
                            this.newColorDiv.innerHTML = 'new';

                            this.initialColorDiv = document.createElement("div");
                            this.initialColorDiv.className = "vis-initial-color";
                            this.initialColorDiv.innerHTML = 'initial';

                            this.cancelButton = document.createElement("div");
                            this.cancelButton.className = "vis-button vis-cancel";
                            this.cancelButton.innerHTML = 'cancel';
                            this.cancelButton.onclick = this._hide.bind(this, false);

                            this.applyButton = document.createElement("div");
                            this.applyButton.className = "vis-button vis-apply";
                            this.applyButton.innerHTML = 'apply';
                            this.applyButton.onclick = this._apply.bind(this);

                            this.saveButton = document.createElement("div");
                            this.saveButton.className = "vis-button vis-save";
                            this.saveButton.innerHTML = 'save';
                            this.saveButton.onclick = this._save.bind(this);

                            this.loadButton = document.createElement("div");
                            this.loadButton.className = "vis-button vis-load";
                            this.loadButton.innerHTML = 'load last';
                            this.loadButton.onclick = this._loadLast.bind(this);

                            this.frame.appendChild(this.colorPickerDiv);
                            this.frame.appendChild(this.arrowDiv);
                            this.frame.appendChild(this.brightnessLabel);
                            this.frame.appendChild(this.brightnessDiv);
                            this.frame.appendChild(this.opacityLabel);
                            this.frame.appendChild(this.opacityDiv);
                            this.frame.appendChild(this.newColorDiv);
                            this.frame.appendChild(this.initialColorDiv);

                            this.frame.appendChild(this.cancelButton);
                            this.frame.appendChild(this.applyButton);
                            this.frame.appendChild(this.saveButton);
                            this.frame.appendChild(this.loadButton);
                        }

                        /**
                         * bind hammer to the color picker
                         * @private
                         */

                    }, {
                        key: '_bindHammer',
                        value: function _bindHammer() {
                            var _this2 = this;

                            this.drag = {};
                            this.pinch = {};
                            this.hammer = new Hammer(this.colorPickerCanvas);
                            this.hammer.get('pinch').set({ enable: true });

                            hammerUtil.onTouch(this.hammer, function(event) {
                                _this2._moveSelector(event);
                            });
                            this.hammer.on('tap', function(event) {
                                _this2._moveSelector(event);
                            });
                            this.hammer.on('panstart', function(event) {
                                _this2._moveSelector(event);
                            });
                            this.hammer.on('panmove', function(event) {
                                _this2._moveSelector(event);
                            });
                            this.hammer.on('panend', function(event) {
                                _this2._moveSelector(event);
                            });
                        }

                        /**
                         * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
                         * @private
                         */

                    }, {
                        key: '_generateHueCircle',
                        value: function _generateHueCircle() {
                            if (this.generated === false) {
                                var ctx = this.colorPickerCanvas.getContext('2d');
                                if (this.pixelRation === undefined) {
                                    this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
                                }
                                ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

                                // clear the canvas
                                var w = this.colorPickerCanvas.clientWidth;
                                var h = this.colorPickerCanvas.clientHeight;
                                ctx.clearRect(0, 0, w, h);

                                // draw hue circle
                                var x = void 0,
                                    y = void 0,
                                    hue = void 0,
                                    sat = void 0;
                                this.centerCoordinates = { x: w * 0.5, y: h * 0.5 };
                                this.r = 0.49 * w;
                                var angleConvert = 2 * Math.PI / 360;
                                var hfac = 1 / 360;
                                var sfac = 1 / this.r;
                                var rgb = void 0;
                                for (hue = 0; hue < 360; hue++) {
                                    for (sat = 0; sat < this.r; sat++) {
                                        x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
                                        y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
                                        rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);
                                        ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
                                        ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
                                    }
                                }
                                ctx.strokeStyle = 'rgba(0,0,0,1)';
                                ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
                                ctx.stroke();

                                this.hueCircle = ctx.getImageData(0, 0, w, h);
                            }
                            this.generated = true;
                        }

                        /**
                         * move the selector. This is called by hammer functions.
                         *
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_moveSelector',
                        value: function _moveSelector(event) {
                            var rect = this.colorPickerDiv.getBoundingClientRect();
                            var left = event.center.x - rect.left;
                            var top = event.center.y - rect.top;

                            var centerY = 0.5 * this.colorPickerDiv.clientHeight;
                            var centerX = 0.5 * this.colorPickerDiv.clientWidth;

                            var x = left - centerX;
                            var y = top - centerY;

                            var angle = Math.atan2(x, y);
                            var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);

                            var newTop = Math.cos(angle) * radius + centerY;
                            var newLeft = Math.sin(angle) * radius + centerX;

                            this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';
                            this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px';

                            // set color
                            var h = angle / (2 * Math.PI);
                            h = h < 0 ? h + 1 : h;
                            var s = radius / this.r;
                            var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
                            hsv.h = h;
                            hsv.s = s;
                            var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
                            rgba['a'] = this.color.a;
                            this.color = rgba;

                            // update previews
                            this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
                            this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
                        }
                    }]);
                    return ColorPicker;
                }();

                exports['default'] = ColorPicker;

                /***/
            }),
            /* 148 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var Emitter = __webpack_require__(99);
                var Hammer = __webpack_require__(112);
                var moment = __webpack_require__(82);
                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var Range = __webpack_require__(118);
                var Core = __webpack_require__(122);
                var TimeAxis = __webpack_require__(139);
                var CurrentTime = __webpack_require__(143);
                var CustomTime = __webpack_require__(141);
                var LineGraph = __webpack_require__(149);

                var printStyle = __webpack_require__(144).printStyle;
                var allOptions = __webpack_require__(157).allOptions;
                var configureOptions = __webpack_require__(157).configureOptions;

                var Configurator = __webpack_require__(146)['default'];
                var Validator = __webpack_require__(144)['default'];

                /**
                 * Create a timeline visualization
                 * @param {HTMLElement} container
                 * @param {vis.DataSet | Array} [items]
                 * @param {Object} [options]  See Graph2d.setOptions for the available options.
                 * @constructor
                 * @extends Core
                 */
                function Graph2d(container, items, groups, options) {
                    // if the third element is options, the forth is groups (optionally);
                    if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
                        var forthArgument = options;
                        options = groups;
                        groups = forthArgument;
                    }

                    // TODO: REMOVE THIS in the next MAJOR release
                    // see https://github.com/almende/vis/issues/2511
                    if (options && options.throttleRedraw) {
                        console.warn("Graph2d option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
                    }

                    var me = this;
                    this.defaultOptions = {
                        start: null,
                        end: null,

                        autoResize: true,

                        orientation: {
                            axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
                            item: 'bottom' // not relevant for Graph2d
                        },

                        moment: moment,

                        width: null,
                        height: null,
                        maxHeight: null,
                        minHeight: null
                    };
                    this.options = util.deepExtend({}, this.defaultOptions);

                    // Create the DOM, props, and emitter
                    this._create(container);

                    // all components listed here will be repainted automatically
                    this.components = [];

                    this.body = {
                        dom: this.dom,
                        domProps: this.props,
                        emitter: {
                            on: this.on.bind(this),
                            off: this.off.bind(this),
                            emit: this.emit.bind(this)
                        },
                        hiddenDates: [],
                        util: {
                            toScreen: me._toScreen.bind(me),
                            toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
                            toTime: me._toTime.bind(me),
                            toGlobalTime: me._toGlobalTime.bind(me)
                        }
                    };

                    // range
                    this.range = new Range(this.body);
                    this.components.push(this.range);
                    this.body.range = this.range;

                    // time axis
                    this.timeAxis = new TimeAxis(this.body);
                    this.components.push(this.timeAxis);
                    //this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);

                    // current time bar
                    this.currentTime = new CurrentTime(this.body);
                    this.components.push(this.currentTime);

                    // item set
                    this.linegraph = new LineGraph(this.body);

                    this.components.push(this.linegraph);

                    this.itemsData = null; // DataSet
                    this.groupsData = null; // DataSet


                    this.on('tap', function(event) {
                        me.emit('click', me.getEventProperties(event));
                    });
                    this.on('doubletap', function(event) {
                        me.emit('doubleClick', me.getEventProperties(event));
                    });
                    this.dom.root.oncontextmenu = function(event) {
                        me.emit('contextmenu', me.getEventProperties(event));
                    };

                    // apply options
                    if (options) {
                        this.setOptions(options);
                    }

                    // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
                    if (groups) {
                        this.setGroups(groups);
                    }

                    // create itemset
                    if (items) {
                        this.setItems(items);
                    }

                    // draw for the first time
                    this._redraw();
                }

                // Extend the functionality from Core
                Graph2d.prototype = new Core();

                Graph2d.prototype.setOptions = function(options) {
                    // validate options
                    var errorFound = Validator.validate(options, allOptions);
                    if (errorFound === true) {
                        console.log('%cErrors have been found in the supplied options object.', printStyle);
                    }

                    Core.prototype.setOptions.call(this, options);
                };

                /**
                 * Set items
                 * @param {vis.DataSet | Array | null} items
                 */
                Graph2d.prototype.setItems = function(items) {
                    var initialLoad = this.itemsData == null;

                    // convert to type DataSet when needed
                    var newDataSet;
                    if (!items) {
                        newDataSet = null;
                    } else if (items instanceof DataSet || items instanceof DataView) {
                        newDataSet = items;
                    } else {
                        // turn an array into a dataset
                        newDataSet = new DataSet(items, {
                            type: {
                                start: 'Date',
                                end: 'Date'
                            }
                        });
                    }

                    // set items
                    this.itemsData = newDataSet;
                    this.linegraph && this.linegraph.setItems(newDataSet);

                    if (initialLoad) {
                        if (this.options.start != undefined || this.options.end != undefined) {
                            var start = this.options.start != undefined ? this.options.start : null;
                            var end = this.options.end != undefined ? this.options.end : null;
                            this.setWindow(start, end, { animation: false });
                        } else {
                            this.fit({ animation: false });
                        }
                    }
                };

                /**
                 * Set groups
                 * @param {vis.DataSet | Array} groups
                 */
                Graph2d.prototype.setGroups = function(groups) {
                    // convert to type DataSet when needed
                    var newDataSet;
                    if (!groups) {
                        newDataSet = null;
                    } else if (groups instanceof DataSet || groups instanceof DataView) {
                        newDataSet = groups;
                    } else {
                        // turn an array into a dataset
                        newDataSet = new DataSet(groups);
                    }

                    this.groupsData = newDataSet;
                    this.linegraph.setGroups(newDataSet);
                };

                /**
                 * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
                 * @param groupId
                 * @param width
                 * @param height
                 */
                Graph2d.prototype.getLegend = function(groupId, width, height) {
                    if (width === undefined) {
                        width = 15;
                    }
                    if (height === undefined) {
                        height = 15;
                    }
                    if (this.linegraph.groups[groupId] !== undefined) {
                        return this.linegraph.groups[groupId].getLegend(width, height);
                    } else {
                        return "cannot find group:'" + groupId + "'";
                    }
                };

                /**
                 * This checks if the visible option of the supplied group (by ID) is true or false.
                 * @param groupId
                 * @returns {*}
                 */
                Graph2d.prototype.isGroupVisible = function(groupId) {
                    if (this.linegraph.groups[groupId] !== undefined) {
                        return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === undefined || this.linegraph.options.groups.visibility[groupId] == true);
                    } else {
                        return false;
                    }
                };

                /**
                 * Get the data range of the item set.
                 * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
                 *                                          When no minimum is found, min==null
                 *                                          When no maximum is found, max==null
                 */
                Graph2d.prototype.getDataRange = function() {
                    var min = null;
                    var max = null;

                    // calculate min from start filed
                    for (var groupId in this.linegraph.groups) {
                        if (this.linegraph.groups.hasOwnProperty(groupId)) {
                            if (this.linegraph.groups[groupId].visible == true) {
                                for (var i = 0; i < this.linegraph.groups[groupId].itemsData.length; i++) {
                                    var item = this.linegraph.groups[groupId].itemsData[i];
                                    var value = util.convert(item.x, 'Date').valueOf();
                                    min = min == null ? value : min > value ? value : min;
                                    max = max == null ? value : max < value ? value : max;
                                }
                            }
                        }
                    }

                    return {
                        min: min != null ? new Date(min) : null,
                        max: max != null ? new Date(max) : null
                    };
                };

                /**
                 * Generate Timeline related information from an event
                 * @param {Event} event
                 * @return {Object} An object with related information, like on which area
                 *                  The event happened, whether clicked on an item, etc.
                 */
                Graph2d.prototype.getEventProperties = function(event) {
                    var clientX = event.center ? event.center.x : event.clientX;
                    var clientY = event.center ? event.center.y : event.clientY;
                    var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
                    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);
                    var time = this._toTime(x);

                    var customTime = CustomTime.customTimeFromTarget(event);

                    var element = util.getTarget(event);
                    var what = null;
                    if (util.hasParent(element, this.timeAxis.dom.foreground)) {
                        what = 'axis';
                    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
                        what = 'axis';
                    } else if (util.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
                        what = 'data-axis';
                    } else if (util.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
                        what = 'data-axis';
                    } else if (util.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
                        what = 'legend';
                    } else if (util.hasParent(element, this.linegraph.legendRight.dom.frame)) {
                        what = 'legend';
                    } else if (customTime != null) {
                        what = 'custom-time';
                    } else if (util.hasParent(element, this.currentTime.bar)) {
                        what = 'current-time';
                    } else if (util.hasParent(element, this.dom.center)) {
                        what = 'background';
                    }

                    var value = [];
                    var yAxisLeft = this.linegraph.yAxisLeft;
                    var yAxisRight = this.linegraph.yAxisRight;
                    if (!yAxisLeft.hidden && this.itemsData.length > 0) {
                        value.push(yAxisLeft.screenToValue(y));
                    }
                    if (!yAxisRight.hidden && this.itemsData.length > 0) {
                        value.push(yAxisRight.screenToValue(y));
                    }

                    return {
                        event: event,
                        what: what,
                        pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
                        pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
                        x: x,
                        y: y,
                        time: time,
                        value: value
                    };
                };

                /**
                 * Load a configurator
                 * @return {Object}
                 * @private
                 */
                Graph2d.prototype._createConfigurator = function() {
                    return new Configurator(this, this.dom.container, configureOptions);
                };

                module.exports = Graph2d;

                /***/
            }),
            /* 149 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DOMutil = __webpack_require__(88);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var Component = __webpack_require__(120);
                var DataAxis = __webpack_require__(150);
                var GraphGroup = __webpack_require__(152);
                var Legend = __webpack_require__(156);
                var Bars = __webpack_require__(153);
                var Lines = __webpack_require__(155);
                var Points = __webpack_require__(154);

                var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items

                /**
                 * This is the constructor of the LineGraph. It requires a Timeline body and options.
                 *
                 * @param body
                 * @param options
                 * @constructor
                 */
                function LineGraph(body, options) {
                    this.id = util.randomUUID();
                    this.body = body;

                    this.defaultOptions = {
                        yAxisOrientation: 'left',
                        defaultGroup: 'default',
                        sort: true,
                        sampling: true,
                        stack: false,
                        graphHeight: '400px',
                        shaded: {
                            enabled: false,
                            orientation: 'bottom' // top, bottom, zero
                        },
                        style: 'line', // line, bar
                        barChart: {
                            width: 50,
                            sideBySide: false,
                            align: 'center' // left, center, right
                        },
                        interpolation: {
                            enabled: true,
                            parametrization: 'centripetal', // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
                            alpha: 0.5
                        },
                        drawPoints: {
                            enabled: true,
                            size: 6,
                            style: 'square' // square, circle
                        },
                        dataAxis: {}, //Defaults are done on DataAxis level
                        legend: {}, //Defaults are done on Legend level
                        groups: {
                            visibility: {}
                        }
                    };

                    // options is shared by this lineGraph and all its items
                    this.options = util.extend({}, this.defaultOptions);
                    this.dom = {};
                    this.props = {};
                    this.hammer = null;
                    this.groups = {};
                    this.abortedGraphUpdate = false;
                    this.updateSVGheight = false;
                    this.updateSVGheightOnResize = false;
                    this.forceGraphUpdate = true;

                    var me = this;
                    this.itemsData = null; // DataSet
                    this.groupsData = null; // DataSet

                    // listeners for the DataSet of the items
                    this.itemListeners = {
                        'add': function add(event, params, senderId) {
                            me._onAdd(params.items);
                        },
                        'update': function update(event, params, senderId) {
                            me._onUpdate(params.items);
                        },
                        'remove': function remove(event, params, senderId) {
                            me._onRemove(params.items);
                        }
                    };

                    // listeners for the DataSet of the groups
                    this.groupListeners = {
                        'add': function add(event, params, senderId) {
                            me._onAddGroups(params.items);
                        },
                        'update': function update(event, params, senderId) {
                            me._onUpdateGroups(params.items);
                        },
                        'remove': function remove(event, params, senderId) {
                            me._onRemoveGroups(params.items);
                        }
                    };

                    this.items = {}; // object with an Item for every data item
                    this.selection = []; // list with the ids of all selected nodes
                    this.lastStart = this.body.range.start;
                    this.touchParams = {}; // stores properties while dragging

                    this.svgElements = {};
                    this.setOptions(options);
                    this.groupsUsingDefaultStyles = [0];
                    this.body.emitter.on('rangechanged', function() {
                        me.lastStart = me.body.range.start;
                        me.svg.style.left = util.option.asSize(-me.props.width);

                        me.forceGraphUpdate = true;
                        //Is this local redraw necessary? (Core also does a change event!)
                        me.redraw.call(me);
                    });

                    // create the HTML DOM
                    this._create();
                    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };
                }

                LineGraph.prototype = new Component();

                /**
                 * Create the HTML DOM for the ItemSet
                 */
                LineGraph.prototype._create = function() {
                    var frame = document.createElement('div');
                    frame.className = 'vis-line-graph';
                    this.dom.frame = frame;

                    // create svg element for graph drawing.
                    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                    this.svg.style.position = 'relative';
                    this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
                    this.svg.style.display = 'block';
                    frame.appendChild(this.svg);

                    // data axis
                    this.options.dataAxis.orientation = 'left';
                    this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);

                    this.options.dataAxis.orientation = 'right';
                    this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
                    delete this.options.dataAxis.orientation;

                    // legends
                    this.legendLeft = new Legend(this.body, this.options.legend, 'left', this.options.groups);
                    this.legendRight = new Legend(this.body, this.options.legend, 'right', this.options.groups);

                    this.show();
                };

                /**
                 * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
                 * @param {object} options
                 */
                LineGraph.prototype.setOptions = function(options) {
                    if (options) {
                        var fields = ['sampling', 'defaultGroup', 'stack', 'height', 'graphHeight', 'yAxisOrientation', 'style', 'barChart', 'dataAxis', 'sort', 'groups'];
                        if (options.graphHeight === undefined && options.height !== undefined) {
                            this.updateSVGheight = true;
                            this.updateSVGheightOnResize = true;
                        } else if (this.body.domProps.centerContainer.height !== undefined && options.graphHeight !== undefined) {
                            if (parseInt((options.graphHeight + '').replace("px", '')) < this.body.domProps.centerContainer.height) {
                                this.updateSVGheight = true;
                            }
                        }
                        util.selectiveDeepExtend(fields, this.options, options);
                        util.mergeOptions(this.options, options, 'interpolation');
                        util.mergeOptions(this.options, options, 'drawPoints');
                        util.mergeOptions(this.options, options, 'shaded');
                        util.mergeOptions(this.options, options, 'legend');

                        if (options.interpolation) {
                            if ((0, _typeof3['default'])(options.interpolation) == 'object') {
                                if (options.interpolation.parametrization) {
                                    if (options.interpolation.parametrization == 'uniform') {
                                        this.options.interpolation.alpha = 0;
                                    } else if (options.interpolation.parametrization == 'chordal') {
                                        this.options.interpolation.alpha = 1.0;
                                    } else {
                                        this.options.interpolation.parametrization = 'centripetal';
                                        this.options.interpolation.alpha = 0.5;
                                    }
                                }
                            }
                        }

                        if (this.yAxisLeft) {
                            if (options.dataAxis !== undefined) {
                                this.yAxisLeft.setOptions(this.options.dataAxis);
                                this.yAxisRight.setOptions(this.options.dataAxis);
                            }
                        }

                        if (this.legendLeft) {
                            if (options.legend !== undefined) {
                                this.legendLeft.setOptions(this.options.legend);
                                this.legendRight.setOptions(this.options.legend);
                            }
                        }

                        if (this.groups.hasOwnProperty(UNGROUPED)) {
                            this.groups[UNGROUPED].setOptions(options);
                        }
                    }

                    // this is used to redraw the graph if the visibility of the groups is changed.
                    if (this.dom.frame) {
                        //not on initial run?
                        this.forceGraphUpdate = true;
                        this.body.emitter.emit("_change", { queue: true });
                    }
                };

                /**
                 * Hide the component from the DOM
                 */
                LineGraph.prototype.hide = function() {
                    // remove the frame containing the items
                    if (this.dom.frame.parentNode) {
                        this.dom.frame.parentNode.removeChild(this.dom.frame);
                    }
                };

                /**
                 * Show the component in the DOM (when not already visible).
                 * @return {Boolean} changed
                 */
                LineGraph.prototype.show = function() {
                    // show frame containing the items
                    if (!this.dom.frame.parentNode) {
                        this.body.dom.center.appendChild(this.dom.frame);
                    }
                };

                /**
                 * Set items
                 * @param {vis.DataSet | null} items
                 */
                LineGraph.prototype.setItems = function(items) {
                    var me = this,
                        ids,
                        oldItemsData = this.itemsData;

                    // replace the dataset
                    if (!items) {
                        this.itemsData = null;
                    } else if (items instanceof DataSet || items instanceof DataView) {
                        this.itemsData = items;
                    } else {
                        throw new TypeError('Data must be an instance of DataSet or DataView');
                    }

                    if (oldItemsData) {
                        // unsubscribe from old dataset
                        util.forEach(this.itemListeners, function(callback, event) {
                            oldItemsData.off(event, callback);
                        });

                        // remove all drawn items
                        ids = oldItemsData.getIds();
                        this._onRemove(ids);
                    }

                    if (this.itemsData) {
                        // subscribe to new dataset
                        var id = this.id;
                        util.forEach(this.itemListeners, function(callback, event) {
                            me.itemsData.on(event, callback, id);
                        });

                        // add all new items
                        ids = this.itemsData.getIds();
                        this._onAdd(ids);
                    }
                };

                /**
                 * Set groups
                 * @param {vis.DataSet} groups
                 */
                LineGraph.prototype.setGroups = function(groups) {
                    var me = this;
                    var ids;

                    // unsubscribe from current dataset
                    if (this.groupsData) {
                        util.forEach(this.groupListeners, function(callback, event) {
                            me.groupsData.off(event, callback);
                        });

                        // remove all drawn groups
                        ids = this.groupsData.getIds();
                        this.groupsData = null;
                        for (var i = 0; i < ids.length; i++) {
                            this._removeGroup(ids[i]);
                        }
                    }

                    // replace the dataset
                    if (!groups) {
                        this.groupsData = null;
                    } else if (groups instanceof DataSet || groups instanceof DataView) {
                        this.groupsData = groups;
                    } else {
                        throw new TypeError('Data must be an instance of DataSet or DataView');
                    }

                    if (this.groupsData) {
                        // subscribe to new dataset
                        var id = this.id;
                        util.forEach(this.groupListeners, function(callback, event) {
                            me.groupsData.on(event, callback, id);
                        });

                        // draw all ms
                        ids = this.groupsData.getIds();
                        this._onAddGroups(ids);
                    }
                };

                LineGraph.prototype._onUpdate = function(ids) {
                    this._updateAllGroupData(ids);
                };
                LineGraph.prototype._onAdd = function(ids) {
                    this._onUpdate(ids);
                };
                LineGraph.prototype._onRemove = function(ids) {
                    this._onUpdate(ids);
                };
                LineGraph.prototype._onUpdateGroups = function(groupIds) {
                    this._updateAllGroupData(null, groupIds);
                };
                LineGraph.prototype._onAddGroups = function(groupIds) {
                    this._onUpdateGroups(groupIds);
                };

                /**
                 * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
                 * @param {Array} groupIds
                 * @private
                 */
                LineGraph.prototype._onRemoveGroups = function(groupIds) {
                    for (var i = 0; i < groupIds.length; i++) {
                        this._removeGroup(groupIds[i]);
                    }
                    this.forceGraphUpdate = true;
                    this.body.emitter.emit("_change", { queue: true });
                };

                /**
                 * this cleans the group out off the legends and the dataaxis
                 * @param groupId
                 * @private
                 */
                LineGraph.prototype._removeGroup = function(groupId) {
                    if (this.groups.hasOwnProperty(groupId)) {
                        if (this.groups[groupId].options.yAxisOrientation == 'right') {
                            this.yAxisRight.removeGroup(groupId);
                            this.legendRight.removeGroup(groupId);
                            this.legendRight.redraw();
                        } else {
                            this.yAxisLeft.removeGroup(groupId);
                            this.legendLeft.removeGroup(groupId);
                            this.legendLeft.redraw();
                        }
                        delete this.groups[groupId];
                    }
                };

                /**
                 * update a group object with the group dataset entree
                 *
                 * @param group
                 * @param groupId
                 * @private
                 */
                LineGraph.prototype._updateGroup = function(group, groupId) {
                    if (!this.groups.hasOwnProperty(groupId)) {
                        this.groups[groupId] = new GraphGroup(group, groupId, this.options, this.groupsUsingDefaultStyles);
                        if (this.groups[groupId].options.yAxisOrientation == 'right') {
                            this.yAxisRight.addGroup(groupId, this.groups[groupId]);
                            this.legendRight.addGroup(groupId, this.groups[groupId]);
                        } else {
                            this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
                            this.legendLeft.addGroup(groupId, this.groups[groupId]);
                        }
                    } else {
                        this.groups[groupId].update(group);
                        if (this.groups[groupId].options.yAxisOrientation == 'right') {
                            this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
                            this.legendRight.updateGroup(groupId, this.groups[groupId]);
                            //If yAxisOrientation changed, clean out the group from the other axis.
                            this.yAxisLeft.removeGroup(groupId);
                            this.legendLeft.removeGroup(groupId);
                        } else {
                            this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
                            this.legendLeft.updateGroup(groupId, this.groups[groupId]);
                            //If yAxisOrientation changed, clean out the group from the other axis.
                            this.yAxisRight.removeGroup(groupId);
                            this.legendRight.removeGroup(groupId);
                        }
                    }
                    this.legendLeft.redraw();
                    this.legendRight.redraw();
                };

                /**
                 * this updates all groups, it is used when there is an update the the itemset.
                 *
                 * @param  {Array} ids
                 * @param  {Array} groupIds
                 * @private
                 */
                LineGraph.prototype._updateAllGroupData = function(ids, groupIds) {
                    if (this.itemsData != null) {
                        var groupsContent = {};
                        var items = this.itemsData.get();
                        var fieldId = this.itemsData._fieldId;
                        var idMap = {};
                        if (ids) {
                            ids.map(function(id) {
                                idMap[id] = id;
                            });
                        }

                        //pre-Determine array sizes, for more efficient memory claim
                        var groupCounts = {};
                        for (var i = 0; i < items.length; i++) {
                            var item = items[i];
                            var groupId = item.group;
                            if (groupId === null || groupId === undefined) {
                                groupId = UNGROUPED;
                            }
                            groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
                        }

                        //Pre-load arrays from existing groups if items are not changed (not in ids)
                        var existingItemsMap = {};
                        if (!groupIds && ids) {
                            for (var groupId in this.groups) {
                                if (this.groups.hasOwnProperty(groupId)) {
                                    var group = this.groups[groupId];
                                    var existing_items = group.getItems();

                                    groupsContent[groupId] = existing_items.filter(function(item) {
                                        existingItemsMap[item[fieldId]] = item[fieldId];
                                        return item[fieldId] !== idMap[item[fieldId]];
                                    });
                                    var newLength = groupCounts[groupId];
                                    groupCounts[groupId] -= groupsContent[groupId].length;
                                    if (groupsContent[groupId].length < newLength) {
                                        groupsContent[groupId][newLength - 1] = {};
                                    }
                                }
                            }
                        }

                        //Now insert data into the arrays.
                        for (var i = 0; i < items.length; i++) {
                            var item = items[i];
                            var groupId = item.group;
                            if (groupId === null || groupId === undefined) {
                                groupId = UNGROUPED;
                            }
                            if (!groupIds && ids && item[fieldId] !== idMap[item[fieldId]] && existingItemsMap.hasOwnProperty(item[fieldId])) {
                                continue;
                            }
                            if (!groupsContent.hasOwnProperty(groupId)) {
                                groupsContent[groupId] = new Array(groupCounts[groupId]);
                            }
                            //Copy data (because of unmodifiable DataView input.
                            var extended = util.bridgeObject(item);
                            extended.x = util.convert(item.x, 'Date');
                            extended.end = util.convert(item.end, 'Date');
                            extended.orginalY = item.y; //real Y
                            extended.y = Number(item.y);
                            extended[fieldId] = item[fieldId];

                            var index = groupsContent[groupId].length - groupCounts[groupId]--;
                            groupsContent[groupId][index] = extended;
                        }

                        //Make sure all groups are present, to allow removal of old groups
                        for (var groupId in this.groups) {
                            if (this.groups.hasOwnProperty(groupId)) {
                                if (!groupsContent.hasOwnProperty(groupId)) {
                                    groupsContent[groupId] = new Array(0);
                                }
                            }
                        }

                        //Update legendas, style and axis
                        for (var groupId in groupsContent) {
                            if (groupsContent.hasOwnProperty(groupId)) {
                                if (groupsContent[groupId].length == 0) {
                                    if (this.groups.hasOwnProperty(groupId)) {
                                        this._removeGroup(groupId);
                                    }
                                } else {
                                    var group = undefined;
                                    if (this.groupsData != undefined) {
                                        group = this.groupsData.get(groupId);
                                    }
                                    if (group == undefined) {
                                        group = { id: groupId, content: this.options.defaultGroup + groupId };
                                    }
                                    this._updateGroup(group, groupId);
                                    this.groups[groupId].setItems(groupsContent[groupId]);
                                }
                            }
                        }
                        this.forceGraphUpdate = true;
                        this.body.emitter.emit("_change", { queue: true });
                    }
                };

                /**
                 * Redraw the component, mandatory function
                 * @return {boolean} Returns true if the component is resized
                 */
                LineGraph.prototype.redraw = function() {
                    var resized = false;

                    // calculate actual size and position
                    this.props.width = this.dom.frame.offsetWidth;
                    this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom;

                    // check if this component is resized
                    resized = this._isResized() || resized;

                    // check whether zoomed (in that case we need to re-stack everything)
                    var visibleInterval = this.body.range.end - this.body.range.start;
                    var zoomed = visibleInterval != this.lastVisibleInterval;
                    this.lastVisibleInterval = visibleInterval;

                    // the svg element is three times as big as the width, this allows for fully dragging left and right
                    // without reloading the graph. the controls for this are bound to events in the constructor
                    if (resized == true) {
                        this.svg.style.width = util.option.asSize(3 * this.props.width);
                        this.svg.style.left = util.option.asSize(-this.props.width);

                        // if the height of the graph is set as proportional, change the height of the svg
                        if ((this.options.height + '').indexOf("%") != -1 || this.updateSVGheightOnResize == true) {
                            this.updateSVGheight = true;
                        }
                    }

                    // update the height of the graph on each redraw of the graph.
                    if (this.updateSVGheight == true) {
                        if (this.options.graphHeight != this.props.height + 'px') {
                            this.options.graphHeight = this.props.height + 'px';
                            this.svg.style.height = this.props.height + 'px';
                        }
                        this.updateSVGheight = false;
                    } else {
                        this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
                    }

                    // zoomed is here to ensure that animations are shown correctly.
                    if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
                        resized = this._updateGraph() || resized;
                        this.forceGraphUpdate = false;
                    } else {
                        // move the whole svg while dragging
                        if (this.lastStart != 0) {
                            var offset = this.body.range.start - this.lastStart;
                            var range = this.body.range.end - this.body.range.start;
                            if (this.props.width != 0) {
                                var rangePerPixelInv = this.props.width / range;
                                var xOffset = offset * rangePerPixelInv;
                                this.svg.style.left = -this.props.width - xOffset + 'px';
                            }
                        }
                    }
                    this.legendLeft.redraw();
                    this.legendRight.redraw();
                    return resized;
                };

                LineGraph.prototype._getSortedGroupIds = function() {
                    // getting group Ids
                    var grouplist = [];
                    for (var groupId in this.groups) {
                        if (this.groups.hasOwnProperty(groupId)) {
                            var group = this.groups[groupId];
                            if (group.visible == true && (this.options.groups.visibility[groupId] === undefined || this.options.groups.visibility[groupId] == true)) {
                                grouplist.push({ id: groupId, zIndex: group.options.zIndex });
                            }
                        }
                    }
                    util.insertSort(grouplist, function(a, b) {
                        var az = a.zIndex;
                        var bz = b.zIndex;
                        if (az === undefined) az = 0;
                        if (bz === undefined) bz = 0;
                        return az == bz ? 0 : az < bz ? -1 : 1;
                    });
                    var groupIds = new Array(grouplist.length);
                    for (var i = 0; i < grouplist.length; i++) {
                        groupIds[i] = grouplist[i].id;
                    }
                    return groupIds;
                };

                /**
                 * Update and redraw the graph.
                 *
                 */
                LineGraph.prototype._updateGraph = function() {
                    // reset the svg elements
                    DOMutil.prepareElements(this.svgElements);
                    if (this.props.width != 0 && this.itemsData != null) {
                        var group, i;
                        var groupRanges = {};
                        var changeCalled = false;
                        // this is the range of the SVG canvas
                        var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
                        var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width);

                        // getting group Ids
                        var groupIds = this._getSortedGroupIds();
                        if (groupIds.length > 0) {
                            var groupsData = {};

                            // fill groups data, this only loads the data we require based on the timewindow
                            this._getRelevantData(groupIds, groupsData, minDate, maxDate);

                            // apply sampling, if disabled, it will pass through this function.
                            this._applySampling(groupIds, groupsData);

                            // we transform the X coordinates to detect collisions
                            for (i = 0; i < groupIds.length; i++) {
                                this._convertXcoordinates(groupsData[groupIds[i]]);
                            }

                            // now all needed data has been collected we start the processing.
                            this._getYRanges(groupIds, groupsData, groupRanges);

                            // update the Y axis first, we use this data to draw at the correct Y points
                            changeCalled = this._updateYAxis(groupIds, groupRanges);

                            //  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
                            //  Cleanup SVG elements on abort.
                            if (changeCalled == true) {
                                DOMutil.cleanupElements(this.svgElements);
                                this.abortedGraphUpdate = true;
                                return true;
                            }
                            this.abortedGraphUpdate = false;

                            // With the yAxis scaled correctly, use this to get the Y values of the points.
                            var below = undefined;
                            for (i = 0; i < groupIds.length; i++) {
                                group = this.groups[groupIds[i]];
                                if (this.options.stack === true && this.options.style === 'line') {
                                    if (group.options.excludeFromStacking == undefined || !group.options.excludeFromStacking) {
                                        if (below != undefined) {
                                            this._stack(groupsData[group.id], groupsData[below.id]);
                                            if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
                                                if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
                                                    below.options.shaded.orientation = "group";
                                                    below.options.shaded.groupId = group.id;
                                                } else {
                                                    group.options.shaded.orientation = "group";
                                                    group.options.shaded.groupId = below.id;
                                                }
                                            }
                                        }
                                        below = group;
                                    }
                                }
                                this._convertYcoordinates(groupsData[groupIds[i]], group);
                            }

                            //Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.
                            var paths = {};
                            for (i = 0; i < groupIds.length; i++) {
                                group = this.groups[groupIds[i]];
                                if (group.options.style === 'line' && group.options.shaded.enabled == true) {
                                    var dataset = groupsData[groupIds[i]];
                                    if (dataset == null || dataset.length == 0) {
                                        continue;
                                    }
                                    if (!paths.hasOwnProperty(groupIds[i])) {
                                        paths[groupIds[i]] = Lines.calcPath(dataset, group);
                                    }
                                    if (group.options.shaded.orientation === "group") {
                                        var subGroupId = group.options.shaded.groupId;
                                        if (groupIds.indexOf(subGroupId) === -1) {
                                            console.log(group.id + ": Unknown shading group target given:" + subGroupId);
                                            continue;
                                        }
                                        if (!paths.hasOwnProperty(subGroupId)) {
                                            paths[subGroupId] = Lines.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
                                        }
                                        Lines.drawShading(paths[groupIds[i]], group, paths[subGroupId], this.framework);
                                    } else {
                                        Lines.drawShading(paths[groupIds[i]], group, undefined, this.framework);
                                    }
                                }
                            }

                            // draw the groups, calculating paths if still necessary.
                            Bars.draw(groupIds, groupsData, this.framework);
                            for (i = 0; i < groupIds.length; i++) {
                                group = this.groups[groupIds[i]];
                                if (groupsData[groupIds[i]].length > 0) {
                                    switch (group.options.style) {
                                        case "line":
                                            if (!paths.hasOwnProperty(groupIds[i])) {
                                                paths[groupIds[i]] = Lines.calcPath(groupsData[groupIds[i]], group);
                                            }
                                            Lines.draw(paths[groupIds[i]], group, this.framework);
                                            //explicit no break;
                                        case "point":
                                            //explicit no break;
                                        case "points":
                                            if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
                                                Points.draw(groupsData[groupIds[i]], group, this.framework);
                                            }
                                            break;
                                        case "bar":
                                            // bar needs to be drawn enmasse
                                            //explicit no break
                                        default:
                                            //do nothing...
                                    }
                                }
                            }
                        }
                    }

                    // cleanup unused svg elements
                    DOMutil.cleanupElements(this.svgElements);
                    return false;
                };

                LineGraph.prototype._stack = function(data, subData) {
                    var index, dx, dy, subPrevPoint, subNextPoint;
                    index = 0;
                    // for each data point we look for a matching on in the set below
                    for (var j = 0; j < data.length; j++) {
                        subPrevPoint = undefined;
                        subNextPoint = undefined;
                        // we look for time matches or a before-after point
                        for (var k = index; k < subData.length; k++) {
                            // if times match exactly
                            if (subData[k].x === data[j].x) {
                                subPrevPoint = subData[k];
                                subNextPoint = subData[k];
                                index = k;
                                break;
                            } else if (subData[k].x > data[j].x) {
                                // overshoot
                                subNextPoint = subData[k];
                                if (k == 0) {
                                    subPrevPoint = subNextPoint;
                                } else {
                                    subPrevPoint = subData[k - 1];
                                }
                                index = k;
                                break;
                            }
                        }
                        // in case the last data point has been used, we assume it stays like this.
                        if (subNextPoint === undefined) {
                            subPrevPoint = subData[subData.length - 1];
                            subNextPoint = subData[subData.length - 1];
                        }
                        // linear interpolation
                        dx = subNextPoint.x - subPrevPoint.x;
                        dy = subNextPoint.y - subPrevPoint.y;
                        if (dx == 0) {
                            data[j].y = data[j].orginalY + subNextPoint.y;
                        } else {
                            data[j].y = data[j].orginalY + dy / dx * (data[j].x - subPrevPoint.x) + subPrevPoint.y; // ax + b where b is data[j].y
                        }
                    }
                };

                /**
                 * first select and preprocess the data from the datasets.
                 * the groups have their preselection of data, we now loop over this data to see
                 * what data we need to draw. Sorted data is much faster.
                 * more optimization is possible by doing the sampling before and using the binary search
                 * to find the end date to determine the increment.
                 *
                 * @param {array}  groupIds
                 * @param {object} groupsData
                 * @param {date}   minDate
                 * @param {date}   maxDate
                 * @private
                 */
                LineGraph.prototype._getRelevantData = function(groupIds, groupsData, minDate, maxDate) {
                    var group, i, j, item;
                    if (groupIds.length > 0) {
                        for (i = 0; i < groupIds.length; i++) {
                            group = this.groups[groupIds[i]];
                            var itemsData = group.getItems();
                            // optimization for sorted data
                            if (group.options.sort == true) {
                                var dateComparator = function dateComparator(a, b) {
                                    return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
                                };
                                var first = Math.max(0, util.binarySearchValue(itemsData, minDate, 'x', 'before', dateComparator));
                                var last = Math.min(itemsData.length, util.binarySearchValue(itemsData, maxDate, 'x', 'after', dateComparator) + 1);
                                if (last <= 0) {
                                    last = itemsData.length;
                                }
                                var dataContainer = new Array(last - first);
                                for (j = first; j < last; j++) {
                                    item = group.itemsData[j];
                                    dataContainer[j - first] = item;
                                }
                                groupsData[groupIds[i]] = dataContainer;
                            } else {
                                // If unsorted data, all data is relevant, just returning entire structure
                                groupsData[groupIds[i]] = group.itemsData;
                            }
                        }
                    }
                };

                /**
                 *
                 * @param groupIds
                 * @param groupsData
                 * @private
                 */
                LineGraph.prototype._applySampling = function(groupIds, groupsData) {
                    var group;
                    if (groupIds.length > 0) {
                        for (var i = 0; i < groupIds.length; i++) {
                            group = this.groups[groupIds[i]];
                            if (group.options.sampling == true) {
                                var dataContainer = groupsData[groupIds[i]];
                                if (dataContainer.length > 0) {
                                    var increment = 1;
                                    var amountOfPoints = dataContainer.length;

                                    // the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
                                    // of width changing of the yAxis.
                                    //TODO: This assumes sorted data, but that's not guaranteed!
                                    var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
                                    var pointsPerPixel = amountOfPoints / xDistance;
                                    increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));

                                    var sampledData = new Array(amountOfPoints);
                                    for (var j = 0; j < amountOfPoints; j += increment) {
                                        var idx = Math.round(j / increment);
                                        sampledData[idx] = dataContainer[j];
                                    }
                                    groupsData[groupIds[i]] = sampledData.splice(0, Math.round(amountOfPoints / increment));
                                }
                            }
                        }
                    }
                };

                /**
                 *
                 *
                 * @param {array}  groupIds
                 * @param {object} groupsData
                 * @param {object} groupRanges  | this is being filled here
                 * @private
                 */
                LineGraph.prototype._getYRanges = function(groupIds, groupsData, groupRanges) {
                    var groupData, group, i;
                    var combinedDataLeft = [];
                    var combinedDataRight = [];
                    var options;
                    if (groupIds.length > 0) {
                        for (i = 0; i < groupIds.length; i++) {
                            groupData = groupsData[groupIds[i]];
                            options = this.groups[groupIds[i]].options;
                            if (groupData.length > 0) {
                                group = this.groups[groupIds[i]];
                                // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
                                if (options.stack === true && options.style === 'bar') {
                                    if (options.yAxisOrientation === 'left') {
                                        combinedDataLeft = combinedDataLeft.concat(groupData);
                                    } else {
                                        combinedDataRight = combinedDataRight.concat(groupData);
                                    }
                                } else {
                                    groupRanges[groupIds[i]] = group.getYRange(groupData, groupIds[i]);
                                }
                            }
                        }

                        // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
                        Bars.getStackedYRange(combinedDataLeft, groupRanges, groupIds, '__barStackLeft', 'left');
                        Bars.getStackedYRange(combinedDataRight, groupRanges, groupIds, '__barStackRight', 'right');
                    }
                };

                /**
                 * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
                 * @param {Array} groupIds
                 * @param {Object} groupRanges
                 * @private
                 */
                LineGraph.prototype._updateYAxis = function(groupIds, groupRanges) {
                    var resized = false;
                    var yAxisLeftUsed = false;
                    var yAxisRightUsed = false;
                    var minLeft = 1e9,
                        minRight = 1e9,
                        maxLeft = -1e9,
                        maxRight = -1e9,
                        minVal,
                        maxVal;
                    // if groups are present
                    if (groupIds.length > 0) {
                        // this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
                        for (var i = 0; i < groupIds.length; i++) {
                            var group = this.groups[groupIds[i]];
                            if (group && group.options.yAxisOrientation != 'right') {
                                yAxisLeftUsed = true;
                                minLeft = 1e9;
                                maxLeft = -1e9;
                            } else if (group && group.options.yAxisOrientation) {
                                yAxisRightUsed = true;
                                minRight = 1e9;
                                maxRight = -1e9;
                            }
                        }

                        // if there are items:
                        for (var i = 0; i < groupIds.length; i++) {
                            if (groupRanges.hasOwnProperty(groupIds[i])) {
                                if (groupRanges[groupIds[i]].ignore !== true) {
                                    minVal = groupRanges[groupIds[i]].min;
                                    maxVal = groupRanges[groupIds[i]].max;

                                    if (groupRanges[groupIds[i]].yAxisOrientation != 'right') {
                                        yAxisLeftUsed = true;
                                        minLeft = minLeft > minVal ? minVal : minLeft;
                                        maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
                                    } else {
                                        yAxisRightUsed = true;
                                        minRight = minRight > minVal ? minVal : minRight;
                                        maxRight = maxRight < maxVal ? maxVal : maxRight;
                                    }
                                }
                            }
                        }

                        if (yAxisLeftUsed == true) {
                            this.yAxisLeft.setRange(minLeft, maxLeft);
                        }
                        if (yAxisRightUsed == true) {
                            this.yAxisRight.setRange(minRight, maxRight);
                        }
                    }
                    resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
                    resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;

                    if (yAxisRightUsed == true && yAxisLeftUsed == true) {
                        this.yAxisLeft.drawIcons = true;
                        this.yAxisRight.drawIcons = true;
                    } else {
                        this.yAxisLeft.drawIcons = false;
                        this.yAxisRight.drawIcons = false;
                    }
                    this.yAxisRight.master = !yAxisLeftUsed;
                    this.yAxisRight.masterAxis = this.yAxisLeft;

                    if (this.yAxisRight.master == false) {
                        if (yAxisRightUsed == true) {
                            this.yAxisLeft.lineOffset = this.yAxisRight.width;
                        } else {
                            this.yAxisLeft.lineOffset = 0;
                        }

                        resized = this.yAxisLeft.redraw() || resized;
                        resized = this.yAxisRight.redraw() || resized;
                    } else {
                        resized = this.yAxisRight.redraw() || resized;
                    }

                    // clean the accumulated lists
                    var tempGroups = ['__barStackLeft', '__barStackRight', '__lineStackLeft', '__lineStackRight'];
                    for (var i = 0; i < tempGroups.length; i++) {
                        if (groupIds.indexOf(tempGroups[i]) != -1) {
                            groupIds.splice(groupIds.indexOf(tempGroups[i]), 1);
                        }
                    }

                    return resized;
                };

                /**
                 * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
                 *
                 * @param {boolean} axisUsed
                 * @returns {boolean}
                 * @private
                 * @param axis
                 */
                LineGraph.prototype._toggleAxisVisiblity = function(axisUsed, axis) {
                    var changed = false;
                    if (axisUsed == false) {
                        if (axis.dom.frame.parentNode && axis.hidden == false) {
                            axis.hide();
                            changed = true;
                        }
                    } else {
                        if (!axis.dom.frame.parentNode && axis.hidden == true) {
                            axis.show();
                            changed = true;
                        }
                    }
                    return changed;
                };

                /**
                 * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
                 * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
                 * the yAxis.
                 *
                 * @param datapoints
                 * @returns {Array}
                 * @private
                 */
                LineGraph.prototype._convertXcoordinates = function(datapoints) {
                    var toScreen = this.body.util.toScreen;
                    for (var i = 0; i < datapoints.length; i++) {
                        datapoints[i].screen_x = toScreen(datapoints[i].x) + this.props.width;
                        datapoints[i].screen_y = datapoints[i].y; //starting point for range calculations
                        if (datapoints[i].end != undefined) {
                            datapoints[i].screen_end = toScreen(datapoints[i].end) + this.props.width;
                        } else {
                            datapoints[i].screen_end = undefined;
                        }
                    }
                };

                /**
                 * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
                 * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
                 * the yAxis.
                 *
                 * @param datapoints
                 * @param group
                 * @returns {Array}
                 * @private
                 */
                LineGraph.prototype._convertYcoordinates = function(datapoints, group) {
                    var axis = this.yAxisLeft;
                    var svgHeight = Number(this.svg.style.height.replace('px', ''));
                    if (group.options.yAxisOrientation == 'right') {
                        axis = this.yAxisRight;
                    }
                    for (var i = 0; i < datapoints.length; i++) {
                        datapoints[i].screen_y = Math.round(axis.convertValue(datapoints[i].y));
                    }
                    group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
                };

                module.exports = LineGraph;

                /***/
            }),
            /* 150 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DOMutil = __webpack_require__(88);
                var Component = __webpack_require__(120);
                var DataScale = __webpack_require__(151);
                /**
                 * A horizontal time axis
                 * @param {Object} [options]        See DataAxis.setOptions for the available
                 *                                  options.
                 * @constructor DataAxis
                 * @extends Component
                 * @param body
                 */
                function DataAxis(body, options, svg, linegraphOptions) {
                    this.id = util.randomUUID();
                    this.body = body;

                    this.defaultOptions = {
                        orientation: 'left', // supported: 'left', 'right'
                        showMinorLabels: true,
                        showMajorLabels: true,
                        icons: false,
                        majorLinesOffset: 7,
                        minorLinesOffset: 4,
                        labelOffsetX: 10,
                        labelOffsetY: 2,
                        iconWidth: 20,
                        width: '40px',
                        visible: true,
                        alignZeros: true,
                        left: {
                            range: { min: undefined, max: undefined },
                            format: function format(value) {
                                return '' + parseFloat(value.toPrecision(3));
                            },
                            title: { text: undefined, style: undefined }
                        },
                        right: {
                            range: { min: undefined, max: undefined },
                            format: function format(value) {
                                return '' + parseFloat(value.toPrecision(3));
                            },
                            title: { text: undefined, style: undefined }
                        }
                    };

                    this.linegraphOptions = linegraphOptions;
                    this.linegraphSVG = svg;
                    this.props = {};
                    this.DOMelements = { // dynamic elements
                        lines: {},
                        labels: {},
                        title: {}
                    };

                    this.dom = {};
                    this.scale = undefined;
                    this.range = { start: 0, end: 0 };

                    this.options = util.extend({}, this.defaultOptions);
                    this.conversionFactor = 1;

                    this.setOptions(options);
                    this.width = Number(('' + this.options.width).replace("px", ""));
                    this.minWidth = this.width;
                    this.height = this.linegraphSVG.getBoundingClientRect().height;
                    this.hidden = false;

                    this.stepPixels = 25;
                    this.zeroCrossing = -1;
                    this.amountOfSteps = -1;

                    this.lineOffset = 0;
                    this.master = true;
                    this.masterAxis = null;
                    this.svgElements = {};
                    this.iconsRemoved = false;

                    this.groups = {};
                    this.amountOfGroups = 0;

                    // create the HTML DOM
                    this._create();
                    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

                    var me = this;
                    this.body.emitter.on("verticalDrag", function() {
                        me.dom.lineContainer.style.top = me.body.domProps.scrollTop + 'px';
                    });
                }

                DataAxis.prototype = new Component();

                DataAxis.prototype.addGroup = function(label, graphOptions) {
                    if (!this.groups.hasOwnProperty(label)) {
                        this.groups[label] = graphOptions;
                    }
                    this.amountOfGroups += 1;
                };

                DataAxis.prototype.updateGroup = function(label, graphOptions) {
                    if (!this.groups.hasOwnProperty(label)) {
                        this.amountOfGroups += 1;
                    }
                    this.groups[label] = graphOptions;
                };

                DataAxis.prototype.removeGroup = function(label) {
                    if (this.groups.hasOwnProperty(label)) {
                        delete this.groups[label];
                        this.amountOfGroups -= 1;
                    }
                };

                DataAxis.prototype.setOptions = function(options) {
                    if (options) {
                        var redraw = false;
                        if (this.options.orientation != options.orientation && options.orientation !== undefined) {
                            redraw = true;
                        }
                        var fields = ['orientation', 'showMinorLabels', 'showMajorLabels', 'icons', 'majorLinesOffset', 'minorLinesOffset', 'labelOffsetX', 'labelOffsetY', 'iconWidth', 'width', 'visible', 'left', 'right', 'alignZeros'];
                        util.selectiveDeepExtend(fields, this.options, options);

                        this.minWidth = Number(('' + this.options.width).replace("px", ""));
                        if (redraw === true && this.dom.frame) {
                            this.hide();
                            this.show();
                        }
                    }
                };

                /**
                 * Create the HTML DOM for the DataAxis
                 */
                DataAxis.prototype._create = function() {
                    this.dom.frame = document.createElement('div');
                    this.dom.frame.style.width = this.options.width;
                    this.dom.frame.style.height = this.height;

                    this.dom.lineContainer = document.createElement('div');
                    this.dom.lineContainer.style.width = '100%';
                    this.dom.lineContainer.style.height = this.height;
                    this.dom.lineContainer.style.position = 'relative';

                    // create svg element for graph drawing.
                    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
                    this.svg.style.position = "absolute";
                    this.svg.style.top = '0px';
                    this.svg.style.height = '100%';
                    this.svg.style.width = '100%';
                    this.svg.style.display = "block";
                    this.dom.frame.appendChild(this.svg);
                };

                DataAxis.prototype._redrawGroupIcons = function() {
                    DOMutil.prepareElements(this.svgElements);

                    var x;
                    var iconWidth = this.options.iconWidth;
                    var iconHeight = 15;
                    var iconOffset = 4;
                    var y = iconOffset + 0.5 * iconHeight;

                    if (this.options.orientation === 'left') {
                        x = iconOffset;
                    } else {
                        x = this.width - iconWidth - iconOffset;
                    }

                    var groupArray = (0, _keys2['default'])(this.groups);
                    groupArray.sort(function(a, b) {
                        return a < b ? -1 : 1;
                    });

                    for (var i = 0; i < groupArray.length; i++) {
                        var groupId = groupArray[i];
                        if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
                            this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
                            y += iconHeight + iconOffset;
                        }
                    }

                    DOMutil.cleanupElements(this.svgElements);
                    this.iconsRemoved = false;
                };

                DataAxis.prototype._cleanupIcons = function() {
                    if (this.iconsRemoved === false) {
                        DOMutil.prepareElements(this.svgElements);
                        DOMutil.cleanupElements(this.svgElements);
                        this.iconsRemoved = true;
                    }
                };

                /**
                 * Create the HTML DOM for the DataAxis
                 */
                DataAxis.prototype.show = function() {
                    this.hidden = false;
                    if (!this.dom.frame.parentNode) {
                        if (this.options.orientation === 'left') {
                            this.body.dom.left.appendChild(this.dom.frame);
                        } else {
                            this.body.dom.right.appendChild(this.dom.frame);
                        }
                    }

                    if (!this.dom.lineContainer.parentNode) {
                        this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
                    }
                };

                /**
                 * Create the HTML DOM for the DataAxis
                 */
                DataAxis.prototype.hide = function() {
                    this.hidden = true;
                    if (this.dom.frame.parentNode) {
                        this.dom.frame.parentNode.removeChild(this.dom.frame);
                    }

                    if (this.dom.lineContainer.parentNode) {
                        this.dom.lineContainer.parentNode.removeChild(this.dom.lineContainer);
                    }
                };

                /**
                 * Set a range (start and end)
                 * @param end
                 * @param start
                 * @param end
                 */
                DataAxis.prototype.setRange = function(start, end) {
                    this.range.start = start;
                    this.range.end = end;
                };

                /**
                 * Repaint the component
                 * @return {boolean} Returns true if the component is resized
                 */
                DataAxis.prototype.redraw = function() {
                    var resized = false;
                    var activeGroups = 0;

                    // Make sure the line container adheres to the vertical scrolling.
                    this.dom.lineContainer.style.top = this.body.domProps.scrollTop + 'px';

                    for (var groupId in this.groups) {
                        if (this.groups.hasOwnProperty(groupId)) {
                            if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
                                activeGroups++;
                            }
                        }
                    }
                    if (this.amountOfGroups === 0 || activeGroups === 0) {
                        this.hide();
                    } else {
                        this.show();
                        this.height = Number(this.linegraphSVG.style.height.replace("px", ""));

                        // svg offsetheight did not work in firefox and explorer...
                        this.dom.lineContainer.style.height = this.height + 'px';
                        this.width = this.options.visible === true ? Number(('' + this.options.width).replace("px", "")) : 0;

                        var props = this.props;
                        var frame = this.dom.frame;

                        // update classname
                        frame.className = 'vis-data-axis';

                        // calculate character width and height
                        this._calculateCharSize();

                        var orientation = this.options.orientation;
                        var showMinorLabels = this.options.showMinorLabels;
                        var showMajorLabels = this.options.showMajorLabels;

                        // determine the width and height of the elements for the axis
                        props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
                        props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;

                        props.minorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
                        props.minorLineHeight = 1;
                        props.majorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
                        props.majorLineHeight = 1;

                        //  take frame offline while updating (is almost twice as fast)
                        if (orientation === 'left') {
                            frame.style.top = '0';
                            frame.style.left = '0';
                            frame.style.bottom = '';
                            frame.style.width = this.width + 'px';
                            frame.style.height = this.height + "px";
                            this.props.width = this.body.domProps.left.width;
                            this.props.height = this.body.domProps.left.height;
                        } else {
                            // right
                            frame.style.top = '';
                            frame.style.bottom = '0';
                            frame.style.left = '0';
                            frame.style.width = this.width + 'px';
                            frame.style.height = this.height + "px";
                            this.props.width = this.body.domProps.right.width;
                            this.props.height = this.body.domProps.right.height;
                        }

                        resized = this._redrawLabels();
                        resized = this._isResized() || resized;

                        if (this.options.icons === true) {
                            this._redrawGroupIcons();
                        } else {
                            this._cleanupIcons();
                        }

                        this._redrawTitle(orientation);
                    }
                    return resized;
                };

                /**
                 * Repaint major and minor text labels and vertical grid lines
                 * @private
                 */
                DataAxis.prototype._redrawLabels = function() {
                    var _this = this;

                    var resized = false;
                    DOMutil.prepareElements(this.DOMelements.lines);
                    DOMutil.prepareElements(this.DOMelements.labels);
                    var orientation = this.options['orientation'];
                    var customRange = this.options[orientation].range != undefined ? this.options[orientation].range : {};

                    //Override range with manual options:
                    var autoScaleEnd = true;
                    if (customRange.max != undefined) {
                        this.range.end = customRange.max;
                        autoScaleEnd = false;
                    }
                    var autoScaleStart = true;
                    if (customRange.min != undefined) {
                        this.range.start = customRange.min;
                        autoScaleStart = false;
                    }

                    this.scale = new DataScale(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);

                    if (this.master === false && this.masterAxis != undefined) {
                        this.scale.followScale(this.masterAxis.scale);
                    }

                    //Is updated in side-effect of _redrawLabel():
                    this.maxLabelSize = 0;

                    var lines = this.scale.getLines();
                    lines.forEach(function(line) {
                        var y = line.y;
                        var isMajor = line.major;
                        if (_this.options['showMinorLabels'] && isMajor === false) {
                            _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-minor', _this.props.minorCharHeight);
                        }
                        if (isMajor) {
                            if (y >= 0) {
                                _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-major', _this.props.majorCharHeight);
                            }
                        }
                        if (_this.master === true) {
                            if (isMajor) {
                                _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-major', _this.options.majorLinesOffset, _this.props.majorLineWidth);
                            } else {
                                _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-minor', _this.options.minorLinesOffset, _this.props.minorLineWidth);
                            }
                        }
                    });

                    // Note that title is rotated, so we're using the height, not width!
                    var titleWidth = 0;
                    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
                        titleWidth = this.props.titleCharHeight;
                    }
                    var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15;

                    // this will resize the yAxis to accommodate the labels.
                    if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
                        this.width = this.maxLabelSize + offset;
                        this.options.width = this.width + "px";
                        DOMutil.cleanupElements(this.DOMelements.lines);
                        DOMutil.cleanupElements(this.DOMelements.labels);
                        this.redraw();
                        resized = true;
                    }
                    // this will resize the yAxis if it is too big for the labels.
                    else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
                        this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
                        this.options.width = this.width + "px";
                        DOMutil.cleanupElements(this.DOMelements.lines);
                        DOMutil.cleanupElements(this.DOMelements.labels);
                        this.redraw();
                        resized = true;
                    } else {
                        DOMutil.cleanupElements(this.DOMelements.lines);
                        DOMutil.cleanupElements(this.DOMelements.labels);
                        resized = false;
                    }

                    return resized;
                };

                DataAxis.prototype.convertValue = function(value) {
                    return this.scale.convertValue(value);
                };

                DataAxis.prototype.screenToValue = function(x) {
                    return this.scale.screenToValue(x);
                };

                /**
                 * Create a label for the axis at position x
                 * @private
                 * @param y
                 * @param text
                 * @param orientation
                 * @param className
                 * @param characterHeight
                 */
                DataAxis.prototype._redrawLabel = function(y, text, orientation, className, characterHeight) {
                    // reuse redundant label
                    var label = DOMutil.getDOMElement('div', this.DOMelements.labels, this.dom.frame); //this.dom.redundant.labels.shift();
                    label.className = className;
                    label.innerHTML = text;
                    if (orientation === 'left') {
                        label.style.left = '-' + this.options.labelOffsetX + 'px';
                        label.style.textAlign = "right";
                    } else {
                        label.style.right = '-' + this.options.labelOffsetX + 'px';
                        label.style.textAlign = "left";
                    }

                    label.style.top = y - 0.5 * characterHeight + this.options.labelOffsetY + 'px';

                    text += '';

                    var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);
                    if (this.maxLabelSize < text.length * largestWidth) {
                        this.maxLabelSize = text.length * largestWidth;
                    }
                };

                /**
                 * Create a minor line for the axis at position y
                 * @param y
                 * @param orientation
                 * @param className
                 * @param offset
                 * @param width
                 */
                DataAxis.prototype._redrawLine = function(y, orientation, className, offset, width) {
                    if (this.master === true) {
                        var line = DOMutil.getDOMElement('div', this.DOMelements.lines, this.dom.lineContainer); //this.dom.redundant.lines.shift();
                        line.className = className;
                        line.innerHTML = '';

                        if (orientation === 'left') {
                            line.style.left = this.width - offset + 'px';
                        } else {
                            line.style.right = this.width - offset + 'px';
                        }

                        line.style.width = width + 'px';
                        line.style.top = y + 'px';
                    }
                };

                /**
                 * Create a title for the axis
                 * @private
                 * @param orientation
                 */
                DataAxis.prototype._redrawTitle = function(orientation) {
                    DOMutil.prepareElements(this.DOMelements.title);

                    // Check if the title is defined for this axes
                    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
                        var title = DOMutil.getDOMElement('div', this.DOMelements.title, this.dom.frame);
                        title.className = 'vis-y-axis vis-title vis-' + orientation;
                        title.innerHTML = this.options[orientation].title.text;

                        // Add style - if provided
                        if (this.options[orientation].title.style !== undefined) {
                            util.addCssText(title, this.options[orientation].title.style);
                        }

                        if (orientation === 'left') {
                            title.style.left = this.props.titleCharHeight + 'px';
                        } else {
                            title.style.right = this.props.titleCharHeight + 'px';
                        }

                        title.style.width = this.height + 'px';
                    }

                    // we need to clean up in case we did not use all elements.
                    DOMutil.cleanupElements(this.DOMelements.title);
                };

                /**
                 * Determine the size of text on the axis (both major and minor axis).
                 * The size is calculated only once and then cached in this.props.
                 * @private
                 */
                DataAxis.prototype._calculateCharSize = function() {
                    // determine the char width and height on the minor axis
                    if (!('minorCharHeight' in this.props)) {
                        var textMinor = document.createTextNode('0');
                        var measureCharMinor = document.createElement('div');
                        measureCharMinor.className = 'vis-y-axis vis-minor vis-measure';
                        measureCharMinor.appendChild(textMinor);
                        this.dom.frame.appendChild(measureCharMinor);

                        this.props.minorCharHeight = measureCharMinor.clientHeight;
                        this.props.minorCharWidth = measureCharMinor.clientWidth;

                        this.dom.frame.removeChild(measureCharMinor);
                    }

                    if (!('majorCharHeight' in this.props)) {
                        var textMajor = document.createTextNode('0');
                        var measureCharMajor = document.createElement('div');
                        measureCharMajor.className = 'vis-y-axis vis-major vis-measure';
                        measureCharMajor.appendChild(textMajor);
                        this.dom.frame.appendChild(measureCharMajor);

                        this.props.majorCharHeight = measureCharMajor.clientHeight;
                        this.props.majorCharWidth = measureCharMajor.clientWidth;

                        this.dom.frame.removeChild(measureCharMajor);
                    }

                    if (!('titleCharHeight' in this.props)) {
                        var textTitle = document.createTextNode('0');
                        var measureCharTitle = document.createElement('div');
                        measureCharTitle.className = 'vis-y-axis vis-title vis-measure';
                        measureCharTitle.appendChild(textTitle);
                        this.dom.frame.appendChild(measureCharTitle);

                        this.props.titleCharHeight = measureCharTitle.clientHeight;
                        this.props.titleCharWidth = measureCharTitle.clientWidth;

                        this.dom.frame.removeChild(measureCharTitle);
                    }
                };

                module.exports = DataAxis;

                /***/
            }),
            /* 151 */
            /***/
            (function(module, exports) {

                'use strict';

                /**
                 * Created by ludo on 25-1-16.
                 */

                function DataScale(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight) {
                    var zeroAlign = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
                    var formattingFunction = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

                    this.majorSteps = [1, 2, 5, 10];
                    this.minorSteps = [0.25, 0.5, 1, 2];
                    this.customLines = null;

                    this.containerHeight = containerHeight;
                    this.majorCharHeight = majorCharHeight;
                    this._start = start;
                    this._end = end;

                    this.scale = 1;
                    this.minorStepIdx = -1;
                    this.magnitudefactor = 1;
                    this.determineScale();

                    this.zeroAlign = zeroAlign;
                    this.autoScaleStart = autoScaleStart;
                    this.autoScaleEnd = autoScaleEnd;

                    this.formattingFunction = formattingFunction;

                    if (autoScaleStart || autoScaleEnd) {
                        var me = this;
                        var roundToMinor = function roundToMinor(value) {
                            var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);
                            if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
                                return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
                            } else {
                                return rounded;
                            }
                        };
                        if (autoScaleStart) {
                            this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
                            this._start = roundToMinor(this._start);
                        }

                        if (autoScaleEnd) {
                            this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
                            this._end = roundToMinor(this._end);
                        }
                        this.determineScale();
                    }
                }

                DataScale.prototype.setCharHeight = function(majorCharHeight) {
                    this.majorCharHeight = majorCharHeight;
                };

                DataScale.prototype.setHeight = function(containerHeight) {
                    this.containerHeight = containerHeight;
                };

                DataScale.prototype.determineScale = function() {
                    var range = this._end - this._start;
                    this.scale = this.containerHeight / range;
                    var minimumStepValue = this.majorCharHeight / this.scale;
                    var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;

                    this.minorStepIdx = -1;
                    this.magnitudefactor = Math.pow(10, orderOfMagnitude);

                    var start = 0;
                    if (orderOfMagnitude < 0) {
                        start = orderOfMagnitude;
                    }

                    var solutionFound = false;
                    for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
                        this.magnitudefactor = Math.pow(10, l);
                        for (var j = 0; j < this.minorSteps.length; j++) {
                            var stepSize = this.magnitudefactor * this.minorSteps[j];
                            if (stepSize >= minimumStepValue) {
                                solutionFound = true;
                                this.minorStepIdx = j;
                                break;
                            }
                        }
                        if (solutionFound === true) {
                            break;
                        }
                    }
                };

                DataScale.prototype.is_major = function(value) {
                    return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
                };

                DataScale.prototype.getStep = function() {
                    return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
                };

                DataScale.prototype.getFirstMajor = function() {
                    var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
                    return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
                };

                DataScale.prototype.formatValue = function(current) {
                    var returnValue = current.toPrecision(5);
                    if (typeof this.formattingFunction === 'function') {
                        returnValue = this.formattingFunction(current);
                    }

                    if (typeof returnValue === 'number') {
                        return '' + returnValue;
                    } else if (typeof returnValue === 'string') {
                        return returnValue;
                    } else {
                        return current.toPrecision(5);
                    }
                };

                DataScale.prototype.getLines = function() {
                    var lines = [];
                    var step = this.getStep();
                    var bottomOffset = (step - this._start % step) % step;
                    for (var i = this._start + bottomOffset; this._end - i > 0.00001; i += step) {
                        if (i != this._start) {
                            //Skip the bottom line
                            lines.push({ major: this.is_major(i), y: this.convertValue(i), val: this.formatValue(i) });
                        }
                    }
                    return lines;
                };

                DataScale.prototype.followScale = function(other) {
                    var oldStepIdx = this.minorStepIdx;
                    var oldStart = this._start;
                    var oldEnd = this._end;

                    var me = this;
                    var increaseMagnitude = function increaseMagnitude() {
                        me.magnitudefactor *= 2;
                    };
                    var decreaseMagnitude = function decreaseMagnitude() {
                        me.magnitudefactor /= 2;
                    };

                    if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1) {
                        //easy, no need to change stepIdx nor multiplication factor
                    } else if (other.minorStepIdx < this.minorStepIdx) {
                        //I'm 5, they are 4 per major.
                        this.minorStepIdx = 1;
                        if (oldStepIdx == 2) {
                            increaseMagnitude();
                        } else {
                            increaseMagnitude();
                            increaseMagnitude();
                        }
                    } else {
                        //I'm 4, they are 5 per major
                        this.minorStepIdx = 2;
                        if (oldStepIdx == 1) {
                            decreaseMagnitude();
                        } else {
                            decreaseMagnitude();
                            decreaseMagnitude();
                        }
                    }

                    //Get masters stats:
                    var lines = other.getLines();
                    var otherZero = other.convertValue(0);
                    var otherStep = other.getStep() * other.scale;

                    var done = false;
                    var count = 0;
                    //Loop until magnitude is correct for given constrains.
                    while (!done && count++ < 5) {

                        //Get my stats:
                        this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
                        var newRange = this.containerHeight / this.scale;

                        //For the case the magnitudefactor has changed:
                        this._start = oldStart;
                        this._end = this._start + newRange;

                        var myOriginalZero = this._end * this.scale;
                        var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
                        var majorOffset = this.getFirstMajor() - other.getFirstMajor();

                        if (this.zeroAlign) {
                            var zeroOffset = otherZero - myOriginalZero;
                            this._end += zeroOffset / this.scale;
                            this._start = this._end - newRange;
                        } else {
                            if (!this.autoScaleStart) {
                                this._start += majorStep - majorOffset / this.scale;
                                this._end = this._start + newRange;
                            } else {
                                this._start -= majorOffset / this.scale;
                                this._end = this._start + newRange;
                            }
                        }
                        if (!this.autoScaleEnd && this._end > oldEnd + 0.00001) {
                            //Need to decrease magnitude to prevent scale overshoot! (end)
                            decreaseMagnitude();
                            done = false;
                            continue;
                        }
                        if (!this.autoScaleStart && this._start < oldStart - 0.00001) {
                            if (this.zeroAlign && oldStart >= 0) {
                                console.warn("Can't adhere to given 'min' range, due to zeroalign");
                            } else {
                                //Need to decrease magnitude to prevent scale overshoot! (start)
                                decreaseMagnitude();
                                done = false;
                                continue;
                            }
                        }
                        if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
                            increaseMagnitude();
                            done = false;
                            continue;
                        }
                        done = true;
                    }
                };

                DataScale.prototype.convertValue = function(value) {
                    return this.containerHeight - (value - this._start) * this.scale;
                };

                DataScale.prototype.screenToValue = function(pixels) {
                    return (this.containerHeight - pixels) / this.scale + this._start;
                };

                module.exports = DataScale;

                /***/
            }),
            /* 152 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DOMutil = __webpack_require__(88);
                var Bars = __webpack_require__(153);
                var Lines = __webpack_require__(155);
                var Points = __webpack_require__(154);

                /**
                 * /**
                 * @param {object} group            | the object of the group from the dataset
                 * @param {string} groupId          | ID of the group
                 * @param {object} options          | the default options
                 * @param {array} groupsUsingDefaultStyles  | this array has one entree.
                 *                                            It is passed as an array so it is passed by reference.
                 *                                            It enumerates through the default styles
                 * @constructor
                 */
                function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
                    this.id = groupId;
                    var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'drawPoints', 'shaded', 'interpolation', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
                    this.options = util.selectiveBridgeObject(fields, options);
                    this.usingDefaultStyle = group.className === undefined;
                    this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
                    this.zeroPosition = 0;
                    this.update(group);
                    if (this.usingDefaultStyle == true) {
                        this.groupsUsingDefaultStyles[0] += 1;
                    }
                    this.itemsData = [];
                    this.visible = group.visible === undefined ? true : group.visible;
                }

                /**
                 * this loads a reference to all items in this group into this group.
                 * @param {array} items
                 */
                GraphGroup.prototype.setItems = function(items) {
                    if (items != null) {
                        this.itemsData = items;
                        if (this.options.sort == true) {
                            util.insertSort(this.itemsData, function(a, b) {
                                return a.x > b.x ? 1 : -1;
                            });
                        }
                    } else {
                        this.itemsData = [];
                    }
                };

                GraphGroup.prototype.getItems = function() {
                    return this.itemsData;
                };

                /**
                 * this is used for barcharts and shading, this way, we only have to calculate it once.
                 * @param pos
                 */
                GraphGroup.prototype.setZeroPosition = function(pos) {
                    this.zeroPosition = pos;
                };

                /**
                 * set the options of the graph group over the default options.
                 * @param options
                 */
                GraphGroup.prototype.setOptions = function(options) {
                    if (options !== undefined) {
                        var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
                        util.selectiveDeepExtend(fields, this.options, options);

                        // if the group's drawPoints is a function delegate the callback to the onRender property
                        if (typeof options.drawPoints == 'function') {
                            options.drawPoints = {
                                onRender: options.drawPoints
                            };
                        }

                        util.mergeOptions(this.options, options, 'interpolation');
                        util.mergeOptions(this.options, options, 'drawPoints');
                        util.mergeOptions(this.options, options, 'shaded');

                        if (options.interpolation) {
                            if ((0, _typeof3['default'])(options.interpolation) == 'object') {
                                if (options.interpolation.parametrization) {
                                    if (options.interpolation.parametrization == 'uniform') {
                                        this.options.interpolation.alpha = 0;
                                    } else if (options.interpolation.parametrization == 'chordal') {
                                        this.options.interpolation.alpha = 1.0;
                                    } else {
                                        this.options.interpolation.parametrization = 'centripetal';
                                        this.options.interpolation.alpha = 0.5;
                                    }
                                }
                            }
                        }
                    }
                };

                /**
                 * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
                 * @param group
                 */
                GraphGroup.prototype.update = function(group) {
                    this.group = group;
                    this.content = group.content || 'graph';
                    this.className = group.className || this.className || 'vis-graph-group' + this.groupsUsingDefaultStyles[0] % 10;
                    this.visible = group.visible === undefined ? true : group.visible;
                    this.style = group.style;
                    this.setOptions(group.options);
                };

                /**
                 * return the legend entree for this group.
                 *
                 * @param iconWidth
                 * @param iconHeight
                 * @returns {{icon: HTMLElement, label: (group.content|*|string), orientation: (.options.yAxisOrientation|*)}}
                 */
                GraphGroup.prototype.getLegend = function(iconWidth, iconHeight, framework, x, y) {
                    if (framework == undefined || framework == null) {
                        var svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
                        framework = { svg: svg, svgElements: {}, options: this.options, groups: [this] };
                    }
                    if (x == undefined || x == null) {
                        x = 0;
                    }
                    if (y == undefined || y == null) {
                        y = 0.5 * iconHeight;
                    }
                    switch (this.options.style) {
                        case "line":
                            Lines.drawIcon(this, x, y, iconWidth, iconHeight, framework);
                            break;
                        case "points": //explicit no break
                        case "point":
                            Points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
                            break;
                        case "bar":
                            Bars.drawIcon(this, x, y, iconWidth, iconHeight, framework);
                            break;
                    }
                    return { icon: framework.svg, label: this.content, orientation: this.options.yAxisOrientation };
                };

                GraphGroup.prototype.getYRange = function(groupData) {
                    var yMin = groupData[0].y;
                    var yMax = groupData[0].y;
                    for (var j = 0; j < groupData.length; j++) {
                        yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
                        yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
                    }
                    return { min: yMin, max: yMax, yAxisOrientation: this.options.yAxisOrientation };
                };

                module.exports = GraphGroup;

                /***/
            }),
            /* 153 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var DOMutil = __webpack_require__(88);
                var Points = __webpack_require__(154);

                function Bargraph(groupId, options) {}

                Bargraph.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
                    var fillHeight = iconHeight * 0.5;
                    var path, fillPath;

                    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
                    outline.setAttributeNS(null, "x", x);
                    outline.setAttributeNS(null, "y", y - fillHeight);
                    outline.setAttributeNS(null, "width", iconWidth);
                    outline.setAttributeNS(null, "height", 2 * fillHeight);
                    outline.setAttributeNS(null, "class", "vis-outline");

                    var barWidth = Math.round(0.3 * iconWidth);
                    var originalWidth = group.options.barChart.width;
                    var scale = originalWidth / barWidth;
                    var bar1Height = Math.round(0.4 * iconHeight);
                    var bar2Height = Math.round(0.75 * iconHeight);

                    var offset = Math.round((iconWidth - 2 * barWidth) / 3);

                    DOMutil.drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
                    DOMutil.drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

                    if (group.options.drawPoints.enabled == true) {
                        var groupTemplate = {
                            style: group.options.drawPoints.style,
                            styles: group.options.drawPoints.styles,
                            size: group.options.drawPoints.size / scale,
                            className: group.className
                        };
                        DOMutil.drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
                        DOMutil.drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
                    }
                };

                /**
                 * draw a bar graph
                 *
                 * @param groupIds
                 * @param processedGroupData
                 */
                Bargraph.draw = function(groupIds, processedGroupData, framework) {
                    var combinedData = [];
                    var intersections = {};
                    var coreDistance;
                    var key, drawData;
                    var group;
                    var i, j;
                    var barPoints = 0;

                    // combine all barchart data
                    for (i = 0; i < groupIds.length; i++) {
                        group = framework.groups[groupIds[i]];
                        if (group.options.style === 'bar') {
                            if (group.visible === true && (framework.options.groups.visibility[groupIds[i]] === undefined || framework.options.groups.visibility[groupIds[i]] === true)) {
                                for (j = 0; j < processedGroupData[groupIds[i]].length; j++) {
                                    combinedData.push({
                                        screen_x: processedGroupData[groupIds[i]][j].screen_x,
                                        screen_end: processedGroupData[groupIds[i]][j].screen_end,
                                        screen_y: processedGroupData[groupIds[i]][j].screen_y,
                                        x: processedGroupData[groupIds[i]][j].x,
                                        end: processedGroupData[groupIds[i]][j].end,
                                        y: processedGroupData[groupIds[i]][j].y,
                                        groupId: groupIds[i],
                                        label: processedGroupData[groupIds[i]][j].label
                                    });
                                    barPoints += 1;
                                }
                            }
                        }
                    }

                    if (barPoints === 0) {
                        return;
                    }

                    // sort by time and by group
                    combinedData.sort(function(a, b) {
                        if (a.screen_x === b.screen_x) {
                            return a.groupId < b.groupId ? -1 : 1;
                        } else {
                            return a.screen_x - b.screen_x;
                        }
                    });

                    // get intersections
                    Bargraph._getDataIntersections(intersections, combinedData);

                    // plot barchart
                    for (i = 0; i < combinedData.length; i++) {
                        group = framework.groups[combinedData[i].groupId];
                        var minWidth = group.options.barChart.minWidth != undefined ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;

                        key = combinedData[i].screen_x;
                        var heightOffset = 0;
                        if (intersections[key] === undefined) {
                            if (i + 1 < combinedData.length) {
                                coreDistance = Math.abs(combinedData[i + 1].screen_x - key);
                            }
                            drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
                        } else {
                            var nextKey = i + (intersections[key].amount - intersections[key].resolved);
                            var prevKey = i - (intersections[key].resolved + 1);
                            if (nextKey < combinedData.length) {
                                coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
                            }
                            drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
                            intersections[key].resolved += 1;

                            if (group.options.stack === true && group.options.excludeFromStacking !== true) {
                                if (combinedData[i].screen_y < group.zeroPosition) {
                                    heightOffset = intersections[key].accumulatedNegative;
                                    intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i].screen_y;
                                } else {
                                    heightOffset = intersections[key].accumulatedPositive;
                                    intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i].screen_y;
                                }
                            } else if (group.options.barChart.sideBySide === true) {
                                drawData.width = drawData.width / intersections[key].amount;
                                drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
                            }
                        }

                        var dataWidth = drawData.width;
                        var start = combinedData[i].screen_x;

                        // are we drawing explicit boxes? (we supplied an end value)
                        if (combinedData[i].screen_end != undefined) {
                            dataWidth = combinedData[i].screen_end - combinedData[i].screen_x;
                            start += dataWidth * 0.5;
                        } else {
                            start += drawData.offset;
                        }

                        DOMutil.drawBar(start, combinedData[i].screen_y - heightOffset, dataWidth, group.zeroPosition - combinedData[i].screen_y, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

                        // draw points
                        if (group.options.drawPoints.enabled === true) {
                            var pointData = {
                                screen_x: combinedData[i].screen_x,
                                screen_y: combinedData[i].screen_y - heightOffset,
                                x: combinedData[i].x,
                                y: combinedData[i].y,
                                groupId: combinedData[i].groupId,
                                label: combinedData[i].label
                            };
                            Points.draw([pointData], group, framework, drawData.offset);
                            //DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
                        }
                    }
                };

                /**
                 * Fill the intersections object with counters of how many datapoints share the same x coordinates
                 * @param intersections
                 * @param combinedData
                 * @private
                 */
                Bargraph._getDataIntersections = function(intersections, combinedData) {
                    // get intersections
                    var coreDistance;
                    for (var i = 0; i < combinedData.length; i++) {
                        if (i + 1 < combinedData.length) {
                            coreDistance = Math.abs(combinedData[i + 1].screen_x - combinedData[i].screen_x);
                        }
                        if (i > 0) {
                            coreDistance = Math.min(coreDistance, Math.abs(combinedData[i - 1].screen_x - combinedData[i].screen_x));
                        }
                        if (coreDistance === 0) {
                            if (intersections[combinedData[i].screen_x] === undefined) {
                                intersections[combinedData[i].screen_x] = {
                                    amount: 0,
                                    resolved: 0,
                                    accumulatedPositive: 0,
                                    accumulatedNegative: 0
                                };
                            }
                            intersections[combinedData[i].screen_x].amount += 1;
                        }
                    }
                };

                /**
                 * Get the width and offset for bargraphs based on the coredistance between datapoints
                 *
                 * @param coreDistance
                 * @param group
                 * @param minWidth
                 * @returns {{width: Number, offset: Number}}
                 * @private
                 */
                Bargraph._getSafeDrawData = function(coreDistance, group, minWidth) {
                    var width, offset;
                    if (coreDistance < group.options.barChart.width && coreDistance > 0) {
                        width = coreDistance < minWidth ? minWidth : coreDistance;

                        offset = 0; // recalculate offset with the new width;
                        if (group.options.barChart.align === 'left') {
                            offset -= 0.5 * coreDistance;
                        } else if (group.options.barChart.align === 'right') {
                            offset += 0.5 * coreDistance;
                        }
                    } else {
                        // default settings
                        width = group.options.barChart.width;
                        offset = 0;
                        if (group.options.barChart.align === 'left') {
                            offset -= 0.5 * group.options.barChart.width;
                        } else if (group.options.barChart.align === 'right') {
                            offset += 0.5 * group.options.barChart.width;
                        }
                    }

                    return { width: width, offset: offset };
                };

                Bargraph.getStackedYRange = function(combinedData, groupRanges, groupIds, groupLabel, orientation) {
                    if (combinedData.length > 0) {
                        // sort by time and by group
                        combinedData.sort(function(a, b) {
                            if (a.screen_x === b.screen_x) {
                                return a.groupId < b.groupId ? -1 : 1;
                            } else {
                                return a.screen_x - b.screen_x;
                            }
                        });
                        var intersections = {};

                        Bargraph._getDataIntersections(intersections, combinedData);
                        groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
                        groupRanges[groupLabel].yAxisOrientation = orientation;
                        groupIds.push(groupLabel);
                    }
                };

                Bargraph._getStackedYRange = function(intersections, combinedData) {
                    var key;
                    var yMin = combinedData[0].screen_y;
                    var yMax = combinedData[0].screen_y;
                    for (var i = 0; i < combinedData.length; i++) {
                        key = combinedData[i].screen_x;
                        if (intersections[key] === undefined) {
                            yMin = yMin > combinedData[i].screen_y ? combinedData[i].screen_y : yMin;
                            yMax = yMax < combinedData[i].screen_y ? combinedData[i].screen_y : yMax;
                        } else {
                            if (combinedData[i].screen_y < 0) {
                                intersections[key].accumulatedNegative += combinedData[i].screen_y;
                            } else {
                                intersections[key].accumulatedPositive += combinedData[i].screen_y;
                            }
                        }
                    }
                    for (var xpos in intersections) {
                        if (intersections.hasOwnProperty(xpos)) {
                            yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
                            yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
                            yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
                            yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
                        }
                    }

                    return { min: yMin, max: yMax };
                };

                module.exports = Bargraph;

                /***/
            }),
            /* 154 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var DOMutil = __webpack_require__(88);

                function Points(groupId, options) {}

                /**
                 * draw the data points
                 *
                 * @param {Array} dataset
                 * @param {Object} JSONcontainer
                 * @param {Object} svg            | SVG DOM element
                 * @param {GraphGroup} group
                 * @param {Number} [offset]
                 */
                Points.draw = function(dataset, group, framework, offset) {
                    offset = offset || 0;
                    var callback = getCallback(framework, group);

                    for (var i = 0; i < dataset.length; i++) {
                        if (!callback) {
                            // draw the point the simple way.
                            DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i].label);
                        } else {
                            var callbackResult = callback(dataset[i], group); // result might be true, false or an object
                            if (callbackResult === true || (typeof callbackResult === 'undefined' ? 'undefined' : (0, _typeof3['default'])(callbackResult)) === 'object') {
                                DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i].label);
                            }
                        }
                    }
                };

                Points.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
                    var fillHeight = iconHeight * 0.5;
                    var path, fillPath;

                    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
                    outline.setAttributeNS(null, "x", x);
                    outline.setAttributeNS(null, "y", y - fillHeight);
                    outline.setAttributeNS(null, "width", iconWidth);
                    outline.setAttributeNS(null, "height", 2 * fillHeight);
                    outline.setAttributeNS(null, "class", "vis-outline");

                    //Don't call callback on icon
                    DOMutil.drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
                };

                function getGroupTemplate(group, callbackResult) {
                    callbackResult = typeof callbackResult === 'undefined' ? {} : callbackResult;
                    return {
                        style: callbackResult.style || group.options.drawPoints.style,
                        styles: callbackResult.styles || group.options.drawPoints.styles,
                        size: callbackResult.size || group.options.drawPoints.size,
                        className: callbackResult.className || group.className
                    };
                }

                function getCallback(framework, group) {
                    var callback = undefined;
                    // check for the graph2d onRender
                    if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == 'function') {
                        callback = framework.options.drawPoints.onRender;
                    }

                    // override it with the group onRender if defined
                    if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == 'function') {
                        callback = group.group.options.drawPoints.onRender;
                    }
                    return callback;
                }

                module.exports = Points;

                /***/
            }),
            /* 155 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                var DOMutil = __webpack_require__(88);

                function Line(groupId, options) {}

                Line.calcPath = function(dataset, group) {
                    if (dataset != null) {
                        if (dataset.length > 0) {
                            var d = [];

                            // construct path from dataset
                            if (group.options.interpolation.enabled == true) {
                                d = Line._catmullRom(dataset, group);
                            } else {
                                d = Line._linear(dataset);
                            }
                            return d;
                        }
                    }
                };

                Line.drawIcon = function(group, x, y, iconWidth, iconHeight, framework) {
                    var fillHeight = iconHeight * 0.5;
                    var path, fillPath;

                    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
                    outline.setAttributeNS(null, "x", x);
                    outline.setAttributeNS(null, "y", y - fillHeight);
                    outline.setAttributeNS(null, "width", iconWidth);
                    outline.setAttributeNS(null, "height", 2 * fillHeight);
                    outline.setAttributeNS(null, "class", "vis-outline");

                    path = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
                    path.setAttributeNS(null, "class", group.className);
                    if (group.style !== undefined) {
                        path.setAttributeNS(null, "style", group.style);
                    }

                    path.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y + "");
                    if (group.options.shaded.enabled == true) {
                        fillPath = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
                        if (group.options.shaded.orientation == 'top') {
                            fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
                        } else {
                            fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " " + "L" + x + "," + (y + fillHeight) + " " + "L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
                        }
                        fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");
                        if (group.options.shaded.style !== undefined && group.options.shaded.style !== "") {
                            fillPath.setAttributeNS(null, "style", group.options.shaded.style);
                        }
                    }

                    if (group.options.drawPoints.enabled == true) {
                        var groupTemplate = {
                            style: group.options.drawPoints.style,
                            styles: group.options.drawPoints.styles,
                            size: group.options.drawPoints.size,
                            className: group.className
                        };
                        DOMutil.drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
                    }
                };

                Line.drawShading = function(pathArray, group, subPathArray, framework) {
                    // append shading to the path
                    if (group.options.shaded.enabled == true) {
                        var svgHeight = Number(framework.svg.style.height.replace('px', ''));
                        var fillPath = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
                        var type = "L";
                        if (group.options.interpolation.enabled == true) {
                            type = "C";
                        }
                        var dFill;
                        var zero = 0;
                        if (group.options.shaded.orientation == 'top') {
                            zero = 0;
                        } else if (group.options.shaded.orientation == 'bottom') {
                            zero = svgHeight;
                        } else {
                            zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
                        }
                        if (group.options.shaded.orientation == 'group' && subPathArray != null && subPathArray != undefined) {
                            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' L' + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
                        } else {
                            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' V' + zero + ' H' + pathArray[0][0] + " Z";
                        }

                        fillPath.setAttributeNS(null, 'class', group.className + ' vis-fill');
                        if (group.options.shaded.style !== undefined) {
                            fillPath.setAttributeNS(null, 'style', group.options.shaded.style);
                        }
                        fillPath.setAttributeNS(null, 'd', dFill);
                    }
                };

                /**
                 * draw a line graph
                 *
                 * @param dataset
                 * @param group
                 */
                Line.draw = function(pathArray, group, framework) {
                    if (pathArray != null && pathArray != undefined) {
                        var path = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
                        path.setAttributeNS(null, "class", group.className);
                        if (group.style !== undefined) {
                            path.setAttributeNS(null, "style", group.style);
                        }

                        var type = "L";
                        if (group.options.interpolation.enabled == true) {
                            type = "C";
                        }
                        // copy properties to path for drawing.
                        path.setAttributeNS(null, 'd', 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
                    }
                };

                Line.serializePath = function(pathArray, type, inverse) {
                    if (pathArray.length < 2) {
                        //Too little data to create a path.
                        return "";
                    }
                    var d = type;
                    if (inverse) {
                        for (var i = pathArray.length - 2; i > 0; i--) {
                            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
                        }
                    } else {
                        for (var i = 1; i < pathArray.length; i++) {
                            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
                        }
                    }
                    return d;
                };

                /**
                 * This uses an uniform parametrization of the interpolation algorithm:
                 * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
                 * @param data
                 * @returns {string}
                 * @private
                 */
                Line._catmullRomUniform = function(data) {
                    // catmull rom
                    var p0, p1, p2, p3, bp1, bp2;
                    var d = [];
                    d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
                    var normalization = 1 / 6;
                    var length = data.length;
                    for (var i = 0; i < length - 1; i++) {

                        p0 = i == 0 ? data[0] : data[i - 1];
                        p1 = data[i];
                        p2 = data[i + 1];
                        p3 = i + 2 < length ? data[i + 2] : p2;

                        // Catmull-Rom to Cubic Bezier conversion matrix
                        //    0       1       0       0
                        //  -1/6      1      1/6      0
                        //    0      1/6      1     -1/6
                        //    0       0       1       0

                        //    bp0 = { x: p1.x,                               y: p1.y };
                        bp1 = {
                            screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
                            screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
                        };
                        bp2 = {
                            screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
                            screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
                        };
                        //    bp0 = { x: p2.x,                               y: p2.y };

                        d.push([bp1.screen_x, bp1.screen_y]);
                        d.push([bp2.screen_x, bp2.screen_y]);
                        d.push([p2.screen_x, p2.screen_y]);
                    }

                    return d;
                };

                /**
                 * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
                 * By default, the centripetal parameterization is used because this gives the nicest results.
                 * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
                 *
                 * One optimization can be used to reuse distances since this is a sliding window approach.
                 * @param data
                 * @param group
                 * @returns {string}
                 * @private
                 */
                Line._catmullRom = function(data, group) {
                    var alpha = group.options.interpolation.alpha;
                    if (alpha == 0 || alpha === undefined) {
                        return this._catmullRomUniform(data);
                    } else {
                        var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
                        var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
                        var d = [];
                        d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
                        var length = data.length;
                        for (var i = 0; i < length - 1; i++) {

                            p0 = i == 0 ? data[0] : data[i - 1];
                            p1 = data[i];
                            p2 = data[i + 1];
                            p3 = i + 2 < length ? data[i + 2] : p2;

                            d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
                            d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
                            d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2));

                            // Catmull-Rom to Cubic Bezier conversion matrix

                            // A = 2d1^2a + 3d1^a * d2^a + d3^2a
                            // B = 2d3^2a + 3d3^a * d2^a + d2^2a

                            // [   0             1            0          0          ]
                            // [   -d2^2a /N     A/N          d1^2a /N   0          ]
                            // [   0             d3^2a /M     B/M        -d2^2a /M  ]
                            // [   0             0            1          0          ]

                            d3powA = Math.pow(d3, alpha);
                            d3pow2A = Math.pow(d3, 2 * alpha);
                            d2powA = Math.pow(d2, alpha);
                            d2pow2A = Math.pow(d2, 2 * alpha);
                            d1powA = Math.pow(d1, alpha);
                            d1pow2A = Math.pow(d1, 2 * alpha);

                            A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
                            B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
                            N = 3 * d1powA * (d1powA + d2powA);
                            if (N > 0) {
                                N = 1 / N;
                            }
                            M = 3 * d3powA * (d3powA + d2powA);
                            if (M > 0) {
                                M = 1 / M;
                            }

                            bp1 = {
                                screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
                                screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
                            };

                            bp2 = {
                                screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
                                screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
                            };

                            if (bp1.screen_x == 0 && bp1.screen_y == 0) {
                                bp1 = p1;
                            }
                            if (bp2.screen_x == 0 && bp2.screen_y == 0) {
                                bp2 = p2;
                            }
                            d.push([bp1.screen_x, bp1.screen_y]);
                            d.push([bp2.screen_x, bp2.screen_y]);
                            d.push([p2.screen_x, p2.screen_y]);
                        }

                        return d;
                    }
                };

                /**
                 * this generates the SVG path for a linear drawing between datapoints.
                 * @param data
                 * @returns {string}
                 * @private
                 */
                Line._linear = function(data) {
                    // linear
                    var d = [];
                    for (var i = 0; i < data.length; i++) {
                        d.push([data[i].screen_x, data[i].screen_y]);
                    }
                    return d;
                };

                module.exports = Line;

                /***/
            }),
            /* 156 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DOMutil = __webpack_require__(88);
                var Component = __webpack_require__(120);

                /**
                 * Legend for Graph2d
                 */
                function Legend(body, options, side, linegraphOptions) {
                    this.body = body;
                    this.defaultOptions = {
                        enabled: false,
                        icons: true,
                        iconSize: 20,
                        iconSpacing: 6,
                        left: {
                            visible: true,
                            position: 'top-left' // top/bottom - left,center,right
                        },
                        right: {
                            visible: true,
                            position: 'top-right' // top/bottom - left,center,right
                        }
                    };

                    this.side = side;
                    this.options = util.extend({}, this.defaultOptions);
                    this.linegraphOptions = linegraphOptions;

                    this.svgElements = {};
                    this.dom = {};
                    this.groups = {};
                    this.amountOfGroups = 0;
                    this._create();
                    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

                    this.setOptions(options);
                }

                Legend.prototype = new Component();

                Legend.prototype.clear = function() {
                    this.groups = {};
                    this.amountOfGroups = 0;
                };

                Legend.prototype.addGroup = function(label, graphOptions) {

                    // Include a group only if the group option 'excludeFromLegend: false' is not set.
                    if (graphOptions.options.excludeFromLegend != true) {
                        if (!this.groups.hasOwnProperty(label)) {
                            this.groups[label] = graphOptions;
                        }
                        this.amountOfGroups += 1;
                    }
                };

                Legend.prototype.updateGroup = function(label, graphOptions) {
                    this.groups[label] = graphOptions;
                };

                Legend.prototype.removeGroup = function(label) {
                    if (this.groups.hasOwnProperty(label)) {
                        delete this.groups[label];
                        this.amountOfGroups -= 1;
                    }
                };

                Legend.prototype._create = function() {
                    this.dom.frame = document.createElement('div');
                    this.dom.frame.className = 'vis-legend';
                    this.dom.frame.style.position = "absolute";
                    this.dom.frame.style.top = "10px";
                    this.dom.frame.style.display = "block";

                    this.dom.textArea = document.createElement('div');
                    this.dom.textArea.className = 'vis-legend-text';
                    this.dom.textArea.style.position = "relative";
                    this.dom.textArea.style.top = "0px";

                    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
                    this.svg.style.position = 'absolute';
                    this.svg.style.top = 0 + 'px';
                    this.svg.style.width = this.options.iconSize + 5 + 'px';
                    this.svg.style.height = '100%';

                    this.dom.frame.appendChild(this.svg);
                    this.dom.frame.appendChild(this.dom.textArea);
                };

                /**
                 * Hide the component from the DOM
                 */
                Legend.prototype.hide = function() {
                    // remove the frame containing the items
                    if (this.dom.frame.parentNode) {
                        this.dom.frame.parentNode.removeChild(this.dom.frame);
                    }
                };

                /**
                 * Show the component in the DOM (when not already visible).
                 * @return {Boolean} changed
                 */
                Legend.prototype.show = function() {
                    // show frame containing the items
                    if (!this.dom.frame.parentNode) {
                        this.body.dom.center.appendChild(this.dom.frame);
                    }
                };

                Legend.prototype.setOptions = function(options) {
                    var fields = ['enabled', 'orientation', 'icons', 'left', 'right'];
                    util.selectiveDeepExtend(fields, this.options, options);
                };

                Legend.prototype.redraw = function() {
                    var activeGroups = 0;
                    var groupArray = (0, _keys2['default'])(this.groups);
                    groupArray.sort(function(a, b) {
                        return a < b ? -1 : 1;
                    });

                    for (var i = 0; i < groupArray.length; i++) {
                        var groupId = groupArray[i];
                        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
                            activeGroups++;
                        }
                    }

                    if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
                        this.hide();
                    } else {
                        this.show();
                        if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'bottom-left') {
                            this.dom.frame.style.left = '4px';
                            this.dom.frame.style.textAlign = "left";
                            this.dom.textArea.style.textAlign = "left";
                            this.dom.textArea.style.left = this.options.iconSize + 15 + 'px';
                            this.dom.textArea.style.right = '';
                            this.svg.style.left = 0 + 'px';
                            this.svg.style.right = '';
                        } else {
                            this.dom.frame.style.right = '4px';
                            this.dom.frame.style.textAlign = "right";
                            this.dom.textArea.style.textAlign = "right";
                            this.dom.textArea.style.right = this.options.iconSize + 15 + 'px';
                            this.dom.textArea.style.left = '';
                            this.svg.style.right = 0 + 'px';
                            this.svg.style.left = '';
                        }

                        if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'top-right') {
                            this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
                            this.dom.frame.style.bottom = '';
                        } else {
                            var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
                            this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
                            this.dom.frame.style.top = '';
                        }

                        if (this.options.icons == false) {
                            this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + 'px';
                            this.dom.textArea.style.right = '';
                            this.dom.textArea.style.left = '';
                            this.svg.style.width = '0px';
                        } else {
                            this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + 'px';
                            this.drawLegendIcons();
                        }

                        var content = '';
                        for (var i = 0; i < groupArray.length; i++) {
                            var groupId = groupArray[i];
                            if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
                                content += this.groups[groupId].content + '<br />';
                            }
                        }
                        this.dom.textArea.innerHTML = content;
                        this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + 'px';
                    }
                };

                Legend.prototype.drawLegendIcons = function() {
                    if (this.dom.frame.parentNode) {
                        var groupArray = (0, _keys2['default'])(this.groups);
                        groupArray.sort(function(a, b) {
                            return a < b ? -1 : 1;
                        });

                        // this resets the elements so the order is maintained
                        DOMutil.resetElements(this.svgElements);

                        var padding = window.getComputedStyle(this.dom.frame).paddingTop;
                        var iconOffset = Number(padding.replace('px', ''));
                        var x = iconOffset;
                        var iconWidth = this.options.iconSize;
                        var iconHeight = 0.75 * this.options.iconSize;
                        var y = iconOffset + 0.5 * iconHeight + 3;

                        this.svg.style.width = iconWidth + 5 + iconOffset + 'px';

                        for (var i = 0; i < groupArray.length; i++) {
                            var groupId = groupArray[i];
                            if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
                                this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
                                y += iconHeight + this.options.iconSpacing;
                            }
                        }
                    }
                };

                module.exports = Legend;

                /***/
            }),
            /* 157 */
            /***/
            (function(module, exports) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                /**
                 * This object contains all possible options. It will check if the types are correct, if required if the option is one
                 * of the allowed values.
                 *
                 * __any__ means that the name of the property does not matter.
                 * __type__ is a required field for all objects and contains the allowed types of all objects
                 */
                var string = 'string';
                var bool = 'boolean';
                var number = 'number';
                var array = 'array';
                var date = 'date';
                var object = 'object'; // should only be in a __type__ property
                var dom = 'dom';
                var moment = 'moment';
                var any = 'any';

                var allOptions = {
                    configure: {
                        enabled: { 'boolean': bool },
                        filter: { 'boolean': bool, 'function': 'function' },
                        container: { dom: dom },
                        __type__: { object: object, 'boolean': bool, 'function': 'function' }
                    },

                    //globals :
                    yAxisOrientation: { string: ['left', 'right'] },
                    defaultGroup: { string: string },
                    sort: { 'boolean': bool },
                    sampling: { 'boolean': bool },
                    stack: { 'boolean': bool },
                    graphHeight: { string: string, number: number },
                    shaded: {
                        enabled: { 'boolean': bool },
                        orientation: { string: ['bottom', 'top', 'zero', 'group'] }, // top, bottom, zero, group
                        groupId: { object: object },
                        __type__: { 'boolean': bool, object: object }
                    },
                    style: { string: ['line', 'bar', 'points'] }, // line, bar
                    barChart: {
                        width: { number: number },
                        minWidth: { number: number },
                        sideBySide: { 'boolean': bool },
                        align: { string: ['left', 'center', 'right'] },
                        __type__: { object: object }
                    },
                    interpolation: {
                        enabled: { 'boolean': bool },
                        parametrization: { string: ['centripetal', 'chordal', 'uniform'] }, // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
                        alpha: { number: number },
                        __type__: { object: object, 'boolean': bool }
                    },
                    drawPoints: {
                        enabled: { 'boolean': bool },
                        onRender: { 'function': 'function' },
                        size: { number: number },
                        style: { string: ['square', 'circle'] }, // square, circle
                        __type__: { object: object, 'boolean': bool, 'function': 'function' }
                    },
                    dataAxis: {
                        showMinorLabels: { 'boolean': bool },
                        showMajorLabels: { 'boolean': bool },
                        icons: { 'boolean': bool },
                        width: { string: string, number: number },
                        visible: { 'boolean': bool },
                        alignZeros: { 'boolean': bool },
                        left: {
                            range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
                            format: { 'function': 'function' },
                            title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
                            __type__: { object: object }
                        },
                        right: {
                            range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
                            format: { 'function': 'function' },
                            title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
                            __type__: { object: object }
                        },
                        __type__: { object: object }
                    },
                    legend: {
                        enabled: { 'boolean': bool },
                        icons: { 'boolean': bool },
                        left: {
                            visible: { 'boolean': bool },
                            position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
                            __type__: { object: object }
                        },
                        right: {
                            visible: { 'boolean': bool },
                            position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
                            __type__: { object: object }
                        },
                        __type__: { object: object, 'boolean': bool }
                    },
                    groups: {
                        visibility: { any: any },
                        __type__: { object: object }
                    },

                    autoResize: { 'boolean': bool },
                    throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
                    clickToUse: { 'boolean': bool },
                    end: { number: number, date: date, string: string, moment: moment },
                    format: {
                        minorLabels: {
                            millisecond: { string: string, 'undefined': 'undefined' },
                            second: { string: string, 'undefined': 'undefined' },
                            minute: { string: string, 'undefined': 'undefined' },
                            hour: { string: string, 'undefined': 'undefined' },
                            weekday: { string: string, 'undefined': 'undefined' },
                            day: { string: string, 'undefined': 'undefined' },
                            month: { string: string, 'undefined': 'undefined' },
                            year: { string: string, 'undefined': 'undefined' },
                            __type__: { object: object }
                        },
                        majorLabels: {
                            millisecond: { string: string, 'undefined': 'undefined' },
                            second: { string: string, 'undefined': 'undefined' },
                            minute: { string: string, 'undefined': 'undefined' },
                            hour: { string: string, 'undefined': 'undefined' },
                            weekday: { string: string, 'undefined': 'undefined' },
                            day: { string: string, 'undefined': 'undefined' },
                            month: { string: string, 'undefined': 'undefined' },
                            year: { string: string, 'undefined': 'undefined' },
                            __type__: { object: object }
                        },
                        __type__: { object: object }
                    },
                    moment: { 'function': 'function' },
                    height: { string: string, number: number },
                    hiddenDates: {
                        start: { date: date, number: number, string: string, moment: moment },
                        end: { date: date, number: number, string: string, moment: moment },
                        repeat: { string: string },
                        __type__: { object: object, array: array }
                    },
                    locale: { string: string },
                    locales: {
                        __any__: { any: any },
                        __type__: { object: object }
                    },
                    max: { date: date, number: number, string: string, moment: moment },
                    maxHeight: { number: number, string: string },
                    maxMinorChars: { number: number },
                    min: { date: date, number: number, string: string, moment: moment },
                    minHeight: { number: number, string: string },
                    moveable: { 'boolean': bool },
                    multiselect: { 'boolean': bool },
                    orientation: { string: string },
                    showCurrentTime: { 'boolean': bool },
                    showMajorLabels: { 'boolean': bool },
                    showMinorLabels: { 'boolean': bool },
                    start: { date: date, number: number, string: string, moment: moment },
                    timeAxis: {
                        scale: { string: string, 'undefined': 'undefined' },
                        step: { number: number, 'undefined': 'undefined' },
                        __type__: { object: object }
                    },
                    width: { string: string, number: number },
                    zoomable: { 'boolean': bool },
                    zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
                    zoomMax: { number: number },
                    zoomMin: { number: number },
                    zIndex: { number: number },
                    __type__: { object: object }
                };

                var configureOptions = {
                    global: {
                        //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
                        sort: true,
                        sampling: true,
                        stack: false,
                        shaded: {
                            enabled: false,
                            orientation: ['zero', 'top', 'bottom', 'group'] // zero, top, bottom
                        },
                        style: ['line', 'bar', 'points'], // line, bar
                        barChart: {
                            width: [50, 5, 100, 5],
                            minWidth: [50, 5, 100, 5],
                            sideBySide: false,
                            align: ['left', 'center', 'right'] // left, center, right
                        },
                        interpolation: {
                            enabled: true,
                            parametrization: ['centripetal', 'chordal', 'uniform'] // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
                        },
                        drawPoints: {
                            enabled: true,
                            size: [6, 2, 30, 1],
                            style: ['square', 'circle'] // square, circle
                        },
                        dataAxis: {
                            showMinorLabels: true,
                            showMajorLabels: true,
                            icons: false,
                            width: [40, 0, 200, 1],
                            visible: true,
                            alignZeros: true,
                            left: {
                                //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
                                //format: function (value) {return value;},
                                title: { text: '', style: '' }
                            },
                            right: {
                                //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
                                //format: function (value) {return value;},
                                title: { text: '', style: '' }
                            }
                        },
                        legend: {
                            enabled: false,
                            icons: true,
                            left: {
                                visible: true,
                                position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
                            },
                            right: {
                                visible: true,
                                position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
                            }
                        },

                        autoResize: true,
                        clickToUse: false,
                        end: '',
                        format: {
                            minorLabels: {
                                millisecond: 'SSS',
                                second: 's',
                                minute: 'HH:mm',
                                hour: 'HH:mm',
                                weekday: 'ddd D',
                                day: 'D',
                                month: 'MMM',
                                year: 'YYYY'
                            },
                            majorLabels: {
                                millisecond: 'HH:mm:ss',
                                second: 'D MMMM HH:mm',
                                minute: 'ddd D MMMM',
                                hour: 'ddd D MMMM',
                                weekday: 'MMMM YYYY',
                                day: 'MMMM YYYY',
                                month: 'YYYY',
                                year: ''
                            }
                        },

                        height: '',
                        locale: '',
                        max: '',
                        maxHeight: '',
                        maxMinorChars: [7, 0, 20, 1],
                        min: '',
                        minHeight: '',
                        moveable: true,
                        orientation: ['both', 'bottom', 'top'],
                        showCurrentTime: false,
                        showMajorLabels: true,
                        showMinorLabels: true,
                        start: '',
                        width: '100%',
                        zoomable: true,
                        zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
                        zoomMax: [315360000000000, 10, 315360000000000, 1],
                        zoomMin: [10, 10, 315360000000000, 1],
                        zIndex: 0
                    }
                };

                exports.allOptions = allOptions;
                exports.configureOptions = configureOptions;

                /***/
            }),
            /* 158 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // utils
                exports.util = __webpack_require__(1);
                exports.DOMutil = __webpack_require__(88);

                // data
                exports.DataSet = __webpack_require__(89);
                exports.DataView = __webpack_require__(93);
                exports.Queue = __webpack_require__(92);

                // Network
                exports.Network = __webpack_require__(159);
                exports.network = {
                    Images: __webpack_require__(164),
                    dotparser: __webpack_require__(161),
                    gephiParser: __webpack_require__(162),
                    allOptions: __webpack_require__(229)
                };
                exports.network.convertDot = function(input) {
                    return exports.network.dotparser.DOTToGraph(input);
                };
                exports.network.convertGephi = function(input, options) {
                    return exports.network.gephiParser.parseGephi(input, options);
                };

                // bundled external libraries
                exports.moment = __webpack_require__(82);
                exports.Hammer = __webpack_require__(112);
                exports.keycharm = __webpack_require__(115);

                /***/
            }),
            /* 159 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                // Load custom shapes into CanvasRenderingContext2D
                __webpack_require__(160);

                var Emitter = __webpack_require__(99);
                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);
                var dotparser = __webpack_require__(161);
                var gephiParser = __webpack_require__(162);
                var Activator = __webpack_require__(140);
                var locales = __webpack_require__(163);

                var Images = __webpack_require__(164)['default'];
                var Groups = __webpack_require__(166)['default'];
                var NodesHandler = __webpack_require__(167)['default'];
                var EdgesHandler = __webpack_require__(200)['default'];
                var PhysicsEngine = __webpack_require__(209)['default'];
                var ClusterEngine = __webpack_require__(218)['default'];
                var CanvasRenderer = __webpack_require__(221)['default'];
                var Canvas = __webpack_require__(222)['default'];
                var View = __webpack_require__(223)['default'];
                var InteractionHandler = __webpack_require__(224)['default'];
                var SelectionHandler = __webpack_require__(226)['default'];
                var LayoutEngine = __webpack_require__(227)['default'];
                var ManipulationSystem = __webpack_require__(228)['default'];
                var Configurator = __webpack_require__(146)['default'];
                var Validator = __webpack_require__(144)['default'];

                var _require = __webpack_require__(144),
                    printStyle = _require.printStyle;

                var _require2 = __webpack_require__(229),
                    allOptions = _require2.allOptions,
                    configureOptions = _require2.configureOptions;

                var KamadaKawai = __webpack_require__(230)['default'];

                /**
                 * @constructor Network
                 * Create a network visualization, displaying nodes and edges.
                 *
                 * @param {Element} container   The DOM element in which the Network will
                 *                                  be created. Normally a div element.
                 * @param {Object} data         An object containing parameters
                 *                              {Array} nodes
                 *                              {Array} edges
                 * @param {Object} options      Options
                 */
                function Network(container, data, options) {
                    var _this = this;

                    if (!(this instanceof Network)) {
                        throw new SyntaxError('Constructor must be called with the new operator');
                    }

                    // set constant values
                    this.options = {};
                    this.defaultOptions = {
                        locale: 'en',
                        locales: locales,
                        clickToUse: false
                    };
                    util.extend(this.options, this.defaultOptions);

                    // containers for nodes and edges
                    this.body = {
                        container: container,
                        nodes: {},
                        nodeIndices: [],
                        edges: {},
                        edgeIndices: [],
                        emitter: {
                            on: this.on.bind(this),
                            off: this.off.bind(this),
                            emit: this.emit.bind(this),
                            once: this.once.bind(this)
                        },
                        eventListeners: {
                            onTap: function onTap() {},
                            onTouch: function onTouch() {},
                            onDoubleTap: function onDoubleTap() {},
                            onHold: function onHold() {},
                            onDragStart: function onDragStart() {},
                            onDrag: function onDrag() {},
                            onDragEnd: function onDragEnd() {},
                            onMouseWheel: function onMouseWheel() {},
                            onPinch: function onPinch() {},
                            onMouseMove: function onMouseMove() {},
                            onRelease: function onRelease() {},
                            onContext: function onContext() {}
                        },
                        data: {
                            nodes: null, // A DataSet or DataView
                            edges: null // A DataSet or DataView
                        },
                        functions: {
                            createNode: function createNode() {},
                            createEdge: function createEdge() {},
                            getPointer: function getPointer() {}
                        },
                        modules: {},
                        view: {
                            scale: 1,
                            translation: { x: 0, y: 0 }
                        }
                    };

                    // bind the event listeners
                    this.bindEventListeners();

                    // setting up all modules
                    this.images = new Images(function() {
                        return _this.body.emitter.emit("_requestRedraw");
                    }); // object with images
                    this.groups = new Groups(); // object with groups
                    this.canvas = new Canvas(this.body); // DOM handler
                    this.selectionHandler = new SelectionHandler(this.body, this.canvas); // Selection handler
                    this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key
                    this.view = new View(this.body, this.canvas); // camera handler, does animations and zooms
                    this.renderer = new CanvasRenderer(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into
                    this.physics = new PhysicsEngine(this.body); // physics engine, does all the simulations
                    this.layoutEngine = new LayoutEngine(this.body); // layout engine for inital layout and hierarchical layout
                    this.clustering = new ClusterEngine(this.body); // clustering api
                    this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler); // data manipulation system

                    this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options
                    this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options

                    this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05); // Layouting algorithm.
                    this.body.modules["clustering"] = this.clustering;

                    // create the DOM elements
                    this.canvas._create();

                    // apply options
                    this.setOptions(options);

                    // load data (the disable start variable will be the same as the enabled clustering)
                    this.setData(data);
                }

                // Extend Network with an Emitter mixin
                Emitter(Network.prototype);

                /**
                 * Set options
                 * @param {Object} options
                 */
                Network.prototype.setOptions = function(options) {
                    var _this2 = this;

                    if (options !== undefined) {
                        var errorFound = Validator.validate(options, allOptions);
                        if (errorFound === true) {
                            console.log('%cErrors have been found in the supplied options object.', printStyle);
                        }

                        // copy the global fields over
                        var fields = ['locale', 'locales', 'clickToUse'];
                        util.selectiveDeepExtend(fields, this.options, options);

                        // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.
                        options = this.layoutEngine.setOptions(options.layout, options);

                        this.canvas.setOptions(options); // options for canvas are in globals

                        // pass the options to the modules
                        this.groups.setOptions(options.groups);
                        this.nodesHandler.setOptions(options.nodes);
                        this.edgesHandler.setOptions(options.edges);
                        this.physics.setOptions(options.physics);
                        this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals

                        this.interactionHandler.setOptions(options.interaction);
                        this.renderer.setOptions(options.interaction); // options for rendering are in interaction
                        this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction

                        // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.
                        if (options.groups !== undefined) {
                            this.body.emitter.emit("refreshNodes");
                        }
                        // these two do not have options at the moment, here for completeness
                        //this.view.setOptions(options.view);
                        //this.clustering.setOptions(options.clustering);

                        if ('configure' in options) {
                            if (!this.configurator) {
                                this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio);
                            }

                            this.configurator.setOptions(options.configure);
                        }

                        // if the configuration system is enabled, copy all options and put them into the config system
                        if (this.configurator && this.configurator.options.enabled === true) {
                            var networkOptions = { nodes: {}, edges: {}, layout: {}, interaction: {}, manipulation: {}, physics: {}, global: {} };
                            util.deepExtend(networkOptions.nodes, this.nodesHandler.options);
                            util.deepExtend(networkOptions.edges, this.edgesHandler.options);
                            util.deepExtend(networkOptions.layout, this.layoutEngine.options);
                            // load the selectionHandler and render default options in to the interaction group
                            util.deepExtend(networkOptions.interaction, this.selectionHandler.options);
                            util.deepExtend(networkOptions.interaction, this.renderer.options);

                            util.deepExtend(networkOptions.interaction, this.interactionHandler.options);
                            util.deepExtend(networkOptions.manipulation, this.manipulation.options);
                            util.deepExtend(networkOptions.physics, this.physics.options);

                            // load globals into the global object
                            util.deepExtend(networkOptions.global, this.canvas.options);
                            util.deepExtend(networkOptions.global, this.options);

                            this.configurator.setModuleOptions(networkOptions);
                        }

                        // handle network global options
                        if (options.clickToUse !== undefined) {
                            if (options.clickToUse === true) {
                                if (this.activator === undefined) {
                                    this.activator = new Activator(this.canvas.frame);
                                    this.activator.on('change', function() {
                                        _this2.body.emitter.emit("activate");
                                    });
                                }
                            } else {
                                if (this.activator !== undefined) {
                                    this.activator.destroy();
                                    delete this.activator;
                                }
                                this.body.emitter.emit("activate");
                            }
                        } else {
                            this.body.emitter.emit("activate");
                        }

                        this.canvas.setSize();
                        // start the physics simulation. Can be safely called multiple times.
                        this.body.emitter.emit("startSimulation");
                    }
                };

                /**
                 * Update the this.body.nodeIndices with the most recent node index list
                 * @private
                 */
                Network.prototype._updateVisibleIndices = function() {
                    var nodes = this.body.nodes;
                    var edges = this.body.edges;
                    this.body.nodeIndices = [];
                    this.body.edgeIndices = [];

                    for (var nodeId in nodes) {
                        if (nodes.hasOwnProperty(nodeId)) {
                            if (nodes[nodeId].options.hidden === false) {
                                this.body.nodeIndices.push(nodes[nodeId].id);
                            }
                        }
                    }

                    for (var edgeId in edges) {
                        if (edges.hasOwnProperty(edgeId)) {
                            if (edges[edgeId].options.hidden === false) {
                                this.body.edgeIndices.push(edges[edgeId].id);
                            }
                        }
                    }
                };

                /**
                 * Bind all events
                 */
                Network.prototype.bindEventListeners = function() {
                    var _this3 = this;

                    // this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
                    this.body.emitter.on("_dataChanged", function() {
                        // update shortcut lists
                        _this3._updateVisibleIndices();
                        _this3.body.emitter.emit("_requestRedraw");
                        // call the dataUpdated event because the only difference between the two is the updating of the indices
                        _this3.body.emitter.emit("_dataUpdated");
                    });

                    // this is called when options of EXISTING nodes or edges have changed.
                    this.body.emitter.on("_dataUpdated", function() {
                        // update values
                        _this3._updateValueRange(_this3.body.nodes);
                        _this3._updateValueRange(_this3.body.edges);
                        // start simulation (can be called safely, even if already running)
                        _this3.body.emitter.emit("startSimulation");
                        _this3.body.emitter.emit("_requestRedraw");
                    });
                };

                /**
                 * Set nodes and edges, and optionally options as well.
                 *
                 * @param {Object} data              Object containing parameters:
                 *                                   {Array | DataSet | DataView} [nodes] Array with nodes
                 *                                   {Array | DataSet | DataView} [edges] Array with edges
                 *                                   {String} [dot] String containing data in DOT format
                 *                                   {String} [gephi] String containing data in gephi JSON format
                 *                                   {Options} [options] Object with options
                 */
                Network.prototype.setData = function(data) {
                    // reset the physics engine.
                    this.body.emitter.emit("resetPhysics");
                    this.body.emitter.emit("_resetData");

                    // unselect all to ensure no selections from old data are carried over.
                    this.selectionHandler.unselectAll();

                    if (data && data.dot && (data.nodes || data.edges)) {
                        throw new SyntaxError('Data must contain either parameter "dot" or ' + ' parameter pair "nodes" and "edges", but not both.');
                    }

                    // set options
                    this.setOptions(data && data.options);
                    // set all data
                    if (data && data.dot) {
                        console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');
                        // parse DOT file
                        var dotData = dotparser.DOTToGraph(data.dot);
                        this.setData(dotData);
                        return;
                    } else if (data && data.gephi) {
                        // parse DOT file
                        console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');
                        var gephiData = gephiParser.parseGephi(data.gephi);
                        this.setData(gephiData);
                        return;
                    } else {
                        this.nodesHandler.setData(data && data.nodes, true);
                        this.edgesHandler.setData(data && data.edges, true);
                    }

                    // emit change in data
                    this.body.emitter.emit("_dataChanged");

                    // emit data loaded
                    this.body.emitter.emit("_dataLoaded");

                    // find a stable position or start animating to a stable position
                    this.body.emitter.emit("initPhysics");
                };

                /**
                 * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.
                 * var network = new vis.Network(..);
                 * network.destroy();
                 * network = null;
                 */
                Network.prototype.destroy = function() {
                    this.body.emitter.emit("destroy");
                    // clear events
                    this.body.emitter.off();
                    this.off();

                    // delete modules
                    delete this.groups;
                    delete this.canvas;
                    delete this.selectionHandler;
                    delete this.interactionHandler;
                    delete this.view;
                    delete this.renderer;
                    delete this.physics;
                    delete this.layoutEngine;
                    delete this.clustering;
                    delete this.manipulation;
                    delete this.nodesHandler;
                    delete this.edgesHandler;
                    delete this.configurator;
                    delete this.images;

                    for (var nodeId in this.body.nodes) {
                        delete this.body.nodes[nodeId];
                    }
                    for (var edgeId in this.body.edges) {
                        delete this.body.edges[edgeId];
                    }

                    // remove the container and everything inside it recursively
                    util.recursiveDOMDelete(this.body.container);
                };

                /**
                 * Update the values of all object in the given array according to the current
                 * value range of the objects in the array.
                 * @param {Object} obj    An object containing a set of Edges or Nodes
                 *                        The objects must have a method getValue() and
                 *                        setValueRange(min, max).
                 * @private
                 */
                Network.prototype._updateValueRange = function(obj) {
                    var id;

                    // determine the range of the objects
                    var valueMin = undefined;
                    var valueMax = undefined;
                    var valueTotal = 0;
                    for (id in obj) {
                        if (obj.hasOwnProperty(id)) {
                            var value = obj[id].getValue();
                            if (value !== undefined) {
                                valueMin = valueMin === undefined ? value : Math.min(value, valueMin);
                                valueMax = valueMax === undefined ? value : Math.max(value, valueMax);
                                valueTotal += value;
                            }
                        }
                    }

                    // adjust the range of all objects
                    if (valueMin !== undefined && valueMax !== undefined) {
                        for (id in obj) {
                            if (obj.hasOwnProperty(id)) {
                                obj[id].setValueRange(valueMin, valueMax, valueTotal);
                            }
                        }
                    }
                };

                /**
                 * Returns true when the Network is active.
                 * @returns {boolean}
                 */
                Network.prototype.isActive = function() {
                    return !this.activator || this.activator.active;
                };

                Network.prototype.setSize = function() {
                    return this.canvas.setSize.apply(this.canvas, arguments);
                };
                Network.prototype.canvasToDOM = function() {
                    return this.canvas.canvasToDOM.apply(this.canvas, arguments);
                };
                Network.prototype.DOMtoCanvas = function() {
                    return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
                };
                Network.prototype.findNode = function() {
                    return this.clustering.findNode.apply(this.clustering, arguments);
                };
                Network.prototype.isCluster = function() {
                    return this.clustering.isCluster.apply(this.clustering, arguments);
                };
                Network.prototype.openCluster = function() {
                    return this.clustering.openCluster.apply(this.clustering, arguments);
                };
                Network.prototype.cluster = function() {
                    return this.clustering.cluster.apply(this.clustering, arguments);
                };
                Network.prototype.getNodesInCluster = function() {
                    return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
                };
                Network.prototype.clusterByConnection = function() {
                    return this.clustering.clusterByConnection.apply(this.clustering, arguments);
                };
                Network.prototype.clusterByHubsize = function() {
                    return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
                };
                Network.prototype.clusterOutliers = function() {
                    return this.clustering.clusterOutliers.apply(this.clustering, arguments);
                };
                Network.prototype.getSeed = function() {
                    return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
                };
                Network.prototype.enableEditMode = function() {
                    return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
                };
                Network.prototype.disableEditMode = function() {
                    return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
                };
                Network.prototype.addNodeMode = function() {
                    return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
                };
                Network.prototype.editNode = function() {
                    return this.manipulation.editNode.apply(this.manipulation, arguments);
                };
                Network.prototype.editNodeMode = function() {
                    console.log("Deprecated: Please use editNode instead of editNodeMode.");
                    return this.manipulation.editNode.apply(this.manipulation, arguments);
                };
                Network.prototype.addEdgeMode = function() {
                    return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
                };
                Network.prototype.editEdgeMode = function() {
                    return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
                };
                Network.prototype.deleteSelected = function() {
                    return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
                };
                Network.prototype.getPositions = function() {
                    return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
                };
                Network.prototype.storePositions = function() {
                    return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
                };
                Network.prototype.moveNode = function() {
                    return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
                };
                Network.prototype.getBoundingBox = function() {
                    return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
                };
                Network.prototype.getConnectedNodes = function(objectId) {
                    if (this.body.nodes[objectId] !== undefined) {
                        return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
                    } else {
                        return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
                    }
                };
                Network.prototype.getConnectedEdges = function() {
                    return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
                };
                Network.prototype.startSimulation = function() {
                    return this.physics.startSimulation.apply(this.physics, arguments);
                };
                Network.prototype.stopSimulation = function() {
                    return this.physics.stopSimulation.apply(this.physics, arguments);
                };
                Network.prototype.stabilize = function() {
                    return this.physics.stabilize.apply(this.physics, arguments);
                };
                Network.prototype.getSelection = function() {
                    return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
                };
                Network.prototype.setSelection = function() {
                    return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
                };
                Network.prototype.getSelectedNodes = function() {
                    return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);
                };
                Network.prototype.getSelectedEdges = function() {
                    return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);
                };
                Network.prototype.getNodeAt = function() {
                    var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
                    if (node !== undefined && node.id !== undefined) {
                        return node.id;
                    }
                    return node;
                };
                Network.prototype.getEdgeAt = function() {
                    var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
                    if (edge !== undefined && edge.id !== undefined) {
                        return edge.id;
                    }
                    return edge;
                };
                Network.prototype.selectNodes = function() {
                    return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
                };
                Network.prototype.selectEdges = function() {
                    return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
                };
                Network.prototype.unselectAll = function() {
                    this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
                    this.redraw();
                };
                Network.prototype.redraw = function() {
                    return this.renderer.redraw.apply(this.renderer, arguments);
                };
                Network.prototype.getScale = function() {
                    return this.view.getScale.apply(this.view, arguments);
                };
                Network.prototype.getViewPosition = function() {
                    return this.view.getViewPosition.apply(this.view, arguments);
                };
                Network.prototype.fit = function() {
                    return this.view.fit.apply(this.view, arguments);
                };
                Network.prototype.moveTo = function() {
                    return this.view.moveTo.apply(this.view, arguments);
                };
                Network.prototype.focus = function() {
                    return this.view.focus.apply(this.view, arguments);
                };
                Network.prototype.releaseNode = function() {
                    return this.view.releaseNode.apply(this.view, arguments);
                };
                Network.prototype.getOptionsFromConfigurator = function() {
                    var options = {};
                    if (this.configurator) {
                        options = this.configurator.getOptions.apply(this.configurator);
                    }
                    return options;
                };

                module.exports = Network;

                /***/
            }),
            /* 160 */
            /***/
            (function(module, exports) {

                'use strict';

                /**
                 * Canvas shapes used by Network
                 */
                if (typeof CanvasRenderingContext2D !== 'undefined') {

                    /**
                     * Draw a circle shape
                     */
                    CanvasRenderingContext2D.prototype.circle = function(x, y, r) {
                        this.beginPath();
                        this.arc(x, y, r, 0, 2 * Math.PI, false);
                        this.closePath();
                    };

                    /**
                     * Draw a square shape
                     * @param {Number} x horizontal center
                     * @param {Number} y vertical center
                     * @param {Number} r   size, width and height of the square
                     */
                    CanvasRenderingContext2D.prototype.square = function(x, y, r) {
                        this.beginPath();
                        this.rect(x - r, y - r, r * 2, r * 2);
                        this.closePath();
                    };

                    /**
                     * Draw a triangle shape
                     * @param {Number} x horizontal center
                     * @param {Number} y vertical center
                     * @param {Number} r   radius, half the length of the sides of the triangle
                     */
                    CanvasRenderingContext2D.prototype.triangle = function(x, y, r) {
                        // http://en.wikipedia.org/wiki/Equilateral_triangle
                        this.beginPath();

                        // the change in radius and the offset is here to center the shape
                        r *= 1.15;
                        y += 0.275 * r;

                        var s = r * 2;
                        var s2 = s / 2;
                        var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
                        var h = Math.sqrt(s * s - s2 * s2); // height


                        this.moveTo(x, y - (h - ir));
                        this.lineTo(x + s2, y + ir);
                        this.lineTo(x - s2, y + ir);
                        this.lineTo(x, y - (h - ir));
                        this.closePath();
                    };

                    /**
                     * Draw a triangle shape in downward orientation
                     * @param {Number} x horizontal center
                     * @param {Number} y vertical center
                     * @param {Number} r radius
                     */
                    CanvasRenderingContext2D.prototype.triangleDown = function(x, y, r) {
                        // http://en.wikipedia.org/wiki/Equilateral_triangle
                        this.beginPath();

                        // the change in radius and the offset is here to center the shape
                        r *= 1.15;
                        y -= 0.275 * r;

                        var s = r * 2;
                        var s2 = s / 2;
                        var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
                        var h = Math.sqrt(s * s - s2 * s2); // height

                        this.moveTo(x, y + (h - ir));
                        this.lineTo(x + s2, y - ir);
                        this.lineTo(x - s2, y - ir);
                        this.lineTo(x, y + (h - ir));
                        this.closePath();
                    };

                    /**
                     * Draw a star shape, a star with 5 points
                     * @param {Number} x horizontal center
                     * @param {Number} y vertical center
                     * @param {Number} r   radius, half the length of the sides of the triangle
                     */
                    CanvasRenderingContext2D.prototype.star = function(x, y, r) {
                        // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
                        this.beginPath();

                        // the change in radius and the offset is here to center the shape
                        r *= 0.82;
                        y += 0.1 * r;

                        for (var n = 0; n < 10; n++) {
                            var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
                            this.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
                        }

                        this.closePath();
                    };

                    /**
                     * Draw a Diamond shape
                     * @param {Number} x horizontal center
                     * @param {Number} y vertical center
                     * @param {Number} r   radius, half the length of the sides of the triangle
                     */
                    CanvasRenderingContext2D.prototype.diamond = function(x, y, r) {
                        // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
                        this.beginPath();

                        this.lineTo(x, y + r);
                        this.lineTo(x + r, y);
                        this.lineTo(x, y - r);
                        this.lineTo(x - r, y);

                        this.closePath();
                    };

                    /**
                     * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
                     */
                    CanvasRenderingContext2D.prototype.roundRect = function(x, y, w, h, r) {
                        var r2d = Math.PI / 180;
                        if (w - 2 * r < 0) {
                            r = w / 2;
                        } //ensure that the radius isn't too large for x
                        if (h - 2 * r < 0) {
                            r = h / 2;
                        } //ensure that the radius isn't too large for y
                        this.beginPath();
                        this.moveTo(x + r, y);
                        this.lineTo(x + w - r, y);
                        this.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
                        this.lineTo(x + w, y + h - r);
                        this.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
                        this.lineTo(x + r, y + h);
                        this.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
                        this.lineTo(x, y + r);
                        this.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
                        this.closePath();
                    };

                    /**
                     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
                     *
                     * Postfix '_vis' added to discern it from standard method ellipse().
                     */
                    CanvasRenderingContext2D.prototype.ellipse_vis = function(x, y, w, h) {
                        var kappa = .5522848,
                            ox = w / 2 * kappa,
                            // control point offset horizontal
                            oy = h / 2 * kappa,
                            // control point offset vertical
                            xe = x + w,
                            // x-end
                            ye = y + h,
                            // y-end
                            xm = x + w / 2,
                            // x-middle
                            ym = y + h / 2; // y-middle

                        this.beginPath();
                        this.moveTo(x, ym);
                        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                        this.closePath();
                    };

                    /**
                     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
                     */
                    CanvasRenderingContext2D.prototype.database = function(x, y, w, h) {
                        var f = 1 / 3;
                        var wEllipse = w;
                        var hEllipse = h * f;

                        var kappa = .5522848,
                            ox = wEllipse / 2 * kappa,
                            // control point offset horizontal
                            oy = hEllipse / 2 * kappa,
                            // control point offset vertical
                            xe = x + wEllipse,
                            // x-end
                            ye = y + hEllipse,
                            // y-end
                            xm = x + wEllipse / 2,
                            // x-middle
                            ym = y + hEllipse / 2,
                            // y-middle
                            ymb = y + (h - hEllipse / 2),
                            // y-midlle, bottom ellipse
                            yeb = y + h; // y-end, bottom ellipse

                        this.beginPath();
                        this.moveTo(xe, ym);

                        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

                        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);

                        this.lineTo(xe, ymb);

                        this.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
                        this.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);

                        this.lineTo(x, ym);
                    };

                    /**
                     * Draw an arrow at the end of a line with the given angle.
                     */
                    CanvasRenderingContext2D.prototype.arrowEndpoint = function(x, y, angle, length) {
                        // tail
                        var xt = x - length * Math.cos(angle);
                        var yt = y - length * Math.sin(angle);

                        // inner tail
                        var xi = x - length * 0.9 * Math.cos(angle);
                        var yi = y - length * 0.9 * Math.sin(angle);

                        // left
                        var xl = xt + length / 3 * Math.cos(angle + 0.5 * Math.PI);
                        var yl = yt + length / 3 * Math.sin(angle + 0.5 * Math.PI);

                        // right
                        var xr = xt + length / 3 * Math.cos(angle - 0.5 * Math.PI);
                        var yr = yt + length / 3 * Math.sin(angle - 0.5 * Math.PI);

                        this.beginPath();
                        this.moveTo(x, y);
                        this.lineTo(xl, yl);
                        this.lineTo(xi, yi);
                        this.lineTo(xr, yr);
                        this.closePath();
                    };

                    /**
                     * Draw an circle an the end of an line with the given angle.
                     */
                    CanvasRenderingContext2D.prototype.circleEndpoint = function(x, y, angle, length) {
                        var radius = length * 0.4;
                        var xc = x - radius * Math.cos(angle);
                        var yc = y - radius * Math.sin(angle);
                        this.circle(xc, yc, radius);
                    };

                    /**
                     * Sets up the dashedLine functionality for drawing
                     * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
                     * @author David Jordan
                     * @date 2012-08-08
                     */
                    CanvasRenderingContext2D.prototype.dashedLine = function(x, y, x2, y2, pattern) {
                        this.beginPath();
                        this.moveTo(x, y);

                        var patternLength = pattern.length;
                        var dx = x2 - x;
                        var dy = y2 - y;
                        var slope = dy / dx;
                        var distRemaining = Math.sqrt(dx * dx + dy * dy);
                        var patternIndex = 0;
                        var draw = true;
                        var xStep = 0;
                        var dashLength = pattern[0];

                        while (distRemaining >= 0.1) {
                            dashLength = pattern[patternIndex++ % patternLength];
                            if (dashLength > distRemaining) {
                                dashLength = distRemaining;
                            }

                            xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
                            xStep = dx < 0 ? -xStep : xStep;
                            x += xStep;
                            y += slope * xStep;

                            if (draw === true) {
                                this.lineTo(x, y);
                            } else {
                                this.moveTo(x, y);
                            }

                            distRemaining -= dashLength;
                            draw = !draw;
                        }
                    };
                }

                /***/
            }),
            /* 161 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                /**
                 * Parse a text source containing data in DOT language into a JSON object.
                 * The object contains two lists: one with nodes and one with edges.
                 *
                 * DOT language reference: http://www.graphviz.org/doc/info/lang.html
                 *
                 * DOT language attributes: http://graphviz.org/content/attrs
                 *
                 * @param {String} data     Text containing a graph in DOT-notation
                 * @return {Object} graph   An object containing two parameters:
                 *                          {Object[]} nodes
                 *                          {Object[]} edges
                 */
                function parseDOT(data) {
                    dot = data;
                    return parseGraph();
                }

                // mapping of attributes from DOT (the keys) to vis.js (the values)
                var NODE_ATTR_MAPPING = {
                    'fontsize': 'font.size',
                    'fontcolor': 'font.color',
                    'labelfontcolor': 'font.color',
                    'fontname': 'font.face',
                    'color': ['color.border', 'color.background'],
                    'fillcolor': 'color.background',
                    'tooltip': 'title',
                    'labeltooltip': 'title'
                };
                var EDGE_ATTR_MAPPING = (0, _create2['default'])(NODE_ATTR_MAPPING);
                EDGE_ATTR_MAPPING.color = 'color.color';

                // token types enumeration
                var TOKENTYPE = {
                    NULL: 0,
                    DELIMITER: 1,
                    IDENTIFIER: 2,
                    UNKNOWN: 3
                };

                // map with all delimiters
                var DELIMITERS = {
                    '{': true,
                    '}': true,
                    '[': true,
                    ']': true,
                    ';': true,
                    '=': true,
                    ',': true,

                    '->': true,
                    '--': true
                };

                var dot = ''; // current dot file
                var index = 0; // current index in dot file
                var c = ''; // current token character in expr
                var token = ''; // current token
                var tokenType = TOKENTYPE.NULL; // type of the token

                /**
                 * Get the first character from the dot file.
                 * The character is stored into the char c. If the end of the dot file is
                 * reached, the function puts an empty string in c.
                 */
                function first() {
                    index = 0;
                    c = dot.charAt(0);
                }

                /**
                 * Get the next character from the dot file.
                 * The character is stored into the char c. If the end of the dot file is
                 * reached, the function puts an empty string in c.
                 */
                function next() {
                    index++;
                    c = dot.charAt(index);
                }

                /**
                 * Preview the next character from the dot file.
                 * @return {String} cNext
                 */
                function nextPreview() {
                    return dot.charAt(index + 1);
                }

                /**
                 * Test whether given character is alphabetic or numeric
                 * @param {String} c
                 * @return {Boolean} isAlphaNumeric
                 */
                var regexAlphaNumeric = /[a-zA-Z_0-9.:#]/;

                function isAlphaNumeric(c) {
                    return regexAlphaNumeric.test(c);
                }

                /**
                 * Merge all options of object b into object b
                 * @param {Object} a
                 * @param {Object} b
                 * @return {Object} a
                 */
                function merge(a, b) {
                    if (!a) {
                        a = {};
                    }

                    if (b) {
                        for (var name in b) {
                            if (b.hasOwnProperty(name)) {
                                a[name] = b[name];
                            }
                        }
                    }
                    return a;
                }

                /**
                 * Set a value in an object, where the provided parameter name can be a
                 * path with nested parameters. For example:
                 *
                 *     var obj = {a: 2};
                 *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}
                 *
                 * @param {Object} obj
                 * @param {String} path  A parameter name or dot-separated parameter path,
                 *                      like "color.highlight.border".
                 * @param {*} value
                 */
                function setValue(obj, path, value) {
                    var keys = path.split('.');
                    var o = obj;
                    while (keys.length) {
                        var key = keys.shift();
                        if (keys.length) {
                            // this isn't the end point
                            if (!o[key]) {
                                o[key] = {};
                            }
                            o = o[key];
                        } else {
                            // this is the end point
                            o[key] = value;
                        }
                    }
                }

                /**
                 * Add a node to a graph object. If there is already a node with
                 * the same id, their attributes will be merged.
                 * @param {Object} graph
                 * @param {Object} node
                 */
                function addNode(graph, node) {
                    var i, len;
                    var current = null;

                    // find root graph (in case of subgraph)
                    var graphs = [graph]; // list with all graphs from current graph to root graph
                    var root = graph;
                    while (root.parent) {
                        graphs.push(root.parent);
                        root = root.parent;
                    }

                    // find existing node (at root level) by its id
                    if (root.nodes) {
                        for (i = 0, len = root.nodes.length; i < len; i++) {
                            if (node.id === root.nodes[i].id) {
                                current = root.nodes[i];
                                break;
                            }
                        }
                    }

                    if (!current) {
                        // this is a new node
                        current = {
                            id: node.id
                        };
                        if (graph.node) {
                            // clone default attributes
                            current.attr = merge(current.attr, graph.node);
                        }
                    }

                    // add node to this (sub)graph and all its parent graphs
                    for (i = graphs.length - 1; i >= 0; i--) {
                        var g = graphs[i];

                        if (!g.nodes) {
                            g.nodes = [];
                        }
                        if (g.nodes.indexOf(current) === -1) {
                            g.nodes.push(current);
                        }
                    }

                    // merge attributes
                    if (node.attr) {
                        current.attr = merge(current.attr, node.attr);
                    }
                }

                /**
                 * Add an edge to a graph object
                 * @param {Object} graph
                 * @param {Object} edge
                 */
                function addEdge(graph, edge) {
                    if (!graph.edges) {
                        graph.edges = [];
                    }
                    graph.edges.push(edge);
                    if (graph.edge) {
                        var attr = merge({}, graph.edge); // clone default attributes
                        edge.attr = merge(attr, edge.attr); // merge attributes
                    }
                }

                /**
                 * Create an edge to a graph object
                 * @param {Object} graph
                 * @param {String | Number | Object} from
                 * @param {String | Number | Object} to
                 * @param {String} type
                 * @param {Object | null} attr
                 * @return {Object} edge
                 */
                function createEdge(graph, from, to, type, attr) {
                    var edge = {
                        from: from,
                        to: to,
                        type: type
                    };

                    if (graph.edge) {
                        edge.attr = merge({}, graph.edge); // clone default attributes
                    }
                    edge.attr = merge(edge.attr || {}, attr); // merge attributes

                    return edge;
                }

                /**
                 * Get next token in the current dot file.
                 * The token and token type are available as token and tokenType
                 */
                function getToken() {
                    tokenType = TOKENTYPE.NULL;
                    token = '';

                    // skip over whitespaces
                    while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
                        // space, tab, enter
                        next();
                    }

                    do {
                        var isComment = false;

                        // skip comment
                        if (c === '#') {
                            // find the previous non-space character
                            var i = index - 1;
                            while (dot.charAt(i) === ' ' || dot.charAt(i) === '\t') {
                                i--;
                            }
                            if (dot.charAt(i) === '\n' || dot.charAt(i) === '') {
                                // the # is at the start of a line, this is indeed a line comment
                                while (c != '' && c != '\n') {
                                    next();
                                }
                                isComment = true;
                            }
                        }
                        if (c === '/' && nextPreview() === '/') {
                            // skip line comment
                            while (c != '' && c != '\n') {
                                next();
                            }
                            isComment = true;
                        }
                        if (c === '/' && nextPreview() === '*') {
                            // skip block comment
                            while (c != '') {
                                if (c === '*' && nextPreview() === '/') {
                                    // end of block comment found. skip these last two characters
                                    next();
                                    next();
                                    break;
                                } else {
                                    next();
                                }
                            }
                            isComment = true;
                        }

                        // skip over whitespaces
                        while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
                            // space, tab, enter
                            next();
                        }
                    } while (isComment);

                    // check for end of dot file
                    if (c === '') {
                        // token is still empty
                        tokenType = TOKENTYPE.DELIMITER;
                        return;
                    }

                    // check for delimiters consisting of 2 characters
                    var c2 = c + nextPreview();
                    if (DELIMITERS[c2]) {
                        tokenType = TOKENTYPE.DELIMITER;
                        token = c2;
                        next();
                        next();
                        return;
                    }

                    // check for delimiters consisting of 1 character
                    if (DELIMITERS[c]) {
                        tokenType = TOKENTYPE.DELIMITER;
                        token = c;
                        next();
                        return;
                    }

                    // check for an identifier (number or string)
                    // TODO: more precise parsing of numbers/strings (and the port separator ':')
                    if (isAlphaNumeric(c) || c === '-') {
                        token += c;
                        next();

                        while (isAlphaNumeric(c)) {
                            token += c;
                            next();
                        }
                        if (token === 'false') {
                            token = false; // convert to boolean
                        } else if (token === 'true') {
                            token = true; // convert to boolean
                        } else if (!isNaN(Number(token))) {
                            token = Number(token); // convert to number
                        }
                        tokenType = TOKENTYPE.IDENTIFIER;
                        return;
                    }

                    // check for a string enclosed by double quotes
                    if (c === '"') {
                        next();
                        while (c != '' && (c != '"' || c === '"' && nextPreview() === '"')) {
                            token += c;
                            if (c === '"') {
                                // skip the escape character
                                next();
                            }
                            next();
                        }
                        if (c != '"') {
                            throw newSyntaxError('End of string " expected');
                        }
                        next();
                        tokenType = TOKENTYPE.IDENTIFIER;
                        return;
                    }

                    // something unknown is found, wrong characters, a syntax error
                    tokenType = TOKENTYPE.UNKNOWN;
                    while (c != '') {
                        token += c;
                        next();
                    }
                    throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
                }

                /**
                 * Parse a graph.
                 * @returns {Object} graph
                 */
                function parseGraph() {
                    var graph = {};

                    first();
                    getToken();

                    // optional strict keyword
                    if (token === 'strict') {
                        graph.strict = true;
                        getToken();
                    }

                    // graph or digraph keyword
                    if (token === 'graph' || token === 'digraph') {
                        graph.type = token;
                        getToken();
                    }

                    // optional graph id
                    if (tokenType === TOKENTYPE.IDENTIFIER) {
                        graph.id = token;
                        getToken();
                    }

                    // open angle bracket
                    if (token != '{') {
                        throw newSyntaxError('Angle bracket { expected');
                    }
                    getToken();

                    // statements
                    parseStatements(graph);

                    // close angle bracket
                    if (token != '}') {
                        throw newSyntaxError('Angle bracket } expected');
                    }
                    getToken();

                    // end of file
                    if (token !== '') {
                        throw newSyntaxError('End of file expected');
                    }
                    getToken();

                    // remove temporary default options
                    delete graph.node;
                    delete graph.edge;
                    delete graph.graph;

                    return graph;
                }

                /**
                 * Parse a list with statements.
                 * @param {Object} graph
                 */
                function parseStatements(graph) {
                    while (token !== '' && token != '}') {
                        parseStatement(graph);
                        if (token === ';') {
                            getToken();
                        }
                    }
                }

                /**
                 * Parse a single statement. Can be a an attribute statement, node
                 * statement, a series of node statements and edge statements, or a
                 * parameter.
                 * @param {Object} graph
                 */
                function parseStatement(graph) {
                    // parse subgraph
                    var subgraph = parseSubgraph(graph);
                    if (subgraph) {
                        // edge statements
                        parseEdge(graph, subgraph);

                        return;
                    }

                    // parse an attribute statement
                    var attr = parseAttributeStatement(graph);
                    if (attr) {
                        return;
                    }

                    // parse node
                    if (tokenType != TOKENTYPE.IDENTIFIER) {
                        throw newSyntaxError('Identifier expected');
                    }
                    var id = token; // id can be a string or a number
                    getToken();

                    if (token === '=') {
                        // id statement
                        getToken();
                        if (tokenType != TOKENTYPE.IDENTIFIER) {
                            throw newSyntaxError('Identifier expected');
                        }
                        graph[id] = token;
                        getToken();
                        // TODO: implement comma separated list with "a_list: ID=ID [','] [a_list] "
                    } else {
                        parseNodeStatement(graph, id);
                    }
                }

                /**
                 * Parse a subgraph
                 * @param {Object} graph    parent graph object
                 * @return {Object | null} subgraph
                 */
                function parseSubgraph(graph) {
                    var subgraph = null;

                    // optional subgraph keyword
                    if (token === 'subgraph') {
                        subgraph = {};
                        subgraph.type = 'subgraph';
                        getToken();

                        // optional graph id
                        if (tokenType === TOKENTYPE.IDENTIFIER) {
                            subgraph.id = token;
                            getToken();
                        }
                    }

                    // open angle bracket
                    if (token === '{') {
                        getToken();

                        if (!subgraph) {
                            subgraph = {};
                        }
                        subgraph.parent = graph;
                        subgraph.node = graph.node;
                        subgraph.edge = graph.edge;
                        subgraph.graph = graph.graph;

                        // statements
                        parseStatements(subgraph);

                        // close angle bracket
                        if (token != '}') {
                            throw newSyntaxError('Angle bracket } expected');
                        }
                        getToken();

                        // remove temporary default options
                        delete subgraph.node;
                        delete subgraph.edge;
                        delete subgraph.graph;
                        delete subgraph.parent;

                        // register at the parent graph
                        if (!graph.subgraphs) {
                            graph.subgraphs = [];
                        }
                        graph.subgraphs.push(subgraph);
                    }

                    return subgraph;
                }

                /**
                 * parse an attribute statement like "node [shape=circle fontSize=16]".
                 * Available keywords are 'node', 'edge', 'graph'.
                 * The previous list with default attributes will be replaced
                 * @param {Object} graph
                 * @returns {String | null} keyword Returns the name of the parsed attribute
                 *                                  (node, edge, graph), or null if nothing
                 *                                  is parsed.
                 */
                function parseAttributeStatement(graph) {
                    // attribute statements
                    if (token === 'node') {
                        getToken();

                        // node attributes
                        graph.node = parseAttributeList();
                        return 'node';
                    } else if (token === 'edge') {
                        getToken();

                        // edge attributes
                        graph.edge = parseAttributeList();
                        return 'edge';
                    } else if (token === 'graph') {
                        getToken();

                        // graph attributes
                        graph.graph = parseAttributeList();
                        return 'graph';
                    }

                    return null;
                }

                /**
                 * parse a node statement
                 * @param {Object} graph
                 * @param {String | Number} id
                 */
                function parseNodeStatement(graph, id) {
                    // node statement
                    var node = {
                        id: id
                    };
                    var attr = parseAttributeList();
                    if (attr) {
                        node.attr = attr;
                    }
                    addNode(graph, node);

                    // edge statements
                    parseEdge(graph, id);
                }

                /**
                 * Parse an edge or a series of edges
                 * @param {Object} graph
                 * @param {String | Number} from        Id of the from node
                 */
                function parseEdge(graph, from) {
                    while (token === '->' || token === '--') {
                        var to;
                        var type = token;
                        getToken();

                        var subgraph = parseSubgraph(graph);
                        if (subgraph) {
                            to = subgraph;
                        } else {
                            if (tokenType != TOKENTYPE.IDENTIFIER) {
                                throw newSyntaxError('Identifier or subgraph expected');
                            }
                            to = token;
                            addNode(graph, {
                                id: to
                            });
                            getToken();
                        }

                        // parse edge attributes
                        var attr = parseAttributeList();

                        // create edge
                        var edge = createEdge(graph, from, to, type, attr);
                        addEdge(graph, edge);
                        from = to;
                    }
                }

                /**
                 * Parse a set with attributes,
                 * for example [label="1.000", shape=solid]
                 * @return {Object | null} attr
                 */
                function parseAttributeList() {
                    var attr = null;

                    while (token === '[') {
                        getToken();
                        attr = {};
                        while (token !== '' && token != ']') {
                            if (tokenType != TOKENTYPE.IDENTIFIER) {
                                throw newSyntaxError('Attribute name expected');
                            }
                            var name = token;

                            getToken();
                            if (token != '=') {
                                throw newSyntaxError('Equal sign = expected');
                            }
                            getToken();

                            if (tokenType != TOKENTYPE.IDENTIFIER) {
                                throw newSyntaxError('Attribute value expected');
                            }
                            var value = token;
                            setValue(attr, name, value); // name can be a path

                            getToken();
                            if (token == ',') {
                                getToken();
                            }
                        }

                        if (token != ']') {
                            throw newSyntaxError('Bracket ] expected');
                        }
                        getToken();
                    }

                    return attr;
                }

                /**
                 * Create a syntax error with extra information on current token and index.
                 * @param {String} message
                 * @returns {SyntaxError} err
                 */
                function newSyntaxError(message) {
                    return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ')');
                }

                /**
                 * Chop off text after a maximum length
                 * @param {String} text
                 * @param {Number} maxLength
                 * @returns {String}
                 */
                function chop(text, maxLength) {
                    return text.length <= maxLength ? text : text.substr(0, 27) + '...';
                }

                /**
                 * Execute a function fn for each pair of elements in two arrays
                 * @param {Array | *} array1
                 * @param {Array | *} array2
                 * @param {function} fn
                 */
                function forEach2(array1, array2, fn) {
                    if (Array.isArray(array1)) {
                        array1.forEach(function(elem1) {
                            if (Array.isArray(array2)) {
                                array2.forEach(function(elem2) {
                                    fn(elem1, elem2);
                                });
                            } else {
                                fn(elem1, array2);
                            }
                        });
                    } else {
                        if (Array.isArray(array2)) {
                            array2.forEach(function(elem2) {
                                fn(array1, elem2);
                            });
                        } else {
                            fn(array1, array2);
                        }
                    }
                }

                /**
                 * Set a nested property on an object
                 * When nested objects are missing, they will be created.
                 * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}
                 * @param {Object} object
                 * @param {string} path   A dot separated string like 'font.color'
                 * @param {*} value       Value for the property
                 * @return {Object} Returns the original object, allows for chaining.
                 */
                function setProp(object, path, value) {
                    var names = path.split('.');
                    var prop = names.pop();

                    // traverse over the nested objects
                    var obj = object;
                    for (var i = 0; i < names.length; i++) {
                        var name = names[i];
                        if (!(name in obj)) {
                            obj[name] = {};
                        }
                        obj = obj[name];
                    }

                    // set the property value
                    obj[prop] = value;

                    return object;
                }

                /**
                 * Convert an object with DOT attributes to their vis.js equivalents.
                 * @param {Object} attr     Object with DOT attributes
                 * @param {Object} mapping
                 * @return {Object}         Returns an object with vis.js attributes
                 */
                function convertAttr(attr, mapping) {
                    var converted = {};

                    for (var prop in attr) {
                        if (attr.hasOwnProperty(prop)) {
                            var visProp = mapping[prop];
                            if (Array.isArray(visProp)) {
                                visProp.forEach(function(visPropI) {
                                    setProp(converted, visPropI, attr[prop]);
                                });
                            } else if (typeof visProp === 'string') {
                                setProp(converted, visProp, attr[prop]);
                            } else {
                                setProp(converted, prop, attr[prop]);
                            }
                        }
                    }

                    return converted;
                }

                /**
                 * Convert a string containing a graph in DOT language into a map containing
                 * with nodes and edges in the format of graph.
                 * @param {String} data         Text containing a graph in DOT-notation
                 * @return {Object} graphData
                 */
                function DOTToGraph(data) {
                    // parse the DOT file
                    var dotData = parseDOT(data);
                    var graphData = {
                        nodes: [],
                        edges: [],
                        options: {}
                    };

                    // copy the nodes
                    if (dotData.nodes) {
                        dotData.nodes.forEach(function(dotNode) {
                            var graphNode = {
                                id: dotNode.id,
                                label: String(dotNode.label || dotNode.id)
                            };
                            merge(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
                            if (graphNode.image) {
                                graphNode.shape = 'image';
                            }
                            graphData.nodes.push(graphNode);
                        });
                    }

                    // copy the edges
                    if (dotData.edges) {
                        /**
                         * Convert an edge in DOT format to an edge with VisGraph format
                         * @param {Object} dotEdge
                         * @returns {Object} graphEdge
                         */
                        var convertEdge = function convertEdge(dotEdge) {
                            var graphEdge = {
                                from: dotEdge.from,
                                to: dotEdge.to
                            };
                            merge(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
                            graphEdge.arrows = dotEdge.type === '->' ? 'to' : undefined;

                            return graphEdge;
                        };

                        dotData.edges.forEach(function(dotEdge) {
                            var from, to;
                            if (dotEdge.from instanceof Object) {
                                from = dotEdge.from.nodes;
                            } else {
                                from = {
                                    id: dotEdge.from
                                };
                            }

                            // TODO: support of solid/dotted/dashed edges (attr = 'style')
                            // TODO: support for attributes 'dir' and 'arrowhead' (edge arrows)

                            if (dotEdge.to instanceof Object) {
                                to = dotEdge.to.nodes;
                            } else {
                                to = {
                                    id: dotEdge.to
                                };
                            }

                            if (dotEdge.from instanceof Object && dotEdge.from.edges) {
                                dotEdge.from.edges.forEach(function(subEdge) {
                                    var graphEdge = convertEdge(subEdge);
                                    graphData.edges.push(graphEdge);
                                });
                            }

                            forEach2(from, to, function(from, to) {
                                var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);
                                var graphEdge = convertEdge(subEdge);
                                graphData.edges.push(graphEdge);
                            });

                            if (dotEdge.to instanceof Object && dotEdge.to.edges) {
                                dotEdge.to.edges.forEach(function(subEdge) {
                                    var graphEdge = convertEdge(subEdge);
                                    graphData.edges.push(graphEdge);
                                });
                            }
                        });
                    }

                    // copy the options
                    if (dotData.attr) {
                        graphData.options = dotData.attr;
                    }

                    return graphData;
                }

                // exports
                exports.parseDOT = parseDOT;
                exports.DOTToGraph = DOTToGraph;

                /***/
            }),
            /* 162 */
            /***/
            (function(module, exports) {

                'use strict';

                function parseGephi(gephiJSON, optionsObj) {
                    var edges = [];
                    var nodes = [];
                    var options = {
                        edges: {
                            inheritColor: false
                        },
                        nodes: {
                            fixed: false,
                            parseColor: false
                        }
                    };

                    if (optionsObj !== undefined) {
                        if (optionsObj.fixed !== undefined) {
                            options.nodes.fixed = optionsObj.fixed;
                        }
                        if (optionsObj.parseColor !== undefined) {
                            options.nodes.parseColor = optionsObj.parseColor;
                        }
                        if (optionsObj.inheritColor !== undefined) {
                            options.edges.inheritColor = optionsObj.inheritColor;
                        }
                    }

                    var gEdges = gephiJSON.edges;
                    var gNodes = gephiJSON.nodes;
                    for (var i = 0; i < gEdges.length; i++) {
                        var edge = {};
                        var gEdge = gEdges[i];
                        edge['id'] = gEdge.id;
                        edge['from'] = gEdge.source;
                        edge['to'] = gEdge.target;
                        edge['attributes'] = gEdge.attributes;
                        edge['label'] = gEdge.label;
                        edge['title'] = gEdge.attributes !== undefined ? gEdge.attributes.title : undefined;
                        if (gEdge['type'] === 'Directed') {
                            edge['arrows'] = 'to';
                        }
                        //    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;
                        //    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;
                        if (gEdge.color && options.inheritColor === false) {
                            edge['color'] = gEdge.color;
                        }
                        edges.push(edge);
                    }

                    for (var i = 0; i < gNodes.length; i++) {
                        var node = {};
                        var gNode = gNodes[i];
                        node['id'] = gNode.id;
                        node['attributes'] = gNode.attributes;
                        node['x'] = gNode.x;
                        node['y'] = gNode.y;
                        node['label'] = gNode.label;
                        node['title'] = gNode.attributes !== undefined ? gNode.attributes.title : gNode.title;
                        if (options.nodes.parseColor === true) {
                            node['color'] = gNode.color;
                        } else {
                            node['color'] = gNode.color !== undefined ? { background: gNode.color, border: gNode.color, highlight: { background: gNode.color, border: gNode.color }, hover: { background: gNode.color, border: gNode.color } } : undefined;
                        }
                        node['size'] = gNode.size;
                        node['fixed'] = options.nodes.fixed && gNode.x !== undefined && gNode.y !== undefined;
                        nodes.push(node);
                    }

                    return { nodes: nodes, edges: edges };
                }

                exports.parseGephi = parseGephi;

                /***/
            }),
            /* 163 */
            /***/
            (function(module, exports) {

                'use strict';

                // English
                exports['en'] = {
                    edit: 'Edit',
                    del: 'Delete selected',
                    back: 'Back',
                    addNode: 'Add Node',
                    addEdge: 'Add Edge',
                    editNode: 'Edit Node',
                    editEdge: 'Edit Edge',
                    addDescription: 'Click in an empty space to place a new node.',
                    edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
                    editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
                    createEdgeError: 'Cannot link edges to a cluster.',
                    deleteClusterError: 'Clusters cannot be deleted.',
                    editClusterError: 'Clusters cannot be edited.'
                };
                exports['en_EN'] = exports['en'];
                exports['en_US'] = exports['en'];

                // German
                exports['de'] = {
                    edit: 'Editieren',
                    del: 'L\xF6sche Auswahl',
                    back: 'Zur\xFCck',
                    addNode: 'Knoten hinzuf\xFCgen',
                    addEdge: 'Kante hinzuf\xFCgen',
                    editNode: 'Knoten editieren',
                    editEdge: 'Kante editieren',
                    addDescription: 'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',
                    edgeDescription: 'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',
                    editEdgeDescription: 'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',
                    createEdgeError: 'Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.',
                    deleteClusterError: 'Cluster k\xF6nnen nicht gel\xF6scht werden.',
                    editClusterError: 'Cluster k\xF6nnen nicht editiert werden.'
                };
                exports['de_DE'] = exports['de'];

                // Spanish
                exports['es'] = {
                    edit: 'Editar',
                    del: 'Eliminar selecci\xF3n',
                    back: '\xC1tras',
                    addNode: 'A\xF1adir nodo',
                    addEdge: 'A\xF1adir arista',
                    editNode: 'Editar nodo',
                    editEdge: 'Editar arista',
                    addDescription: 'Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.',
                    edgeDescription: 'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',
                    editEdgeDescription: 'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',
                    createEdgeError: 'No se puede conectar una arista a un grupo.',
                    deleteClusterError: 'No es posible eliminar grupos.',
                    editClusterError: 'No es posible editar grupos.'
                };
                exports['es_ES'] = exports['es'];

                //Italiano
                exports['it'] = {
                    edit: 'Modifica',
                    del: 'Cancella la selezione',
                    back: 'Indietro',
                    addNode: 'Aggiungi un nodo',
                    addEdge: 'Aggiungi un vertice',
                    editNode: 'Modifica il nodo',
                    editEdge: 'Modifica il vertice',
                    addDescription: 'Clicca per aggiungere un nuovo nodo',
                    edgeDescription: 'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',
                    editEdgeDescription: 'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',
                    createEdgeError: 'Non si possono collegare vertici ad un cluster',
                    deleteClusterError: 'I cluster non possono essere cancellati',
                    editClusterError: 'I clusters non possono essere modificati.'
                };
                exports['it_IT'] = exports['it'];

                // Dutch
                exports['nl'] = {
                    edit: 'Wijzigen',
                    del: 'Selectie verwijderen',
                    back: 'Terug',
                    addNode: 'Node toevoegen',
                    addEdge: 'Link toevoegen',
                    editNode: 'Node wijzigen',
                    editEdge: 'Link wijzigen',
                    addDescription: 'Klik op een leeg gebied om een nieuwe node te maken.',
                    edgeDescription: 'Klik op een node en sleep de link naar een andere node om ze te verbinden.',
                    editEdgeDescription: 'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',
                    createEdgeError: 'Kan geen link maken naar een cluster.',
                    deleteClusterError: 'Clusters kunnen niet worden verwijderd.',
                    editClusterError: 'Clusters kunnen niet worden aangepast.'
                };
                exports['nl_NL'] = exports['nl'];
                exports['nl_BE'] = exports['nl'];

                // Portuguese Brazil
                exports['pt-br'] = {
                    edit: 'Editar',
                    del: 'Remover selecionado',
                    back: 'Voltar',
                    addNode: 'Adicionar nó',
                    addEdge: 'Adicionar aresta',
                    editNode: 'Editar nó',
                    editEdge: 'Editar aresta',
                    addDescription: 'Clique em um espaço em branco para adicionar um novo nó',
                    edgeDescription: 'Clique em um nó e arraste a aresta até outro nó para conectá-los',
                    editEdgeDescription: 'Clique nos pontos de controle e os arraste para um nó para conectá-los',
                    createEdgeError: 'Não foi possível linkar arestas a um cluster.',
                    deleteClusterError: 'Clusters não puderam ser removidos.',
                    editClusterError: 'Clusters não puderam ser editados.'
                };
                exports['pt-BR'] = exports['pt-br'];
                exports['pt_BR'] = exports['pt-br'];
                exports['pt_br'] = exports['pt-br'];

                // Russian
                exports['ru'] = {
                    edit: 'Редактировать',
                    del: 'Удалить выбранное',
                    back: 'Назад',
                    addNode: 'Добавить узел',
                    addEdge: 'Добавить ребро',
                    editNode: 'Редактировать узел',
                    editEdge: 'Редактировать ребро',
                    addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
                    edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
                    editEdgeDescription: 'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',
                    createEdgeError: 'Невозможно соединить ребра в кластер.',
                    deleteClusterError: 'Кластеры не могут быть удалены',
                    editClusterError: 'Кластеры недоступны для редактирования.'
                };
                exports['ru_RU'] = exports['ru'];

                /***/
            }),
            /* 164 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _CachedImage = __webpack_require__(165);

                var _CachedImage2 = _interopRequireDefault(_CachedImage);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                /**
                 * @class Images
                 * This class loads images and keeps them stored.
                 */
                var Images = function() {
                    function Images(callback) {
                        (0, _classCallCheck3["default"])(this, Images);

                        this.images = {};
                        this.imageBroken = {};
                        this.callback = callback;
                    }

                    /**
                     * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
                     * @param {string} brokenUrl                Url the broken image to try and load
                     * @return {Image} imageToLoadBrokenUrlOn   The image object
                     */


                    (0, _createClass3["default"])(Images, [{
                        key: "_tryloadBrokenUrl",
                        value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
                            //If these parameters aren't specified then exit the function because nothing constructive can be done
                            if (url === undefined || imageToLoadBrokenUrlOn === undefined) return;
                            if (brokenUrl === undefined) {
                                console.warn("No broken url image defined");
                                return;
                            }

                            //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl
                            imageToLoadBrokenUrlOn.onerror = function() {
                                console.error("Could not load brokenImage:", brokenUrl);
                                // cache item will contain empty image, this should be OK for default
                            };

                            //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image
                            imageToLoadBrokenUrlOn.image.src = brokenUrl;
                        }

                        /**
                         * @return {Image} imageToRedrawWith The images that will be passed to the callback when it is invoked
                         */

                    }, {
                        key: "_redrawWithImage",
                        value: function _redrawWithImage(imageToRedrawWith) {
                            if (this.callback) {
                                this.callback(imageToRedrawWith);
                            }
                        }

                        /**
                         * @param {string} url          Url of the image
                         * @param {string} brokenUrl    Url of an image to use if the url image is not found
                         * @return {Image} img          The image object
                         */

                    }, {
                        key: "load",
                        value: function load(url, brokenUrl, id) {
                            var _this = this;

                            //Try and get the image from the cache, if successful then return the cached image   
                            var cachedImage = this.images[url];
                            if (cachedImage) return cachedImage;

                            //Create a new image
                            var img = new _CachedImage2["default"]();

                            // Need to add to cache here, otherwise final return will spawn different copies of the same image,
                            // Also, there will be multiple loads of the same image.
                            this.images[url] = img;

                            //Subscribe to the event that is raised if the image loads successfully 
                            img.image.onload = function() {
                                // Properly init the cached item and then request a redraw
                                _this._fixImageCoordinates(img.image);
                                img.init();
                                _this._redrawWithImage(img);
                            };

                            //Subscribe to the event that is raised if the image fails to load
                            img.image.onerror = function() {
                                console.error("Could not load image:", url);
                                //Try and load the image specified by the brokenUrl using
                                _this._tryloadBrokenUrl(url, brokenUrl, img);
                            };

                            //Set the source of the image to the url, this is what actually kicks off the loading of the image
                            img.image.src = url;

                            //Return the new image
                            return img;
                        }

                        /**
                         * IE11 fix -- thanks dponch!
                         *
                         * Local helper function
                         *
                         * @private
                         */

                    }, {
                        key: "_fixImageCoordinates",
                        value: function _fixImageCoordinates(imageToCache) {
                            if (imageToCache.width === 0) {
                                document.body.appendChild(imageToCache);
                                imageToCache.width = imageToCache.offsetWidth;
                                imageToCache.height = imageToCache.offsetHeight;
                                document.body.removeChild(imageToCache);
                            }
                        }
                    }]);
                    return Images;
                }();

                exports["default"] = Images;

                /***/
            }),
            /* 165 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                /**
                 * Associates a canvas to a given image, containing a number of renderings
                 * of the image at various sizes.
                 *
                 * This technique is known as 'mipmapping'.
                 *
                 * NOTE: Images can also be of type 'data:svg+xml`. This code also works
                 *       for svg, but the mipmapping may not be necessary.
                 */
                var CachedImage = function() {
                    function CachedImage(image) {
                        (0, _classCallCheck3['default'])(this, CachedImage);

                        this.NUM_ITERATIONS = 4; // Number of items in the coordinates array

                        this.image = new Image();
                        this.canvas = document.createElement('canvas');
                    }

                    /**
                     * Called when the image has been succesfully loaded.
                     */


                    (0, _createClass3['default'])(CachedImage, [{
                        key: 'init',
                        value: function init() {
                            if (this.initialized()) return;

                            var w = this.image.width;
                            var h = this.image.height;

                            // Ease external access
                            this.width = w;
                            this.height = h;

                            // Make canvas as small as possible
                            this.canvas.width = 3 * w / 4;
                            this.canvas.height = h / 2;

                            // Coordinates and sizes of images contained in the canvas
                            // Values per row:  [top x, left y, width, height]
                            this.coordinates = [
                                [0, 0, w / 2, h / 2],
                                [w / 2, 0, w / 4, h / 4],
                                [w / 2, h / 4, w / 8, h / 8],
                                [5 * w / 8, h / 4, w / 16, h / 16]
                            ];

                            this._fillMipMap();
                        }

                        /**
                         * @return {Boolean} true if init() has been called, false otherwise.
                         */

                    }, {
                        key: 'initialized',
                        value: function initialized() {
                            return this.coordinates !== undefined;
                        }

                        /**
                         * Redraw main image in various sizes to the context.
                         *
                         * The rationale behind this is to reduce artefacts due to interpolation
                         * at differing zoom levels.
                         *
                         * Source: http://stackoverflow.com/q/18761404/1223531
                         *
                         * This methods takes the resizing out of the drawing loop, in order to
                         * reduce performance overhead.
                         *
                         * @private
                         */

                    }, {
                        key: '_fillMipMap',
                        value: function _fillMipMap() {
                            var ctx = this.canvas.getContext('2d');

                            // First zoom-level comes from the image
                            var to = this.coordinates[0];
                            ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);

                            // The rest are copy actions internal to the canvas/context
                            for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
                                var from = this.coordinates[iterations - 1];
                                var _to = this.coordinates[iterations];

                                ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], _to[0], _to[1], _to[2], _to[3]);
                            }
                        }

                        /**
                         * Draw the image, using the mipmap if necessary.
                         *
                         * MipMap is only used if param factor > 2; otherwise, original bitmap
                         * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1
                         *
                         * Credits to 'Alex de Mulder' for original implementation.
                         *
                         * ctx    {Context} context on which to draw zoomed image
                         * factor {Float}   scale factor at which to draw
                         */

                    }, {
                        key: 'drawImageAtPosition',
                        value: function drawImageAtPosition(ctx, factor, left, top, width, height) {
                            if (factor > 2 && this.initialized()) {
                                // Determine which zoomed image to use
                                factor *= 0.5;
                                var iterations = 0;
                                while (factor > 2 && iterations < this.NUM_ITERATIONS) {
                                    factor *= 0.5;
                                    iterations += 1;
                                }

                                if (iterations >= this.NUM_ITERATIONS) {
                                    iterations = this.NUM_ITERATIONS - 1;
                                }
                                //console.log("iterations: " + iterations);

                                var from = this.coordinates[iterations];
                                ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);
                            } else if (this._isImageOk()) {
                                // Draw image directly
                                ctx.drawImage(this.image, left, top, width, height);
                            }
                        }

                        /**
                         * Check if image is loaded
                         *
                         * Source: http://stackoverflow.com/a/1977898/1223531
                         *
                         * @private
                         */

                    }, {
                        key: '_isImageOk',
                        value: function _isImageOk(img) {
                            var img = this.image;

                            // During the onload event, IE correctly identifies any images that
                            // weren’t downloaded as not complete. Others should too. Gecko-based
                            // browsers act like NS4 in that they report this incorrectly.
                            if (!img.complete) {
                                return false;
                            }

                            // However, they do have two very useful properties: naturalWidth and
                            // naturalHeight. These give the true size of the image. If it failed
                            // to load, either of these should be zero.

                            if (typeof img.naturalWidth !== "undefined" && img.naturalWidth === 0) {
                                return false;
                            }

                            // No other way of checking: assume it’s ok.
                            return true;
                        }
                    }]);
                    return CachedImage;
                }();

                exports['default'] = CachedImage;

                /***/
            }),
            /* 166 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var util = __webpack_require__(1);

                /**
                 * @class Groups
                 * This class can store groups and options specific for groups.
                 */

                var Groups = function() {
                    function Groups() {
                        (0, _classCallCheck3["default"])(this, Groups);

                        this.clear();
                        this.defaultIndex = 0;
                        this.groupsArray = [];
                        this.groupIndex = 0;

                        this.defaultGroups = [{ border: "#2B7CE9", background: "#97C2FC", highlight: { border: "#2B7CE9", background: "#D2E5FF" }, hover: { border: "#2B7CE9", background: "#D2E5FF" } }, // 0: blue
                            { border: "#FFA500", background: "#FFFF00", highlight: { border: "#FFA500", background: "#FFFFA3" }, hover: { border: "#FFA500", background: "#FFFFA3" } }, // 1: yellow
                            { border: "#FA0A10", background: "#FB7E81", highlight: { border: "#FA0A10", background: "#FFAFB1" }, hover: { border: "#FA0A10", background: "#FFAFB1" } }, // 2: red
                            { border: "#41A906", background: "#7BE141", highlight: { border: "#41A906", background: "#A1EC76" }, hover: { border: "#41A906", background: "#A1EC76" } }, // 3: green
                            { border: "#E129F0", background: "#EB7DF4", highlight: { border: "#E129F0", background: "#F0B3F5" }, hover: { border: "#E129F0", background: "#F0B3F5" } }, // 4: magenta
                            { border: "#7C29F0", background: "#AD85E4", highlight: { border: "#7C29F0", background: "#D3BDF0" }, hover: { border: "#7C29F0", background: "#D3BDF0" } }, // 5: purple
                            { border: "#C37F00", background: "#FFA807", highlight: { border: "#C37F00", background: "#FFCA66" }, hover: { border: "#C37F00", background: "#FFCA66" } }, // 6: orange
                            { border: "#4220FB", background: "#6E6EFD", highlight: { border: "#4220FB", background: "#9B9BFD" }, hover: { border: "#4220FB", background: "#9B9BFD" } }, // 7: darkblue
                            { border: "#FD5A77", background: "#FFC0CB", highlight: { border: "#FD5A77", background: "#FFD1D9" }, hover: { border: "#FD5A77", background: "#FFD1D9" } }, // 8: pink
                            { border: "#4AD63A", background: "#C2FABC", highlight: { border: "#4AD63A", background: "#E6FFE3" }, hover: { border: "#4AD63A", background: "#E6FFE3" } }, // 9: mint

                            { border: "#990000", background: "#EE0000", highlight: { border: "#BB0000", background: "#FF3333" }, hover: { border: "#BB0000", background: "#FF3333" } }, // 10:bright red

                            { border: "#FF6000", background: "#FF6000", highlight: { border: "#FF6000", background: "#FF6000" }, hover: { border: "#FF6000", background: "#FF6000" } }, // 12: real orange
                            { border: "#97C2FC", background: "#2B7CE9", highlight: { border: "#D2E5FF", background: "#2B7CE9" }, hover: { border: "#D2E5FF", background: "#2B7CE9" } }, // 13: blue
                            { border: "#399605", background: "#255C03", highlight: { border: "#399605", background: "#255C03" }, hover: { border: "#399605", background: "#255C03" } }, // 14: green
                            { border: "#B70054", background: "#FF007E", highlight: { border: "#B70054", background: "#FF007E" }, hover: { border: "#B70054", background: "#FF007E" } }, // 15: magenta
                            { border: "#AD85E4", background: "#7C29F0", highlight: { border: "#D3BDF0", background: "#7C29F0" }, hover: { border: "#D3BDF0", background: "#7C29F0" } }, // 16: purple
                            { border: "#4557FA", background: "#000EA1", highlight: { border: "#6E6EFD", background: "#000EA1" }, hover: { border: "#6E6EFD", background: "#000EA1" } }, // 17: darkblue
                            { border: "#FFC0CB", background: "#FD5A77", highlight: { border: "#FFD1D9", background: "#FD5A77" }, hover: { border: "#FFD1D9", background: "#FD5A77" } }, // 18: pink
                            { border: "#C2FABC", background: "#74D66A", highlight: { border: "#E6FFE3", background: "#74D66A" }, hover: { border: "#E6FFE3", background: "#74D66A" } }, // 19: mint

                            { border: "#EE0000", background: "#990000", highlight: { border: "#FF3333", background: "#BB0000" }, hover: { border: "#FF3333", background: "#BB0000" } } // 20:bright red
                        ];

                        this.options = {};
                        this.defaultOptions = {
                            useDefaultGroups: true
                        };
                        util.extend(this.options, this.defaultOptions);
                    }

                    (0, _createClass3["default"])(Groups, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            var optionFields = ['useDefaultGroups'];

                            if (options !== undefined) {
                                for (var groupName in options) {
                                    if (options.hasOwnProperty(groupName)) {
                                        if (optionFields.indexOf(groupName) === -1) {
                                            var group = options[groupName];
                                            this.add(groupName, group);
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * Clear all groups
                         */

                    }, {
                        key: "clear",
                        value: function clear() {
                            this.groups = {};
                            this.groupsArray = [];
                        }

                        /**
                         * get group options of a groupname. If groupname is not found, a new group
                         * is added.
                         * @param {*} groupname        Can be a number, string, Date, etc.
                         * @return {Object} group      The created group, containing all group options
                         */

                    }, {
                        key: "get",
                        value: function get(groupname) {
                            var group = this.groups[groupname];
                            if (group === undefined) {
                                if (this.options.useDefaultGroups === false && this.groupsArray.length > 0) {
                                    // create new group
                                    var index = this.groupIndex % this.groupsArray.length;
                                    this.groupIndex++;
                                    group = {};
                                    group.color = this.groups[this.groupsArray[index]];
                                    this.groups[groupname] = group;
                                } else {
                                    // create new group
                                    var _index = this.defaultIndex % this.defaultGroups.length;
                                    this.defaultIndex++;
                                    group = {};
                                    group.color = this.defaultGroups[_index];
                                    this.groups[groupname] = group;
                                }
                            }

                            return group;
                        }

                        /**
                         * Add a custom group style
                         * @param {String} groupName
                         * @param {Object} style       An object containing borderColor,
                         *                             backgroundColor, etc.
                         * @return {Object} group      The created group object
                         */

                    }, {
                        key: "add",
                        value: function add(groupName, style) {
                            this.groups[groupName] = style;
                            this.groupsArray.push(groupName);
                            return style;
                        }
                    }]);
                    return Groups;
                }();

                exports["default"] = Groups;

                /***/
            }),
            /* 167 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);

                var Node = __webpack_require__(168)['default'];
                var Label = __webpack_require__(169)['default'];

                var NodesHandler = function() {
                    function NodesHandler(body, images, groups, layoutEngine) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, NodesHandler);

                        this.body = body;
                        this.images = images;
                        this.groups = groups;
                        this.layoutEngine = layoutEngine;

                        // create the node API in the body container
                        this.body.functions.createNode = this.create.bind(this);

                        this.nodesListeners = {
                            add: function add(event, params) {
                                _this.add(params.items);
                            },
                            update: function update(event, params) {
                                _this.update(params.items, params.data);
                            },
                            remove: function remove(event, params) {
                                _this.remove(params.items);
                            }
                        };

                        this.options = {};
                        this.defaultOptions = {
                            borderWidth: 1,
                            borderWidthSelected: 2,
                            brokenImage: undefined,
                            color: {
                                border: '#2B7CE9',
                                background: '#97C2FC',
                                highlight: {
                                    border: '#2B7CE9',
                                    background: '#D2E5FF'
                                },
                                hover: {
                                    border: '#2B7CE9',
                                    background: '#D2E5FF'
                                }
                            },
                            fixed: {
                                x: false,
                                y: false
                            },
                            font: {
                                color: '#343434',
                                size: 14, // px
                                face: 'arial',
                                background: 'none',
                                strokeWidth: 0, // px
                                strokeColor: '#ffffff',
                                align: 'center',
                                vadjust: 0,
                                multi: false,
                                bold: {
                                    mod: 'bold'
                                },
                                boldital: {
                                    mod: 'bold italic'
                                },
                                ital: {
                                    mod: 'italic'
                                },
                                mono: {
                                    mod: '',
                                    size: 15, // px
                                    face: 'monospace',
                                    vadjust: 2
                                }
                            },
                            group: undefined,
                            hidden: false,
                            icon: {
                                face: 'FontAwesome', //'FontAwesome',
                                code: undefined, //'\uf007',
                                size: 50, //50,
                                color: '#2B7CE9' //'#aa00ff'
                            },
                            image: undefined, // --> URL
                            label: undefined,
                            labelHighlightBold: true,
                            level: undefined,
                            margin: {
                                top: 5,
                                right: 5,
                                bottom: 5,
                                left: 5
                            },
                            mass: 1,
                            physics: true,
                            scaling: {
                                min: 10,
                                max: 30,
                                label: {
                                    enabled: false,
                                    min: 14,
                                    max: 30,
                                    maxVisible: 30,
                                    drawThreshold: 5
                                },
                                customScalingFunction: function customScalingFunction(min, max, total, value) {
                                    if (max === min) {
                                        return 0.5;
                                    } else {
                                        var scale = 1 / (max - min);
                                        return Math.max(0, (value - min) * scale);
                                    }
                                }
                            },
                            shadow: {
                                enabled: false,
                                color: 'rgba(0,0,0,0.5)',
                                size: 10,
                                x: 5,
                                y: 5
                            },
                            shape: 'ellipse',
                            shapeProperties: {
                                borderDashes: false, // only for borders
                                borderRadius: 6, // only for box shape
                                interpolation: true, // only for image and circularImage shapes
                                useImageSize: false, // only for image and circularImage shapes
                                useBorderWithImage: false // only for image shape
                            },
                            size: 25,
                            title: undefined,
                            value: undefined,
                            x: undefined,
                            y: undefined
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(NodesHandler, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this2 = this;

                            // refresh the nodes. Used when reverting from hierarchical layout
                            this.body.emitter.on('refreshNodes', this.refresh.bind(this));
                            this.body.emitter.on('refresh', this.refresh.bind(this));
                            this.body.emitter.on('destroy', function() {
                                util.forEach(_this2.nodesListeners, function(callback, event) {
                                    if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);
                                });
                                delete _this2.body.functions.createNode;
                                delete _this2.nodesListeners.add;
                                delete _this2.nodesListeners.update;
                                delete _this2.nodesListeners.remove;
                                delete _this2.nodesListeners;
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            this.nodeOptions = options;
                            if (options !== undefined) {
                                Node.parseOptions(this.options, options);

                                // update the shape in all nodes
                                if (options.shape !== undefined) {
                                    for (var nodeId in this.body.nodes) {
                                        if (this.body.nodes.hasOwnProperty(nodeId)) {
                                            this.body.nodes[nodeId].updateShape();
                                        }
                                    }
                                }

                                // update the font in all nodes
                                if (options.font !== undefined) {
                                    Label.parseOptions(this.options.font, options);
                                    for (var _nodeId in this.body.nodes) {
                                        if (this.body.nodes.hasOwnProperty(_nodeId)) {
                                            this.body.nodes[_nodeId].updateLabelModule();
                                            this.body.nodes[_nodeId].needsRefresh();
                                        }
                                    }
                                }

                                // update the shape size in all nodes
                                if (options.size !== undefined) {
                                    for (var _nodeId2 in this.body.nodes) {
                                        if (this.body.nodes.hasOwnProperty(_nodeId2)) {
                                            this.body.nodes[_nodeId2].needsRefresh();
                                        }
                                    }
                                }

                                // update the state of the variables if needed
                                if (options.hidden !== undefined || options.physics !== undefined) {
                                    this.body.emitter.emit('_dataChanged');
                                }
                            }
                        }

                        /**
                         * Set a data set with nodes for the network
                         * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
                         * @private
                         */

                    }, {
                        key: 'setData',
                        value: function setData(nodes) {
                            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var oldNodesData = this.body.data.nodes;

                            if (nodes instanceof DataSet || nodes instanceof DataView) {
                                this.body.data.nodes = nodes;
                            } else if (Array.isArray(nodes)) {
                                this.body.data.nodes = new DataSet();
                                this.body.data.nodes.add(nodes);
                            } else if (!nodes) {
                                this.body.data.nodes = new DataSet();
                            } else {
                                throw new TypeError('Array or DataSet expected');
                            }

                            if (oldNodesData) {
                                // unsubscribe from old dataset
                                util.forEach(this.nodesListeners, function(callback, event) {
                                    oldNodesData.off(event, callback);
                                });
                            }

                            // remove drawn nodes
                            this.body.nodes = {};

                            if (this.body.data.nodes) {
                                // subscribe to new dataset
                                var me = this;
                                util.forEach(this.nodesListeners, function(callback, event) {
                                    me.body.data.nodes.on(event, callback);
                                });

                                // draw all new nodes
                                var ids = this.body.data.nodes.getIds();
                                this.add(ids, true);
                            }

                            if (doNotEmit === false) {
                                this.body.emitter.emit("_dataChanged");
                            }
                        }

                        /**
                         * Add nodes
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'add',
                        value: function add(ids) {
                            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var id = void 0;
                            var newNodes = [];
                            for (var i = 0; i < ids.length; i++) {
                                id = ids[i];
                                var properties = this.body.data.nodes.get(id);
                                var node = this.create(properties);
                                newNodes.push(node);
                                this.body.nodes[id] = node; // note: this may replace an existing node
                            }

                            this.layoutEngine.positionInitially(newNodes);

                            if (doNotEmit === false) {
                                this.body.emitter.emit("_dataChanged");
                            }
                        }

                        /**
                         * Update existing nodes, or create them when not yet existing
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'update',
                        value: function update(ids, changedData) {
                            var nodes = this.body.nodes;
                            var dataChanged = false;
                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                var node = nodes[id];
                                var data = changedData[i];
                                if (node !== undefined) {
                                    // update node
                                    dataChanged = node.setOptions(data);
                                } else {
                                    dataChanged = true;
                                    // create node
                                    node = this.create(data);
                                    nodes[id] = node;
                                }
                            }
                            if (dataChanged === true) {
                                this.body.emitter.emit("_dataChanged");
                            } else {
                                this.body.emitter.emit("_dataUpdated");
                            }
                        }

                        /**
                         * Remove existing nodes. If nodes do not exist, the method will just ignore it.
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'remove',
                        value: function remove(ids) {
                            var nodes = this.body.nodes;

                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                delete nodes[id];
                            }

                            this.body.emitter.emit("_dataChanged");
                        }

                        /**
                         * create a node
                         * @param properties
                         * @param constructorClass
                         */

                    }, {
                        key: 'create',
                        value: function create(properties) {
                            var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Node;

                            return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions, this.nodeOptions);
                        }
                    }, {
                        key: 'refresh',
                        value: function refresh() {
                            var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                            var nodes = this.body.nodes;
                            for (var nodeId in nodes) {
                                var node = undefined;
                                if (nodes.hasOwnProperty(nodeId)) {
                                    node = nodes[nodeId];
                                }
                                var data = this.body.data.nodes.get(nodeId);
                                if (node !== undefined && data !== undefined) {
                                    if (clearPositions === true) {
                                        node.setOptions({ x: null, y: null });
                                    }
                                    node.setOptions({ fixed: false });
                                    node.setOptions(data);
                                }
                            }
                        }

                        /**
                         * Returns the positions of the nodes.
                         * @param ids  --> optional, can be array of nodeIds, can be string
                         * @returns {{}}
                         */

                    }, {
                        key: 'getPositions',
                        value: function getPositions(ids) {
                            var dataArray = {};
                            if (ids !== undefined) {
                                if (Array.isArray(ids) === true) {
                                    for (var i = 0; i < ids.length; i++) {
                                        if (this.body.nodes[ids[i]] !== undefined) {
                                            var node = this.body.nodes[ids[i]];
                                            dataArray[ids[i]] = { x: Math.round(node.x), y: Math.round(node.y) };
                                        }
                                    }
                                } else {
                                    if (this.body.nodes[ids] !== undefined) {
                                        var _node = this.body.nodes[ids];
                                        dataArray[ids] = { x: Math.round(_node.x), y: Math.round(_node.y) };
                                    }
                                }
                            } else {
                                for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
                                    var _node2 = this.body.nodes[this.body.nodeIndices[_i]];
                                    dataArray[this.body.nodeIndices[_i]] = { x: Math.round(_node2.x), y: Math.round(_node2.y) };
                                }
                            }
                            return dataArray;
                        }

                        /**
                         * Load the XY positions of the nodes into the dataset.
                         */

                    }, {
                        key: 'storePositions',
                        value: function storePositions() {
                            // todo: add support for clusters and hierarchical.
                            var dataArray = [];
                            var dataset = this.body.data.nodes.getDataSet();

                            for (var nodeId in dataset._data) {
                                if (dataset._data.hasOwnProperty(nodeId)) {
                                    var node = this.body.nodes[nodeId];
                                    if (dataset._data[nodeId].x != Math.round(node.x) || dataset._data[nodeId].y != Math.round(node.y)) {
                                        dataArray.push({ id: node.id, x: Math.round(node.x), y: Math.round(node.y) });
                                    }
                                }
                            }
                            dataset.update(dataArray);
                        }

                        /**
                         * get the bounding box of a node.
                         * @param nodeId
                         * @returns {j|*}
                         */

                    }, {
                        key: 'getBoundingBox',
                        value: function getBoundingBox(nodeId) {
                            if (this.body.nodes[nodeId] !== undefined) {
                                return this.body.nodes[nodeId].shape.boundingBox;
                            }
                        }

                        /**
                         * Get the Ids of nodes connected to this node.
                         * @param nodeId
                         * @returns {Array}
                         */

                    }, {
                        key: 'getConnectedNodes',
                        value: function getConnectedNodes(nodeId) {
                            var nodeList = [];
                            if (this.body.nodes[nodeId] !== undefined) {
                                var node = this.body.nodes[nodeId];
                                var nodeObj = {}; // used to quickly check if node already exists
                                for (var i = 0; i < node.edges.length; i++) {
                                    var edge = node.edges[i];
                                    if (edge.toId == node.id) {
                                        // these are double equals since ids can be numeric or string
                                        if (nodeObj[edge.fromId] === undefined) {
                                            nodeList.push(edge.fromId);
                                            nodeObj[edge.fromId] = true;
                                        }
                                    } else if (edge.fromId == node.id) {
                                        // these are double equals since ids can be numeric or string
                                        if (nodeObj[edge.toId] === undefined) {
                                            nodeList.push(edge.toId);
                                            nodeObj[edge.toId] = true;
                                        }
                                    }
                                }
                            }
                            return nodeList;
                        }

                        /**
                         * Get the ids of the edges connected to this node.
                         * @param nodeId
                         * @returns {*}
                         */

                    }, {
                        key: 'getConnectedEdges',
                        value: function getConnectedEdges(nodeId) {
                            var edgeList = [];
                            if (this.body.nodes[nodeId] !== undefined) {
                                var node = this.body.nodes[nodeId];
                                for (var i = 0; i < node.edges.length; i++) {
                                    edgeList.push(node.edges[i].id);
                                }
                            } else {
                                console.log("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
                            }
                            return edgeList;
                        }

                        /**
                         * Move a node.
                         * @param String nodeId
                         * @param Number x
                         * @param Number y
                         */

                    }, {
                        key: 'moveNode',
                        value: function moveNode(nodeId, x, y) {
                            var _this3 = this;

                            if (this.body.nodes[nodeId] !== undefined) {
                                this.body.nodes[nodeId].x = Number(x);
                                this.body.nodes[nodeId].y = Number(y);
                                setTimeout(function() {
                                    _this3.body.emitter.emit("startSimulation");
                                }, 0);
                            } else {
                                console.log("Node id supplied to moveNode does not exist. Provided: ", nodeId);
                            }
                        }
                    }]);
                    return NodesHandler;
                }();

                exports['default'] = NodesHandler;

                /***/
            }),
            /* 168 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var Label = __webpack_require__(169)['default'];

                var Box = __webpack_require__(174)['default'];
                var Circle = __webpack_require__(185)['default'];
                var CircularImage = __webpack_require__(187)['default'];
                var Database = __webpack_require__(188)['default'];
                var Diamond = __webpack_require__(189)['default'];
                var Dot = __webpack_require__(191)['default'];
                var Ellipse = __webpack_require__(192)['default'];
                var Icon = __webpack_require__(193)['default'];
                var Image = __webpack_require__(194)['default'];
                var Square = __webpack_require__(195)['default'];
                var Star = __webpack_require__(196)['default'];
                var Text = __webpack_require__(197)['default'];
                var Triangle = __webpack_require__(198)['default'];
                var TriangleDown = __webpack_require__(199)['default'];
                var Validator = __webpack_require__(144)['default'];

                var _require = __webpack_require__(144),
                    printStyle = _require.printStyle;

                /**
                 * @class Node
                 * A node. A node can be connected to other nodes via one or multiple edges.
                 * @param {object} options An object containing options for the node. All
                 *                            options are optional, except for the id.
                 *                              {number} id     Id of the node. Required
                 *                              {string} label  Text label for the node
                 *                              {number} x      Horizontal position of the node
                 *                              {number} y      Vertical position of the node
                 *                              {string} shape  Node shape, available:
                 *                                              "database", "circle", "ellipse",
                 *                                              "box", "image", "text", "dot",
                 *                                              "star", "triangle", "triangleDown",
                 *                                              "square", "icon"
                 *                              {string} image  An image url
                 *                              {string} title  An title text, can be HTML
                 *                              {anytype} group A group name or number
                 * @param {Network.Images} imagelist    A list with images. Only needed
                 *                                            when the node has an image
                 * @param {Network.Groups} grouplist    A list with groups. Needed for
                 *                                            retrieving group options
                 * @param {Object}               constants    An object with default values for
                 *                                            example for the color
                 *
                 */


                var Node = function() {
                    function Node(options, body, imagelist, grouplist, globalOptions, defaultOptions, nodeOptions) {
                        (0, _classCallCheck3['default'])(this, Node);

                        this.options = util.bridgeObject(globalOptions);
                        this.globalOptions = globalOptions;
                        this.defaultOptions = defaultOptions;
                        this.nodeOptions = nodeOptions;
                        this.body = body;

                        this.edges = []; // all edges connected to this node

                        // set defaults for the options
                        this.id = undefined;
                        this.imagelist = imagelist;
                        this.grouplist = grouplist;

                        // state options
                        this.x = undefined;
                        this.y = undefined;
                        this.baseSize = this.options.size;
                        this.baseFontSize = this.options.font.size;
                        this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate
                        this.selected = false;
                        this.hover = false;

                        this.labelModule = new Label(this.body, this.options, false /* Not edge label */ );
                        this.setOptions(options);
                    }

                    /**
                     * Attach a edge to the node
                     * @param {Edge} edge
                     */


                    (0, _createClass3['default'])(Node, [{
                        key: 'attachEdge',
                        value: function attachEdge(edge) {
                            if (this.edges.indexOf(edge) === -1) {
                                this.edges.push(edge);
                            }
                        }

                        /**
                         * Detach a edge from the node
                         * @param {Edge} edge
                         */

                    }, {
                        key: 'detachEdge',
                        value: function detachEdge(edge) {
                            var index = this.edges.indexOf(edge);
                            if (index != -1) {
                                this.edges.splice(index, 1);
                            }
                        }

                        /**
                         * Set or overwrite options for the node
                         * @param {Object} options an object with options
                         * @param {Object} constants  and object with default, global options
                         */

                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            var currentShape = this.options.shape;
                            if (!options) {
                                return;
                            }

                            // basic options
                            if (options.id !== undefined) {
                                this.id = options.id;
                            }

                            if (this.id === undefined) {
                                throw "Node must have an id";
                            }

                            // set these options locally
                            // clear x and y positions
                            if (options.x !== undefined) {
                                if (options.x === null) {
                                    this.x = undefined;
                                    this.predefinedPosition = false;
                                } else {
                                    this.x = parseInt(options.x);
                                    this.predefinedPosition = true;
                                }
                            }
                            if (options.y !== undefined) {
                                if (options.y === null) {
                                    this.y = undefined;
                                    this.predefinedPosition = false;
                                } else {
                                    this.y = parseInt(options.y);
                                    this.predefinedPosition = true;
                                }
                            }
                            if (options.size !== undefined) {
                                this.baseSize = options.size;
                            }
                            if (options.value !== undefined) {
                                options.value = parseFloat(options.value);
                            }

                            // copy group options
                            if (typeof options.group === 'number' || typeof options.group === 'string' && options.group != '') {
                                var groupObj = this.grouplist.get(options.group);
                                util.deepExtend(this.options, groupObj);
                                // the color object needs to be completely defined. Since groups can partially overwrite the colors, we parse it again, just in case.
                                this.options.color = util.parseColor(this.options.color);
                            }

                            // this transforms all shorthands into fully defined options
                            Node.parseOptions(this.options, options, true, this.globalOptions);

                            this.choosify(options);

                            this._load_images();
                            this.updateLabelModule(options);
                            this.updateShape(currentShape);
                            this.labelModule.propagateFonts(this.nodeOptions, options, this.defaultOptions);

                            if (options.hidden !== undefined || options.physics !== undefined) {
                                return true;
                            }
                            return false;
                        }

                        /**
                         * Load the images from the options, for the nodes that need them.
                         *
                         * TODO: The imageObj members should be moved to CircularImageBase.
                         *       It's the only place where they are required.
                         *
                         * @private
                         */

                    }, {
                        key: '_load_images',
                        value: function _load_images() {
                            // Don't bother loading for nodes without images
                            if (this.options.shape !== 'circularImage' && this.options.shape !== 'image') {
                                return;
                            }

                            if (this.options.image === undefined) {
                                throw "Option image must be defined for node type '" + this.options.shape + "'";
                            }

                            if (this.imagelist === undefined) {
                                throw "Internal Error: No images provided";
                            }

                            if (typeof this.options.image === 'string') {
                                this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
                            } else {
                                if (this.options.image.unselected === undefined) {
                                    throw "No unselected image provided";
                                }

                                this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);

                                if (this.options.image.selected !== undefined) {
                                    this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
                                } else {
                                    this.imageObjAlt = undefined;
                                }
                            }
                        }

                        /**
                         * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
                         * Static so it can also be used by the handler.
                         * @param parentOptions
                         * @param newOptions
                         * @param allowDeletion
                         * @param globalOptions
                         */

                    }, {
                        key: 'choosify',
                        value: function choosify(options) {
                            this.chooser = true;

                            var pile = [options, this.options, this.defaultOptions];

                            var chosen = util.topMost(pile, 'chosen');
                            if (typeof chosen === 'boolean') {
                                this.chooser = chosen;
                            } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {
                                var chosenNode = util.topMost(pile, ['chosen', 'node']);
                                if (typeof chosenNode === 'boolean' || typeof chosenNode === 'function') {
                                    this.chooser = chosenNode;
                                }
                            }
                        }
                    }, {
                        key: 'getFormattingValues',
                        value: function getFormattingValues() {
                            var values = {
                                color: this.options.color.background,
                                borderWidth: this.options.borderWidth,
                                borderColor: this.options.color.border,
                                size: this.options.size,
                                borderDashes: this.options.shapeProperties.borderDashes,
                                borderRadius: this.options.shapeProperties.borderRadius,
                                shadow: this.options.shadow.enabled,
                                shadowColor: this.options.shadow.color,
                                shadowSize: this.options.shadow.size,
                                shadowX: this.options.shadow.x,
                                shadowY: this.options.shadow.y
                            };
                            if (this.selected || this.hover) {
                                if (this.chooser === true) {
                                    if (this.selected) {
                                        values.borderWidth *= 2;
                                        values.color = this.options.color.highlight.background;
                                        values.borderColor = this.options.color.highlight.border;
                                        values.shadow = this.options.shadow.enabled;
                                    } else if (this.hover) {
                                        values.color = this.options.color.hover.background;
                                        values.borderColor = this.options.color.hover.border;
                                        values.shadow = this.options.shadow.enabled;
                                    }
                                } else if (typeof this.chooser === 'function') {
                                    this.chooser(values, this.options.id, this.selected, this.hover);
                                    if (values.shadow === false) {
                                        if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
                                            values.shadow = true;
                                        }
                                    }
                                }
                            } else {
                                values.shadow = this.options.shadow.enabled;
                            }
                            return values;
                        }
                    }, {
                        key: 'updateLabelModule',
                        value: function updateLabelModule(options) {
                            if (this.options.label === undefined || this.options.label === null) {
                                this.options.label = '';
                            }
                            this.labelModule.setOptions(this.options, true);
                            if (this.labelModule.baseSize !== undefined) {
                                this.baseFontSize = this.labelModule.baseSize;
                            }
                            this.labelModule.constrain(this.nodeOptions, options, this.defaultOptions);
                            this.labelModule.choosify(this.nodeOptions, options, this.defaultOptions);
                        }
                    }, {
                        key: 'updateShape',
                        value: function updateShape(currentShape) {
                            if (currentShape === this.options.shape && this.shape) {
                                this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
                            } else {
                                // choose draw method depending on the shape
                                switch (this.options.shape) {
                                    case 'box':
                                        this.shape = new Box(this.options, this.body, this.labelModule);
                                        break;
                                    case 'circle':
                                        this.shape = new Circle(this.options, this.body, this.labelModule);
                                        break;
                                    case 'circularImage':
                                        this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                                        break;
                                    case 'database':
                                        this.shape = new Database(this.options, this.body, this.labelModule);
                                        break;
                                    case 'diamond':
                                        this.shape = new Diamond(this.options, this.body, this.labelModule);
                                        break;
                                    case 'dot':
                                        this.shape = new Dot(this.options, this.body, this.labelModule);
                                        break;
                                    case 'ellipse':
                                        this.shape = new Ellipse(this.options, this.body, this.labelModule);
                                        break;
                                    case 'icon':
                                        this.shape = new Icon(this.options, this.body, this.labelModule);
                                        break;
                                    case 'image':
                                        this.shape = new Image(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                                        break;
                                    case 'square':
                                        this.shape = new Square(this.options, this.body, this.labelModule);
                                        break;
                                    case 'star':
                                        this.shape = new Star(this.options, this.body, this.labelModule);
                                        break;
                                    case 'text':
                                        this.shape = new Text(this.options, this.body, this.labelModule);
                                        break;
                                    case 'triangle':
                                        this.shape = new Triangle(this.options, this.body, this.labelModule);
                                        break;
                                    case 'triangleDown':
                                        this.shape = new TriangleDown(this.options, this.body, this.labelModule);
                                        break;
                                    default:
                                        this.shape = new Ellipse(this.options, this.body, this.labelModule);
                                        break;
                                }
                            }
                            this.needsRefresh();
                        }

                        /**
                         * select this node
                         */

                    }, {
                        key: 'select',
                        value: function select() {
                            this.selected = true;
                            this.needsRefresh();
                        }

                        /**
                         * unselect this node
                         */

                    }, {
                        key: 'unselect',
                        value: function unselect() {
                            this.selected = false;
                            this.needsRefresh();
                        }

                        /**
                         * Reset the calculated size of the node, forces it to recalculate its size
                         */

                    }, {
                        key: 'needsRefresh',
                        value: function needsRefresh() {
                            this.shape.refreshNeeded = true;
                        }

                        /**
                         * get the title of this node.
                         * @return {string} title    The title of the node, or undefined when no title
                         *                           has been set.
                         */

                    }, {
                        key: 'getTitle',
                        value: function getTitle() {
                            return this.options.title;
                        }

                        /**
                         * Calculate the distance to the border of the Node
                         * @param {CanvasRenderingContext2D}   ctx
                         * @param {Number} angle        Angle in radians
                         * @returns {number} distance   Distance to the border in pixels
                         */

                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this.shape.distanceToBorder(ctx, angle);
                        }

                        /**
                         * Check if this node has a fixed x and y position
                         * @return {boolean}      true if fixed, false if not
                         */

                    }, {
                        key: 'isFixed',
                        value: function isFixed() {
                            return this.options.fixed.x && this.options.fixed.y;
                        }

                        /**
                         * check if this node is selecte
                         * @return {boolean} selected   True if node is selected, else false
                         */

                    }, {
                        key: 'isSelected',
                        value: function isSelected() {
                            return this.selected;
                        }

                        /**
                         * Retrieve the value of the node. Can be undefined
                         * @return {Number} value
                         */

                    }, {
                        key: 'getValue',
                        value: function getValue() {
                            return this.options.value;
                        }

                        /**
                         * Adjust the value range of the node. The node will adjust it's size
                         * based on its value.
                         * @param {Number} min
                         * @param {Number} max
                         */

                    }, {
                        key: 'setValueRange',
                        value: function setValueRange(min, max, total) {
                            if (this.options.value !== undefined) {
                                var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
                                var sizeDiff = this.options.scaling.max - this.options.scaling.min;
                                if (this.options.scaling.label.enabled === true) {
                                    var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
                                    this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
                                }
                                this.options.size = this.options.scaling.min + scale * sizeDiff;
                            } else {
                                this.options.size = this.baseSize;
                                this.options.font.size = this.baseFontSize;
                            }

                            this.updateLabelModule();
                        }

                        /**
                         * Draw this node in the given canvas
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
                         * @param {CanvasRenderingContext2D}   ctx
                         */

                    }, {
                        key: 'draw',
                        value: function draw(ctx) {
                            var values = this.getFormattingValues();
                            this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values);
                        }

                        /**
                         * Update the bounding box of the shape
                         */

                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(ctx) {
                            this.shape.updateBoundingBox(this.x, this.y, ctx);
                        }

                        /**
                         * Recalculate the size of this node in the given canvas
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
                         * @param {CanvasRenderingContext2D}   ctx
                         */

                    }, {
                        key: 'resize',
                        value: function resize(ctx) {
                            var values = this.getFormattingValues();
                            this.shape.resize(ctx, this.selected, this.hover, values);
                        }

                        /**
                         * Check if this object is overlapping with the provided object
                         * @param {Object} obj   an object with parameters left, top, right, bottom
                         * @return {boolean}     True if location is located on node
                         */

                    }, {
                        key: 'isOverlappingWith',
                        value: function isOverlappingWith(obj) {
                            return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
                        }

                        /**
                         * Check if this object is overlapping with the provided object
                         * @param {Object} obj   an object with parameters left, top, right, bottom
                         * @return {boolean}     True if location is located on node
                         */

                    }, {
                        key: 'isBoundingBoxOverlappingWith',
                        value: function isBoundingBoxOverlappingWith(obj) {
                            return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
                        }
                    }], [{
                        key: 'parseOptions',
                        value: function parseOptions(parentOptions, newOptions) {
                            var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                            var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                            var fields = ['color', 'font', 'fixed', 'shadow'];
                            util.selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);

                            // merge the shadow options into the parent.
                            util.mergeOptions(parentOptions, newOptions, 'shadow', allowDeletion, globalOptions);

                            // individual shape newOptions
                            if (newOptions.color !== undefined && newOptions.color !== null) {
                                var parsedColor = util.parseColor(newOptions.color);
                                util.fillIfDefined(parentOptions.color, parsedColor);
                            } else if (allowDeletion === true && newOptions.color === null) {
                                parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
                            }

                            // handle the fixed options
                            if (newOptions.fixed !== undefined && newOptions.fixed !== null) {
                                if (typeof newOptions.fixed === 'boolean') {
                                    parentOptions.fixed.x = newOptions.fixed;
                                    parentOptions.fixed.y = newOptions.fixed;
                                } else {
                                    if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === 'boolean') {
                                        parentOptions.fixed.x = newOptions.fixed.x;
                                    }
                                    if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === 'boolean') {
                                        parentOptions.fixed.y = newOptions.fixed.y;
                                    }
                                }
                            }

                            // handle the font options
                            if (newOptions.font !== undefined && newOptions.font !== null) {
                                Label.parseOptions(parentOptions.font, newOptions);
                            } else if (allowDeletion === true && newOptions.font === null) {
                                parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
                            }

                            // handle the scaling options, specifically the label part
                            if (newOptions.scaling !== undefined) {
                                util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', allowDeletion, globalOptions.scaling);
                            }
                        }
                    }]);
                    return Node;
                }();

                exports['default'] = Node;

                /***/
            }),
            /* 169 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _getIterator2 = __webpack_require__(2);

                var _getIterator3 = _interopRequireDefault(_getIterator2);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var Label = function() {
                    function Label(body, options) {
                        var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                        (0, _classCallCheck3['default'])(this, Label);

                        this.body = body;

                        this.pointToSelf = false;
                        this.baseSize = undefined;
                        this.fontOptions = {};
                        this.setOptions(options);
                        this.size = { top: 0, left: 0, width: 0, height: 0, yLine: 0 }; // could be cached
                        this.isEdgeLabel = edgelabel;
                    }

                    (0, _createClass3['default'])(Label, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            var allowDeletion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            this.elementOptions = options;

                            // We want to keep the font options seperated from the node options.
                            // The node options have to mirror the globals when they are not overruled.
                            this.fontOptions = util.deepExtend({}, options.font, true);

                            if (options.label !== undefined) {
                                this.labelDirty = true;
                            }

                            if (options.font !== undefined) {
                                Label.parseOptions(this.fontOptions, options, allowDeletion);
                                if (typeof options.font === 'string') {
                                    this.baseSize = this.fontOptions.size;
                                } else if ((0, _typeof3['default'])(options.font) === 'object') {
                                    if (options.font.size !== undefined) {
                                        this.baseSize = options.font.size;
                                    }
                                }
                            }
                        }
                    }, {
                        key: 'constrain',


                        // set the width and height constraints based on 'nearest' value
                        value: function constrain(elementOptions, options, defaultOptions) {
                            this.fontOptions.constrainWidth = false;
                            this.fontOptions.maxWdt = -1;
                            this.fontOptions.minWdt = -1;

                            var pile = [options, elementOptions, defaultOptions];

                            var widthConstraint = util.topMost(pile, 'widthConstraint');
                            if (typeof widthConstraint === 'number') {
                                this.fontOptions.maxWdt = Number(widthConstraint);
                                this.fontOptions.minWdt = Number(widthConstraint);
                            } else if ((typeof widthConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(widthConstraint)) === 'object') {
                                var widthConstraintMaximum = util.topMost(pile, ['widthConstraint', 'maximum']);
                                if (typeof widthConstraintMaximum === 'number') {
                                    this.fontOptions.maxWdt = Number(widthConstraintMaximum);
                                }
                                var widthConstraintMinimum = util.topMost(pile, ['widthConstraint', 'minimum']);
                                if (typeof widthConstraintMinimum === 'number') {
                                    this.fontOptions.minWdt = Number(widthConstraintMinimum);
                                }
                            }

                            this.fontOptions.constrainHeight = false;
                            this.fontOptions.minHgt = -1;
                            this.fontOptions.valign = 'middle';

                            var heightConstraint = util.topMost(pile, 'heightConstraint');
                            if (typeof heightConstraint === 'number') {
                                this.fontOptions.minHgt = Number(heightConstraint);
                            } else if ((typeof heightConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(heightConstraint)) === 'object') {
                                var heightConstraintMinimum = util.topMost(pile, ['heightConstraint', 'minimum']);
                                if (typeof heightConstraintMinimum === 'number') {
                                    this.fontOptions.minHgt = Number(heightConstraintMinimum);
                                }
                                var heightConstraintValign = util.topMost(pile, ['heightConstraint', 'valign']);
                                if (typeof heightConstraintValign === 'string') {
                                    if (heightConstraintValign === 'top' || heightConstraintValign === 'bottom') {
                                        this.fontOptions.valign = heightConstraintValign;
                                    }
                                }
                            }
                        }

                        // set the selected functions based on 'nearest' value

                    }, {
                        key: 'choosify',
                        value: function choosify(elementOptions, options, defaultOptions) {
                            this.fontOptions.chooser = true;

                            var pile = [options, elementOptions, defaultOptions];

                            var chosen = util.topMost(pile, 'chosen');
                            if (typeof chosen === 'boolean') {
                                this.fontOptions.chooser = chosen;
                            } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {
                                var chosenLabel = util.topMost(pile, ['chosen', 'label']);
                                if (typeof chosenLabel === 'boolean' || typeof chosenLabel === 'function') {
                                    this.fontOptions.chooser = chosenLabel;
                                }
                            }
                        }

                        // When margins are set in an element, adjust sizes is called to remove them
                        // from the width/height constraints. This must be done prior to label sizing.

                    }, {
                        key: 'adjustSizes',
                        value: function adjustSizes(margins) {
                            var widthBias = margins ? margins.right + margins.left : 0;
                            if (this.fontOptions.constrainWidth) {
                                this.fontOptions.maxWdt -= widthBias;
                                this.fontOptions.minWdt -= widthBias;
                            }
                            var heightBias = margins ? margins.top + margins.bottom : 0;
                            if (this.fontOptions.constrainHeight) {
                                this.fontOptions.minHgt -= heightBias;
                            }
                        }

                        /**
                         * Collapse the font options for the multi-font to single objects, from
                         * the chain of option objects passed.
                         *
                         * If an option for a specific multi-font is not present, the parent
                         * option is checked for the given option.
                         *
                         * NOTE: naming of 'groupOptions' is a misnomer; the actual value passed
                         *       is the new values to set from setOptions().
                         */

                    }, {
                        key: 'propagateFonts',
                        value: function propagateFonts(options, groupOptions, defaultOptions) {
                            if (!this.fontOptions.multi) return;

                            /**
                             * Resolve the font options path.
                             * If valid, return a reference to the object in question.
                             * Otherwise, just return null.
                             *
                             * param 'mod' is optional.
                             *
                             * options {Object} base object to determine path from
                             * mod {string|undefined} if present, sub path for the mod-font
                             */
                            var pathP = function pathP(options, mod) {
                                if (!options || !options.font) return null;

                                var opt = options.font;

                                if (mod) {
                                    if (!opt[mod]) return null;
                                    opt = opt[mod];
                                }

                                return opt;
                            };

                            /**
                             * Get property value from options.font[mod][property] if present.
                             * If mod not passed, use property value from options.font[property].
                             *
                             * @return value if found, null otherwise.
                             */
                            var getP = function getP(options, mod, property) {
                                var opt = pathP(options, mod);

                                if (opt && opt.hasOwnProperty(property)) {
                                    return opt[property];
                                }

                                return null;
                            };

                            var mods = ['bold', 'ital', 'boldital', 'mono'];
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                                for (var _iterator = (0, _getIterator3['default'])(mods), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var mod = _step.value;

                                    var modOptions = this.fontOptions[mod];
                                    var modDefaults = defaultOptions.font[mod];

                                    if (Label.parseFontString(modOptions, pathP(options, mod))) {
                                        modOptions.vadjust = this.fontOptions.vadjust;
                                        modOptions.mod = modDefaults.mod;
                                    } else {

                                        // We need to be crafty about loading the modded fonts. We want as
                                        // much 'natural' versatility as we can get, so a simple global
                                        // change propagates in an expected way, even if not stictly logical.

                                        // 'face' has a special exception for mono, since we probably
                                        // don't want to sync to the base font face.
                                        modOptions.face = getP(options, mod, 'face') || getP(groupOptions, mod, 'face') || (mod === 'mono' ? modDefaults.face : null) || getP(groupOptions, null, 'face') || this.fontOptions.face;

                                        // 'color' follows the standard flow
                                        modOptions.color = getP(options, mod, 'color') || getP(groupOptions, mod, 'color') || getP(groupOptions, null, 'color') || this.fontOptions.color;

                                        // 'mode' follows the standard flow
                                        modOptions.mod = getP(options, mod, 'mod') || getP(groupOptions, mod, 'mod') || getP(groupOptions, null, 'mod') || modDefaults.mod;

                                        // It's important that we size up defaults similarly if we're
                                        // using default faces unless overriden. We want to preserve the
                                        // ratios closely - but if faces have changed, all bets are off.
                                        var ratio = void 0;

                                        // NOTE: Following condition always fails, because modDefaults
                                        //       has no explicit font property. This is deliberate, see
                                        //       var's 'NodesHandler.defaultOptions.font[mod]'.
                                        //       However, I want to keep the original logic while refactoring;
                                        //       it appears to be working fine even if ratio is never set.
                                        // TODO: examine if this is a bug, fix if necessary.
                                        //
                                        if (modOptions.face === modDefaults.face && this.fontOptions.face === defaultOptions.font.face) {

                                            ratio = this.fontOptions.size / Number(defaultOptions.font.size);
                                        }

                                        modOptions.size = getP(options, mod, 'size') || getP(groupOptions, mod, 'size') || (ratio ? modDefaults.size * ratio : null) || //   Scale the mod size using the same ratio
                                            getP(groupOptions, null, 'size') || this.fontOptions.size;

                                        modOptions.vadjust = getP(options, mod, 'vadjust') || getP(groupOptions, mod, 'vadjust') || (ratio ? modDefaults.vadjust * Math.round(ratio) : null) || // Scale it using the same ratio
                                            this.fontOptions.vadjust;
                                    }

                                    modOptions.size = Number(modOptions.size);
                                    modOptions.vadjust = Number(modOptions.vadjust);
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator['return']) {
                                        _iterator['return']();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }

                        /**
                         * Main function. This is called from anything that wants to draw a label.
                         * @param ctx
                         * @param x
                         * @param y
                         * @param selected
                         * @param baseline
                         */

                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover) {
                            var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

                            // if no label, return
                            if (this.elementOptions.label === undefined) return;

                            // check if we have to render the label
                            var viewFontSize = this.fontOptions.size * this.body.view.scale;
                            if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;

                            // update the size cache if required
                            this.calculateLabelSize(ctx, selected, hover, x, y, baseline);

                            // create the fontfill background
                            this._drawBackground(ctx);
                            // draw text
                            this._drawText(ctx, selected, hover, x, y, baseline);
                        }

                        /**
                         * Draws the label background
                         * @param {CanvasRenderingContext2D} ctx
                         * @private
                         */

                    }, {
                        key: '_drawBackground',
                        value: function _drawBackground(ctx) {
                            if (this.fontOptions.background !== undefined && this.fontOptions.background !== "none") {
                                ctx.fillStyle = this.fontOptions.background;

                                var lineMargin = 2;

                                if (this.isEdgeLabel) {
                                    switch (this.fontOptions.align) {
                                        case 'middle':
                                            ctx.fillRect(-this.size.width * 0.5, -this.size.height * 0.5, this.size.width, this.size.height);
                                            break;
                                        case 'top':
                                            ctx.fillRect(-this.size.width * 0.5, -(this.size.height + lineMargin), this.size.width, this.size.height);
                                            break;
                                        case 'bottom':
                                            ctx.fillRect(-this.size.width * 0.5, lineMargin, this.size.width, this.size.height);
                                            break;
                                        default:
                                            ctx.fillRect(this.size.left, this.size.top - 0.5 * lineMargin, this.size.width, this.size.height);
                                            break;
                                    }
                                } else {
                                    ctx.fillRect(this.size.left, this.size.top - 0.5 * lineMargin, this.size.width, this.size.height);
                                }
                            }
                        }

                        /**
                         *
                         * @param ctx
                         * @param x
                         * @param baseline
                         * @private
                         */

                    }, {
                        key: '_drawText',
                        value: function _drawText(ctx, selected, hover, x, y) {
                            var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

                            var fontSize = this.fontOptions.size;
                            var viewFontSize = fontSize * this.body.view.scale;
                            // this ensures that there will not be HUGE letters on screen by setting an upper limit on the visible text size (regardless of zoomLevel)
                            if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
                                fontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
                            }

                            var yLine = this.size.yLine;

                            var _setAlignment2 = this._setAlignment(ctx, x, yLine, baseline);

                            var _setAlignment3 = (0, _slicedToArray3['default'])(_setAlignment2, 2);

                            x = _setAlignment3[0];
                            yLine = _setAlignment3[1];


                            ctx.textAlign = 'left';
                            x = x - this.size.width / 2; // Shift label 1/2-distance to the left
                            if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
                                if (this.fontOptions.valign === 'top') {
                                    yLine -= (this.size.height - this.size.labelHeight) / 2;
                                }
                                if (this.fontOptions.valign === 'bottom') {
                                    yLine += (this.size.height - this.size.labelHeight) / 2;
                                }
                            }

                            // draw the text
                            for (var i = 0; i < this.lineCount; i++) {
                                if (this.lines[i] && this.lines[i].blocks) {
                                    var width = 0;
                                    if (this.isEdgeLabel || this.fontOptions.align === 'center') {
                                        width += (this.size.width - this.lines[i].width) / 2;
                                    } else if (this.fontOptions.align === 'right') {
                                        width += this.size.width - this.lines[i].width;
                                    }
                                    for (var j = 0; j < this.lines[i].blocks.length; j++) {
                                        var block = this.lines[i].blocks[j];
                                        ctx.font = block.font;

                                        var _getColor2 = this._getColor(block.color, viewFontSize, block.strokeColor),
                                            _getColor3 = (0, _slicedToArray3['default'])(_getColor2, 2),
                                            fontColor = _getColor3[0],
                                            strokeColor = _getColor3[1];

                                        if (block.strokeWidth > 0) {
                                            ctx.lineWidth = block.strokeWidth;
                                            ctx.strokeStyle = strokeColor;
                                            ctx.lineJoin = 'round';
                                        }
                                        ctx.fillStyle = fontColor;

                                        if (block.strokeWidth > 0) {
                                            ctx.strokeText(block.text, x + width, yLine + block.vadjust);
                                        }
                                        ctx.fillText(block.text, x + width, yLine + block.vadjust);
                                        width += block.width;
                                    }
                                    yLine += this.lines[i].height;
                                }
                            }
                        }
                    }, {
                        key: '_setAlignment',
                        value: function _setAlignment(ctx, x, yLine, baseline) {
                            // check for label alignment (for edges)
                            // TODO: make alignment for nodes
                            if (this.isEdgeLabel && this.fontOptions.align !== 'horizontal' && this.pointToSelf === false) {
                                x = 0;
                                yLine = 0;

                                var lineMargin = 2;
                                if (this.fontOptions.align === 'top') {
                                    ctx.textBaseline = 'alphabetic';
                                    yLine -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers
                                } else if (this.fontOptions.align === 'bottom') {
                                    ctx.textBaseline = 'hanging';
                                    yLine += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers
                                } else {
                                    ctx.textBaseline = 'middle';
                                }
                            } else {
                                ctx.textBaseline = baseline;
                            }
                            return [x, yLine];
                        }

                        /**
                         * fade in when relative scale is between threshold and threshold - 1.
                         * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
                         *
                         * @param viewFontSize
                         * @returns {*[]}
                         * @private
                         */

                    }, {
                        key: '_getColor',
                        value: function _getColor(color, viewFontSize, initialStrokeColor) {
                            var fontColor = color || '#000000';
                            var strokeColor = initialStrokeColor || '#ffffff';
                            if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
                                var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
                                fontColor = util.overrideOpacity(fontColor, opacity);
                                strokeColor = util.overrideOpacity(strokeColor, opacity);
                            }
                            return [fontColor, strokeColor];
                        }

                        /**
                         *
                         * @param ctx
                         * @param selected
                         * @returns {{width: number, height: number}}
                         */

                    }, {
                        key: 'getTextSize',
                        value: function getTextSize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            this._processLabel(ctx, selected, hover);
                            return {
                                width: this.size.width,
                                height: this.size.height,
                                lineCount: this.lineCount
                            };
                        }

                        /**
                         *
                         * @param ctx
                         * @param selected
                         * @param x
                         * @param y
                         * @param baseline
                         */

                    }, {
                        key: 'calculateLabelSize',
                        value: function calculateLabelSize(ctx, selected, hover) {
                            var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                            var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                            var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

                            if (this.labelDirty === true) {
                                this._processLabel(ctx, selected, hover);
                            }
                            this.size.left = x - this.size.width * 0.5;
                            this.size.top = y - this.size.height * 0.5;
                            this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
                            if (baseline === "hanging") {
                                this.size.top += 0.5 * this.fontOptions.size;
                                this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers
                                this.size.yLine += 4; // distance from node
                            }
                            this.labelDirty = false;
                        }

                        /**
                         * normalize the markup system
                         */

                    }, {
                        key: 'decodeMarkupSystem',
                        value: function decodeMarkupSystem(markupSystem) {
                            var system = 'none';
                            if (markupSystem === 'markdown' || markupSystem === 'md') {
                                system = 'markdown';
                            } else if (markupSystem === true || markupSystem === 'html') {
                                system = 'html';
                            }
                            return system;
                        }

                        /**
                         * Explodes a piece of text into single-font blocks using a given markup
                         * @param text
                         * @param markupSystem
                         * @returns [{ text, mod }]
                         */

                    }, {
                        key: 'splitBlocks',
                        value: function splitBlocks(text, markupSystem) {
                            var system = this.decodeMarkupSystem(markupSystem);
                            if (system === 'none') {
                                return [{
                                    text: text,
                                    mod: 'normal'
                                }];
                            } else if (system === 'markdown') {
                                return this.splitMarkdownBlocks(text);
                            } else if (system === 'html') {
                                return this.splitHtmlBlocks(text);
                            }
                        }
                    }, {
                        key: 'splitMarkdownBlocks',
                        value: function splitMarkdownBlocks(text) {
                            var blocks = [];
                            var s = {
                                bold: false,
                                ital: false,
                                mono: false,
                                beginable: true,
                                spacing: false,
                                position: 0,
                                buffer: "",
                                modStack: []
                            };
                            s.mod = function() {
                                return this.modStack.length === 0 ? 'normal' : this.modStack[0];
                            };
                            s.modName = function() {
                                if (this.modStack.length === 0) return 'normal';
                                else if (this.modStack[0] === 'mono') return 'mono';
                                else {
                                    if (s.bold && s.ital) {
                                        return 'boldital';
                                    } else if (s.bold) {
                                        return 'bold';
                                    } else if (s.ital) {
                                        return 'ital';
                                    }
                                }
                            };
                            s.emitBlock = function() {
                                var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                                if (this.spacing) {
                                    this.add(" ");
                                    this.spacing = false;
                                }
                                if (this.buffer.length > 0) {
                                    blocks.push({ text: this.buffer, mod: this.modName() });
                                    this.buffer = "";
                                }
                            };
                            s.add = function(text) {
                                if (text === " ") {
                                    s.spacing = true;
                                }
                                if (s.spacing) {
                                    this.buffer += " ";
                                    this.spacing = false;
                                }
                                if (text != " ") {
                                    this.buffer += text;
                                }
                            };
                            while (s.position < text.length) {
                                var ch = text.charAt(s.position);
                                if (/[ \t]/.test(ch)) {
                                    if (!s.mono) {
                                        s.spacing = true;
                                    } else {
                                        s.add(ch);
                                    }
                                    s.beginable = true;
                                } else if (/\\/.test(ch)) {
                                    if (s.position < text.length + 1) {
                                        s.position++;
                                        ch = text.charAt(s.position);
                                        if (/ \t/.test(ch)) {
                                            s.spacing = true;
                                        } else {
                                            s.add(ch);
                                            s.beginable = false;
                                        }
                                    }
                                } else if (!s.mono && !s.bold && (s.beginable || s.spacing) && /\*/.test(ch)) {
                                    s.emitBlock();
                                    s.bold = true;
                                    s.modStack.unshift("bold");
                                } else if (!s.mono && !s.ital && (s.beginable || s.spacing) && /\_/.test(ch)) {
                                    s.emitBlock();
                                    s.ital = true;
                                    s.modStack.unshift("ital");
                                } else if (!s.mono && (s.beginable || s.spacing) && /`/.test(ch)) {
                                    s.emitBlock();
                                    s.mono = true;
                                    s.modStack.unshift("mono");
                                } else if (!s.mono && s.mod() === "bold" && /\*/.test(ch)) {
                                    if (s.position === text.length - 1 || /[.,_` \t\n]/.test(text.charAt(s.position + 1))) {
                                        s.emitBlock();
                                        s.bold = false;
                                        s.modStack.shift();
                                    } else {
                                        s.add(ch);
                                    }
                                } else if (!s.mono && s.mod() === "ital" && /\_/.test(ch)) {
                                    if (s.position === text.length - 1 || /[.,*` \t\n]/.test(text.charAt(s.position + 1))) {
                                        s.emitBlock();
                                        s.ital = false;
                                        s.modStack.shift();
                                    } else {
                                        s.add(ch);
                                    }
                                } else if (s.mono && s.mod() === "mono" && /`/.test(ch)) {
                                    if (s.position === text.length - 1 || /[.,*_ \t\n]/.test(text.charAt(s.position + 1))) {
                                        s.emitBlock();
                                        s.mono = false;
                                        s.modStack.shift();
                                    } else {
                                        s.add(ch);
                                    }
                                } else {
                                    s.add(ch);
                                    s.beginable = false;
                                }
                                s.position++;
                            }
                            s.emitBlock();
                            return blocks;
                        }
                    }, {
                        key: 'splitHtmlBlocks',
                        value: function splitHtmlBlocks(text) {
                            var blocks = [];
                            var s = {
                                bold: false,
                                ital: false,
                                mono: false,
                                spacing: false,
                                position: 0,
                                buffer: "",
                                modStack: []
                            };
                            s.mod = function() {
                                return this.modStack.length === 0 ? 'normal' : this.modStack[0];
                            };
                            s.modName = function() {
                                if (this.modStack.length === 0) return 'normal';
                                else if (this.modStack[0] === 'mono') return 'mono';
                                else {
                                    if (s.bold && s.ital) {
                                        return 'boldital';
                                    } else if (s.bold) {
                                        return 'bold';
                                    } else if (s.ital) {
                                        return 'ital';
                                    }
                                }
                            };
                            s.emitBlock = function() {
                                var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                                if (this.spacing) {
                                    this.add(" ");
                                    this.spacing = false;
                                }
                                if (this.buffer.length > 0) {
                                    blocks.push({ text: this.buffer, mod: this.modName() });
                                    this.buffer = "";
                                }
                            };
                            s.add = function(text) {
                                if (text === " ") {
                                    s.spacing = true;
                                }
                                if (s.spacing) {
                                    this.buffer += " ";
                                    this.spacing = false;
                                }
                                if (text != " ") {
                                    this.buffer += text;
                                }
                            };
                            while (s.position < text.length) {
                                var ch = text.charAt(s.position);
                                if (/[ \t]/.test(ch)) {
                                    if (!s.mono) {
                                        s.spacing = true;
                                    } else {
                                        s.add(ch);
                                    }
                                } else if (/</.test(ch)) {
                                    if (!s.mono && !s.bold && /<b>/.test(text.substr(s.position, 3))) {
                                        s.emitBlock();
                                        s.bold = true;
                                        s.modStack.unshift("bold");
                                        s.position += 2;
                                    } else if (!s.mono && !s.ital && /<i>/.test(text.substr(s.position, 3))) {
                                        s.emitBlock();
                                        s.ital = true;
                                        s.modStack.unshift("ital");
                                        s.position += 2;
                                    } else if (!s.mono && /<code>/.test(text.substr(s.position, 6))) {
                                        s.emitBlock();
                                        s.mono = true;
                                        s.modStack.unshift("mono");
                                        s.position += 5;
                                    } else if (!s.mono && s.mod() === 'bold' && /<\/b>/.test(text.substr(s.position, 4))) {
                                        s.emitBlock();
                                        s.bold = false;
                                        s.modStack.shift();
                                        s.position += 3;
                                    } else if (!s.mono && s.mod() === 'ital' && /<\/i>/.test(text.substr(s.position, 4))) {
                                        s.emitBlock();
                                        s.ital = false;
                                        s.modStack.shift();
                                        s.position += 3;
                                    } else if (s.mod() === 'mono' && /<\/code>/.test(text.substr(s.position, 7))) {
                                        s.emitBlock();
                                        s.mono = false;
                                        s.modStack.shift();
                                        s.position += 6;
                                    } else {
                                        s.add(ch);
                                    }
                                } else if (/&/.test(ch)) {
                                    if (/&lt;/.test(text.substr(s.position, 4))) {
                                        s.add("<");
                                        s.position += 3;
                                    } else if (/&amp;/.test(text.substr(s.position, 5))) {
                                        s.add("&");
                                        s.position += 4;
                                    } else {
                                        s.add("&");
                                    }
                                } else {
                                    s.add(ch);
                                }
                                s.position++;
                            }
                            s.emitBlock();
                            return blocks;
                        }
                    }, {
                        key: 'getFormattingValues',
                        value: function getFormattingValues(ctx, selected, hover, mod) {
                            var getValue = function getValue(fontOptions, mod, option) {
                                if (mod === "normal") {
                                    if (option === 'mod') return "";
                                    return fontOptions[option];
                                }

                                if (fontOptions[mod][option]) {
                                    return fontOptions[mod][option];
                                } else {
                                    // Take from parent font option
                                    return fontOptions[option];
                                }
                            };

                            var values = {
                                color: getValue(this.fontOptions, mod, 'color'),
                                size: getValue(this.fontOptions, mod, 'size'),
                                face: getValue(this.fontOptions, mod, 'face'),
                                mod: getValue(this.fontOptions, mod, 'mod'),
                                vadjust: getValue(this.fontOptions, mod, 'vadjust'),
                                strokeWidth: this.fontOptions.strokeWidth,
                                strokeColor: this.fontOptions.strokeColor
                            };
                            if (mod === "normal") {
                                if (selected || hover) {
                                    if (this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
                                        values.mod = 'bold';
                                    } else if (typeof this.fontOptions.chooser === 'function') {
                                        this.fontOptions.chooser(ctx, values, this.elementOptions.id, selected, hover);
                                    }
                                }
                            } else {
                                if ((selected || hover) && typeof this.fontOptions.chooser === 'function') {
                                    this.fontOptions.chooser(ctx, values, this.elementOptions.id, selected, hover);
                                }
                            }
                            ctx.font = (values.mod + " " + values.size + "px " + values.face).replace(/"/g, "");
                            values.font = ctx.font;
                            values.height = values.size;
                            return values;
                        }
                    }, {
                        key: 'differentState',
                        value: function differentState(selected, hover) {
                            return selected !== this.fontOptions.selectedState && hover !== this.fontOptions.hoverState;
                        }

                        /**
                         * This explodes the label string into lines and sets the width, height and number of lines.
                         * @param ctx
                         * @param selected
                         * @private
                         */

                    }, {
                        key: '_processLabel',
                        value: function _processLabel(ctx, selected, hover) {
                            var width = 0;
                            var height = 0;
                            var nlLines = [];
                            var lines = [];
                            var k = 0;
                            lines.add = function(l, text, font, color, width, height, vadjust, mod, strokeWidth, strokeColor) {
                                if (this.length == l) {
                                    this[l] = { width: 0, height: 0, blocks: [] };
                                }
                                this[l].blocks.push({ text: text, font: font, color: color, width: width, height: height, vadjust: vadjust, mod: mod, strokeWidth: strokeWidth, strokeColor: strokeColor });
                            };
                            lines.accumulate = function(l, width, height) {
                                this[l].width += width;
                                this[l].height = height > this[l].height ? height : this[l].height;
                            };
                            lines.addAndAccumulate = function(l, text, font, color, width, height, vadjust, mod, strokeWidth, strokeColor) {
                                this.add(l, text, font, color, width, height, vadjust, mod, strokeWidth, strokeColor);
                                this.accumulate(l, width, height);
                            };
                            if (this.elementOptions.label !== undefined) {
                                var _nlLines = String(this.elementOptions.label).split('\n');
                                var lineCount = _nlLines.length;
                                if (this.elementOptions.font.multi) {
                                    for (var i = 0; i < lineCount; i++) {
                                        var blocks = this.splitBlocks(_nlLines[i], this.elementOptions.font.multi);
                                        var lineWidth = 0;
                                        var lineHeight = 0;
                                        if (blocks) {
                                            if (blocks.length == 0) {
                                                var values = this.getFormattingValues(ctx, selected, hover, "normal");
                                                lines.addAndAccumulate(k, "", values.font, values.color, 0, values.size, values.vadjust, "normal", values.strokeWidth, values.strokeColor);
                                                height += lines[k].height;
                                                k++;
                                                continue;
                                            }
                                            for (var j = 0; j < blocks.length; j++) {
                                                if (this.fontOptions.maxWdt > 0) {
                                                    var _values = this.getFormattingValues(ctx, selected, hover, blocks[j].mod);
                                                    var words = blocks[j].text.split(" ");
                                                    var atStart = true;
                                                    var text = "";
                                                    var measure = { width: 0 };
                                                    var lastMeasure = void 0;
                                                    var w = 0;
                                                    while (w < words.length) {
                                                        var pre = atStart ? "" : " ";
                                                        lastMeasure = measure;
                                                        measure = ctx.measureText(text + pre + words[w]);
                                                        if (lineWidth + measure.width > this.fontOptions.maxWdt && lastMeasure.width != 0) {
                                                            lineHeight = _values.height > lineHeight ? _values.height : lineHeight;
                                                            lines.add(k, text, _values.font, _values.color, lastMeasure.width, _values.height, _values.vadjust, blocks[j].mod, _values.strokeWidth, _values.strokeColor);
                                                            lines.accumulate(k, lastMeasure.width, lineHeight);
                                                            text = "";
                                                            atStart = true;
                                                            lineWidth = 0;
                                                            width = lines[k].width > width ? lines[k].width : width;
                                                            height += lines[k].height;
                                                            k++;
                                                        } else {
                                                            text = text + pre + words[w];
                                                            if (w === words.length - 1) {
                                                                lineHeight = _values.height > lineHeight ? _values.height : lineHeight;
                                                                lineWidth += measure.width;
                                                                lines.add(k, text, _values.font, _values.color, measure.width, _values.height, _values.vadjust, blocks[j].mod, _values.strokeWidth, _values.strokeColor);
                                                                lines.accumulate(k, measure.width, lineHeight);
                                                                if (j === blocks.length - 1) {
                                                                    width = lines[k].width > width ? lines[k].width : width;
                                                                    height += lines[k].height;
                                                                    k++;
                                                                }
                                                            }
                                                            w++;
                                                            atStart = false;
                                                        }
                                                    }
                                                } else {
                                                    var _values2 = this.getFormattingValues(ctx, selected, hover, blocks[j].mod);
                                                    var _measure = ctx.measureText(blocks[j].text);
                                                    lines.addAndAccumulate(k, blocks[j].text, _values2.font, _values2.color, _measure.width, _values2.height, _values2.vadjust, blocks[j].mod, _values2.strokeWidth, _values2.strokeColor);
                                                    width = lines[k].width > width ? lines[k].width : width;
                                                    if (blocks.length - 1 === j) {
                                                        height += lines[k].height;
                                                        k++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (var _i = 0; _i < lineCount; _i++) {
                                        var _values3 = this.getFormattingValues(ctx, selected, hover, "normal");
                                        if (this.fontOptions.maxWdt > 0) {
                                            var _words = _nlLines[_i].split(" ");
                                            var _text = "";
                                            var _measure2 = { width: 0 };
                                            var _lastMeasure = void 0;
                                            var _w = 0;
                                            while (_w < _words.length) {
                                                var _pre = _text === "" ? "" : " ";
                                                _lastMeasure = _measure2;
                                                _measure2 = ctx.measureText(_text + _pre + _words[_w]);
                                                if (_measure2.width > this.fontOptions.maxWdt && _lastMeasure.width != 0) {
                                                    lines.addAndAccumulate(k, _text, _values3.font, _values3.color, _lastMeasure.width, _values3.size, _values3.vadjust, "normal", _values3.strokeWidth, _values3.strokeColor);
                                                    width = lines[k].width > width ? lines[k].width : width;
                                                    height += lines[k].height;
                                                    _text = "";
                                                    k++;
                                                } else {
                                                    _text = _text + _pre + _words[_w];
                                                    if (_w === _words.length - 1) {
                                                        lines.addAndAccumulate(k, _text, _values3.font, _values3.color, _measure2.width, _values3.size, _values3.vadjust, "normal", _values3.strokeWidth, _values3.strokeColor);
                                                        width = lines[k].width > width ? lines[k].width : width;
                                                        height += lines[k].height;
                                                        k++;
                                                    }
                                                    _w++;
                                                }
                                            }
                                        } else {
                                            var _text2 = _nlLines[_i];
                                            var _measure3 = ctx.measureText(_text2);
                                            lines.addAndAccumulate(k, _text2, _values3.font, _values3.color, _measure3.width, _values3.size, _values3.vadjust, "normal", _values3.strokeWidth, _values3.strokeColor);
                                            width = lines[k].width > width ? lines[k].width : width;
                                            height += lines[k].height;
                                            k++;
                                        }
                                    }
                                }
                            }
                            if (this.fontOptions.minWdt > 0 && width < this.fontOptions.minWdt) {
                                width = this.fontOptions.minWdt;
                            }
                            this.size.labelHeight = height;
                            if (this.fontOptions.minHgt > 0 && height < this.fontOptions.minHgt) {
                                height = this.fontOptions.minHgt;
                            }
                            this.lines = lines;
                            this.lineCount = lines.length;
                            this.size.width = width;
                            this.size.height = height;
                            this.selectedState = selected;
                            this.hoverState = hover;
                        }
                    }], [{
                        key: 'parseOptions',
                        value: function parseOptions(parentOptions, newOptions) {
                            var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            if (Label.parseFontString(parentOptions, newOptions.font)) {
                                parentOptions.vadjust = 0;
                            } else if ((0, _typeof3['default'])(newOptions.font) === 'object') {
                                util.fillIfDefined(parentOptions, newOptions.font, allowDeletion);
                            }
                            parentOptions.size = Number(parentOptions.size);
                            parentOptions.vadjust = Number(parentOptions.vadjust);
                        }

                        /**
                         * If in-variable is a string, parse it as a font specifier.
                         *
                         * Note that following is not done here and have to be done after the call:
                         * - No number conversion (size)
                         * - Not all font options are set (vadjust, mod)
                         *
                         * @param inOptions  {Object} font options to parse
                         * @param outOptions {Object} out-parameter, object in which to store the parse results (if any)
                         *
                         * @return true if font parsed as string, false otherwise
                         */

                    }, {
                        key: 'parseFontString',
                        value: function parseFontString(outOptions, inOptions) {
                            if (!inOptions || typeof inOptions !== 'string') return false;

                            var newOptionsArray = inOptions.split(" ");

                            outOptions.size = newOptionsArray[0].replace("px", '');
                            outOptions.face = newOptionsArray[1];
                            outOptions.color = newOptionsArray[2];

                            return true;
                        }
                    }]);
                    return Label;
                }();

                exports['default'] = Label;

                /***/
            }),
            /* 170 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                exports.__esModule = true;

                var _isIterable2 = __webpack_require__(171);

                var _isIterable3 = _interopRequireDefault(_isIterable2);

                var _getIterator2 = __webpack_require__(2);

                var _getIterator3 = _interopRequireDefault(_getIterator2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                exports.default = function() {
                    function sliceIterator(arr, i) {
                        var _arr = [];
                        var _n = true;
                        var _d = false;
                        var _e = undefined;

                        try {
                            for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
                                _arr.push(_s.value);

                                if (i && _arr.length === i) break;
                            }
                        } catch (err) {
                            _d = true;
                            _e = err;
                        } finally {
                            try {
                                if (!_n && _i["return"]) _i["return"]();
                            } finally {
                                if (_d) throw _e;
                            }
                        }

                        return _arr;
                    }

                    return function(arr, i) {
                        if (Array.isArray(arr)) {
                            return arr;
                        } else if ((0, _isIterable3.default)(Object(arr))) {
                            return sliceIterator(arr, i);
                        } else {
                            throw new TypeError("Invalid attempt to destructure non-iterable instance");
                        }
                    };
                }();

                /***/
            }),
            /* 171 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(172), __esModule: true };

                /***/
            }),
            /* 172 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(4);
                __webpack_require__(50);
                module.exports = __webpack_require__(173);

                /***/
            }),
            /* 173 */
            /***/
            (function(module, exports, __webpack_require__) {

                var classof = __webpack_require__(54),
                    ITERATOR = __webpack_require__(47)('iterator'),
                    Iterators = __webpack_require__(8);
                module.exports = __webpack_require__(17).isIterable = function(it) {
                    var O = Object(it);
                    return O[ITERATOR] !== undefined ||
                        '@@iterator' in O ||
                        Iterators.hasOwnProperty(classof(O));
                };

                /***/
            }),
            /* 174 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Box = function(_NodeBase) {
                    (0, _inherits3['default'])(Box, _NodeBase);

                    function Box(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Box);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Box.__proto__ || (0, _getPrototypeOf2['default'])(Box)).call(this, options, body, labelModule));

                        _this._setMargins(labelModule);
                        return _this;
                    }

                    (0, _createClass3['default'])(Box, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

                            if (this.needsRefresh(selected, hover)) {
                                this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
                                this.width = this.textSize.width + this.margin.right + this.margin.left;
                                this.height = this.textSize.height + this.margin.top + this.margin.bottom;
                                this.radius = this.width / 2;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            ctx.strokeStyle = values.borderColor;
                            ctx.lineWidth = values.borderWidth;
                            ctx.lineWidth /= this.body.view.scale;
                            ctx.lineWidth = Math.min(this.width, ctx.lineWidth);

                            ctx.fillStyle = values.color;

                            ctx.roundRect(this.left, this.top, this.width, this.height, values.borderRadius);

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            // draw the background
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                            ctx.save();
                            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                            if (values.borderWidth > 0) {
                                this.enableBorderDashes(ctx, values);
                                //draw the border
                                ctx.stroke();
                                //disable dashed border for other elements
                                this.disableBorderDashes(ctx, values);
                            }
                            ctx.restore();

                            this.updateBoundingBox(x, y, ctx, selected, hover);
                            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y, ctx, selected, hover) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box
                            this.boundingBox.left = this.left - borderRadius;
                            this.boundingBox.top = this.top - borderRadius;
                            this.boundingBox.bottom = this.top + this.height + borderRadius;
                            this.boundingBox.right = this.left + this.width + borderRadius;
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            this.resize(ctx);
                            var borderWidth = this.options.borderWidth;

                            return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
                        }
                    }]);
                    return Box;
                }(_NodeBase3['default']);

                exports['default'] = Box;

                /***/
            }),
            /* 175 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(176), __esModule: true };

                /***/
            }),
            /* 176 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(177);
                module.exports = __webpack_require__(17).Object.getPrototypeOf;

                /***/
            }),
            /* 177 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.2.9 Object.getPrototypeOf(O)
                var toObject = __webpack_require__(49),
                    $getPrototypeOf = __webpack_require__(48);

                __webpack_require__(61)('getPrototypeOf', function() {
                    return function getPrototypeOf(it) {
                        return $getPrototypeOf(toObject(it));
                    };
                });

                /***/
            }),
            /* 178 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                exports.__esModule = true;

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                exports.default = function(self, call) {
                    if (!self) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }

                    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
                };

                /***/
            }),
            /* 179 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                exports.__esModule = true;

                var _setPrototypeOf = __webpack_require__(180);

                var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

                exports.default = function(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
                    }

                    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
                };

                /***/
            }),
            /* 180 */
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = { "default": __webpack_require__(181), __esModule: true };

                /***/
            }),
            /* 181 */
            /***/
            (function(module, exports, __webpack_require__) {

                __webpack_require__(182);
                module.exports = __webpack_require__(17).Object.setPrototypeOf;

                /***/
            }),
            /* 182 */
            /***/
            (function(module, exports, __webpack_require__) {

                // 19.1.3.19 Object.setPrototypeOf(O, proto)
                var $export = __webpack_require__(15);
                $export($export.S, 'Object', { setPrototypeOf: __webpack_require__(183).set });

                /***/
            }),
            /* 183 */
            /***/
            (function(module, exports, __webpack_require__) {

                // Works with __proto__ only. Old v8 can't work with null proto objects.
                /* eslint-disable no-proto */
                var isObject = __webpack_require__(23),
                    anObject = __webpack_require__(22);
                var check = function(O, proto) {
                    anObject(O);
                    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
                };
                module.exports = {
                    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
                        function(test, buggy, set) {
                            try {
                                set = __webpack_require__(18)(Function.call, __webpack_require__(78).f(Object.prototype, '__proto__').set, 2);
                                set(test, []);
                                buggy = !(test instanceof Array);
                            } catch (e) { buggy = true; }
                            return function setPrototypeOf(O, proto) {
                                check(O, proto);
                                if (buggy) O.__proto__ = proto;
                                else set(O, proto);
                                return O;
                            };
                        }({}, false) : undefined),
                    check: check
                };

                /***/
            }),
            /* 184 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var NodeBase = function() {
                    function NodeBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, NodeBase);

                        this.body = body;
                        this.labelModule = labelModule;
                        this.setOptions(options);
                        this.top = undefined;
                        this.left = undefined;
                        this.height = undefined;
                        this.width = undefined;
                        this.radius = undefined;
                        this.margin = undefined;
                        this.refreshNeeded = true;
                        this.boundingBox = { top: 0, left: 0, right: 0, bottom: 0 };
                    }

                    (0, _createClass3['default'])(NodeBase, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            this.options = options;
                        }
                    }, {
                        key: '_setMargins',
                        value: function _setMargins(labelModule) {
                            this.margin = {};
                            if (this.options.margin) {
                                if ((0, _typeof3['default'])(this.options.margin) == 'object') {
                                    this.margin.top = this.options.margin.top;
                                    this.margin.right = this.options.margin.right;
                                    this.margin.bottom = this.options.margin.bottom;
                                    this.margin.left = this.options.margin.left;
                                } else {
                                    this.margin.top = this.options.margin;
                                    this.margin.right = this.options.margin;
                                    this.margin.bottom = this.options.margin;
                                    this.margin.left = this.options.margin;
                                }
                            }
                            labelModule.adjustSizes(this.margin);
                        }
                    }, {
                        key: '_distanceToBorder',
                        value: function _distanceToBorder(ctx, angle) {
                            var borderWidth = this.options.borderWidth;
                            this.resize(ctx);
                            return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
                        }
                    }, {
                        key: 'enableShadow',
                        value: function enableShadow(ctx, values) {
                            if (values.shadow) {
                                ctx.shadowColor = values.shadowColor;
                                ctx.shadowBlur = values.shadowSize;
                                ctx.shadowOffsetX = values.shadowX;
                                ctx.shadowOffsetY = values.shadowY;
                            }
                        }
                    }, {
                        key: 'disableShadow',
                        value: function disableShadow(ctx, values) {
                            if (values.shadow) {
                                ctx.shadowColor = 'rgba(0,0,0,0)';
                                ctx.shadowBlur = 0;
                                ctx.shadowOffsetX = 0;
                                ctx.shadowOffsetY = 0;
                            }
                        }
                    }, {
                        key: 'enableBorderDashes',
                        value: function enableBorderDashes(ctx, values) {
                            if (values.borderDashes !== false) {
                                if (ctx.setLineDash !== undefined) {
                                    var dashes = values.borderDashes;
                                    if (dashes === true) {
                                        dashes = [5, 15];
                                    }
                                    ctx.setLineDash(dashes);
                                } else {
                                    console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
                                    this.options.shapeProperties.borderDashes = false;
                                    values.borderDashes = false;
                                }
                            }
                        }
                    }, {
                        key: 'disableBorderDashes',
                        value: function disableBorderDashes(ctx, values) {
                            if (values.borderDashes !== false) {
                                if (ctx.setLineDash !== undefined) {
                                    ctx.setLineDash([0]);
                                } else {
                                    console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
                                    this.options.shapeProperties.borderDashes = false;
                                    values.borderDashes = false;
                                }
                            }
                        }

                        /**
                         * Determine if the shape of a node needs to be recalculated.
                         *
                         * @protected
                         */

                    }, {
                        key: 'needsRefresh',
                        value: function needsRefresh(selected, hover) {
                            if (this.refreshNeeded === true) {
                                // This is probably not the best location to reset this member.
                                // However, in the current logic, it is the most convenient one.
                                this.refreshNeeded = false;
                                return true;
                            }

                            return this.width === undefined || this.labelModule.differentState(selected, hover);
                        }
                    }]);
                    return NodeBase;
                }();

                exports['default'] = NodeBase;

                /***/
            }),
            /* 185 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _CircleImageBase2 = __webpack_require__(186);

                var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Circle = function(_CircleImageBase) {
                    (0, _inherits3['default'])(Circle, _CircleImageBase);

                    function Circle(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Circle);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Circle.__proto__ || (0, _getPrototypeOf2['default'])(Circle)).call(this, options, body, labelModule));

                        _this._setMargins(labelModule);
                        return _this;
                    }

                    (0, _createClass3['default'])(Circle, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

                            if (this.needsRefresh(selected, hover)) {
                                this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
                                var diameter = Math.max(this.textSize.width + this.margin.right + this.margin.left, this.textSize.height + this.margin.top + this.margin.bottom);
                                this.options.size = diameter / 2;

                                this.width = diameter;
                                this.height = diameter;
                                this.radius = this.width / 2;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            this._drawRawCircle(ctx, x, y, values);

                            // TODO: values overwritten by updateBoundingBox(); is this bit necessary?
                            this.boundingBox.top = y - values.size;
                            this.boundingBox.left = x - values.size;
                            this.boundingBox.right = x + values.size;
                            this.boundingBox.bottom = y + values.size;

                            this.updateBoundingBox(x, y);
                            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y) {
                            this.boundingBox.top = y - this.options.size;
                            this.boundingBox.left = x - this.options.size;
                            this.boundingBox.right = x + this.options.size;
                            this.boundingBox.bottom = y + this.options.size;
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            this.resize(ctx);
                            return this.width * 0.5;
                        }
                    }]);
                    return Circle;
                }(_CircleImageBase3['default']);

                exports['default'] = Circle;

                /***/
            }),
            /* 186 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                var _CachedImage = __webpack_require__(165);

                var _CachedImage2 = _interopRequireDefault(_CachedImage);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                /**
                 * NOTE: This is a bad base class
                 *
                 * Child classes are:
                 *
                 *   Image       - uses *only* image methods
                 *   Circle      - uses *only* _drawRawCircle
                 *   CircleImage - uses all
                 *
                 * TODO: Refactor, move _drawRawCircle to different module, derive Circle from NodeBase
                 *       Rename this to ImageBase
                 *       Consolidate common code in Image and CircleImage to base class
                 */
                var CircleImageBase = function(_NodeBase) {
                    (0, _inherits3['default'])(CircleImageBase, _NodeBase);

                    function CircleImageBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, CircleImageBase);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (CircleImageBase.__proto__ || (0, _getPrototypeOf2['default'])(CircleImageBase)).call(this, options, body, labelModule));

                        _this.labelOffset = 0;
                        _this.selected = false;
                        return _this;
                    }

                    (0, _createClass3['default'])(CircleImageBase, [{
                        key: 'setOptions',
                        value: function setOptions(options, imageObj, imageObjAlt) {
                            this.options = options;

                            if (!(imageObj === undefined && imageObjAlt === undefined)) {
                                this.setImages(imageObj, imageObjAlt);
                            }
                        }

                        /**
                         * Set the images for this node.
                         *
                         * The images can be updated after the initial setting of options;
                         * therefore, this method needs to be reentrant. 
                         *
                         * For correct working in error cases, it is necessary to properly set
                         * field 'nodes.brokenImage' in the options.
                         *
                         * @param {Image} imageObj  required; main image to show for this node
                         * @param {Image|undefined} optional; image to show when node is selected
                         */

                    }, {
                        key: 'setImages',
                        value: function setImages(imageObj, imageObjAlt) {
                            if (imageObjAlt && this.selected) {
                                this.imageObj = imageObjAlt;
                                this.imageObjAlt = imageObj;
                            } else {
                                this.imageObj = imageObj;
                                this.imageObjAlt = imageObjAlt;
                            }
                        }

                        /**
                         * Set selection and switch between the base and the selected image.
                         *
                         * Do the switch only if imageObjAlt exists.
                         *
                         * @param {true|false} selected value of new selected state for current node
                         */

                    }, {
                        key: 'switchImages',
                        value: function switchImages(selected) {
                            var selection_changed = selected && !this.selected || !selected && this.selected;
                            this.selected = selected; // Remember new selection

                            if (this.imageObjAlt !== undefined && selection_changed) {
                                var imageTmp = this.imageObj;
                                this.imageObj = this.imageObjAlt;
                                this.imageObjAlt = imageTmp;
                            }
                        }

                        /**
                         * Adjust the node dimensions for a loaded image.
                         *
                         * Pre: this.imageObj is valid
                         */

                    }, {
                        key: '_resizeImage',
                        value: function _resizeImage() {
                            var width, height;

                            if (this.options.shapeProperties.useImageSize === false) {
                                // Use the size property
                                var ratio_width = 1;
                                var ratio_height = 1;

                                // Only calculate the proper ratio if both width and height not zero
                                if (this.imageObj.width && this.imageObj.height) {
                                    if (this.imageObj.width > this.imageObj.height) {
                                        ratio_width = this.imageObj.width / this.imageObj.height;
                                    } else {
                                        ratio_height = this.imageObj.height / this.imageObj.width;
                                    }
                                }

                                width = this.options.size * 2 * ratio_width;
                                height = this.options.size * 2 * ratio_height;
                            } else {
                                // Use the image size
                                width = this.imageObj.width;
                                height = this.imageObj.height;
                            }

                            this.width = width;
                            this.height = height;
                            this.radius = 0.5 * this.width;
                        }
                    }, {
                        key: '_drawRawCircle',
                        value: function _drawRawCircle(ctx, x, y, values) {
                            var borderWidth = values.borderWidth / this.body.view.scale;
                            ctx.lineWidth = Math.min(this.width, borderWidth);

                            ctx.strokeStyle = values.borderColor;
                            ctx.fillStyle = values.color;
                            ctx.circle(x, y, values.size);

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            // draw the background
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                            ctx.save();
                            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                            if (borderWidth > 0) {
                                this.enableBorderDashes(ctx, values);
                                //draw the border
                                ctx.stroke();
                                //disable dashed border for other elements
                                this.disableBorderDashes(ctx, values);
                            }
                            ctx.restore();
                        }
                    }, {
                        key: '_drawImageAtPosition',
                        value: function _drawImageAtPosition(ctx, values) {
                            if (this.imageObj.width != 0) {
                                // draw the image
                                ctx.globalAlpha = 1.0;

                                // draw shadow if enabled
                                this.enableShadow(ctx, values);

                                var factor = 1;
                                if (this.options.shapeProperties.interpolation === true) {
                                    factor = this.imageObj.width / this.width / this.body.view.scale;
                                }

                                this.imageObj.drawImageAtPosition(ctx, factor, this.left, this.top, this.width, this.height);

                                // disable shadows for other elements.
                                this.disableShadow(ctx, values);
                            }
                        }
                    }, {
                        key: '_drawImageLabel',
                        value: function _drawImageLabel(ctx, x, y, selected, hover) {
                            var yLabel;
                            var offset = 0;

                            if (this.height !== undefined) {
                                offset = this.height * 0.5;
                                var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
                                if (labelDimensions.lineCount >= 1) {
                                    offset += labelDimensions.height / 2;
                                }
                            }

                            yLabel = y + offset;

                            if (this.options.label) {
                                this.labelOffset = offset;
                            }
                            this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
                        }
                    }]);
                    return CircleImageBase;
                }(_NodeBase3['default']);

                exports['default'] = CircleImageBase;

                /***/
            }),
            /* 187 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _CircleImageBase2 = __webpack_require__(186);

                var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var CircularImage = function(_CircleImageBase) {
                    (0, _inherits3['default'])(CircularImage, _CircleImageBase);

                    function CircularImage(options, body, labelModule, imageObj, imageObjAlt) {
                        (0, _classCallCheck3['default'])(this, CircularImage);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (CircularImage.__proto__ || (0, _getPrototypeOf2['default'])(CircularImage)).call(this, options, body, labelModule));

                        _this.setImages(imageObj, imageObjAlt);
                        return _this;
                    }

                    (0, _createClass3['default'])(CircularImage, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

                            var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;

                            if (imageAbsent) {
                                var diameter = this.options.size * 2;
                                this.width = diameter;
                                this.height = diameter;
                                this.radius = 0.5 * this.width;
                                return;
                            }

                            // At this point, an image is present, i.e. this.imageObj is valid.
                            if (this.needsRefresh(selected, hover)) {
                                this._resizeImage();
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.switchImages(selected);
                            this.resize();
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.
                            this._drawRawCircle(ctx, x, y, values);

                            // now we draw in the circle, we save so we can revert the clip operation after drawing.
                            ctx.save();
                            // clip is used to use the stroke in drawRawCircle as an area that we can draw in.
                            ctx.clip();
                            // draw the image
                            this._drawImageAtPosition(ctx, values);
                            // restore so we can again draw on the full canvas
                            ctx.restore();

                            this._drawImageLabel(ctx, x, y, selected, hover);

                            this.updateBoundingBox(x, y);
                        }

                        // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here

                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y) {
                            this.boundingBox.top = y - this.options.size;
                            this.boundingBox.left = x - this.options.size;
                            this.boundingBox.right = x + this.options.size;
                            this.boundingBox.bottom = y + this.options.size;

                            // TODO: compare with Image.updateBoundingBox(), consolidate?
                            this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
                            this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
                            this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            this.resize(ctx);
                            return this.width * 0.5;
                        }
                    }]);
                    return CircularImage;
                }(_CircleImageBase3['default']);

                exports['default'] = CircularImage;

                /***/
            }),
            /* 188 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Database = function(_NodeBase) {
                    (0, _inherits3['default'])(Database, _NodeBase);

                    function Database(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Database);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Database.__proto__ || (0, _getPrototypeOf2['default'])(Database)).call(this, options, body, labelModule));

                        _this._setMargins(labelModule);
                        return _this;
                    }

                    (0, _createClass3['default'])(Database, [{
                        key: 'resize',
                        value: function resize(ctx, selected, hover) {
                            if (this.needsRefresh(selected, hover)) {
                                this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
                                var size = this.textSize.width + this.margin.right + this.margin.left;
                                this.width = size;
                                this.height = size;
                                this.radius = this.width / 2;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            var borderWidth = values.borderWidth / this.body.view.scale;
                            ctx.lineWidth = Math.min(this.width, borderWidth);

                            ctx.strokeStyle = values.borderColor;

                            ctx.fillStyle = values.color;
                            ctx.database(x - this.width / 2, y - this.height / 2, this.width, this.height);

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            // draw the background
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                            ctx.save();
                            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                            if (borderWidth > 0) {
                                this.enableBorderDashes(ctx, values);
                                //draw the border
                                ctx.stroke();
                                //disable dashed border for other elements
                                this.disableBorderDashes(ctx, values);
                            }
                            ctx.restore();

                            this.updateBoundingBox(x, y, ctx, selected, hover);
                            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y, ctx, selected, hover) {
                            this.resize(ctx, selected, hover);

                            this.left = x - this.width * 0.5;
                            this.top = y - this.height * 0.5;

                            this.boundingBox.left = this.left;
                            this.boundingBox.top = this.top;
                            this.boundingBox.bottom = this.top + this.height;
                            this.boundingBox.right = this.left + this.width;
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Database;
                }(_NodeBase3['default']);

                exports['default'] = Database;

                /***/
            }),
            /* 189 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Diamond = function(_ShapeBase) {
                    (0, _inherits3['default'])(Diamond, _ShapeBase);

                    function Diamond(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Diamond);
                        return (0, _possibleConstructorReturn3['default'])(this, (Diamond.__proto__ || (0, _getPrototypeOf2['default'])(Diamond)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Diamond, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'diamond', 4, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Diamond;
                }(_ShapeBase3['default']);

                exports['default'] = Diamond;

                /***/
            }),
            /* 190 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var ShapeBase = function(_NodeBase) {
                    (0, _inherits3['default'])(ShapeBase, _NodeBase);

                    function ShapeBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, ShapeBase);
                        return (0, _possibleConstructorReturn3['default'])(this, (ShapeBase.__proto__ || (0, _getPrototypeOf2['default'])(ShapeBase)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(ShapeBase, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;
                            var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { size: this.options.size };

                            if (this.needsRefresh(selected, hover)) {
                                this.labelModule.getTextSize(ctx, selected, hover);
                                var size = 2 * values.size;
                                this.width = size;
                                this.height = size;
                                this.radius = 0.5 * this.width;
                            }
                        }
                    }, {
                        key: '_drawShape',
                        value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover, values);

                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            var borderWidth = values.borderWidth / this.body.view.scale;
                            ctx.lineWidth = Math.min(this.width, borderWidth);

                            ctx.strokeStyle = values.borderColor;
                            ctx.fillStyle = values.color;
                            ctx[shape](x, y, values.size);

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            // draw the background
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                            ctx.save();
                            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                            if (borderWidth > 0) {
                                this.enableBorderDashes(ctx, values);
                                //draw the border
                                ctx.stroke();
                                //disable dashed border for other elements
                                this.disableBorderDashes(ctx, values);
                            }
                            ctx.restore();

                            if (this.options.label !== undefined) {
                                // Need to call following here in order to ensure value for `this.labelModule.size.height`
                                this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, 'hanging');
                                var yLabel = y + 0.5 * this.height + 0.5 * this.labelModule.size.height;
                                this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
                            }

                            this.updateBoundingBox(x, y);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y) {
                            this.boundingBox.top = y - this.options.size;
                            this.boundingBox.left = x - this.options.size;
                            this.boundingBox.right = x + this.options.size;
                            this.boundingBox.bottom = y + this.options.size;

                            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
                                this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
                                this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
                                this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
                            }
                        }
                    }]);
                    return ShapeBase;
                }(_NodeBase3['default']);

                exports['default'] = ShapeBase;

                /***/
            }),
            /* 191 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Dot = function(_ShapeBase) {
                    (0, _inherits3['default'])(Dot, _ShapeBase);

                    function Dot(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Dot);
                        return (0, _possibleConstructorReturn3['default'])(this, (Dot.__proto__ || (0, _getPrototypeOf2['default'])(Dot)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Dot, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'circle', 2, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            this.resize(ctx);
                            return this.options.size;
                        }
                    }]);
                    return Dot;
                }(_ShapeBase3['default']);

                exports['default'] = Dot;

                /***/
            }),
            /* 192 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Ellipse = function(_NodeBase) {
                    (0, _inherits3['default'])(Ellipse, _NodeBase);

                    function Ellipse(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Ellipse);
                        return (0, _possibleConstructorReturn3['default'])(this, (Ellipse.__proto__ || (0, _getPrototypeOf2['default'])(Ellipse)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Ellipse, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

                            if (this.needsRefresh(selected, hover)) {
                                var textSize = this.labelModule.getTextSize(ctx, selected, hover);

                                this.height = textSize.height * 2;
                                this.width = textSize.width + this.height;
                                this.radius = 0.5 * this.width;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width * 0.5;
                            this.top = y - this.height * 0.5;

                            var borderWidth = values.borderWidth / this.body.view.scale;
                            ctx.lineWidth = Math.min(this.width, borderWidth);

                            ctx.strokeStyle = values.borderColor;

                            ctx.fillStyle = values.color;
                            ctx.ellipse_vis(this.left, this.top, this.width, this.height);

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            // draw the background
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                            ctx.save();

                            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                            if (borderWidth > 0) {
                                this.enableBorderDashes(ctx, values);
                                //draw the border
                                ctx.stroke();
                                //disable dashed border for other elements
                                this.disableBorderDashes(ctx, values);
                            }

                            ctx.restore();

                            this.updateBoundingBox(x, y, ctx, selected, hover);
                            this.labelModule.draw(ctx, x, y, selected, hover);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y, ctx, selected, hover) {
                            this.resize(ctx, selected, hover); // just in case

                            this.left = x - this.width * 0.5;
                            this.top = y - this.height * 0.5;

                            this.boundingBox.left = this.left;
                            this.boundingBox.top = this.top;
                            this.boundingBox.bottom = this.top + this.height;
                            this.boundingBox.right = this.left + this.width;
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            this.resize(ctx);
                            var a = this.width * 0.5;
                            var b = this.height * 0.5;
                            var w = Math.sin(angle) * a;
                            var h = Math.cos(angle) * b;
                            return a * b / Math.sqrt(w * w + h * h);
                        }
                    }]);
                    return Ellipse;
                }(_NodeBase3['default']);

                exports['default'] = Ellipse;

                /***/
            }),
            /* 193 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Icon = function(_NodeBase) {
                    (0, _inherits3['default'])(Icon, _NodeBase);

                    function Icon(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Icon);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Icon.__proto__ || (0, _getPrototypeOf2['default'])(Icon)).call(this, options, body, labelModule));

                        _this._setMargins(labelModule);
                        return _this;
                    }

                    (0, _createClass3['default'])(Icon, [{
                        key: 'resize',
                        value: function resize(ctx, selected, hover) {
                            if (this.needsRefresh(selected, hover)) {
                                this.iconSize = {
                                    width: Number(this.options.icon.size),
                                    height: Number(this.options.icon.size)
                                };
                                this.width = this.iconSize.width + this.margin.right + this.margin.left;
                                this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
                                this.radius = 0.5 * this.width;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.options.icon.size = this.options.icon.size || 50;

                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;
                            this._icon(ctx, x, y, selected, hover, values);

                            if (this.options.label !== undefined) {
                                var iconTextSpacing = 5;
                                this.labelModule.draw(ctx, this.left + this.iconSize.width / 2 + this.margin.left, y + this.height / 2 + iconTextSpacing, selected);
                            }

                            this.updateBoundingBox(x, y);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y) {
                            this.boundingBox.top = y - this.options.icon.size * 0.5;
                            this.boundingBox.left = x - this.options.icon.size * 0.5;
                            this.boundingBox.right = x + this.options.icon.size * 0.5;
                            this.boundingBox.bottom = y + this.options.icon.size * 0.5;

                            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
                                var iconTextSpacing = 5;
                                this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
                                this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
                                this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
                            }
                        }
                    }, {
                        key: '_icon',
                        value: function _icon(ctx, x, y, selected, hover, values) {
                            var iconSize = Number(this.options.icon.size);

                            if (this.options.icon.code !== undefined) {
                                ctx.font = (selected ? "bold " : "") + iconSize + "px " + this.options.icon.face;

                                // draw icon
                                ctx.fillStyle = this.options.icon.color || "black";
                                ctx.textAlign = "center";
                                ctx.textBaseline = "middle";

                                // draw shadow if enabled
                                this.enableShadow(ctx, values);
                                ctx.fillText(this.options.icon.code, x, y);

                                // disable shadows for other elements.
                                this.disableShadow(ctx, values);
                            } else {
                                console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');
                            }
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Icon;
                }(_NodeBase3['default']);

                exports['default'] = Icon;

                /***/
            }),
            /* 194 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _CircleImageBase2 = __webpack_require__(186);

                var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Image = function(_CircleImageBase) {
                    (0, _inherits3['default'])(Image, _CircleImageBase);

                    function Image(options, body, labelModule, imageObj, imageObjAlt) {
                        (0, _classCallCheck3['default'])(this, Image);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Image.__proto__ || (0, _getPrototypeOf2['default'])(Image)).call(this, options, body, labelModule));

                        _this.setImages(imageObj, imageObjAlt);
                        return _this;
                    }

                    (0, _createClass3['default'])(Image, [{
                        key: 'resize',
                        value: function resize(ctx) {
                            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
                            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

                            if (this.needsRefresh(selected, hover)) {
                                this._resizeImage();
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.switchImages(selected);
                            this.resize();
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            if (this.options.shapeProperties.useBorderWithImage === true) {
                                var neutralborderWidth = this.options.borderWidth;
                                var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
                                var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
                                ctx.lineWidth = Math.min(this.width, borderWidth);

                                ctx.beginPath();

                                // setup the line properties.
                                ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

                                // set a fillstyle
                                ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;

                                // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image
                                ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
                                ctx.fill();

                                //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
                                ctx.save();
                                // if borders are zero width, they will be drawn with width 1 by default. This prevents that
                                if (borderWidth > 0) {
                                    this.enableBorderDashes(ctx, values);
                                    //draw the border
                                    ctx.stroke();
                                    //disable dashed border for other elements
                                    this.disableBorderDashes(ctx, values);
                                }
                                ctx.restore();

                                ctx.closePath();
                            }

                            this._drawImageAtPosition(ctx, values);

                            this._drawImageLabel(ctx, x, y, selected, hover);

                            this.updateBoundingBox(x, y);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y) {
                            this.resize();
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            this.boundingBox.top = this.top;
                            this.boundingBox.left = this.left;
                            this.boundingBox.right = this.left + this.width;
                            this.boundingBox.bottom = this.top + this.height;

                            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
                                this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
                                this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
                                this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                            }
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Image;
                }(_CircleImageBase3['default']);

                exports['default'] = Image;

                /***/
            }),
            /* 195 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Square = function(_ShapeBase) {
                    (0, _inherits3['default'])(Square, _ShapeBase);

                    function Square(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Square);
                        return (0, _possibleConstructorReturn3['default'])(this, (Square.__proto__ || (0, _getPrototypeOf2['default'])(Square)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Square, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'square', 2, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Square;
                }(_ShapeBase3['default']);

                exports['default'] = Square;

                /***/
            }),
            /* 196 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Star = function(_ShapeBase) {
                    (0, _inherits3['default'])(Star, _ShapeBase);

                    function Star(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Star);
                        return (0, _possibleConstructorReturn3['default'])(this, (Star.__proto__ || (0, _getPrototypeOf2['default'])(Star)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Star, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'star', 4, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Star;
                }(_ShapeBase3['default']);

                exports['default'] = Star;

                /***/
            }),
            /* 197 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _NodeBase2 = __webpack_require__(184);

                var _NodeBase3 = _interopRequireDefault(_NodeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Text = function(_NodeBase) {
                    (0, _inherits3['default'])(Text, _NodeBase);

                    function Text(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Text);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Text.__proto__ || (0, _getPrototypeOf2['default'])(Text)).call(this, options, body, labelModule));

                        _this._setMargins(labelModule);
                        return _this;
                    }

                    (0, _createClass3['default'])(Text, [{
                        key: 'resize',
                        value: function resize(ctx, selected, hover) {
                            if (this.needsRefresh(selected, hover)) {
                                this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
                                this.width = this.textSize.width + this.margin.right + this.margin.left;
                                this.height = this.textSize.height + this.margin.top + this.margin.bottom;
                                this.radius = 0.5 * this.width;
                            }
                        }
                    }, {
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this.resize(ctx, selected, hover);
                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);

                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);

                            this.updateBoundingBox(x, y, ctx, selected, hover);
                        }
                    }, {
                        key: 'updateBoundingBox',
                        value: function updateBoundingBox(x, y, ctx, selected, hover) {
                            this.resize(ctx, selected, hover);

                            this.left = x - this.width / 2;
                            this.top = y - this.height / 2;

                            this.boundingBox.top = this.top;
                            this.boundingBox.left = this.left;
                            this.boundingBox.right = this.left + this.width;
                            this.boundingBox.bottom = this.top + this.height;
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Text;
                }(_NodeBase3['default']);

                exports['default'] = Text;

                /***/
            }),
            /* 198 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Triangle = function(_ShapeBase) {
                    (0, _inherits3['default'])(Triangle, _ShapeBase);

                    function Triangle(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, Triangle);
                        return (0, _possibleConstructorReturn3['default'])(this, (Triangle.__proto__ || (0, _getPrototypeOf2['default'])(Triangle)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(Triangle, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'triangle', 3, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return Triangle;
                }(_ShapeBase3['default']);

                exports['default'] = Triangle;

                /***/
            }),
            /* 199 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _ShapeBase2 = __webpack_require__(190);

                var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var TriangleDown = function(_ShapeBase) {
                    (0, _inherits3['default'])(TriangleDown, _ShapeBase);

                    function TriangleDown(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, TriangleDown);
                        return (0, _possibleConstructorReturn3['default'])(this, (TriangleDown.__proto__ || (0, _getPrototypeOf2['default'])(TriangleDown)).call(this, options, body, labelModule));
                    }

                    (0, _createClass3['default'])(TriangleDown, [{
                        key: 'draw',
                        value: function draw(ctx, x, y, selected, hover, values) {
                            this._drawShape(ctx, 'triangleDown', 3, x, y, selected, hover, values);
                        }
                    }, {
                        key: 'distanceToBorder',
                        value: function distanceToBorder(ctx, angle) {
                            return this._distanceToBorder(ctx, angle);
                        }
                    }]);
                    return TriangleDown;
                }(_ShapeBase3['default']);

                exports['default'] = TriangleDown;

                /***/
            }),
            /* 200 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var DataSet = __webpack_require__(89);
                var DataView = __webpack_require__(93);

                var Edge = __webpack_require__(201)['default'];
                var Label = __webpack_require__(169)['default'];

                var EdgesHandler = function() {
                    function EdgesHandler(body, images, groups) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, EdgesHandler);

                        this.body = body;
                        this.images = images;
                        this.groups = groups;

                        // create the edge API in the body container
                        this.body.functions.createEdge = this.create.bind(this);

                        this.edgesListeners = {
                            add: function add(event, params) {
                                _this.add(params.items);
                            },
                            update: function update(event, params) {
                                _this.update(params.items);
                            },
                            remove: function remove(event, params) {
                                _this.remove(params.items);
                            }
                        };

                        this.options = {};
                        this.defaultOptions = {
                            arrows: {
                                to: { enabled: false, scaleFactor: 1, type: 'arrow' }, // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
                                middle: { enabled: false, scaleFactor: 1, type: 'arrow' },
                                from: { enabled: false, scaleFactor: 1, type: 'arrow' }
                            },
                            arrowStrikethrough: true,
                            color: {
                                color: '#848484',
                                highlight: '#848484',
                                hover: '#848484',
                                inherit: 'from',
                                opacity: 1.0
                            },
                            dashes: false,
                            font: {
                                color: '#343434',
                                size: 14, // px
                                face: 'arial',
                                background: 'none',
                                strokeWidth: 2, // px
                                strokeColor: '#ffffff',
                                align: 'horizontal',
                                multi: false,
                                vadjust: 0,
                                bold: {
                                    mod: 'bold'
                                },
                                boldital: {
                                    mod: 'bold italic'
                                },
                                ital: {
                                    mod: 'italic'
                                },
                                mono: {
                                    mod: '',
                                    size: 15, // px
                                    face: 'courier new',
                                    vadjust: 2
                                }
                            },
                            hidden: false,
                            hoverWidth: 1.5,
                            label: undefined,
                            labelHighlightBold: true,
                            length: undefined,
                            physics: true,
                            scaling: {
                                min: 1,
                                max: 15,
                                label: {
                                    enabled: true,
                                    min: 14,
                                    max: 30,
                                    maxVisible: 30,
                                    drawThreshold: 5
                                },
                                customScalingFunction: function customScalingFunction(min, max, total, value) {
                                    if (max === min) {
                                        return 0.5;
                                    } else {
                                        var scale = 1 / (max - min);
                                        return Math.max(0, (value - min) * scale);
                                    }
                                }
                            },
                            selectionWidth: 1.5,
                            selfReferenceSize: 20,
                            shadow: {
                                enabled: false,
                                color: 'rgba(0,0,0,0.5)',
                                size: 10,
                                x: 5,
                                y: 5
                            },
                            smooth: {
                                enabled: true,
                                type: "dynamic",
                                forceDirection: 'none',
                                roundness: 0.5
                            },
                            title: undefined,
                            width: 1,
                            value: undefined
                        };

                        util.extend(this.options, this.defaultOptions);

                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(EdgesHandler, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this2 = this;

                            // this allows external modules to force all dynamic curves to turn static.
                            this.body.emitter.on("_forceDisableDynamicCurves", function(type) {
                                if (type === 'dynamic') {
                                    type = 'continuous';
                                }
                                var emitChange = false;
                                for (var edgeId in _this2.body.edges) {
                                    if (_this2.body.edges.hasOwnProperty(edgeId)) {
                                        var edge = _this2.body.edges[edgeId];
                                        var edgeData = _this2.body.data.edges._data[edgeId];

                                        // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.
                                        // this is because a change in the global would not affect these curves.
                                        if (edgeData !== undefined) {
                                            var edgeOptions = edgeData.smooth;
                                            if (edgeOptions !== undefined) {
                                                if (edgeOptions.enabled === true && edgeOptions.type === 'dynamic') {
                                                    if (type === undefined) {
                                                        edge.setOptions({ smooth: false });
                                                    } else {
                                                        edge.setOptions({ smooth: { type: type } });
                                                    }
                                                    emitChange = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (emitChange === true) {
                                    _this2.body.emitter.emit("_dataChanged");
                                }
                            });

                            // this is called when options of EXISTING nodes or edges have changed.
                            this.body.emitter.on("_dataUpdated", function() {
                                _this2.reconnectEdges();
                            });

                            // refresh the edges. Used when reverting from hierarchical layout
                            this.body.emitter.on("refreshEdges", this.refresh.bind(this));
                            this.body.emitter.on("refresh", this.refresh.bind(this));
                            this.body.emitter.on("destroy", function() {
                                util.forEach(_this2.edgesListeners, function(callback, event) {
                                    if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);
                                });
                                delete _this2.body.functions.createEdge;
                                delete _this2.edgesListeners.add;
                                delete _this2.edgesListeners.update;
                                delete _this2.edgesListeners.remove;
                                delete _this2.edgesListeners;
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            this.edgeOptions = options;
                            if (options !== undefined) {
                                // use the parser from the Edge class to fill in all shorthand notations
                                Edge.parseOptions(this.options, options);

                                // update smooth settings in all edges
                                var dataChanged = false;
                                if (options.smooth !== undefined) {
                                    for (var edgeId in this.body.edges) {
                                        if (this.body.edges.hasOwnProperty(edgeId)) {
                                            dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
                                        }
                                    }
                                }

                                // update fonts in all edges
                                if (options.font !== undefined) {
                                    // use the parser from the Label class to fill in all shorthand notations
                                    Label.parseOptions(this.options.font, options);
                                    for (var _edgeId in this.body.edges) {
                                        if (this.body.edges.hasOwnProperty(_edgeId)) {
                                            this.body.edges[_edgeId].updateLabelModule();
                                        }
                                    }
                                }

                                // update the state of the variables if needed
                                if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {
                                    this.body.emitter.emit('_dataChanged');
                                }
                            }
                        }

                        /**
                         * Load edges by reading the data table
                         * @param {Array | DataSet | DataView} edges    The data containing the edges.
                         * @private
                         * @private
                         */

                    }, {
                        key: 'setData',
                        value: function setData(edges) {
                            var _this3 = this;

                            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var oldEdgesData = this.body.data.edges;

                            if (edges instanceof DataSet || edges instanceof DataView) {
                                this.body.data.edges = edges;
                            } else if (Array.isArray(edges)) {
                                this.body.data.edges = new DataSet();
                                this.body.data.edges.add(edges);
                            } else if (!edges) {
                                this.body.data.edges = new DataSet();
                            } else {
                                throw new TypeError('Array or DataSet expected');
                            }

                            // TODO: is this null or undefined or false?
                            if (oldEdgesData) {
                                // unsubscribe from old dataset
                                util.forEach(this.edgesListeners, function(callback, event) {
                                    oldEdgesData.off(event, callback);
                                });
                            }

                            // remove drawn edges
                            this.body.edges = {};

                            // TODO: is this null or undefined or false?
                            if (this.body.data.edges) {
                                // subscribe to new dataset
                                util.forEach(this.edgesListeners, function(callback, event) {
                                    _this3.body.data.edges.on(event, callback);
                                });

                                // draw all new nodes
                                var ids = this.body.data.edges.getIds();
                                this.add(ids, true);
                            }

                            if (doNotEmit === false) {
                                this.body.emitter.emit("_dataChanged");
                            }
                        }

                        /**
                         * Add edges
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'add',
                        value: function add(ids) {
                            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var edges = this.body.edges;
                            var edgesData = this.body.data.edges;

                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];

                                var oldEdge = edges[id];
                                if (oldEdge) {
                                    oldEdge.disconnect();
                                }

                                var data = edgesData.get(id, { "showInternalIds": true });
                                edges[id] = this.create(data);
                            }

                            if (doNotEmit === false) {
                                this.body.emitter.emit("_dataChanged");
                            }
                        }

                        /**
                         * Update existing edges, or create them when not yet existing
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'update',
                        value: function update(ids) {
                            var edges = this.body.edges;
                            var edgesData = this.body.data.edges;
                            var dataChanged = false;
                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                var data = edgesData.get(id);
                                var edge = edges[id];
                                if (edge !== undefined) {
                                    // update edge
                                    edge.disconnect();
                                    dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.
                                    edge.connect();
                                } else {
                                    // create edge
                                    this.body.edges[id] = this.create(data);
                                    dataChanged = true;
                                }
                            }

                            if (dataChanged === true) {
                                this.body.emitter.emit("_dataChanged");
                            } else {
                                this.body.emitter.emit("_dataUpdated");
                            }
                        }

                        /**
                         * Remove existing edges. Non existing ids will be ignored
                         * @param {Number[] | String[]} ids
                         * @private
                         */

                    }, {
                        key: 'remove',
                        value: function remove(ids) {
                            var edges = this.body.edges;
                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                var edge = edges[id];
                                if (edge !== undefined) {
                                    edge.cleanup();
                                    edge.disconnect();
                                    delete edges[id];
                                }
                            }

                            this.body.emitter.emit("_dataChanged");
                        }
                    }, {
                        key: 'refresh',
                        value: function refresh() {
                            var edges = this.body.edges;
                            for (var edgeId in edges) {
                                var edge = undefined;
                                if (edges.hasOwnProperty(edgeId)) {
                                    edge = edges[edgeId];
                                }
                                var data = this.body.data.edges._data[edgeId];
                                if (edge !== undefined && data !== undefined) {
                                    edge.setOptions(data);
                                }
                            }
                        }
                    }, {
                        key: 'create',
                        value: function create(properties) {
                            return new Edge(properties, this.body, this.options, this.defaultOptions, this.edgeOptions);
                        }

                        /**
                         * Reconnect all edges
                         * @private
                         */

                    }, {
                        key: 'reconnectEdges',
                        value: function reconnectEdges() {
                            var id;
                            var nodes = this.body.nodes;
                            var edges = this.body.edges;

                            for (id in nodes) {
                                if (nodes.hasOwnProperty(id)) {
                                    nodes[id].edges = [];
                                }
                            }

                            for (id in edges) {
                                if (edges.hasOwnProperty(id)) {
                                    var edge = edges[id];
                                    edge.from = null;
                                    edge.to = null;
                                    edge.connect();
                                }
                            }
                        }
                    }, {
                        key: 'getConnectedNodes',
                        value: function getConnectedNodes(edgeId) {
                            var nodeList = [];
                            if (this.body.edges[edgeId] !== undefined) {
                                var edge = this.body.edges[edgeId];
                                if (edge.fromId !== undefined) {
                                    nodeList.push(edge.fromId);
                                }
                                if (edge.toId !== undefined) {
                                    nodeList.push(edge.toId);
                                }
                            }
                            return nodeList;
                        }
                    }]);
                    return EdgesHandler;
                }();

                exports['default'] = EdgesHandler;

                /***/
            }),
            /* 201 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _create = __webpack_require__(55);

                var _create2 = _interopRequireDefault(_create);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var Label = __webpack_require__(169)['default'];
                var CubicBezierEdge = __webpack_require__(202)['default'];
                var BezierEdgeDynamic = __webpack_require__(206)['default'];
                var BezierEdgeStatic = __webpack_require__(207)['default'];
                var StraightEdge = __webpack_require__(208)['default'];

                /**
                 * @class Edge
                 *
                 * A edge connects two nodes
                 * @param {Object} properties     Object with options. Must contain
                 *                                At least options from and to.
                 *                                Available options: from (number),
                 *                                to (number), label (string, color (string),
                 *                                width (number), style (string),
                 *                                length (number), title (string)
                 * @param {Network} network       A Network object, used to find and edge to
                 *                                nodes.
                 * @param {Object} constants      An object with default values for
                 *                                example for the color
                 */

                var Edge = function() {
                    function Edge(options, body, globalOptions, defaultOptions, edgeOptions) {
                        (0, _classCallCheck3['default'])(this, Edge);

                        if (body === undefined) {
                            throw "No body provided";
                        }
                        this.options = util.bridgeObject(globalOptions);
                        this.globalOptions = globalOptions;
                        this.defaultOptions = defaultOptions;
                        this.edgeOptions = edgeOptions;
                        this.body = body;

                        // initialize variables
                        this.id = undefined;
                        this.fromId = undefined;
                        this.toId = undefined;
                        this.selected = false;
                        this.hover = false;
                        this.labelDirty = true;

                        this.baseWidth = this.options.width;
                        this.baseFontSize = this.options.font.size;

                        this.from = undefined; // a node
                        this.to = undefined; // a node

                        this.edgeType = undefined;

                        this.connected = false;

                        this.labelModule = new Label(this.body, this.options, true /* It's an edge label */ );
                        this.setOptions(options);
                    }

                    /**
                     * Set or overwrite options for the edge
                     * @param {Object} options  an object with options
                     * @param doNotEmit
                     */


                    (0, _createClass3['default'])(Edge, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (!options) {
                                return;
                            }

                            Edge.parseOptions(this.options, options, true, this.globalOptions);

                            if (options.id !== undefined) {
                                this.id = options.id;
                            }
                            if (options.from !== undefined) {
                                this.fromId = options.from;
                            }
                            if (options.to !== undefined) {
                                this.toId = options.to;
                            }
                            if (options.title !== undefined) {
                                this.title = options.title;
                            }
                            if (options.value !== undefined) {
                                options.value = parseFloat(options.value);
                            }

                            this.choosify(options);

                            // update label Module
                            this.updateLabelModule(options);
                            this.labelModule.propagateFonts(this.edgeOptions, options, this.defaultOptions);

                            var dataChanged = this.updateEdgeType();

                            // if anything has been updates, reset the selection width and the hover width
                            this._setInteractionWidths();

                            // A node is connected when it has a from and to node that both exist in the network.body.nodes.
                            this.connect();

                            if (options.hidden !== undefined || options.physics !== undefined) {
                                dataChanged = true;
                            }

                            return dataChanged;
                        }
                    }, {
                        key: 'choosify',
                        value: function choosify(options) {
                            this.chooser = true;

                            var pile = [options, this.options, this.edgeOptions, this.defaultOptions];

                            var chosen = util.topMost(pile, 'chosen');
                            if (typeof chosen === 'boolean') {
                                this.chooser = chosen;
                            } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {
                                var chosenEdge = util.topMost(pile, ['chosen', 'edge']);
                                if (typeof chosenEdge === 'boolean' || typeof chosenEdge === 'function') {
                                    this.chooser = chosenEdge;
                                }
                            }
                        }
                    }, {
                        key: 'getFormattingValues',
                        value: function getFormattingValues() {
                            var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
                            var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
                            var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
                            var inheritsColor = this.options.color.inherit;
                            var values = {
                                toArrow: toArrow,
                                toArrowScale: this.options.arrows.to.scaleFactor,
                                toArrowType: this.options.arrows.to.type,
                                middleArrow: middleArrow,
                                middleArrowScale: this.options.arrows.middle.scaleFactor,
                                middleArrowType: this.options.arrows.middle.type,
                                fromArrow: fromArrow,
                                fromArrowScale: this.options.arrows.from.scaleFactor,
                                fromArrowType: this.options.arrows.from.type,
                                arrowStrikethrough: this.options.arrowStrikethrough,
                                color: inheritsColor ? undefined : this.options.color.color,
                                inheritsColor: inheritsColor,
                                opacity: this.options.color.opacity,
                                hidden: this.options.hidden,
                                length: this.options.length,
                                shadow: this.options.shadow.enabled,
                                shadowColor: this.options.shadow.color,
                                shadowSize: this.options.shadow.size,
                                shadowX: this.options.shadow.x,
                                shadowY: this.options.shadow.y,
                                dashes: this.options.dashes,
                                width: this.options.width
                            };
                            if (this.selected || this.hover) {
                                if (this.chooser === true) {
                                    if (this.selected) {
                                        var selectedWidth = this.options.selectionWidth;
                                        if (typeof selectedWidth === 'function') {
                                            values.width = selectedWidth(values.width);
                                        } else if (typeof selectedWidth === 'number') {
                                            values.width += selectedWidth;
                                        }
                                        values.width = Math.max(values.width, 0.3 / this.body.view.scale);
                                        values.color = this.options.color.highlight;
                                        values.shadow = this.options.shadow.enabled;
                                    } else if (this.hover) {
                                        var hoverWidth = this.options.hoverWidth;
                                        if (typeof hoverWidth === 'function') {
                                            values.width = hoverWidth(values.width);
                                        } else if (typeof hoverWidth === 'number') {
                                            values.width += hoverWidth;
                                        }
                                        values.width = Math.max(values.width, 0.3 / this.body.view.scale);
                                        values.color = this.options.color.hover;
                                        values.shadow = this.options.shadow.enabled;
                                    }
                                } else if (typeof this.chooser === 'function') {
                                    this.chooser(values, this.options.id, this.selected, this.hover);
                                    if (values.color !== undefined) {
                                        values.inheritsColor = false;
                                    }
                                    if (values.shadow === false) {
                                        if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
                                            values.shadow = true;
                                        }
                                    }
                                }
                            } else {
                                values.shadow = this.options.shadow.enabled;
                                values.width = Math.max(values.width, 0.3 / this.body.view.scale);
                            }
                            return values;
                        }

                        /**
                         * update the options in the label module
                         */

                    }, {
                        key: 'updateLabelModule',
                        value: function updateLabelModule(options) {
                            this.labelModule.setOptions(this.options, true);
                            if (this.labelModule.baseSize !== undefined) {
                                this.baseFontSize = this.labelModule.baseSize;
                            }
                            this.labelModule.constrain(this.edgeOptions, options, this.defaultOptions);
                            this.labelModule.choosify(this.edgeOptions, options, this.defaultOptions);
                        }

                        /**
                         * update the edge type, set the options
                         * @returns {boolean}
                         */

                    }, {
                        key: 'updateEdgeType',
                        value: function updateEdgeType() {
                            var smooth = this.options.smooth;
                            var dataChanged = false;
                            var changeInType = true;
                            if (this.edgeType !== undefined) {
                                if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === 'dynamic' || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === 'cubicBezier' || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== 'dynamic' && smooth.type !== 'cubicBezier' || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
                                    changeInType = false;
                                }
                                if (changeInType === true) {
                                    dataChanged = this.cleanup();
                                }
                            }
                            if (changeInType === true) {
                                if (smooth.enabled === true) {
                                    if (smooth.type === 'dynamic') {
                                        dataChanged = true;
                                        this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
                                    } else if (smooth.type === 'cubicBezier') {
                                        this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
                                    } else {
                                        this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
                                    }
                                } else {
                                    this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
                                }
                            } else {
                                // if nothing changes, we just set the options.
                                this.edgeType.setOptions(this.options);
                            }
                            return dataChanged;
                        }

                        /**
                         * Connect an edge to its nodes
                         */

                    }, {
                        key: 'connect',
                        value: function connect() {
                            this.disconnect();

                            this.from = this.body.nodes[this.fromId] || undefined;
                            this.to = this.body.nodes[this.toId] || undefined;
                            this.connected = this.from !== undefined && this.to !== undefined;

                            if (this.connected === true) {
                                this.from.attachEdge(this);
                                this.to.attachEdge(this);
                            } else {
                                if (this.from) {
                                    this.from.detachEdge(this);
                                }
                                if (this.to) {
                                    this.to.detachEdge(this);
                                }
                            }

                            this.edgeType.connect();
                        }

                        /**
                         * Disconnect an edge from its nodes
                         */

                    }, {
                        key: 'disconnect',
                        value: function disconnect() {
                            if (this.from) {
                                this.from.detachEdge(this);
                                this.from = undefined;
                            }
                            if (this.to) {
                                this.to.detachEdge(this);
                                this.to = undefined;
                            }

                            this.connected = false;
                        }

                        /**
                         * get the title of this edge.
                         * @return {string} title    The title of the edge, or undefined when no title
                         *                           has been set.
                         */

                    }, {
                        key: 'getTitle',
                        value: function getTitle() {
                            return this.title;
                        }

                        /**
                         * check if this node is selecte
                         * @return {boolean} selected   True if node is selected, else false
                         */

                    }, {
                        key: 'isSelected',
                        value: function isSelected() {
                            return this.selected;
                        }

                        /**
                         * Retrieve the value of the edge. Can be undefined
                         * @return {Number} value
                         */

                    }, {
                        key: 'getValue',
                        value: function getValue() {
                            return this.options.value;
                        }

                        /**
                         * Adjust the value range of the edge. The edge will adjust it's width
                         * based on its value.
                         * @param {Number} min
                         * @param {Number} max
                         * @param total
                         */

                    }, {
                        key: 'setValueRange',
                        value: function setValueRange(min, max, total) {
                            if (this.options.value !== undefined) {
                                var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
                                var widthDiff = this.options.scaling.max - this.options.scaling.min;
                                if (this.options.scaling.label.enabled === true) {
                                    var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
                                    this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
                                }
                                this.options.width = this.options.scaling.min + scale * widthDiff;
                            } else {
                                this.options.width = this.baseWidth;
                                this.options.font.size = this.baseFontSize;
                            }

                            this._setInteractionWidths();
                            this.updateLabelModule();
                        }
                    }, {
                        key: '_setInteractionWidths',
                        value: function _setInteractionWidths() {
                            if (typeof this.options.hoverWidth === 'function') {
                                this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
                            } else {
                                this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
                            }
                            if (typeof this.options.selectionWidth === 'function') {
                                this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
                            } else {
                                this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
                            }
                        }

                        /**
                         * Redraw a edge
                         * Draw this edge in the given canvas
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
                         * @param {CanvasRenderingContext2D}   ctx
                         */

                    }, {
                        key: 'draw',
                        value: function draw(ctx) {
                            var values = this.getFormattingValues();
                            if (values.hidden) {
                                return;
                            }

                            // get the via node from the edge type
                            var viaNode = this.edgeType.getViaNode();
                            var arrowData = {};

                            // restore edge targets to defaults
                            this.edgeType.fromPoint = this.edgeType.from;
                            this.edgeType.toPoint = this.edgeType.to;

                            // from and to arrows give a different end point for edges. we set them here
                            if (values.fromArrow) {
                                arrowData.from = this.edgeType.getArrowData(ctx, 'from', viaNode, this.selected, this.hover, values);
                                if (values.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;
                            }
                            if (values.toArrow) {
                                arrowData.to = this.edgeType.getArrowData(ctx, 'to', viaNode, this.selected, this.hover, values);
                                if (values.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;
                            }

                            // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.
                            if (values.middleArrow) {
                                arrowData.middle = this.edgeType.getArrowData(ctx, 'middle', viaNode, this.selected, this.hover, values);
                            }

                            // draw everything
                            this.edgeType.drawLine(ctx, values, this.selected, this.hover, viaNode);
                            this.drawArrows(ctx, arrowData, values);
                            this.drawLabel(ctx, viaNode);
                        }
                    }, {
                        key: 'drawArrows',
                        value: function drawArrows(ctx, arrowData, values) {
                            if (values.fromArrow) {
                                this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.from);
                            }
                            if (values.middleArrow) {
                                this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.middle);
                            }
                            if (values.toArrow) {
                                this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.to);
                            }
                        }
                    }, {
                        key: 'drawLabel',
                        value: function drawLabel(ctx, viaNode) {
                            if (this.options.label !== undefined) {
                                // set style
                                var node1 = this.from;
                                var node2 = this.to;
                                var selected = this.from.selected || this.to.selected || this.selected;
                                if (node1.id != node2.id) {
                                    this.labelModule.pointToSelf = false;
                                    var point = this.edgeType.getPoint(0.5, viaNode);
                                    ctx.save();

                                    // if the label has to be rotated:
                                    if (this.options.font.align !== "horizontal") {
                                        this.labelModule.calculateLabelSize(ctx, selected, this.hover, point.x, point.y);
                                        ctx.translate(point.x, this.labelModule.size.yLine);
                                        this._rotateForLabelAlignment(ctx);
                                    }

                                    // draw the label
                                    this.labelModule.draw(ctx, point.x, point.y, selected, this.hover);
                                    ctx.restore();
                                } else {
                                    // Ignore the orientations.
                                    this.labelModule.pointToSelf = true;
                                    var x, y;
                                    var radius = this.options.selfReferenceSize;
                                    if (node1.shape.width > node1.shape.height) {
                                        x = node1.x + node1.shape.width * 0.5;
                                        y = node1.y - radius;
                                    } else {
                                        x = node1.x + radius;
                                        y = node1.y - node1.shape.height * 0.5;
                                    }
                                    point = this._pointOnCircle(x, y, radius, 0.125);
                                    this.labelModule.draw(ctx, point.x, point.y, selected, this.hover);
                                }
                            }
                        }

                        /**
                         * Check if this object is overlapping with the provided object
                         * @param {Object} obj   an object with parameters left, top
                         * @return {boolean}     True if location is located on the edge
                         */

                    }, {
                        key: 'isOverlappingWith',
                        value: function isOverlappingWith(obj) {
                            if (this.connected) {
                                var distMax = 10;
                                var xFrom = this.from.x;
                                var yFrom = this.from.y;
                                var xTo = this.to.x;
                                var yTo = this.to.y;
                                var xObj = obj.left;
                                var yObj = obj.top;

                                var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);

                                return dist < distMax;
                            } else {
                                return false;
                            }
                        }

                        /**
                         * Rotates the canvas so the text is most readable
                         * @param {CanvasRenderingContext2D} ctx
                         * @private
                         */

                    }, {
                        key: '_rotateForLabelAlignment',
                        value: function _rotateForLabelAlignment(ctx) {
                            var dy = this.from.y - this.to.y;
                            var dx = this.from.x - this.to.x;
                            var angleInDegrees = Math.atan2(dy, dx);

                            // rotate so label it is readable
                            if (angleInDegrees < -1 && dx < 0 || angleInDegrees > 0 && dx < 0) {
                                angleInDegrees = angleInDegrees + Math.PI;
                            }

                            ctx.rotate(angleInDegrees);
                        }

                        /**
                         * Get a point on a circle
                         * @param {Number} x
                         * @param {Number} y
                         * @param {Number} radius
                         * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
                         * @return {Object} point
                         * @private
                         */

                    }, {
                        key: '_pointOnCircle',
                        value: function _pointOnCircle(x, y, radius, percentage) {
                            var angle = percentage * 2 * Math.PI;
                            return {
                                x: x + radius * Math.cos(angle),
                                y: y - radius * Math.sin(angle)
                            };
                        }
                    }, {
                        key: 'select',
                        value: function select() {
                            this.selected = true;
                        }
                    }, {
                        key: 'unselect',
                        value: function unselect() {
                            this.selected = false;
                        }

                        /**
                         * cleans all required things on delete
                         * @returns {*}
                         */

                    }, {
                        key: 'cleanup',
                        value: function cleanup() {
                            return this.edgeType.cleanup();
                        }
                    }], [{
                        key: 'parseOptions',
                        value: function parseOptions(parentOptions, newOptions) {
                            var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                            var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                            var fields = ['arrowStrikethrough', 'id', 'from', 'hidden', 'hoverWidth', 'label', 'labelHighlightBold', 'length', 'line', 'opacity', 'physics', 'scaling', 'selectionWidth', 'selfReferenceSize', 'to', 'title', 'value', 'width'];

                            // only deep extend the items in the field array. These do not have shorthand.
                            util.selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);

                            util.mergeOptions(parentOptions, newOptions, 'smooth', allowDeletion, globalOptions);
                            util.mergeOptions(parentOptions, newOptions, 'shadow', allowDeletion, globalOptions);

                            if (newOptions.dashes !== undefined && newOptions.dashes !== null) {
                                parentOptions.dashes = newOptions.dashes;
                            } else if (allowDeletion === true && newOptions.dashes === null) {
                                parentOptions.dashes = (0, _create2['default'])(globalOptions.dashes); // this sets the pointer of the option back to the global option.
                            }

                            // set the scaling newOptions
                            if (newOptions.scaling !== undefined && newOptions.scaling !== null) {
                                if (newOptions.scaling.min !== undefined) {
                                    parentOptions.scaling.min = newOptions.scaling.min;
                                }
                                if (newOptions.scaling.max !== undefined) {
                                    parentOptions.scaling.max = newOptions.scaling.max;
                                }
                                util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', allowDeletion, globalOptions.scaling);
                            } else if (allowDeletion === true && newOptions.scaling === null) {
                                parentOptions.scaling = (0, _create2['default'])(globalOptions.scaling); // this sets the pointer of the option back to the global option.
                            }

                            // handle multiple input cases for arrows
                            if (newOptions.arrows !== undefined && newOptions.arrows !== null) {
                                if (typeof newOptions.arrows === 'string') {
                                    var arrows = newOptions.arrows.toLowerCase();
                                    parentOptions.arrows.to.enabled = arrows.indexOf("to") != -1;
                                    parentOptions.arrows.middle.enabled = arrows.indexOf("middle") != -1;
                                    parentOptions.arrows.from.enabled = arrows.indexOf("from") != -1;
                                } else if ((0, _typeof3['default'])(newOptions.arrows) === 'object') {
                                    util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'to', allowDeletion, globalOptions.arrows);
                                    util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'middle', allowDeletion, globalOptions.arrows);
                                    util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'from', allowDeletion, globalOptions.arrows);
                                } else {
                                    throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + (0, _stringify2['default'])(newOptions.arrows));
                                }
                            } else if (allowDeletion === true && newOptions.arrows === null) {
                                parentOptions.arrows = (0, _create2['default'])(globalOptions.arrows); // this sets the pointer of the option back to the global option.
                            }

                            // handle multiple input cases for color
                            if (newOptions.color !== undefined && newOptions.color !== null) {
                                // make a copy of the parent object in case this is referring to the global one (due to object create once, then update)
                                parentOptions.color = util.deepExtend({}, parentOptions.color, true);
                                if (util.isString(newOptions.color)) {
                                    parentOptions.color.color = newOptions.color;
                                    parentOptions.color.highlight = newOptions.color;
                                    parentOptions.color.hover = newOptions.color;
                                    parentOptions.color.inherit = false;
                                } else {
                                    var colorsDefined = false;
                                    if (newOptions.color.color !== undefined) {
                                        parentOptions.color.color = newOptions.color.color;
                                        colorsDefined = true;
                                    }
                                    if (newOptions.color.highlight !== undefined) {
                                        parentOptions.color.highlight = newOptions.color.highlight;
                                        colorsDefined = true;
                                    }
                                    if (newOptions.color.hover !== undefined) {
                                        parentOptions.color.hover = newOptions.color.hover;
                                        colorsDefined = true;
                                    }
                                    if (newOptions.color.inherit !== undefined) {
                                        parentOptions.color.inherit = newOptions.color.inherit;
                                    }
                                    if (newOptions.color.opacity !== undefined) {
                                        parentOptions.color.opacity = Math.min(1, Math.max(0, newOptions.color.opacity));
                                    }

                                    if (newOptions.color.inherit === undefined && colorsDefined === true) {
                                        parentOptions.color.inherit = false;
                                    }
                                }
                            } else if (allowDeletion === true && newOptions.color === null) {
                                parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
                            }

                            // handle the font settings
                            if (newOptions.font !== undefined && newOptions.font !== null) {
                                Label.parseOptions(parentOptions.font, newOptions);
                            } else if (allowDeletion === true && newOptions.font === null) {
                                parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
                            }
                        }
                    }]);
                    return Edge;
                }();

                exports['default'] = Edge;

                /***/
            }),
            /* 202 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _CubicBezierEdgeBase2 = __webpack_require__(203);

                var _CubicBezierEdgeBase3 = _interopRequireDefault(_CubicBezierEdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var CubicBezierEdge = function(_CubicBezierEdgeBase) {
                    (0, _inherits3['default'])(CubicBezierEdge, _CubicBezierEdgeBase);

                    function CubicBezierEdge(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, CubicBezierEdge);
                        return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdge.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdge)).call(this, options, body, labelModule));
                    }

                    /**
                     * Draw a line between two nodes
                     * @param {CanvasRenderingContext2D} ctx
                     * @private
                     */


                    (0, _createClass3['default'])(CubicBezierEdge, [{
                        key: '_line',
                        value: function _line(ctx, values, viaNodes) {
                            // get the coordinates of the support points.
                            var via1 = viaNodes[0];
                            var via2 = viaNodes[1];

                            // start drawing the line.
                            ctx.beginPath();
                            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

                            // fallback to normal straight edges
                            if (viaNodes === undefined || via1.x === undefined) {
                                ctx.lineTo(this.toPoint.x, this.toPoint.y);
                            } else {
                                ctx.bezierCurveTo(via1.x, via1.y, via2.x, via2.y, this.toPoint.x, this.toPoint.y);
                            }
                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            ctx.stroke();
                            this.disableShadow(ctx, values);
                        }
                    }, {
                        key: '_getViaCoordinates',
                        value: function _getViaCoordinates() {
                            var dx = this.from.x - this.to.x;
                            var dy = this.from.y - this.to.y;

                            var x1 = void 0,
                                y1 = void 0,
                                x2 = void 0,
                                y2 = void 0;
                            var roundness = this.options.smooth.roundness;

                            // horizontal if x > y or if direction is forced or if direction is horizontal
                            if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === 'horizontal') && this.options.smooth.forceDirection !== 'vertical') {
                                y1 = this.from.y;
                                y2 = this.to.y;
                                x1 = this.from.x - roundness * dx;
                                x2 = this.to.x + roundness * dx;
                            } else {
                                y1 = this.from.y - roundness * dy;
                                y2 = this.to.y + roundness * dy;
                                x1 = this.from.x;
                                x2 = this.to.x;
                            }

                            return [{ x: x1, y: y1 }, { x: x2, y: y2 }];
                        }
                    }, {
                        key: 'getViaNode',
                        value: function getViaNode() {
                            return this._getViaCoordinates();
                        }
                    }, {
                        key: '_findBorderPosition',
                        value: function _findBorderPosition(nearNode, ctx) {
                            return this._findBorderPositionBezier(nearNode, ctx);
                        }
                    }, {
                        key: '_getDistanceToEdge',
                        value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
                            var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),
                                _ref2 = (0, _slicedToArray3['default'])(_ref, 2),
                                via1 = _ref2[0],
                                via2 = _ref2[1];

                            // x3,y3 is the point
                            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2);
                        }

                        /**
                         * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
                         * @param percentage
                         * @param via
                         * @returns {{x: number, y: number}}
                         * @private
                         */

                    }, {
                        key: 'getPoint',
                        value: function getPoint(percentage) {
                            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),
                                _ref4 = (0, _slicedToArray3['default'])(_ref3, 2),
                                via1 = _ref4[0],
                                via2 = _ref4[1];

                            var t = percentage;
                            var vec = [];
                            vec[0] = Math.pow(1 - t, 3);
                            vec[1] = 3 * t * Math.pow(1 - t, 2);
                            vec[2] = 3 * Math.pow(t, 2) * (1 - t);
                            vec[3] = Math.pow(t, 3);
                            var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
                            var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;

                            return { x: x, y: y };
                        }
                    }]);
                    return CubicBezierEdge;
                }(_CubicBezierEdgeBase3['default']);

                exports['default'] = CubicBezierEdge;

                /***/
            }),
            /* 203 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _BezierEdgeBase2 = __webpack_require__(204);

                var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var CubicBezierEdgeBase = function(_BezierEdgeBase) {
                    (0, _inherits3['default'])(CubicBezierEdgeBase, _BezierEdgeBase);

                    function CubicBezierEdgeBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, CubicBezierEdgeBase);
                        return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdgeBase)).call(this, options, body, labelModule));
                    }

                    /**
                     * Calculate the distance between a point (x3,y3) and a line segment from
                     * (x1,y1) to (x2,y2).
                     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
                     * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
                     * @param {number} x1 from x
                     * @param {number} y1 from y
                     * @param {number} x2 to x
                     * @param {number} y2 to y
                     * @param {number} x3 point to check x
                     * @param {number} y3 point to check y
                     * @private
                     */


                    (0, _createClass3['default'])(CubicBezierEdgeBase, [{
                        key: '_getDistanceToBezierEdge',
                        value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2) {
                            // x3,y3 is the point
                            var minDistance = 1e9;
                            var distance = void 0;
                            var i = void 0,
                                t = void 0,
                                x = void 0,
                                y = void 0;
                            var lastX = x1;
                            var lastY = y1;
                            var vec = [0, 0, 0, 0];
                            for (i = 1; i < 10; i++) {
                                t = 0.1 * i;
                                vec[0] = Math.pow(1 - t, 3);
                                vec[1] = 3 * t * Math.pow(1 - t, 2);
                                vec[2] = 3 * Math.pow(t, 2) * (1 - t);
                                vec[3] = Math.pow(t, 3);
                                x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
                                y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
                                if (i > 0) {
                                    distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
                                    minDistance = distance < minDistance ? distance : minDistance;
                                }
                                lastX = x;
                                lastY = y;
                            }

                            return minDistance;
                        }
                    }]);
                    return CubicBezierEdgeBase;
                }(_BezierEdgeBase3['default']);

                exports['default'] = CubicBezierEdgeBase;

                /***/
            }),
            /* 204 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _EdgeBase2 = __webpack_require__(205);

                var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var BezierEdgeBase = function(_EdgeBase) {
                    (0, _inherits3['default'])(BezierEdgeBase, _EdgeBase);

                    function BezierEdgeBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, BezierEdgeBase);
                        return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeBase)).call(this, options, body, labelModule));
                    }

                    /**
                     * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
                     *
                     * @param nearNode
                     * @param ctx
                     * @param viaNode
                     * @param nearNode
                     * @param ctx
                     * @param viaNode
                     * @param nearNode
                     * @param ctx
                     * @param viaNode
                     */


                    (0, _createClass3['default'])(BezierEdgeBase, [{
                        key: '_findBorderPositionBezier',
                        value: function _findBorderPositionBezier(nearNode, ctx) {
                            var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();

                            var maxIterations = 10;
                            var iteration = 0;
                            var low = 0;
                            var high = 1;
                            var pos, angle, distanceToBorder, distanceToPoint, difference;
                            var threshold = 0.2;
                            var node = this.to;
                            var from = false;
                            if (nearNode.id === this.from.id) {
                                node = this.from;
                                from = true;
                            }

                            while (low <= high && iteration < maxIterations) {
                                var middle = (low + high) * 0.5;

                                pos = this.getPoint(middle, viaNode);
                                angle = Math.atan2(node.y - pos.y, node.x - pos.x);
                                distanceToBorder = node.distanceToBorder(ctx, angle);
                                distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
                                difference = distanceToBorder - distanceToPoint;
                                if (Math.abs(difference) < threshold) {
                                    break; // found
                                } else if (difference < 0) {
                                    // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
                                    if (from === false) {
                                        low = middle;
                                    } else {
                                        high = middle;
                                    }
                                } else {
                                    if (from === false) {
                                        high = middle;
                                    } else {
                                        low = middle;
                                    }
                                }

                                iteration++;
                            }
                            pos.t = middle;

                            return pos;
                        }

                        /**
                         * Calculate the distance between a point (x3,y3) and a line segment from
                         * (x1,y1) to (x2,y2).
                         * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
                         * @param {number} x1 from x
                         * @param {number} y1 from y
                         * @param {number} x2 to x
                         * @param {number} y2 to y
                         * @param {number} x3 point to check x
                         * @param {number} y3 point to check y
                         * @private
                         */

                    }, {
                        key: '_getDistanceToBezierEdge',
                        value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
                            // x3,y3 is the point
                            var minDistance = 1e9;
                            var distance = void 0;
                            var i = void 0,
                                t = void 0,
                                x = void 0,
                                y = void 0;
                            var lastX = x1;
                            var lastY = y1;
                            for (i = 1; i < 10; i++) {
                                t = 0.1 * i;
                                x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
                                y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
                                if (i > 0) {
                                    distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
                                    minDistance = distance < minDistance ? distance : minDistance;
                                }
                                lastX = x;
                                lastY = y;
                            }

                            return minDistance;
                        }
                    }]);
                    return BezierEdgeBase;
                }(_EdgeBase3['default']);

                exports['default'] = BezierEdgeBase;

                /***/
            }),
            /* 205 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var EdgeBase = function() {
                    function EdgeBase(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, EdgeBase);

                        this.body = body;
                        this.labelModule = labelModule;
                        this.options = {};
                        this.setOptions(options);
                        this.colorDirty = true;
                        this.color = {};
                        this.selectionWidth = 2;
                        this.hoverWidth = 1.5;
                        this.fromPoint = this.from;
                        this.toPoint = this.to;
                    }

                    (0, _createClass3['default'])(EdgeBase, [{
                        key: 'connect',
                        value: function connect() {
                            this.from = this.body.nodes[this.options.from];
                            this.to = this.body.nodes[this.options.to];
                        }
                    }, {
                        key: 'cleanup',
                        value: function cleanup() {
                            return false;
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            this.options = options;
                            this.from = this.body.nodes[this.options.from];
                            this.to = this.body.nodes[this.options.to];
                            this.id = this.options.id;
                        }

                        /**
                         * Redraw a edge as a line
                         * Draw this edge in the given canvas
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
                         * @param {CanvasRenderingContext2D}   ctx
                         * @private
                         */

                    }, {
                        key: 'drawLine',
                        value: function drawLine(ctx, values, selected, hover, viaNode) {
                            // set style
                            ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
                            ctx.lineWidth = values.width;

                            if (values.dashes !== false) {
                                this._drawDashedLine(ctx, values, viaNode);
                            } else {
                                this._drawLine(ctx, values, viaNode);
                            }
                        }
                    }, {
                        key: '_drawLine',
                        value: function _drawLine(ctx, values, viaNode, fromPoint, toPoint) {
                            if (this.from != this.to) {
                                // draw line
                                this._line(ctx, values, viaNode, fromPoint, toPoint);
                            } else {
                                var _getCircleData2 = this._getCircleData(ctx),
                                    _getCircleData3 = (0, _slicedToArray3['default'])(_getCircleData2, 3),
                                    x = _getCircleData3[0],
                                    y = _getCircleData3[1],
                                    radius = _getCircleData3[2];

                                this._circle(ctx, values, x, y, radius);
                            }
                        }
                    }, {
                        key: '_drawDashedLine',
                        value: function _drawDashedLine(ctx, values, viaNode, fromPoint, toPoint) {
                            ctx.lineCap = 'round';
                            var pattern = [5, 5];
                            if (Array.isArray(values.dashes) === true) {
                                pattern = values.dashes;
                            }

                            // only firefox and chrome support this method, else we use the legacy one.
                            if (ctx.setLineDash !== undefined) {
                                ctx.save();

                                // set dash settings for chrome or firefox
                                ctx.setLineDash(pattern);
                                ctx.lineDashOffset = 0;

                                // draw the line
                                if (this.from != this.to) {
                                    // draw line
                                    this._line(ctx, values, viaNode);
                                } else {
                                    var _getCircleData4 = this._getCircleData(ctx),
                                        _getCircleData5 = (0, _slicedToArray3['default'])(_getCircleData4, 3),
                                        x = _getCircleData5[0],
                                        y = _getCircleData5[1],
                                        radius = _getCircleData5[2];

                                    this._circle(ctx, values, x, y, radius);
                                }

                                // restore the dash settings.
                                ctx.setLineDash([0]);
                                ctx.lineDashOffset = 0;
                                ctx.restore();
                            } else {
                                // unsupporting smooth lines
                                if (this.from != this.to) {
                                    // draw line
                                    ctx.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, pattern);
                                } else {
                                    var _getCircleData6 = this._getCircleData(ctx),
                                        _getCircleData7 = (0, _slicedToArray3['default'])(_getCircleData6, 3),
                                        _x = _getCircleData7[0],
                                        _y = _getCircleData7[1],
                                        _radius = _getCircleData7[2];

                                    this._circle(ctx, values, _x, _y, _radius);
                                }
                                // draw shadow if enabled
                                this.enableShadow(ctx, values);

                                ctx.stroke();

                                // disable shadows for other elements.
                                this.disableShadow(ctx, values);
                            }
                        }
                    }, {
                        key: 'findBorderPosition',
                        value: function findBorderPosition(nearNode, ctx, options) {
                            if (this.from != this.to) {
                                return this._findBorderPosition(nearNode, ctx, options);
                            } else {
                                return this._findBorderPositionCircle(nearNode, ctx, options);
                            }
                        }
                    }, {
                        key: 'findBorderPositions',
                        value: function findBorderPositions(ctx) {
                            var from = {};
                            var to = {};
                            if (this.from != this.to) {
                                from = this._findBorderPosition(this.from, ctx);
                                to = this._findBorderPosition(this.to, ctx);
                            } else {
                                var _getCircleData8 = this._getCircleData(ctx),
                                    _getCircleData9 = (0, _slicedToArray3['default'])(_getCircleData8, 3),
                                    x = _getCircleData9[0],
                                    y = _getCircleData9[1],
                                    radius = _getCircleData9[2];

                                from = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
                                to = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.6, high: 0.8, direction: 1 });
                            }
                            return { from: from, to: to };
                        }
                    }, {
                        key: '_getCircleData',
                        value: function _getCircleData(ctx) {
                            var x = void 0,
                                y = void 0;
                            var node = this.from;
                            var radius = this.options.selfReferenceSize;

                            if (ctx !== undefined) {
                                if (node.shape.width === undefined) {
                                    node.shape.resize(ctx);
                                }
                            }

                            // get circle coordinates
                            if (node.shape.width > node.shape.height) {
                                x = node.x + node.shape.width * 0.5;
                                y = node.y - radius;
                            } else {
                                x = node.x + radius;
                                y = node.y - node.shape.height * 0.5;
                            }
                            return [x, y, radius];
                        }

                        /**
                         * Get a point on a circle
                         * @param {Number} x
                         * @param {Number} y
                         * @param {Number} radius
                         * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
                         * @return {Object} point
                         * @private
                         */

                    }, {
                        key: '_pointOnCircle',
                        value: function _pointOnCircle(x, y, radius, percentage) {
                            var angle = percentage * 2 * Math.PI;
                            return {
                                x: x + radius * Math.cos(angle),
                                y: y - radius * Math.sin(angle)
                            };
                        }

                        /**
                         * This function uses binary search to look for the point where the circle crosses the border of the node.
                         * @param node
                         * @param ctx
                         * @param options
                         * @returns {*}
                         * @private
                         */

                    }, {
                        key: '_findBorderPositionCircle',
                        value: function _findBorderPositionCircle(node, ctx, options) {
                            var x = options.x;
                            var y = options.y;
                            var low = options.low;
                            var high = options.high;
                            var direction = options.direction;

                            var maxIterations = 10;
                            var iteration = 0;
                            var radius = this.options.selfReferenceSize;
                            var pos = void 0,
                                angle = void 0,
                                distanceToBorder = void 0,
                                distanceToPoint = void 0,
                                difference = void 0;
                            var threshold = 0.05;
                            var middle = (low + high) * 0.5;

                            while (low <= high && iteration < maxIterations) {
                                middle = (low + high) * 0.5;

                                pos = this._pointOnCircle(x, y, radius, middle);
                                angle = Math.atan2(node.y - pos.y, node.x - pos.x);
                                distanceToBorder = node.distanceToBorder(ctx, angle);
                                distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
                                difference = distanceToBorder - distanceToPoint;
                                if (Math.abs(difference) < threshold) {
                                    break; // found
                                } else if (difference > 0) {
                                    // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
                                    if (direction > 0) {
                                        low = middle;
                                    } else {
                                        high = middle;
                                    }
                                } else {
                                    if (direction > 0) {
                                        high = middle;
                                    } else {
                                        low = middle;
                                    }
                                }
                                iteration++;
                            }
                            pos.t = middle;

                            return pos;
                        }

                        /**
                         * Get the line width of the edge. Depends on width and whether one of the
                         * connected nodes is selected.
                         * @return {Number} width
                         * @private
                         */

                    }, {
                        key: 'getLineWidth',
                        value: function getLineWidth(selected, hover) {
                            if (selected === true) {
                                return Math.max(this.selectionWidth, 0.3 / this.body.view.scale);
                            } else {
                                if (hover === true) {
                                    return Math.max(this.hoverWidth, 0.3 / this.body.view.scale);
                                } else {
                                    return Math.max(this.options.width, 0.3 / this.body.view.scale);
                                }
                            }
                        }
                    }, {
                        key: 'getColor',
                        value: function getColor(ctx, values, selected, hover) {
                            if (values.inheritsColor !== false) {
                                // when this is a loop edge, just use the 'from' method
                                if (values.inheritsColor === 'both' && this.from.id !== this.to.id) {
                                    var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
                                    var fromColor = void 0,
                                        toColor = void 0;
                                    fromColor = this.from.options.color.highlight.border;
                                    toColor = this.to.options.color.highlight.border;

                                    if (this.from.selected === false && this.to.selected === false) {
                                        fromColor = util.overrideOpacity(this.from.options.color.border, values.opacity);
                                        toColor = util.overrideOpacity(this.to.options.color.border, values.opacity);
                                    } else if (this.from.selected === true && this.to.selected === false) {
                                        toColor = this.to.options.color.border;
                                    } else if (this.from.selected === false && this.to.selected === true) {
                                        fromColor = this.from.options.color.border;
                                    }
                                    grd.addColorStop(0, fromColor);
                                    grd.addColorStop(1, toColor);

                                    // -------------------- this returns -------------------- //
                                    return grd;
                                }

                                if (values.inheritsColor === "to") {
                                    return util.overrideOpacity(this.to.options.color.border, values.opacity);
                                } else {
                                    // "from"
                                    return util.overrideOpacity(this.from.options.color.border, values.opacity);
                                }
                            } else {
                                return util.overrideOpacity(values.color, values.opacity);
                            }
                        }

                        /**
                         * Draw a line from a node to itself, a circle
                         * @param {CanvasRenderingContext2D} ctx
                         * @param {Number} x
                         * @param {Number} y
                         * @param {Number} radius
                         * @private
                         */

                    }, {
                        key: '_circle',
                        value: function _circle(ctx, values, x, y, radius) {
                            // draw shadow if enabled
                            this.enableShadow(ctx, values);

                            // draw a circle
                            ctx.beginPath();
                            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
                            ctx.stroke();

                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);
                        }

                        /**
                         * Calculate the distance between a point (x3,y3) and a line segment from
                         * (x1,y1) to (x2,y2).
                         * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
                         * @param {number} x1
                         * @param {number} y1
                         * @param {number} x2
                         * @param {number} y2
                         * @param {number} x3
                         * @param {number} y3
                         * @private
                         */

                    }, {
                        key: 'getDistanceToEdge',
                        value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3, via, values) {
                            // x3,y3 is the point
                            var returnValue = 0;
                            if (this.from != this.to) {
                                returnValue = this._getDistanceToEdge(x1, y1, x2, y2, x3, y3, via);
                            } else {
                                var _getCircleData10 = this._getCircleData(undefined),
                                    _getCircleData11 = (0, _slicedToArray3['default'])(_getCircleData10, 3),
                                    x = _getCircleData11[0],
                                    y = _getCircleData11[1],
                                    radius = _getCircleData11[2];

                                var dx = x - x3;
                                var dy = y - y3;
                                returnValue = Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
                            }

                            if (this.labelModule.size.left < x3 && this.labelModule.size.left + this.labelModule.size.width > x3 && this.labelModule.size.top < y3 && this.labelModule.size.top + this.labelModule.size.height > y3) {
                                return 0;
                            } else {
                                return returnValue;
                            }
                        }
                    }, {
                        key: '_getDistanceToLine',
                        value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
                            var px = x2 - x1;
                            var py = y2 - y1;
                            var something = px * px + py * py;
                            var u = ((x3 - x1) * px + (y3 - y1) * py) / something;

                            if (u > 1) {
                                u = 1;
                            } else if (u < 0) {
                                u = 0;
                            }

                            var x = x1 + u * px;
                            var y = y1 + u * py;
                            var dx = x - x3;
                            var dy = y - y3;

                            //# Note: If the actual distance does not matter,
                            //# if you only want to compare what this function
                            //# returns to other results of this function, you
                            //# can just return the squared distance instead
                            //# (i.e. remove the sqrt) to gain a little performance

                            return Math.sqrt(dx * dx + dy * dy);
                        }

                        /**
                         *
                         * @param ctx
                         * @param position
                         * @param viaNode
                         */

                    }, {
                        key: 'getArrowData',
                        value: function getArrowData(ctx, position, viaNode, selected, hover, values) {
                            // set lets
                            var angle = void 0;
                            var arrowPoint = void 0;
                            var node1 = void 0;
                            var node2 = void 0;
                            var guideOffset = void 0;
                            var scaleFactor = void 0;
                            var type = void 0;
                            var lineWidth = values.width;

                            if (position === 'from') {
                                node1 = this.from;
                                node2 = this.to;
                                guideOffset = 0.1;
                                scaleFactor = values.fromArrowScale;
                                type = values.fromArrowType;
                            } else if (position === 'to') {
                                node1 = this.to;
                                node2 = this.from;
                                guideOffset = -0.1;
                                scaleFactor = values.toArrowScale;
                                type = values.toArrowType;
                            } else {
                                node1 = this.to;
                                node2 = this.from;
                                scaleFactor = values.middleArrowScale;
                                type = values.middleArrowType;
                            }

                            // if not connected to itself
                            if (node1 != node2) {
                                if (position !== 'middle') {
                                    // draw arrow head
                                    if (this.options.smooth.enabled === true) {
                                        arrowPoint = this.findBorderPosition(node1, ctx, { via: viaNode });
                                        var guidePos = this.getPoint(Math.max(0.0, Math.min(1.0, arrowPoint.t + guideOffset)), viaNode);
                                        angle = Math.atan2(arrowPoint.y - guidePos.y, arrowPoint.x - guidePos.x);
                                    } else {
                                        angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
                                        arrowPoint = this.findBorderPosition(node1, ctx);
                                    }
                                } else {
                                    angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
                                    arrowPoint = this.getPoint(0.5, viaNode); // this is 0.6 to account for the size of the arrow.
                                }
                            } else {
                                // draw circle
                                var _getCircleData12 = this._getCircleData(ctx),
                                    _getCircleData13 = (0, _slicedToArray3['default'])(_getCircleData12, 3),
                                    x = _getCircleData13[0],
                                    y = _getCircleData13[1],
                                    radius = _getCircleData13[2];

                                if (position === 'from') {
                                    arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
                                    angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
                                } else if (position === 'to') {
                                    arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.6, high: 1.0, direction: 1 });
                                    angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
                                } else {
                                    arrowPoint = this._pointOnCircle(x, y, radius, 0.175);
                                    angle = 3.9269908169872414; // === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
                                }
                            }

                            var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.

                            var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);
                            var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);
                            var arrowCore = { x: xi, y: yi };

                            return { point: arrowPoint, core: arrowCore, angle: angle, length: length, type: type };
                        }

                        /**
                         *
                         * @param ctx
                         * @param selected
                         * @param hover
                         * @param arrowData
                         */

                    }, {
                        key: 'drawArrowHead',
                        value: function drawArrowHead(ctx, values, selected, hover, arrowData) {
                            // set style
                            ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
                            ctx.fillStyle = ctx.strokeStyle;
                            ctx.lineWidth = values.width;

                            if (arrowData.type && arrowData.type.toLowerCase() === 'circle') {
                                // draw circle at the end of the line
                                ctx.circleEndpoint(arrowData.point.x, arrowData.point.y, arrowData.angle, arrowData.length);
                            } else {
                                // draw arrow at the end of the line
                                ctx.arrowEndpoint(arrowData.point.x, arrowData.point.y, arrowData.angle, arrowData.length);
                            }

                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            ctx.fill();
                            // disable shadows for other elements.
                            this.disableShadow(ctx, values);
                        }
                    }, {
                        key: 'enableShadow',
                        value: function enableShadow(ctx, values) {
                            if (values.shadow === true) {
                                ctx.shadowColor = values.shadowColor;
                                ctx.shadowBlur = values.shadowSize;
                                ctx.shadowOffsetX = values.shadowX;
                                ctx.shadowOffsetY = values.shadowY;
                            }
                        }
                    }, {
                        key: 'disableShadow',
                        value: function disableShadow(ctx, values) {
                            if (values.shadow === true) {
                                ctx.shadowColor = 'rgba(0,0,0,0)';
                                ctx.shadowBlur = 0;
                                ctx.shadowOffsetX = 0;
                                ctx.shadowOffsetY = 0;
                            }
                        }
                    }]);
                    return EdgeBase;
                }();

                exports['default'] = EdgeBase;

                /***/
            }),
            /* 206 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _BezierEdgeBase2 = __webpack_require__(204);

                var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var BezierEdgeDynamic = function(_BezierEdgeBase) {
                    (0, _inherits3["default"])(BezierEdgeDynamic, _BezierEdgeBase);

                    function BezierEdgeDynamic(options, body, labelModule) {
                        (0, _classCallCheck3["default"])(this, BezierEdgeDynamic);

                        // --> this calls the setOptions below
                        var _this = (0, _possibleConstructorReturn3["default"])(this, (BezierEdgeDynamic.__proto__ || (0, _getPrototypeOf2["default"])(BezierEdgeDynamic)).call(this, options, body, labelModule));
                        //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.


                        _this._boundFunction = function() {
                            _this.positionBezierNode();
                        };
                        _this.body.emitter.on("_repositionBezierNodes", _this._boundFunction);
                        return _this;
                    }

                    (0, _createClass3["default"])(BezierEdgeDynamic, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            // check if the physics has changed.
                            var physicsChange = false;
                            if (this.options.physics !== options.physics) {
                                physicsChange = true;
                            }

                            // set the options and the to and from nodes
                            this.options = options;
                            this.id = this.options.id;
                            this.from = this.body.nodes[this.options.from];
                            this.to = this.body.nodes[this.options.to];

                            // setup the support node and connect
                            this.setupSupportNode();
                            this.connect();

                            // when we change the physics state of the edge, we reposition the support node.
                            if (physicsChange === true) {
                                this.via.setOptions({ physics: this.options.physics });
                                this.positionBezierNode();
                            }
                        }
                    }, {
                        key: "connect",
                        value: function connect() {
                            this.from = this.body.nodes[this.options.from];
                            this.to = this.body.nodes[this.options.to];
                            if (this.from === undefined || this.to === undefined || this.options.physics === false) {
                                this.via.setOptions({ physics: false });
                            } else {
                                // fix weird behaviour where a self referencing node has physics enabled
                                if (this.from.id === this.to.id) {
                                    this.via.setOptions({ physics: false });
                                } else {
                                    this.via.setOptions({ physics: true });
                                }
                            }
                        }

                        /**
                         * remove the support nodes
                         * @returns {boolean}
                         */

                    }, {
                        key: "cleanup",
                        value: function cleanup() {
                            this.body.emitter.off("_repositionBezierNodes", this._boundFunction);
                            if (this.via !== undefined) {
                                delete this.body.nodes[this.via.id];
                                this.via = undefined;
                                return true;
                            }
                            return false;
                        }

                        /**
                         * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but
                         * are used for the force calculation.
                         *
                         * The changed data is not called, if needed, it is returned by the main edge constructor.
                         * @private
                         */

                    }, {
                        key: "setupSupportNode",
                        value: function setupSupportNode() {
                            if (this.via === undefined) {
                                var nodeId = "edgeId:" + this.id;
                                var node = this.body.functions.createNode({
                                    id: nodeId,
                                    shape: 'circle',
                                    physics: true,
                                    hidden: true
                                });
                                this.body.nodes[nodeId] = node;
                                this.via = node;
                                this.via.parentEdgeId = this.id;
                                this.positionBezierNode();
                            }
                        }
                    }, {
                        key: "positionBezierNode",
                        value: function positionBezierNode() {
                            if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {
                                this.via.x = 0.5 * (this.from.x + this.to.x);
                                this.via.y = 0.5 * (this.from.y + this.to.y);
                            } else if (this.via !== undefined) {
                                this.via.x = 0;
                                this.via.y = 0;
                            }
                        }

                        /**
                         * Draw a line between two nodes
                         * @param {CanvasRenderingContext2D} ctx
                         * @private
                         */

                    }, {
                        key: "_line",
                        value: function _line(ctx, values, viaNode) {
                            // draw a straight line
                            ctx.beginPath();
                            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
                            // fallback to normal straight edges
                            if (viaNode.x === undefined) {
                                ctx.lineTo(this.toPoint.x, this.toPoint.y);
                            } else {
                                ctx.quadraticCurveTo(viaNode.x, viaNode.y, this.toPoint.x, this.toPoint.y);
                            }
                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            ctx.stroke();
                            this.disableShadow(ctx, values);
                        }
                    }, {
                        key: "getViaNode",
                        value: function getViaNode() {
                            return this.via;
                        }

                        /**
                         * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
                         * @param percentage
                         * @param viaNode
                         * @returns {{x: number, y: number}}
                         * @private
                         */

                    }, {
                        key: "getPoint",
                        value: function getPoint(percentage) {
                            var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;

                            var t = percentage;
                            var x = void 0,
                                y = void 0;
                            if (this.from === this.to) {
                                var _getCircleData = this._getCircleData(this.from),
                                    _getCircleData2 = (0, _slicedToArray3["default"])(_getCircleData, 3),
                                    cx = _getCircleData2[0],
                                    cy = _getCircleData2[1],
                                    cr = _getCircleData2[2];

                                var a = 2 * Math.PI * (1 - t);
                                x = cx + cr * Math.sin(a);
                                y = cy + cr - cr * (1 - Math.cos(a));
                            } else {
                                x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
                                y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
                            }

                            return { x: x, y: y };
                        }
                    }, {
                        key: "_findBorderPosition",
                        value: function _findBorderPosition(nearNode, ctx) {
                            return this._findBorderPositionBezier(nearNode, ctx, this.via);
                        }
                    }, {
                        key: "_getDistanceToEdge",
                        value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
                            // x3,y3 is the point
                            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
                        }
                    }]);
                    return BezierEdgeDynamic;
                }(_BezierEdgeBase3["default"]);

                exports["default"] = BezierEdgeDynamic;

                /***/
            }),
            /* 207 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _BezierEdgeBase2 = __webpack_require__(204);

                var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var BezierEdgeStatic = function(_BezierEdgeBase) {
                    (0, _inherits3['default'])(BezierEdgeStatic, _BezierEdgeBase);

                    function BezierEdgeStatic(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, BezierEdgeStatic);
                        return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeStatic.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeStatic)).call(this, options, body, labelModule));
                    }

                    /**
                     * Draw a line between two nodes
                     * @param {CanvasRenderingContext2D} ctx
                     * @private
                     */


                    (0, _createClass3['default'])(BezierEdgeStatic, [{
                        key: '_line',
                        value: function _line(ctx, values, viaNode) {
                            // draw a straight line
                            ctx.beginPath();
                            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

                            // fallback to normal straight edges
                            if (viaNode.x === undefined) {
                                ctx.lineTo(this.toPoint.x, this.toPoint.y);
                            } else {
                                ctx.quadraticCurveTo(viaNode.x, viaNode.y, this.toPoint.x, this.toPoint.y);
                            }
                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            ctx.stroke();
                            this.disableShadow(ctx, values);
                        }
                    }, {
                        key: 'getViaNode',
                        value: function getViaNode() {
                            return this._getViaCoordinates();
                        }

                        /**
                         * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
                         * @returns {{x: undefined, y: undefined}}
                         * @private
                         */

                    }, {
                        key: '_getViaCoordinates',
                        value: function _getViaCoordinates() {
                            var xVia = undefined;
                            var yVia = undefined;
                            var factor = this.options.smooth.roundness;
                            var type = this.options.smooth.type;
                            var dx = Math.abs(this.from.x - this.to.x);
                            var dy = Math.abs(this.from.y - this.to.y);
                            if (type === 'discrete' || type === 'diagonalCross') {
                                if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
                                    if (this.from.y >= this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dy;
                                            yVia = this.from.y - factor * dy;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dy;
                                            yVia = this.from.y - factor * dy;
                                        }
                                    } else if (this.from.y < this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dy;
                                            yVia = this.from.y + factor * dy;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dy;
                                            yVia = this.from.y + factor * dy;
                                        }
                                    }
                                    if (type === "discrete") {
                                        xVia = dx < factor * dy ? this.from.x : xVia;
                                    }
                                } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
                                    if (this.from.y >= this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dx;
                                            yVia = this.from.y - factor * dx;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dx;
                                            yVia = this.from.y - factor * dx;
                                        }
                                    } else if (this.from.y < this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dx;
                                            yVia = this.from.y + factor * dx;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dx;
                                            yVia = this.from.y + factor * dx;
                                        }
                                    }
                                    if (type === "discrete") {
                                        yVia = dy < factor * dx ? this.from.y : yVia;
                                    }
                                }
                            } else if (type === "straightCross") {
                                if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
                                    // up - down
                                    xVia = this.from.x;
                                    if (this.from.y < this.to.y) {
                                        yVia = this.to.y - (1 - factor) * dy;
                                    } else {
                                        yVia = this.to.y + (1 - factor) * dy;
                                    }
                                } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
                                    // left - right
                                    if (this.from.x < this.to.x) {
                                        xVia = this.to.x - (1 - factor) * dx;
                                    } else {
                                        xVia = this.to.x + (1 - factor) * dx;
                                    }
                                    yVia = this.from.y;
                                }
                            } else if (type === 'horizontal') {
                                if (this.from.x < this.to.x) {
                                    xVia = this.to.x - (1 - factor) * dx;
                                } else {
                                    xVia = this.to.x + (1 - factor) * dx;
                                }
                                yVia = this.from.y;
                            } else if (type === 'vertical') {
                                xVia = this.from.x;
                                if (this.from.y < this.to.y) {
                                    yVia = this.to.y - (1 - factor) * dy;
                                } else {
                                    yVia = this.to.y + (1 - factor) * dy;
                                }
                            } else if (type === 'curvedCW') {
                                dx = this.to.x - this.from.x;
                                dy = this.from.y - this.to.y;
                                var radius = Math.sqrt(dx * dx + dy * dy);
                                var pi = Math.PI;

                                var originalAngle = Math.atan2(dy, dx);
                                var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);

                                xVia = this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle);
                                yVia = this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle);
                            } else if (type === 'curvedCCW') {
                                dx = this.to.x - this.from.x;
                                dy = this.from.y - this.to.y;
                                var _radius = Math.sqrt(dx * dx + dy * dy);
                                var _pi = Math.PI;

                                var _originalAngle = Math.atan2(dy, dx);
                                var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);

                                xVia = this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle);
                                yVia = this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle);
                            } else {
                                // continuous
                                if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
                                    if (this.from.y >= this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dy;
                                            yVia = this.from.y - factor * dy;
                                            xVia = this.to.x < xVia ? this.to.x : xVia;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dy;
                                            yVia = this.from.y - factor * dy;
                                            xVia = this.to.x > xVia ? this.to.x : xVia;
                                        }
                                    } else if (this.from.y < this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dy;
                                            yVia = this.from.y + factor * dy;
                                            xVia = this.to.x < xVia ? this.to.x : xVia;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dy;
                                            yVia = this.from.y + factor * dy;
                                            xVia = this.to.x > xVia ? this.to.x : xVia;
                                        }
                                    }
                                } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
                                    if (this.from.y >= this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dx;
                                            yVia = this.from.y - factor * dx;
                                            yVia = this.to.y > yVia ? this.to.y : yVia;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dx;
                                            yVia = this.from.y - factor * dx;
                                            yVia = this.to.y > yVia ? this.to.y : yVia;
                                        }
                                    } else if (this.from.y < this.to.y) {
                                        if (this.from.x <= this.to.x) {
                                            xVia = this.from.x + factor * dx;
                                            yVia = this.from.y + factor * dx;
                                            yVia = this.to.y < yVia ? this.to.y : yVia;
                                        } else if (this.from.x > this.to.x) {
                                            xVia = this.from.x - factor * dx;
                                            yVia = this.from.y + factor * dx;
                                            yVia = this.to.y < yVia ? this.to.y : yVia;
                                        }
                                    }
                                }
                            }
                            return { x: xVia, y: yVia };
                        }
                    }, {
                        key: '_findBorderPosition',
                        value: function _findBorderPosition(nearNode, ctx) {
                            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                            return this._findBorderPositionBezier(nearNode, ctx, options.via);
                        }
                    }, {
                        key: '_getDistanceToEdge',
                        value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
                            var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();
                            // x3,y3 is the point
                            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
                        }

                        /**
                         * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
                         * @param percentage
                         * @param viaNode
                         * @returns {{x: number, y: number}}
                         * @private
                         */

                    }, {
                        key: 'getPoint',
                        value: function getPoint(percentage) {
                            var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();

                            var t = percentage;
                            var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
                            var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;

                            return { x: x, y: y };
                        }
                    }]);
                    return BezierEdgeStatic;
                }(_BezierEdgeBase3['default']);

                exports['default'] = BezierEdgeStatic;

                /***/
            }),
            /* 208 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _EdgeBase2 = __webpack_require__(205);

                var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var StraightEdge = function(_EdgeBase) {
                    (0, _inherits3['default'])(StraightEdge, _EdgeBase);

                    function StraightEdge(options, body, labelModule) {
                        (0, _classCallCheck3['default'])(this, StraightEdge);
                        return (0, _possibleConstructorReturn3['default'])(this, (StraightEdge.__proto__ || (0, _getPrototypeOf2['default'])(StraightEdge)).call(this, options, body, labelModule));
                    }

                    /**
                     * Draw a line between two nodes
                     * @param {CanvasRenderingContext2D} ctx
                     * @private
                     */


                    (0, _createClass3['default'])(StraightEdge, [{
                        key: '_line',
                        value: function _line(ctx, values) {
                            // draw a straight line
                            ctx.beginPath();
                            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
                            ctx.lineTo(this.toPoint.x, this.toPoint.y);
                            // draw shadow if enabled
                            this.enableShadow(ctx, values);
                            ctx.stroke();
                            this.disableShadow(ctx, values);
                        }
                    }, {
                        key: 'getViaNode',
                        value: function getViaNode() {
                            return undefined;
                        }

                        /**
                         * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
                         * @param percentage
                         * @param via
                         * @returns {{x: number, y: number}}
                         * @private
                         */

                    }, {
                        key: 'getPoint',
                        value: function getPoint(percentage) {
                            return {
                                x: (1 - percentage) * this.fromPoint.x + percentage * this.toPoint.x,
                                y: (1 - percentage) * this.fromPoint.y + percentage * this.toPoint.y
                            };
                        }
                    }, {
                        key: '_findBorderPosition',
                        value: function _findBorderPosition(nearNode, ctx) {
                            var node1 = this.to;
                            var node2 = this.from;
                            if (nearNode.id === this.from.id) {
                                node1 = this.from;
                                node2 = this.to;
                            }

                            var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
                            var dx = node1.x - node2.x;
                            var dy = node1.y - node2.y;
                            var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
                            var toBorderDist = nearNode.distanceToBorder(ctx, angle);
                            var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;

                            var borderPos = {};
                            borderPos.x = (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x;
                            borderPos.y = (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y;

                            return borderPos;
                        }
                    }, {
                        key: '_getDistanceToEdge',
                        value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
                            // x3,y3 is the point
                            return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
                        }
                    }]);
                    return StraightEdge;
                }(_EdgeBase3['default']);

                exports['default'] = StraightEdge;

                /***/
            }),
            /* 209 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var BarnesHutSolver = __webpack_require__(210)['default'];
                var Repulsion = __webpack_require__(211)['default'];
                var HierarchicalRepulsion = __webpack_require__(212)['default'];
                var SpringSolver = __webpack_require__(213)['default'];
                var HierarchicalSpringSolver = __webpack_require__(214)['default'];
                var CentralGravitySolver = __webpack_require__(215)['default'];
                var ForceAtlas2BasedRepulsionSolver = __webpack_require__(216)['default'];
                var ForceAtlas2BasedCentralGravitySolver = __webpack_require__(217)['default'];

                var util = __webpack_require__(1);

                var PhysicsEngine = function() {
                    function PhysicsEngine(body) {
                        (0, _classCallCheck3['default'])(this, PhysicsEngine);

                        this.body = body;
                        this.physicsBody = { physicsNodeIndices: [], physicsEdgeIndices: [], forces: {}, velocities: {} };

                        this.physicsEnabled = true;
                        this.simulationInterval = 1000 / 60;
                        this.requiresTimeout = true;
                        this.previousStates = {};
                        this.referenceState = {};
                        this.freezeCache = {};
                        this.renderTimer = undefined;

                        // parameters for the adaptive timestep
                        this.adaptiveTimestep = false;
                        this.adaptiveTimestepEnabled = false;
                        this.adaptiveCounter = 0;
                        this.adaptiveInterval = 3;

                        this.stabilized = false;
                        this.startedStabilization = false;
                        this.stabilizationIterations = 0;
                        this.ready = false; // will be set to true if the stabilize

                        // default options
                        this.options = {};
                        this.defaultOptions = {
                            enabled: true,
                            barnesHut: {
                                theta: 0.5,
                                gravitationalConstant: -2000,
                                centralGravity: 0.3,
                                springLength: 95,
                                springConstant: 0.04,
                                damping: 0.09,
                                avoidOverlap: 0
                            },
                            forceAtlas2Based: {
                                theta: 0.5,
                                gravitationalConstant: -50,
                                centralGravity: 0.01,
                                springConstant: 0.08,
                                springLength: 100,
                                damping: 0.4,
                                avoidOverlap: 0
                            },
                            repulsion: {
                                centralGravity: 0.2,
                                springLength: 200,
                                springConstant: 0.05,
                                nodeDistance: 100,
                                damping: 0.09,
                                avoidOverlap: 0
                            },
                            hierarchicalRepulsion: {
                                centralGravity: 0.0,
                                springLength: 100,
                                springConstant: 0.01,
                                nodeDistance: 120,
                                damping: 0.09
                            },
                            maxVelocity: 50,
                            minVelocity: 0.75, // px/s
                            solver: 'barnesHut',
                            stabilization: {
                                enabled: true,
                                iterations: 1000, // maximum number of iteration to stabilize
                                updateInterval: 50,
                                onlyDynamicEdges: false,
                                fit: true
                            },
                            timestep: 0.5,
                            adaptiveTimestep: true
                        };
                        util.extend(this.options, this.defaultOptions);
                        this.timestep = 0.5;
                        this.layoutFailed = false;

                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(PhysicsEngine, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this = this;

                            this.body.emitter.on('initPhysics', function() {
                                _this.initPhysics();
                            });
                            this.body.emitter.on('_layoutFailed', function() {
                                _this.layoutFailed = true;
                            });
                            this.body.emitter.on('resetPhysics', function() {
                                _this.stopSimulation();
                                _this.ready = false;
                            });
                            this.body.emitter.on('disablePhysics', function() {
                                _this.physicsEnabled = false;
                                _this.stopSimulation();
                            });
                            this.body.emitter.on('restorePhysics', function() {
                                _this.setOptions(_this.options);
                                if (_this.ready === true) {
                                    _this.startSimulation();
                                }
                            });
                            this.body.emitter.on('startSimulation', function() {
                                if (_this.ready === true) {
                                    _this.startSimulation();
                                }
                            });
                            this.body.emitter.on('stopSimulation', function() {
                                _this.stopSimulation();
                            });
                            this.body.emitter.on('destroy', function() {
                                _this.stopSimulation(false);
                                _this.body.emitter.off();
                            });
                            // this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
                            this.body.emitter.on("_dataChanged", function() {
                                // update shortcut lists
                                _this.updatePhysicsData();
                            });

                            // debug: show forces
                            // this.body.emitter.on("afterDrawing", (ctx) => {this._drawForces(ctx);});
                        }

                        /**
                         * set the physics options
                         * @param options
                         */

                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                if (options === false) {
                                    this.options.enabled = false;
                                    this.physicsEnabled = false;
                                    this.stopSimulation();
                                } else {
                                    this.physicsEnabled = true;
                                    util.selectiveNotDeepExtend(['stabilization'], this.options, options);
                                    util.mergeOptions(this.options, options, 'stabilization');

                                    if (options.enabled === undefined) {
                                        this.options.enabled = true;
                                    }

                                    if (this.options.enabled === false) {
                                        this.physicsEnabled = false;
                                        this.stopSimulation();
                                    }

                                    // set the timestep
                                    this.timestep = this.options.timestep;
                                }
                            }
                            this.init();
                        }

                        /**
                         * configure the engine.
                         */

                    }, {
                        key: 'init',
                        value: function init() {
                            var options;
                            if (this.options.solver === 'forceAtlas2Based') {
                                options = this.options.forceAtlas2Based;
                                this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);
                                this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
                                this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);
                            } else if (this.options.solver === 'repulsion') {
                                options = this.options.repulsion;
                                this.nodesSolver = new Repulsion(this.body, this.physicsBody, options);
                                this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
                                this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
                            } else if (this.options.solver === 'hierarchicalRepulsion') {
                                options = this.options.hierarchicalRepulsion;
                                this.nodesSolver = new HierarchicalRepulsion(this.body, this.physicsBody, options);
                                this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);
                                this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
                            } else {
                                // barnesHut
                                options = this.options.barnesHut;
                                this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);
                                this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
                                this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
                            }

                            this.modelOptions = options;
                        }

                        /**
                         * initialize the engine
                         */

                    }, {
                        key: 'initPhysics',
                        value: function initPhysics() {
                            if (this.physicsEnabled === true && this.options.enabled === true) {
                                if (this.options.stabilization.enabled === true) {
                                    this.stabilize();
                                } else {
                                    this.stabilized = false;
                                    this.ready = true;
                                    this.body.emitter.emit('fit', {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom
                                    this.startSimulation();
                                }
                            } else {
                                this.ready = true;
                                this.body.emitter.emit('fit');
                            }
                        }

                        /**
                         * Start the simulation
                         */

                    }, {
                        key: 'startSimulation',
                        value: function startSimulation() {
                            if (this.physicsEnabled === true && this.options.enabled === true) {
                                this.stabilized = false;

                                // when visible, adaptivity is disabled.
                                this.adaptiveTimestep = false;

                                // this sets the width of all nodes initially which could be required for the avoidOverlap
                                this.body.emitter.emit("_resizeNodes");
                                if (this.viewFunction === undefined) {
                                    this.viewFunction = this.simulationStep.bind(this);
                                    this.body.emitter.on('initRedraw', this.viewFunction);
                                    this.body.emitter.emit('_startRendering');
                                }
                            } else {
                                this.body.emitter.emit('_redraw');
                            }
                        }

                        /**
                         * Stop the simulation, force stabilization.
                         */

                    }, {
                        key: 'stopSimulation',
                        value: function stopSimulation() {
                            var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                            this.stabilized = true;
                            if (emit === true) {
                                this._emitStabilized();
                            }
                            if (this.viewFunction !== undefined) {
                                this.body.emitter.off('initRedraw', this.viewFunction);
                                this.viewFunction = undefined;
                                if (emit === true) {
                                    this.body.emitter.emit('_stopRendering');
                                }
                            }
                        }

                        /**
                         * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
                         *
                         */

                    }, {
                        key: 'simulationStep',
                        value: function simulationStep() {
                            // check if the physics have settled
                            var startTime = Date.now();
                            this.physicsTick();
                            var physicsTime = Date.now() - startTime;

                            // run double speed if it is a little graph
                            if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
                                this.physicsTick();

                                // this makes sure there is no jitter. The decision is taken once to run it at double speed.
                                this.runDoubleSpeed = true;
                            }

                            if (this.stabilized === true) {
                                this.stopSimulation();
                            }
                        }

                        /**
                         * trigger the stabilized event.
                         * @private
                         */

                    }, {
                        key: '_emitStabilized',
                        value: function _emitStabilized() {
                            var _this2 = this;

                            var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;

                            if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
                                setTimeout(function() {
                                    _this2.body.emitter.emit('stabilized', { iterations: amountOfIterations });
                                    _this2.startedStabilization = false;
                                    _this2.stabilizationIterations = 0;
                                }, 0);
                            }
                        }

                        /**
                         * A single simulation step (or 'tick') in the physics simulation
                         *
                         * @private
                         */

                    }, {
                        key: 'physicsTick',
                        value: function physicsTick() {
                            // this is here to ensure that there is no start event when the network is already stable.
                            if (this.startedStabilization === false) {
                                this.body.emitter.emit('startStabilizing');
                                this.startedStabilization = true;
                            }

                            if (this.stabilized === false) {
                                // adaptivity means the timestep adapts to the situation, only applicable for stabilization
                                if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
                                    // this is the factor for increasing the timestep on success.
                                    var factor = 1.2;

                                    // we assume the adaptive interval is
                                    if (this.adaptiveCounter % this.adaptiveInterval === 0) {
                                        // we leave the timestep stable for "interval" iterations.
                                        // first the big step and revert. Revert saves the reference state.
                                        this.timestep = 2 * this.timestep;
                                        this.calculateForces();
                                        this.moveNodes();
                                        this.revert();

                                        // now the normal step. Since this is the last step, it is the more stable one and we will take this.
                                        this.timestep = 0.5 * this.timestep;

                                        // since it's half the step, we do it twice.
                                        this.calculateForces();
                                        this.moveNodes();
                                        this.calculateForces();
                                        this.moveNodes();

                                        // we compare the two steps. if it is acceptable we double the step.
                                        if (this._evaluateStepQuality() === true) {
                                            this.timestep = factor * this.timestep;
                                        } else {
                                            // if not, we decrease the step to a minimum of the options timestep.
                                            // if the decreased timestep is smaller than the options step, we do not reset the counter
                                            // we assume that the options timestep is stable enough.
                                            if (this.timestep / factor < this.options.timestep) {
                                                this.timestep = this.options.timestep;
                                            } else {
                                                // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure
                                                // that large instabilities do not form.
                                                this.adaptiveCounter = -1; // check again next iteration
                                                this.timestep = Math.max(this.options.timestep, this.timestep / factor);
                                            }
                                        }
                                    } else {
                                        // normal step, keeping timestep constant
                                        this.calculateForces();
                                        this.moveNodes();
                                    }

                                    // increment the counter
                                    this.adaptiveCounter += 1;
                                } else {
                                    // case for the static timestep, we reset it to the one in options and take a normal step.
                                    this.timestep = this.options.timestep;
                                    this.calculateForces();
                                    this.moveNodes();
                                }

                                // determine if the network has stabilzied
                                if (this.stabilized === true) {
                                    this.revert();
                                }

                                this.stabilizationIterations++;
                            }
                        }

                        /**
                         * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
                         *
                         * @private
                         */

                    }, {
                        key: 'updatePhysicsData',
                        value: function updatePhysicsData() {
                            this.physicsBody.forces = {};
                            this.physicsBody.physicsNodeIndices = [];
                            this.physicsBody.physicsEdgeIndices = [];
                            var nodes = this.body.nodes;
                            var edges = this.body.edges;

                            // get node indices for physics
                            for (var nodeId in nodes) {
                                if (nodes.hasOwnProperty(nodeId)) {
                                    if (nodes[nodeId].options.physics === true) {
                                        this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
                                    }
                                }
                            }

                            // get edge indices for physics
                            for (var edgeId in edges) {
                                if (edges.hasOwnProperty(edgeId)) {
                                    if (edges[edgeId].options.physics === true) {
                                        this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
                                    }
                                }
                            }

                            // get the velocity and the forces vector
                            for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
                                var _nodeId = this.physicsBody.physicsNodeIndices[i];
                                this.physicsBody.forces[_nodeId] = { x: 0, y: 0 };

                                // forces can be reset because they are recalculated. Velocities have to persist.
                                if (this.physicsBody.velocities[_nodeId] === undefined) {
                                    this.physicsBody.velocities[_nodeId] = { x: 0, y: 0 };
                                }
                            }

                            // clean deleted nodes from the velocity vector
                            for (var _nodeId2 in this.physicsBody.velocities) {
                                if (nodes[_nodeId2] === undefined) {
                                    delete this.physicsBody.velocities[_nodeId2];
                                }
                            }
                        }

                        /**
                         * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
                         */

                    }, {
                        key: 'revert',
                        value: function revert() {
                            var nodeIds = (0, _keys2['default'])(this.previousStates);
                            var nodes = this.body.nodes;
                            var velocities = this.physicsBody.velocities;
                            this.referenceState = {};

                            for (var i = 0; i < nodeIds.length; i++) {
                                var nodeId = nodeIds[i];
                                if (nodes[nodeId] !== undefined) {
                                    if (nodes[nodeId].options.physics === true) {
                                        this.referenceState[nodeId] = {
                                            positions: { x: nodes[nodeId].x, y: nodes[nodeId].y }
                                        };
                                        velocities[nodeId].x = this.previousStates[nodeId].vx;
                                        velocities[nodeId].y = this.previousStates[nodeId].vy;
                                        nodes[nodeId].x = this.previousStates[nodeId].x;
                                        nodes[nodeId].y = this.previousStates[nodeId].y;
                                    }
                                } else {
                                    delete this.previousStates[nodeId];
                                }
                            }
                        }

                        /**
                         * This compares the reference state to the current state
                         */

                    }, {
                        key: '_evaluateStepQuality',
                        value: function _evaluateStepQuality() {
                            var dx = void 0,
                                dy = void 0,
                                dpos = void 0;
                            var nodes = this.body.nodes;
                            var reference = this.referenceState;
                            var posThreshold = 0.3;

                            for (var nodeId in this.referenceState) {
                                if (this.referenceState.hasOwnProperty(nodeId) && nodes[nodeId] !== undefined) {
                                    dx = nodes[nodeId].x - reference[nodeId].positions.x;
                                    dy = nodes[nodeId].y - reference[nodeId].positions.y;

                                    dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));

                                    if (dpos > posThreshold) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }

                        /**
                         * move the nodes one timestep and check if they are stabilized
                         * @returns {boolean}
                         */

                    }, {
                        key: 'moveNodes',
                        value: function moveNodes() {
                            var nodeIndices = this.physicsBody.physicsNodeIndices;
                            var maxVelocity = this.options.maxVelocity ? this.options.maxVelocity : 1e9;
                            var maxNodeVelocity = 0;
                            var averageNodeVelocity = 0;

                            // the velocity threshold (energy in the system) for the adaptivity toggle
                            var velocityAdaptiveThreshold = 5;

                            for (var i = 0; i < nodeIndices.length; i++) {
                                var nodeId = nodeIndices[i];
                                var nodeVelocity = this._performStep(nodeId, maxVelocity);
                                // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized
                                maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
                                averageNodeVelocity += nodeVelocity;
                            }

                            // evaluating the stabilized and adaptiveTimestepEnabled conditions
                            this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
                            this.stabilized = maxNodeVelocity < this.options.minVelocity;
                        }

                        /**
                         * Perform the actual step
                         *
                         * @param nodeId
                         * @param maxVelocity
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_performStep',
                        value: function _performStep(nodeId, maxVelocity) {
                            var node = this.body.nodes[nodeId];
                            var timestep = this.timestep;
                            var forces = this.physicsBody.forces;
                            var velocities = this.physicsBody.velocities;

                            // store the state so we can revert
                            this.previousStates[nodeId] = { x: node.x, y: node.y, vx: velocities[nodeId].x, vy: velocities[nodeId].y };

                            if (node.options.fixed.x === false) {
                                var dx = this.modelOptions.damping * velocities[nodeId].x; // damping force
                                var ax = (forces[nodeId].x - dx) / node.options.mass; // acceleration
                                velocities[nodeId].x += ax * timestep; // velocity
                                velocities[nodeId].x = Math.abs(velocities[nodeId].x) > maxVelocity ? velocities[nodeId].x > 0 ? maxVelocity : -maxVelocity : velocities[nodeId].x;
                                node.x += velocities[nodeId].x * timestep; // position
                            } else {
                                forces[nodeId].x = 0;
                                velocities[nodeId].x = 0;
                            }

                            if (node.options.fixed.y === false) {
                                var dy = this.modelOptions.damping * velocities[nodeId].y; // damping force
                                var ay = (forces[nodeId].y - dy) / node.options.mass; // acceleration
                                velocities[nodeId].y += ay * timestep; // velocity
                                velocities[nodeId].y = Math.abs(velocities[nodeId].y) > maxVelocity ? velocities[nodeId].y > 0 ? maxVelocity : -maxVelocity : velocities[nodeId].y;
                                node.y += velocities[nodeId].y * timestep; // position
                            } else {
                                forces[nodeId].y = 0;
                                velocities[nodeId].y = 0;
                            }

                            var totalVelocity = Math.sqrt(Math.pow(velocities[nodeId].x, 2) + Math.pow(velocities[nodeId].y, 2));
                            return totalVelocity;
                        }

                        /**
                         * calculate the forces for one physics iteration.
                         */

                    }, {
                        key: 'calculateForces',
                        value: function calculateForces() {
                            this.gravitySolver.solve();
                            this.nodesSolver.solve();
                            this.edgesSolver.solve();
                        }

                        /**
                         * When initializing and stabilizing, we can freeze nodes with a predefined position. This greatly speeds up stabilization
                         * because only the supportnodes for the smoothCurves have to settle.
                         *
                         * @private
                         */

                    }, {
                        key: '_freezeNodes',
                        value: function _freezeNodes() {
                            var nodes = this.body.nodes;
                            for (var id in nodes) {
                                if (nodes.hasOwnProperty(id)) {
                                    if (nodes[id].x && nodes[id].y) {
                                        this.freezeCache[id] = { x: nodes[id].options.fixed.x, y: nodes[id].options.fixed.y };
                                        nodes[id].options.fixed.x = true;
                                        nodes[id].options.fixed.y = true;
                                    }
                                }
                            }
                        }

                        /**
                         * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
                         *
                         * @private
                         */

                    }, {
                        key: '_restoreFrozenNodes',
                        value: function _restoreFrozenNodes() {
                            var nodes = this.body.nodes;
                            for (var id in nodes) {
                                if (nodes.hasOwnProperty(id)) {
                                    if (this.freezeCache[id] !== undefined) {
                                        nodes[id].options.fixed.x = this.freezeCache[id].x;
                                        nodes[id].options.fixed.y = this.freezeCache[id].y;
                                    }
                                }
                            }
                            this.freezeCache = {};
                        }

                        /**
                         * Find a stable position for all nodes
                         */

                    }, {
                        key: 'stabilize',
                        value: function stabilize() {
                            var _this3 = this;

                            var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;

                            if (typeof iterations !== 'number') {
                                console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ', this.options.stabilization.iterations);
                                iterations = this.options.stabilization.iterations;
                            }

                            if (this.physicsBody.physicsNodeIndices.length === 0) {
                                this.ready = true;
                                return;
                            }

                            // enable adaptive timesteps
                            this.adaptiveTimestep = true && this.options.adaptiveTimestep;

                            // this sets the width of all nodes initially which could be required for the avoidOverlap
                            this.body.emitter.emit("_resizeNodes");

                            // stop the render loop
                            this.stopSimulation();

                            // set stabilze to false
                            this.stabilized = false;

                            // block redraw requests
                            this.body.emitter.emit('_blockRedraw');
                            this.targetIterations = iterations;

                            // start the stabilization
                            if (this.options.stabilization.onlyDynamicEdges === true) {
                                this._freezeNodes();
                            }
                            this.stabilizationIterations = 0;

                            setTimeout(function() {
                                return _this3._stabilizationBatch();
                            }, 0);
                        }

                        /**
                         * One batch of stabilization
                         * @private
                         */

                    }, {
                        key: '_stabilizationBatch',
                        value: function _stabilizationBatch() {
                            // this is here to ensure that there is at least one start event.
                            if (this.startedStabilization === false) {
                                this.body.emitter.emit('startStabilizing');
                                this.startedStabilization = true;
                            }

                            var count = 0;
                            while (this.stabilized === false && count < this.options.stabilization.updateInterval && this.stabilizationIterations < this.targetIterations) {
                                this.physicsTick();
                                count++;
                            }

                            if (this.stabilized === false && this.stabilizationIterations < this.targetIterations) {
                                this.body.emitter.emit('stabilizationProgress', { iterations: this.stabilizationIterations, total: this.targetIterations });
                                setTimeout(this._stabilizationBatch.bind(this), 0);
                            } else {
                                this._finalizeStabilization();
                            }
                        }

                        /**
                         * Wrap up the stabilization, fit and emit the events.
                         * @private
                         */

                    }, {
                        key: '_finalizeStabilization',
                        value: function _finalizeStabilization() {
                            this.body.emitter.emit('_allowRedraw');
                            if (this.options.stabilization.fit === true) {
                                this.body.emitter.emit('fit');
                            }

                            if (this.options.stabilization.onlyDynamicEdges === true) {
                                this._restoreFrozenNodes();
                            }

                            this.body.emitter.emit('stabilizationIterationsDone');
                            this.body.emitter.emit('_requestRedraw');

                            if (this.stabilized === true) {
                                this._emitStabilized();
                            } else {
                                this.startSimulation();
                            }

                            this.ready = true;
                        }
                    }, {
                        key: '_drawForces',
                        value: function _drawForces(ctx) {
                            for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
                                var node = this.body.nodes[this.physicsBody.physicsNodeIndices[i]];
                                var force = this.physicsBody.forces[this.physicsBody.physicsNodeIndices[i]];
                                var factor = 20;
                                var colorFactor = 0.03;
                                var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));

                                var size = Math.min(Math.max(5, forceSize), 15);
                                var arrowSize = 3 * size;

                                var color = util.HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);

                                ctx.lineWidth = size;
                                ctx.strokeStyle = color;
                                ctx.beginPath();
                                ctx.moveTo(node.x, node.y);
                                ctx.lineTo(node.x + factor * force.x, node.y + factor * force.y);
                                ctx.stroke();

                                var angle = Math.atan2(force.y, force.x);
                                ctx.fillStyle = color;
                                ctx.arrowEndpoint(node.x + factor * force.x + Math.cos(angle) * arrowSize, node.y + factor * force.y + Math.sin(angle) * arrowSize, angle, arrowSize);
                                ctx.fill();
                            }
                        }
                    }]);
                    return PhysicsEngine;
                }();

                exports['default'] = PhysicsEngine;

                /***/
            }),
            /* 210 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var BarnesHutSolver = function() {
                    function BarnesHutSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, BarnesHutSolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.barnesHutTree;
                        this.setOptions(options);
                        this.randomSeed = 5;

                        // debug: show grid
                        //this.body.emitter.on("afterDrawing", (ctx) => {this._debug(ctx,'#ff0000')})
                    }

                    (0, _createClass3["default"])(BarnesHutSolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            this.options = options;
                            this.thetaInversed = 1 / this.options.theta;
                            this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap)); // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius
                        }
                    }, {
                        key: "seededRandom",
                        value: function seededRandom() {
                            var x = Math.sin(this.randomSeed++) * 10000;
                            return x - Math.floor(x);
                        }

                        /**
                         * This function calculates the forces the nodes apply on each other based on a gravitational model.
                         * The Barnes Hut method is used to speed up this N-body simulation.
                         *
                         * @private
                         */

                    }, {
                        key: "solve",
                        value: function solve() {
                            if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
                                var node = void 0;
                                var nodes = this.body.nodes;
                                var nodeIndices = this.physicsBody.physicsNodeIndices;
                                var nodeCount = nodeIndices.length;

                                // create the tree
                                var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);

                                // for debugging
                                this.barnesHutTree = barnesHutTree;

                                // place the nodes one by one recursively
                                for (var i = 0; i < nodeCount; i++) {
                                    node = nodes[nodeIndices[i]];
                                    if (node.options.mass > 0) {
                                        // starting with root is irrelevant, it never passes the BarnesHutSolver condition
                                        this._getForceContribution(barnesHutTree.root.children.NW, node);
                                        this._getForceContribution(barnesHutTree.root.children.NE, node);
                                        this._getForceContribution(barnesHutTree.root.children.SW, node);
                                        this._getForceContribution(barnesHutTree.root.children.SE, node);
                                    }
                                }
                            }
                        }

                        /**
                         * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
                         * If a region contains a single node, we check if it is not itself, then we apply the force.
                         *
                         * @param parentBranch
                         * @param node
                         * @private
                         */

                    }, {
                        key: "_getForceContribution",
                        value: function _getForceContribution(parentBranch, node) {
                            // we get no force contribution from an empty region
                            if (parentBranch.childrenCount > 0) {
                                var dx = void 0,
                                    dy = void 0,
                                    distance = void 0;

                                // get the distance from the center of mass to the node.
                                dx = parentBranch.centerOfMass.x - node.x;
                                dy = parentBranch.centerOfMass.y - node.y;
                                distance = Math.sqrt(dx * dx + dy * dy);

                                // BarnesHutSolver condition
                                // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed
                                // calcSize = 1/s --> d * 1/s > 1/theta = passed
                                if (distance * parentBranch.calcSize > this.thetaInversed) {
                                    this._calculateForces(distance, dx, dy, node, parentBranch);
                                } else {
                                    // Did not pass the condition, go into children if available
                                    if (parentBranch.childrenCount === 4) {
                                        this._getForceContribution(parentBranch.children.NW, node);
                                        this._getForceContribution(parentBranch.children.NE, node);
                                        this._getForceContribution(parentBranch.children.SW, node);
                                        this._getForceContribution(parentBranch.children.SE, node);
                                    } else {
                                        // parentBranch must have only one node, if it was empty we wouldnt be here
                                        if (parentBranch.children.data.id != node.id) {
                                            // if it is not self
                                            this._calculateForces(distance, dx, dy, node, parentBranch);
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * Calculate the forces based on the distance.
                         *
                         * @param distance
                         * @param dx
                         * @param dy
                         * @param node
                         * @param parentBranch
                         * @private
                         */

                    }, {
                        key: "_calculateForces",
                        value: function _calculateForces(distance, dx, dy, node, parentBranch) {
                            if (distance === 0) {
                                distance = 0.1;
                                dx = distance;
                            }

                            if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
                                distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
                            }

                            // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
                            // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
                            var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
                            var fx = dx * gravityForce;
                            var fy = dy * gravityForce;

                            this.physicsBody.forces[node.id].x += fx;
                            this.physicsBody.forces[node.id].y += fy;
                        }

                        /**
                         * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
                         *
                         * @param nodes
                         * @param nodeIndices
                         * @private
                         */

                    }, {
                        key: "_formBarnesHutTree",
                        value: function _formBarnesHutTree(nodes, nodeIndices) {
                            var node = void 0;
                            var nodeCount = nodeIndices.length;

                            var minX = nodes[nodeIndices[0]].x;
                            var minY = nodes[nodeIndices[0]].y;
                            var maxX = nodes[nodeIndices[0]].x;
                            var maxY = nodes[nodeIndices[0]].y;

                            // get the range of the nodes
                            for (var i = 1; i < nodeCount; i++) {
                                var x = nodes[nodeIndices[i]].x;
                                var y = nodes[nodeIndices[i]].y;
                                if (nodes[nodeIndices[i]].options.mass > 0) {
                                    if (x < minX) {
                                        minX = x;
                                    }
                                    if (x > maxX) {
                                        maxX = x;
                                    }
                                    if (y < minY) {
                                        minY = y;
                                    }
                                    if (y > maxY) {
                                        maxY = y;
                                    }
                                }
                            }
                            // make the range a square
                            var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y
                            if (sizeDiff > 0) {
                                minY -= 0.5 * sizeDiff;
                                maxY += 0.5 * sizeDiff;
                            } // xSize > ySize
                            else {
                                minX += 0.5 * sizeDiff;
                                maxX -= 0.5 * sizeDiff;
                            } // xSize < ySize


                            var minimumTreeSize = 1e-5;
                            var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
                            var halfRootSize = 0.5 * rootSize;
                            var centerX = 0.5 * (minX + maxX),
                                centerY = 0.5 * (minY + maxY);

                            // construct the barnesHutTree
                            var barnesHutTree = {
                                root: {
                                    centerOfMass: { x: 0, y: 0 },
                                    mass: 0,
                                    range: {
                                        minX: centerX - halfRootSize,
                                        maxX: centerX + halfRootSize,
                                        minY: centerY - halfRootSize,
                                        maxY: centerY + halfRootSize
                                    },
                                    size: rootSize,
                                    calcSize: 1 / rootSize,
                                    children: { data: null },
                                    maxWidth: 0,
                                    level: 0,
                                    childrenCount: 4
                                }
                            };
                            this._splitBranch(barnesHutTree.root);

                            // place the nodes one by one recursively
                            for (var _i = 0; _i < nodeCount; _i++) {
                                node = nodes[nodeIndices[_i]];
                                if (node.options.mass > 0) {
                                    this._placeInTree(barnesHutTree.root, node);
                                }
                            }

                            // make global
                            return barnesHutTree;
                        }

                        /**
                         * this updates the mass of a branch. this is increased by adding a node.
                         *
                         * @param parentBranch
                         * @param node
                         * @private
                         */

                    }, {
                        key: "_updateBranchMass",
                        value: function _updateBranchMass(parentBranch, node) {
                            var totalMass = parentBranch.mass + node.options.mass;
                            var totalMassInv = 1 / totalMass;

                            parentBranch.centerOfMass.x = parentBranch.centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
                            parentBranch.centerOfMass.x *= totalMassInv;

                            parentBranch.centerOfMass.y = parentBranch.centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
                            parentBranch.centerOfMass.y *= totalMassInv;

                            parentBranch.mass = totalMass;
                            var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
                            parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
                        }

                        /**
                         * determine in which branch the node will be placed.
                         *
                         * @param parentBranch
                         * @param node
                         * @param skipMassUpdate
                         * @private
                         */

                    }, {
                        key: "_placeInTree",
                        value: function _placeInTree(parentBranch, node, skipMassUpdate) {
                            if (skipMassUpdate != true || skipMassUpdate === undefined) {
                                // update the mass of the branch.
                                this._updateBranchMass(parentBranch, node);
                            }

                            if (parentBranch.children.NW.range.maxX > node.x) {
                                // in NW or SW
                                if (parentBranch.children.NW.range.maxY > node.y) {
                                    // in NW
                                    this._placeInRegion(parentBranch, node, "NW");
                                } else {
                                    // in SW
                                    this._placeInRegion(parentBranch, node, "SW");
                                }
                            } else {
                                // in NE or SE
                                if (parentBranch.children.NW.range.maxY > node.y) {
                                    // in NE
                                    this._placeInRegion(parentBranch, node, "NE");
                                } else {
                                    // in SE
                                    this._placeInRegion(parentBranch, node, "SE");
                                }
                            }
                        }

                        /**
                         * actually place the node in a region (or branch)
                         *
                         * @param parentBranch
                         * @param node
                         * @param region
                         * @private
                         */

                    }, {
                        key: "_placeInRegion",
                        value: function _placeInRegion(parentBranch, node, region) {
                            switch (parentBranch.children[region].childrenCount) {
                                case 0:
                                    // place node here
                                    parentBranch.children[region].children.data = node;
                                    parentBranch.children[region].childrenCount = 1;
                                    this._updateBranchMass(parentBranch.children[region], node);
                                    break;
                                case 1:
                                    // convert into children
                                    // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)
                                    // we move one node a little bit and we do not put it in the tree.
                                    if (parentBranch.children[region].children.data.x === node.x && parentBranch.children[region].children.data.y === node.y) {
                                        node.x += this.seededRandom();
                                        node.y += this.seededRandom();
                                    } else {
                                        this._splitBranch(parentBranch.children[region]);
                                        this._placeInTree(parentBranch.children[region], node);
                                    }
                                    break;
                                case 4:
                                    // place in branch
                                    this._placeInTree(parentBranch.children[region], node);
                                    break;
                            }
                        }

                        /**
                         * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
                         * after the split is complete.
                         *
                         * @param parentBranch
                         * @private
                         */

                    }, {
                        key: "_splitBranch",
                        value: function _splitBranch(parentBranch) {
                            // if the branch is shaded with a node, replace the node in the new subset.
                            var containedNode = null;
                            if (parentBranch.childrenCount === 1) {
                                containedNode = parentBranch.children.data;
                                parentBranch.mass = 0;
                                parentBranch.centerOfMass.x = 0;
                                parentBranch.centerOfMass.y = 0;
                            }
                            parentBranch.childrenCount = 4;
                            parentBranch.children.data = null;
                            this._insertRegion(parentBranch, "NW");
                            this._insertRegion(parentBranch, "NE");
                            this._insertRegion(parentBranch, "SW");
                            this._insertRegion(parentBranch, "SE");

                            if (containedNode != null) {
                                this._placeInTree(parentBranch, containedNode);
                            }
                        }

                        /**
                         * This function subdivides the region into four new segments.
                         * Specifically, this inserts a single new segment.
                         * It fills the children section of the parentBranch
                         *
                         * @param parentBranch
                         * @param region
                         * @param parentRange
                         * @private
                         */

                    }, {
                        key: "_insertRegion",
                        value: function _insertRegion(parentBranch, region) {
                            var minX = void 0,
                                maxX = void 0,
                                minY = void 0,
                                maxY = void 0;
                            var childSize = 0.5 * parentBranch.size;
                            switch (region) {
                                case "NW":
                                    minX = parentBranch.range.minX;
                                    maxX = parentBranch.range.minX + childSize;
                                    minY = parentBranch.range.minY;
                                    maxY = parentBranch.range.minY + childSize;
                                    break;
                                case "NE":
                                    minX = parentBranch.range.minX + childSize;
                                    maxX = parentBranch.range.maxX;
                                    minY = parentBranch.range.minY;
                                    maxY = parentBranch.range.minY + childSize;
                                    break;
                                case "SW":
                                    minX = parentBranch.range.minX;
                                    maxX = parentBranch.range.minX + childSize;
                                    minY = parentBranch.range.minY + childSize;
                                    maxY = parentBranch.range.maxY;
                                    break;
                                case "SE":
                                    minX = parentBranch.range.minX + childSize;
                                    maxX = parentBranch.range.maxX;
                                    minY = parentBranch.range.minY + childSize;
                                    maxY = parentBranch.range.maxY;
                                    break;
                            }

                            parentBranch.children[region] = {
                                centerOfMass: { x: 0, y: 0 },
                                mass: 0,
                                range: { minX: minX, maxX: maxX, minY: minY, maxY: maxY },
                                size: 0.5 * parentBranch.size,
                                calcSize: 2 * parentBranch.calcSize,
                                children: { data: null },
                                maxWidth: 0,
                                level: parentBranch.level + 1,
                                childrenCount: 0
                            };
                        }

                        //---------------------------  DEBUGGING BELOW  ---------------------------//


                        /**
                         * This function is for debugging purposed, it draws the tree.
                         *
                         * @param ctx
                         * @param color
                         * @private
                         */

                    }, {
                        key: "_debug",
                        value: function _debug(ctx, color) {
                            if (this.barnesHutTree !== undefined) {

                                ctx.lineWidth = 1;

                                this._drawBranch(this.barnesHutTree.root, ctx, color);
                            }
                        }

                        /**
                         * This function is for debugging purposes. It draws the branches recursively.
                         *
                         * @param branch
                         * @param ctx
                         * @param color
                         * @private
                         */

                    }, {
                        key: "_drawBranch",
                        value: function _drawBranch(branch, ctx, color) {
                            if (color === undefined) {
                                color = "#FF0000";
                            }

                            if (branch.childrenCount === 4) {
                                this._drawBranch(branch.children.NW, ctx);
                                this._drawBranch(branch.children.NE, ctx);
                                this._drawBranch(branch.children.SE, ctx);
                                this._drawBranch(branch.children.SW, ctx);
                            }
                            ctx.strokeStyle = color;
                            ctx.beginPath();
                            ctx.moveTo(branch.range.minX, branch.range.minY);
                            ctx.lineTo(branch.range.maxX, branch.range.minY);
                            ctx.stroke();

                            ctx.beginPath();
                            ctx.moveTo(branch.range.maxX, branch.range.minY);
                            ctx.lineTo(branch.range.maxX, branch.range.maxY);
                            ctx.stroke();

                            ctx.beginPath();
                            ctx.moveTo(branch.range.maxX, branch.range.maxY);
                            ctx.lineTo(branch.range.minX, branch.range.maxY);
                            ctx.stroke();

                            ctx.beginPath();
                            ctx.moveTo(branch.range.minX, branch.range.maxY);
                            ctx.lineTo(branch.range.minX, branch.range.minY);
                            ctx.stroke();

                            /*
                             if (branch.mass > 0) {
                             ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);
                             ctx.stroke();
                             }
                             */
                        }
                    }]);
                    return BarnesHutSolver;
                }();

                exports["default"] = BarnesHutSolver;

                /***/
            }),
            /* 211 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var RepulsionSolver = function() {
                    function RepulsionSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, RepulsionSolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.setOptions(options);
                    }

                    (0, _createClass3["default"])(RepulsionSolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                                this.options = options;
                            }
                            /**
                             * Calculate the forces the nodes apply on each other based on a repulsion field.
                             * This field is linearly approximated.
                             *
                             * @private
                             */

                    }, {
                        key: "solve",
                        value: function solve() {
                            var dx, dy, distance, fx, fy, repulsingForce, node1, node2;

                            var nodes = this.body.nodes;
                            var nodeIndices = this.physicsBody.physicsNodeIndices;
                            var forces = this.physicsBody.forces;

                            // repulsing forces between nodes
                            var nodeDistance = this.options.nodeDistance;

                            // approximation constants
                            var a = -2 / 3 / nodeDistance;
                            var b = 4 / 3;

                            // we loop from i over all but the last entree in the array
                            // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
                            for (var i = 0; i < nodeIndices.length - 1; i++) {
                                node1 = nodes[nodeIndices[i]];
                                for (var j = i + 1; j < nodeIndices.length; j++) {
                                    node2 = nodes[nodeIndices[j]];

                                    dx = node2.x - node1.x;
                                    dy = node2.y - node1.y;
                                    distance = Math.sqrt(dx * dx + dy * dy);

                                    // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.
                                    if (distance === 0) {
                                        distance = 0.1 * Math.random();
                                        dx = distance;
                                    }

                                    if (distance < 2 * nodeDistance) {
                                        if (distance < 0.5 * nodeDistance) {
                                            repulsingForce = 1.0;
                                        } else {
                                            repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))
                                        }
                                        repulsingForce = repulsingForce / distance;

                                        fx = dx * repulsingForce;
                                        fy = dy * repulsingForce;

                                        forces[node1.id].x -= fx;
                                        forces[node1.id].y -= fy;
                                        forces[node2.id].x += fx;
                                        forces[node2.id].y += fy;
                                    }
                                }
                            }
                        }
                    }]);
                    return RepulsionSolver;
                }();

                exports["default"] = RepulsionSolver;

                /***/
            }),
            /* 212 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var HierarchicalRepulsionSolver = function() {
                    function HierarchicalRepulsionSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, HierarchicalRepulsionSolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.setOptions(options);
                    }

                    (0, _createClass3["default"])(HierarchicalRepulsionSolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            this.options = options;
                        }

                        /**
                         * Calculate the forces the nodes apply on each other based on a repulsion field.
                         * This field is linearly approximated.
                         *
                         * @private
                         */

                    }, {
                        key: "solve",
                        value: function solve() {
                            var dx, dy, distance, fx, fy, repulsingForce, node1, node2, i, j;

                            var nodes = this.body.nodes;
                            var nodeIndices = this.physicsBody.physicsNodeIndices;
                            var forces = this.physicsBody.forces;

                            // repulsing forces between nodes
                            var nodeDistance = this.options.nodeDistance;

                            // we loop from i over all but the last entree in the array
                            // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
                            for (i = 0; i < nodeIndices.length - 1; i++) {
                                node1 = nodes[nodeIndices[i]];
                                for (j = i + 1; j < nodeIndices.length; j++) {
                                    node2 = nodes[nodeIndices[j]];

                                    // nodes only affect nodes on their level
                                    if (node1.level === node2.level) {
                                        dx = node2.x - node1.x;
                                        dy = node2.y - node1.y;
                                        distance = Math.sqrt(dx * dx + dy * dy);

                                        var steepness = 0.05;
                                        if (distance < nodeDistance) {
                                            repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * nodeDistance, 2);
                                        } else {
                                            repulsingForce = 0;
                                        }
                                        // normalize force with
                                        if (distance === 0) {
                                            distance = 0.01;
                                        } else {
                                            repulsingForce = repulsingForce / distance;
                                        }
                                        fx = dx * repulsingForce;
                                        fy = dy * repulsingForce;

                                        forces[node1.id].x -= fx;
                                        forces[node1.id].y -= fy;
                                        forces[node2.id].x += fx;
                                        forces[node2.id].y += fy;
                                    }
                                }
                            }
                        }
                    }]);
                    return HierarchicalRepulsionSolver;
                }();

                exports["default"] = HierarchicalRepulsionSolver;

                /***/
            }),
            /* 213 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var SpringSolver = function() {
                    function SpringSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, SpringSolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.setOptions(options);
                    }

                    (0, _createClass3["default"])(SpringSolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            this.options = options;
                        }

                        /**
                         * This function calculates the springforces on the nodes, accounting for the support nodes.
                         *
                         * @private
                         */

                    }, {
                        key: "solve",
                        value: function solve() {
                            var edgeLength = void 0,
                                edge = void 0;
                            var edgeIndices = this.physicsBody.physicsEdgeIndices;
                            var edges = this.body.edges;
                            var node1 = void 0,
                                node2 = void 0,
                                node3 = void 0;

                            // forces caused by the edges, modelled as springs
                            for (var i = 0; i < edgeIndices.length; i++) {
                                edge = edges[edgeIndices[i]];
                                if (edge.connected === true && edge.toId !== edge.fromId) {
                                    // only calculate forces if nodes are in the same sector
                                    if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {
                                        if (edge.edgeType.via !== undefined) {
                                            edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;
                                            node1 = edge.to;
                                            node2 = edge.edgeType.via;
                                            node3 = edge.from;

                                            this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
                                            this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
                                        } else {
                                            // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use
                                            // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.
                                            edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;
                                            this._calculateSpringForce(edge.from, edge.to, edgeLength);
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * This is the code actually performing the calculation for the function above.
                         *
                         * @param node1
                         * @param node2
                         * @param edgeLength
                         * @private
                         */

                    }, {
                        key: "_calculateSpringForce",
                        value: function _calculateSpringForce(node1, node2, edgeLength) {
                            var dx = node1.x - node2.x;
                            var dy = node1.y - node2.y;
                            var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);

                            // the 1/distance is so the fx and fy can be calculated without sine or cosine.
                            var springForce = this.options.springConstant * (edgeLength - distance) / distance;

                            var fx = dx * springForce;
                            var fy = dy * springForce;

                            // handle the case where one node is not part of the physcis
                            if (this.physicsBody.forces[node1.id] !== undefined) {
                                this.physicsBody.forces[node1.id].x += fx;
                                this.physicsBody.forces[node1.id].y += fy;
                            }

                            if (this.physicsBody.forces[node2.id] !== undefined) {
                                this.physicsBody.forces[node2.id].x -= fx;
                                this.physicsBody.forces[node2.id].y -= fy;
                            }
                        }
                    }]);
                    return SpringSolver;
                }();

                exports["default"] = SpringSolver;

                /***/
            }),
            /* 214 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var HierarchicalSpringSolver = function() {
                    function HierarchicalSpringSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, HierarchicalSpringSolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.setOptions(options);
                    }

                    (0, _createClass3["default"])(HierarchicalSpringSolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            this.options = options;
                        }

                        /**
                         * This function calculates the springforces on the nodes, accounting for the support nodes.
                         *
                         * @private
                         */

                    }, {
                        key: "solve",
                        value: function solve() {
                            var edgeLength, edge;
                            var dx, dy, fx, fy, springForce, distance;
                            var edges = this.body.edges;
                            var factor = 0.5;

                            var edgeIndices = this.physicsBody.physicsEdgeIndices;
                            var nodeIndices = this.physicsBody.physicsNodeIndices;
                            var forces = this.physicsBody.forces;

                            // initialize the spring force counters
                            for (var i = 0; i < nodeIndices.length; i++) {
                                var nodeId = nodeIndices[i];
                                forces[nodeId].springFx = 0;
                                forces[nodeId].springFy = 0;
                            }

                            // forces caused by the edges, modelled as springs
                            for (var _i = 0; _i < edgeIndices.length; _i++) {
                                edge = edges[edgeIndices[_i]];
                                if (edge.connected === true) {
                                    edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;

                                    dx = edge.from.x - edge.to.x;
                                    dy = edge.from.y - edge.to.y;
                                    distance = Math.sqrt(dx * dx + dy * dy);
                                    distance = distance === 0 ? 0.01 : distance;

                                    // the 1/distance is so the fx and fy can be calculated without sine or cosine.
                                    springForce = this.options.springConstant * (edgeLength - distance) / distance;

                                    fx = dx * springForce;
                                    fy = dy * springForce;

                                    if (edge.to.level != edge.from.level) {
                                        if (forces[edge.toId] !== undefined) {
                                            forces[edge.toId].springFx -= fx;
                                            forces[edge.toId].springFy -= fy;
                                        }
                                        if (forces[edge.fromId] !== undefined) {
                                            forces[edge.fromId].springFx += fx;
                                            forces[edge.fromId].springFy += fy;
                                        }
                                    } else {
                                        if (forces[edge.toId] !== undefined) {
                                            forces[edge.toId].x -= factor * fx;
                                            forces[edge.toId].y -= factor * fy;
                                        }
                                        if (forces[edge.fromId] !== undefined) {
                                            forces[edge.fromId].x += factor * fx;
                                            forces[edge.fromId].y += factor * fy;
                                        }
                                    }
                                }
                            }

                            // normalize spring forces
                            var springForce = 1;
                            var springFx, springFy;
                            for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
                                var _nodeId = nodeIndices[_i2];
                                springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
                                springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));

                                forces[_nodeId].x += springFx;
                                forces[_nodeId].y += springFy;
                            }

                            // retain energy balance
                            var totalFx = 0;
                            var totalFy = 0;
                            for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
                                var _nodeId2 = nodeIndices[_i3];
                                totalFx += forces[_nodeId2].x;
                                totalFy += forces[_nodeId2].y;
                            }
                            var correctionFx = totalFx / nodeIndices.length;
                            var correctionFy = totalFy / nodeIndices.length;

                            for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
                                var _nodeId3 = nodeIndices[_i4];
                                forces[_nodeId3].x -= correctionFx;
                                forces[_nodeId3].y -= correctionFy;
                            }
                        }
                    }]);
                    return HierarchicalSpringSolver;
                }();

                exports["default"] = HierarchicalSpringSolver;

                /***/
            }),
            /* 215 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var CentralGravitySolver = function() {
                    function CentralGravitySolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, CentralGravitySolver);

                        this.body = body;
                        this.physicsBody = physicsBody;
                        this.setOptions(options);
                    }

                    (0, _createClass3["default"])(CentralGravitySolver, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            this.options = options;
                        }
                    }, {
                        key: "solve",
                        value: function solve() {
                            var dx = void 0,
                                dy = void 0,
                                distance = void 0,
                                node = void 0;
                            var nodes = this.body.nodes;
                            var nodeIndices = this.physicsBody.physicsNodeIndices;
                            var forces = this.physicsBody.forces;

                            for (var i = 0; i < nodeIndices.length; i++) {
                                var nodeId = nodeIndices[i];
                                node = nodes[nodeId];
                                dx = -node.x;
                                dy = -node.y;
                                distance = Math.sqrt(dx * dx + dy * dy);

                                this._calculateForces(distance, dx, dy, forces, node);
                            }
                        }

                        /**
                         * Calculate the forces based on the distance.
                         * @private
                         */

                    }, {
                        key: "_calculateForces",
                        value: function _calculateForces(distance, dx, dy, forces, node) {
                            var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
                            forces[node.id].x = dx * gravityForce;
                            forces[node.id].y = dy * gravityForce;
                        }
                    }]);
                    return CentralGravitySolver;
                }();

                exports["default"] = CentralGravitySolver;

                /***/
            }),
            /* 216 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _BarnesHutSolver2 = __webpack_require__(210);

                var _BarnesHutSolver3 = _interopRequireDefault(_BarnesHutSolver2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var ForceAtlas2BasedRepulsionSolver = function(_BarnesHutSolver) {
                    (0, _inherits3["default"])(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);

                    function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, ForceAtlas2BasedRepulsionSolver);
                        return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedRepulsionSolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedRepulsionSolver)).call(this, body, physicsBody, options));
                    }

                    /**
                     * Calculate the forces based on the distance.
                     *
                     * @param distance
                     * @param dx
                     * @param dy
                     * @param node
                     * @param parentBranch
                     * @private
                     */


                    (0, _createClass3["default"])(ForceAtlas2BasedRepulsionSolver, [{
                        key: "_calculateForces",
                        value: function _calculateForces(distance, dx, dy, node, parentBranch) {
                            if (distance === 0) {
                                distance = 0.1 * Math.random();
                                dx = distance;
                            }

                            if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
                                distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
                            }

                            var degree = node.edges.length + 1;
                            // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
                            // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
                            var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
                            var fx = dx * gravityForce;
                            var fy = dy * gravityForce;

                            this.physicsBody.forces[node.id].x += fx;
                            this.physicsBody.forces[node.id].y += fy;
                        }
                    }]);
                    return ForceAtlas2BasedRepulsionSolver;
                }(_BarnesHutSolver3["default"]);

                exports["default"] = ForceAtlas2BasedRepulsionSolver;

                /***/
            }),
            /* 217 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _CentralGravitySolver2 = __webpack_require__(215);

                var _CentralGravitySolver3 = _interopRequireDefault(_CentralGravitySolver2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var ForceAtlas2BasedCentralGravitySolver = function(_CentralGravitySolver) {
                    (0, _inherits3["default"])(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);

                    function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {
                        (0, _classCallCheck3["default"])(this, ForceAtlas2BasedCentralGravitySolver);
                        return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedCentralGravitySolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedCentralGravitySolver)).call(this, body, physicsBody, options));
                    }

                    /**
                     * Calculate the forces based on the distance.
                     * @private
                     */


                    (0, _createClass3["default"])(ForceAtlas2BasedCentralGravitySolver, [{
                        key: "_calculateForces",
                        value: function _calculateForces(distance, dx, dy, forces, node) {
                            if (distance > 0) {
                                var degree = node.edges.length + 1;
                                var gravityForce = this.options.centralGravity * degree * node.options.mass;
                                forces[node.id].x = dx * gravityForce;
                                forces[node.id].y = dy * gravityForce;
                            }
                        }
                    }]);
                    return ForceAtlas2BasedCentralGravitySolver;
                }(_CentralGravitySolver3["default"]);

                exports["default"] = ForceAtlas2BasedCentralGravitySolver;

                /***/
            }),
            /* 218 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var NetworkUtil = __webpack_require__(219)['default'];
                var Cluster = __webpack_require__(220)['default'];

                var ClusterEngine = function() {
                    function ClusterEngine(body) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, ClusterEngine);

                        this.body = body;
                        this.clusteredNodes = {};
                        this.clusteredEdges = {};

                        this.options = {};
                        this.defaultOptions = {};
                        util.extend(this.options, this.defaultOptions);

                        this.body.emitter.on('_resetData', function() {
                            _this.clusteredNodes = {};
                            _this.clusteredEdges = {};
                        });
                    }

                    /**
                     *
                     * @param hubsize
                     * @param options
                     */


                    (0, _createClass3['default'])(ClusterEngine, [{
                        key: 'clusterByHubsize',
                        value: function clusterByHubsize(hubsize, options) {
                            if (hubsize === undefined) {
                                hubsize = this._getHubSize();
                            } else if ((typeof hubsize === 'undefined' ? 'undefined' : (0, _typeof3['default'])(hubsize)) === "object") {
                                options = this._checkOptions(hubsize);
                                hubsize = this._getHubSize();
                            }

                            var nodesToCluster = [];
                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                var node = this.body.nodes[this.body.nodeIndices[i]];
                                if (node.edges.length >= hubsize) {
                                    nodesToCluster.push(node.id);
                                }
                            }

                            for (var _i = 0; _i < nodesToCluster.length; _i++) {
                                this.clusterByConnection(nodesToCluster[_i], options, true);
                            }

                            this.body.emitter.emit('_dataChanged');
                        }

                        /**
                         * loop over all nodes, check if they adhere to the condition and cluster if needed.
                         * @param options
                         * @param refreshData
                         */

                    }, {
                        key: 'cluster',
                        value: function cluster() {
                            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            if (options.joinCondition === undefined) {
                                throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
                            }

                            // check if the options object is fine, append if needed
                            options = this._checkOptions(options);

                            var childNodesObj = {};
                            var childEdgesObj = {};

                            // collect the nodes that will be in the cluster
                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                var nodeId = this.body.nodeIndices[i];
                                var node = this.body.nodes[nodeId];
                                var clonedOptions = NetworkUtil.cloneOptions(node);
                                if (options.joinCondition(clonedOptions) === true) {
                                    childNodesObj[nodeId] = this.body.nodes[nodeId];

                                    // collect the nodes that will be in the cluster
                                    for (var _i2 = 0; _i2 < node.edges.length; _i2++) {
                                        var edge = node.edges[_i2];
                                        if (this.clusteredEdges[edge.id] === undefined) {
                                            childEdgesObj[edge.id] = edge;
                                        }
                                    }
                                }
                            }

                            this._cluster(childNodesObj, childEdgesObj, options, refreshData);
                        }

                        /**
                         * Cluster all nodes in the network that have only X edges
                         * @param edgeCount
                         * @param options
                         * @param refreshData
                         */

                    }, {
                        key: 'clusterByEdgeCount',
                        value: function clusterByEdgeCount(edgeCount, options) {
                            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                            options = this._checkOptions(options);
                            var clusters = [];
                            var usedNodes = {};
                            var edge = void 0,
                                edges = void 0,
                                node = void 0,
                                nodeId = void 0,
                                relevantEdgeCount = void 0;
                            // collect the nodes that will be in the cluster
                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                var childNodesObj = {};
                                var childEdgesObj = {};
                                nodeId = this.body.nodeIndices[i];

                                // if this node is already used in another cluster this session, we do not have to re-evaluate it.
                                if (usedNodes[nodeId] === undefined) {
                                    relevantEdgeCount = 0;
                                    node = this.body.nodes[nodeId];
                                    edges = [];
                                    for (var j = 0; j < node.edges.length; j++) {
                                        edge = node.edges[j];
                                        if (this.clusteredEdges[edge.id] === undefined) {
                                            if (edge.toId !== edge.fromId) {
                                                relevantEdgeCount++;
                                            }
                                            edges.push(edge);
                                        }
                                    }

                                    // this node qualifies, we collect its neighbours to start the clustering process.
                                    if (relevantEdgeCount === edgeCount) {
                                        var gatheringSuccessful = true;
                                        for (var _j = 0; _j < edges.length; _j++) {
                                            edge = edges[_j];
                                            var childNodeId = this._getConnectedId(edge, nodeId);
                                            // add the nodes to the list by the join condition.
                                            if (options.joinCondition === undefined) {
                                                childEdgesObj[edge.id] = edge;
                                                childNodesObj[nodeId] = this.body.nodes[nodeId];
                                                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                                                usedNodes[nodeId] = true;
                                            } else {
                                                var clonedOptions = NetworkUtil.cloneOptions(this.body.nodes[nodeId]);
                                                if (options.joinCondition(clonedOptions) === true) {
                                                    childEdgesObj[edge.id] = edge;
                                                    childNodesObj[nodeId] = this.body.nodes[nodeId];
                                                    usedNodes[nodeId] = true;
                                                } else {
                                                    // this node does not qualify after all.
                                                    gatheringSuccessful = false;
                                                    break;
                                                }
                                            }
                                        }

                                        // add to the cluster queue
                                        if ((0, _keys2['default'])(childNodesObj).length > 0 && (0, _keys2['default'])(childEdgesObj).length > 0 && gatheringSuccessful === true) {
                                            clusters.push({ nodes: childNodesObj, edges: childEdgesObj });
                                        }
                                    }
                                }
                            }

                            for (var _i3 = 0; _i3 < clusters.length; _i3++) {
                                this._cluster(clusters[_i3].nodes, clusters[_i3].edges, options, false);
                            }

                            if (refreshData === true) {
                                this.body.emitter.emit('_dataChanged');
                            }
                        }

                        /**
                         * Cluster all nodes in the network that have only 1 edge
                         * @param options
                         * @param refreshData
                         */

                    }, {
                        key: 'clusterOutliers',
                        value: function clusterOutliers(options) {
                            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            this.clusterByEdgeCount(1, options, refreshData);
                        }

                        /**
                         * Cluster all nodes in the network that have only 2 edge
                         * @param options
                         * @param refreshData
                         */

                    }, {
                        key: 'clusterBridges',
                        value: function clusterBridges(options) {
                            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            this.clusterByEdgeCount(2, options, refreshData);
                        }

                        /**
                         * suck all connected nodes of a node into the node.
                         * @param nodeId
                         * @param options
                         * @param refreshData
                         */

                    }, {
                        key: 'clusterByConnection',
                        value: function clusterByConnection(nodeId, options) {
                            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                            // kill conditions
                            if (nodeId === undefined) {
                                throw new Error("No nodeId supplied to clusterByConnection!");
                            }
                            if (this.body.nodes[nodeId] === undefined) {
                                throw new Error("The nodeId given to clusterByConnection does not exist!");
                            }

                            var node = this.body.nodes[nodeId];
                            options = this._checkOptions(options, node);
                            if (options.clusterNodeProperties.x === undefined) {
                                options.clusterNodeProperties.x = node.x;
                            }
                            if (options.clusterNodeProperties.y === undefined) {
                                options.clusterNodeProperties.y = node.y;
                            }
                            if (options.clusterNodeProperties.fixed === undefined) {
                                options.clusterNodeProperties.fixed = {};
                                options.clusterNodeProperties.fixed.x = node.options.fixed.x;
                                options.clusterNodeProperties.fixed.y = node.options.fixed.y;
                            }

                            var childNodesObj = {};
                            var childEdgesObj = {};
                            var parentNodeId = node.id;
                            var parentClonedOptions = NetworkUtil.cloneOptions(node);
                            childNodesObj[parentNodeId] = node;

                            // collect the nodes that will be in the cluster
                            for (var i = 0; i < node.edges.length; i++) {
                                var edge = node.edges[i];
                                if (this.clusteredEdges[edge.id] === undefined) {
                                    var childNodeId = this._getConnectedId(edge, parentNodeId);

                                    // if the child node is not in a cluster
                                    if (this.clusteredNodes[childNodeId] === undefined) {
                                        if (childNodeId !== parentNodeId) {
                                            if (options.joinCondition === undefined) {
                                                childEdgesObj[edge.id] = edge;
                                                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                                            } else {
                                                // clone the options and insert some additional parameters that could be interesting.
                                                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
                                                if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {
                                                    childEdgesObj[edge.id] = edge;
                                                    childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                                                }
                                            }
                                        } else {
                                            // swallow the edge if it is self-referencing.
                                            childEdgesObj[edge.id] = edge;
                                        }
                                    }
                                }
                            }
                            var childNodeIDs = (0, _keys2['default'])(childNodesObj).map(function(childNode) {
                                return childNodesObj[childNode].id;
                            });

                            for (childNode in childNodesObj) {
                                var childNode = childNodesObj[childNode];
                                for (var y = 0; y < childNode.edges.length; y++) {
                                    var childEdge = childNode.edges[y];
                                    if (childNodeIDs.indexOf(this._getConnectedId(childEdge, childNode.id)) > -1) {
                                        childEdgesObj[childEdge.id] = childEdge;
                                    }
                                }
                            }
                            this._cluster(childNodesObj, childEdgesObj, options, refreshData);
                        }

                        /**
                         * This function creates the edges that will be attached to the cluster
                         * It looks for edges that are connected to the nodes from the "outside' of the cluster.
                         *
                         * @param childNodesObj
                         * @param childEdgesObj
                         * @param clusterNodeProperties
                         * @param clusterEdgeProperties
                         * @private
                         */

                    }, {
                        key: '_createClusterEdges',
                        value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
                            var edge = void 0,
                                childNodeId = void 0,
                                childNode = void 0,
                                toId = void 0,
                                fromId = void 0,
                                otherNodeId = void 0;

                            // loop over all child nodes and their edges to find edges going out of the cluster
                            // these edges will be replaced by clusterEdges.
                            var childKeys = (0, _keys2['default'])(childNodesObj);
                            var createEdges = [];
                            for (var i = 0; i < childKeys.length; i++) {
                                childNodeId = childKeys[i];
                                childNode = childNodesObj[childNodeId];

                                // construct new edges from the cluster to others
                                for (var j = 0; j < childNode.edges.length; j++) {
                                    edge = childNode.edges[j];
                                    // we only handle edges that are visible to the system, not the disabled ones from the clustering process.
                                    if (this.clusteredEdges[edge.id] === undefined) {
                                        // self-referencing edges will be added to the "hidden" list
                                        if (edge.toId == edge.fromId) {
                                            childEdgesObj[edge.id] = edge;
                                        } else {
                                            // set up the from and to.
                                            if (edge.toId == childNodeId) {
                                                // this is a double equals because ints and strings can be interchanged here.
                                                toId = clusterNodeProperties.id;
                                                fromId = edge.fromId;
                                                otherNodeId = fromId;
                                            } else {
                                                toId = edge.toId;
                                                fromId = clusterNodeProperties.id;
                                                otherNodeId = toId;
                                            }
                                        }

                                        // Only edges from the cluster outwards are being replaced.
                                        if (childNodesObj[otherNodeId] === undefined) {
                                            createEdges.push({ edge: edge, fromId: fromId, toId: toId });
                                        }
                                    }
                                }
                            }

                            // here we actually create the replacement edges. We could not do this in the loop above as the creation process
                            // would add an edge to the edges array we are iterating over.
                            for (var _j2 = 0; _j2 < createEdges.length; _j2++) {
                                var _edge = createEdges[_j2].edge;
                                // copy the options of the edge we will replace
                                var clonedOptions = NetworkUtil.cloneOptions(_edge, 'edge');
                                // make sure the properties of clusterEdges are superimposed on it
                                util.deepExtend(clonedOptions, clusterEdgeProperties);

                                // set up the edge
                                clonedOptions.from = createEdges[_j2].fromId;
                                clonedOptions.to = createEdges[_j2].toId;
                                clonedOptions.id = 'clusterEdge:' + util.randomUUID();
                                //clonedOptions.id = '(cf: ' + createEdges[j].fromId + " to: " + createEdges[j].toId + ")" + Math.random();

                                // create the edge and give a reference to the one it replaced.
                                var newEdge = this.body.functions.createEdge(clonedOptions);
                                newEdge.clusteringEdgeReplacingId = _edge.id;

                                // also reference the new edge in the old edge
                                this.body.edges[_edge.id].edgeReplacedById = newEdge.id;

                                // connect the edge.
                                this.body.edges[newEdge.id] = newEdge;
                                newEdge.connect();

                                // hide the replaced edge
                                this._backupEdgeOptions(_edge);
                                _edge.setOptions({ physics: false, hidden: true });
                            }
                        }

                        /**
                         * This function checks the options that can be supplied to the different cluster functions
                         * for certain fields and inserts defaults if needed
                         * @param options
                         * @returns {*}
                         * @private
                         */

                    }, {
                        key: '_checkOptions',
                        value: function _checkOptions() {
                            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                            if (options.clusterEdgeProperties === undefined) {
                                options.clusterEdgeProperties = {};
                            }
                            if (options.clusterNodeProperties === undefined) {
                                options.clusterNodeProperties = {};
                            }

                            return options;
                        }

                        /**
                         *
                         * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
                         * @param {Object}    childEdgesObj         | object with edge objects, id as keys
                         * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
                         * @param {Boolean}   refreshData | when true, do not wrap up
                         * @private
                         */

                    }, {
                        key: '_cluster',
                        value: function _cluster(childNodesObj, childEdgesObj, options) {
                            var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

                            // kill condition: no nodes don't bother
                            if ((0, _keys2['default'])(childNodesObj).length == 0) {
                                return;
                            }

                            // allow clusters of 1 if options allow
                            if ((0, _keys2['default'])(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {
                                return;
                            }

                            // check if this cluster call is not trying to cluster anything that is in another cluster.
                            for (var nodeId in childNodesObj) {
                                if (childNodesObj.hasOwnProperty(nodeId)) {
                                    if (this.clusteredNodes[nodeId] !== undefined) {
                                        return;
                                    }
                                }
                            }

                            var clusterNodeProperties = util.deepExtend({}, options.clusterNodeProperties);

                            // construct the clusterNodeProperties
                            if (options.processProperties !== undefined) {
                                // get the childNode options
                                var childNodesOptions = [];
                                for (var _nodeId in childNodesObj) {
                                    if (childNodesObj.hasOwnProperty(_nodeId)) {
                                        var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId]);
                                        childNodesOptions.push(clonedOptions);
                                    }
                                }

                                // get cluster properties based on childNodes
                                var childEdgesOptions = [];
                                for (var edgeId in childEdgesObj) {
                                    if (childEdgesObj.hasOwnProperty(edgeId)) {
                                        // these cluster edges will be removed on creation of the cluster.
                                        if (edgeId.substr(0, 12) !== "clusterEdge:") {
                                            var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], 'edge');
                                            childEdgesOptions.push(_clonedOptions);
                                        }
                                    }
                                }

                                clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
                                if (!clusterNodeProperties) {
                                    throw new Error("The processProperties function does not return properties!");
                                }
                            }

                            // check if we have an unique id;
                            if (clusterNodeProperties.id === undefined) {
                                clusterNodeProperties.id = 'cluster:' + util.randomUUID();
                            }
                            var clusterId = clusterNodeProperties.id;

                            if (clusterNodeProperties.label === undefined) {
                                clusterNodeProperties.label = 'cluster';
                            }

                            // give the clusterNode a position if it does not have one.
                            var pos = undefined;
                            if (clusterNodeProperties.x === undefined) {
                                pos = this._getClusterPosition(childNodesObj);
                                clusterNodeProperties.x = pos.x;
                            }
                            if (clusterNodeProperties.y === undefined) {
                                if (pos === undefined) {
                                    pos = this._getClusterPosition(childNodesObj);
                                }
                                clusterNodeProperties.y = pos.y;
                            }

                            // force the ID to remain the same
                            clusterNodeProperties.id = clusterId;

                            // create the clusterNode
                            var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
                            clusterNode.isCluster = true;
                            clusterNode.containedNodes = childNodesObj;
                            clusterNode.containedEdges = childEdgesObj;
                            // cache a copy from the cluster edge properties if we have to reconnect others later on
                            clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;

                            // finally put the cluster node into global
                            this.body.nodes[clusterNodeProperties.id] = clusterNode;

                            // create the new edges that will connect to the cluster, all self-referencing edges will be added to childEdgesObject here.
                            this._createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);

                            // disable the childEdges
                            for (var _edgeId in childEdgesObj) {
                                if (childEdgesObj.hasOwnProperty(_edgeId)) {
                                    if (this.body.edges[_edgeId] !== undefined) {
                                        var edge = this.body.edges[_edgeId];
                                        // cache the options before changing
                                        this._backupEdgeOptions(edge);
                                        // disable physics and hide the edge
                                        edge.setOptions({ physics: false, hidden: true });
                                    }
                                }
                            }

                            // disable the childNodes
                            for (var _nodeId2 in childNodesObj) {
                                if (childNodesObj.hasOwnProperty(_nodeId2)) {
                                    this.clusteredNodes[_nodeId2] = { clusterId: clusterNodeProperties.id, node: this.body.nodes[_nodeId2] };
                                    this.body.nodes[_nodeId2].setOptions({ hidden: true, physics: false });
                                }
                            }

                            // set ID to undefined so no duplicates arise
                            clusterNodeProperties.id = undefined;

                            // wrap up
                            if (refreshData === true) {
                                this.body.emitter.emit('_dataChanged');
                            }
                        }
                    }, {
                        key: '_backupEdgeOptions',
                        value: function _backupEdgeOptions(edge) {
                            if (this.clusteredEdges[edge.id] === undefined) {
                                this.clusteredEdges[edge.id] = { physics: edge.options.physics, hidden: edge.options.hidden };
                            }
                        }
                    }, {
                        key: '_restoreEdge',
                        value: function _restoreEdge(edge) {
                            var originalOptions = this.clusteredEdges[edge.id];
                            if (originalOptions !== undefined) {
                                edge.setOptions({ physics: originalOptions.physics, hidden: originalOptions.hidden });
                                delete this.clusteredEdges[edge.id];
                            }
                        }

                        /**
                         * Check if a node is a cluster.
                         * @param nodeId
                         * @returns {*}
                         */

                    }, {
                        key: 'isCluster',
                        value: function isCluster(nodeId) {
                            if (this.body.nodes[nodeId] !== undefined) {
                                return this.body.nodes[nodeId].isCluster === true;
                            } else {
                                console.log("Node does not exist.");
                                return false;
                            }
                        }

                        /**
                         * get the position of the cluster node based on what's inside
                         * @param {object} childNodesObj    | object with node objects, id as keys
                         * @returns {{x: number, y: number}}
                         * @private
                         */

                    }, {
                        key: '_getClusterPosition',
                        value: function _getClusterPosition(childNodesObj) {
                            var childKeys = (0, _keys2['default'])(childNodesObj);
                            var minX = childNodesObj[childKeys[0]].x;
                            var maxX = childNodesObj[childKeys[0]].x;
                            var minY = childNodesObj[childKeys[0]].y;
                            var maxY = childNodesObj[childKeys[0]].y;
                            var node = void 0;
                            for (var i = 1; i < childKeys.length; i++) {
                                node = childNodesObj[childKeys[i]];
                                minX = node.x < minX ? node.x : minX;
                                maxX = node.x > maxX ? node.x : maxX;
                                minY = node.y < minY ? node.y : minY;
                                maxY = node.y > maxY ? node.y : maxY;
                            }

                            return { x: 0.5 * (minX + maxX), y: 0.5 * (minY + maxY) };
                        }

                        /**
                         * Open a cluster by calling this function.
                         * @param {String}  clusterNodeId | the ID of the cluster node
                         * @param {Boolean} refreshData | wrap up afterwards if not true
                         */

                    }, {
                        key: 'openCluster',
                        value: function openCluster(clusterNodeId, options) {
                            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                            // kill conditions
                            if (clusterNodeId === undefined) {
                                throw new Error("No clusterNodeId supplied to openCluster.");
                            }
                            if (this.body.nodes[clusterNodeId] === undefined) {
                                throw new Error("The clusterNodeId supplied to openCluster does not exist.");
                            }
                            if (this.body.nodes[clusterNodeId].containedNodes === undefined) {
                                console.log("The node:" + clusterNodeId + " is not a cluster.");
                                return;
                            }
                            var clusterNode = this.body.nodes[clusterNodeId];
                            var containedNodes = clusterNode.containedNodes;
                            var containedEdges = clusterNode.containedEdges;

                            // allow the user to position the nodes after release.
                            if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === 'function') {
                                var positions = {};
                                var clusterPosition = { x: clusterNode.x, y: clusterNode.y };
                                for (var nodeId in containedNodes) {
                                    if (containedNodes.hasOwnProperty(nodeId)) {
                                        var containedNode = this.body.nodes[nodeId];
                                        positions[nodeId] = { x: containedNode.x, y: containedNode.y };
                                    }
                                }
                                var newPositions = options.releaseFunction(clusterPosition, positions);

                                for (var _nodeId3 in containedNodes) {
                                    if (containedNodes.hasOwnProperty(_nodeId3)) {
                                        var _containedNode = this.body.nodes[_nodeId3];
                                        if (newPositions[_nodeId3] !== undefined) {
                                            _containedNode.x = newPositions[_nodeId3].x === undefined ? clusterNode.x : newPositions[_nodeId3].x;
                                            _containedNode.y = newPositions[_nodeId3].y === undefined ? clusterNode.y : newPositions[_nodeId3].y;
                                        }
                                    }
                                }
                            } else {
                                // copy the position from the cluster
                                for (var _nodeId4 in containedNodes) {
                                    if (containedNodes.hasOwnProperty(_nodeId4)) {
                                        var _containedNode2 = this.body.nodes[_nodeId4];
                                        _containedNode2 = containedNodes[_nodeId4];
                                        // inherit position
                                        if (_containedNode2.options.fixed.x === false) {
                                            _containedNode2.x = clusterNode.x;
                                        }
                                        if (_containedNode2.options.fixed.y === false) {
                                            _containedNode2.y = clusterNode.y;
                                        }
                                    }
                                }
                            }

                            // release nodes
                            for (var _nodeId5 in containedNodes) {
                                if (containedNodes.hasOwnProperty(_nodeId5)) {
                                    var _containedNode3 = this.body.nodes[_nodeId5];

                                    // inherit speed
                                    _containedNode3.vx = clusterNode.vx;
                                    _containedNode3.vy = clusterNode.vy;

                                    // we use these methods to avoid re-instantiating the shape, which happens with setOptions.
                                    _containedNode3.setOptions({ hidden: false, physics: true });

                                    delete this.clusteredNodes[_nodeId5];
                                }
                            }

                            // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.
                            var edgesToBeDeleted = [];
                            for (var i = 0; i < clusterNode.edges.length; i++) {
                                edgesToBeDeleted.push(clusterNode.edges[i]);
                            }

                            // actually handling the deleting.
                            for (var _i4 = 0; _i4 < edgesToBeDeleted.length; _i4++) {
                                var edge = edgesToBeDeleted[_i4];

                                var otherNodeId = this._getConnectedId(edge, clusterNodeId);
                                // if the other node is in another cluster, we transfer ownership of this edge to the other cluster
                                if (this.clusteredNodes[otherNodeId] !== undefined) {
                                    // transfer ownership:
                                    var otherCluster = this.body.nodes[this.clusteredNodes[otherNodeId].clusterId];
                                    var transferEdge = this.body.edges[edge.clusteringEdgeReplacingId];
                                    if (transferEdge !== undefined) {
                                        otherCluster.containedEdges[transferEdge.id] = transferEdge;

                                        // delete local reference
                                        delete containedEdges[transferEdge.id];

                                        // create new cluster edge from the otherCluster:
                                        // get to and from
                                        var fromId = transferEdge.fromId;
                                        var toId = transferEdge.toId;
                                        if (transferEdge.toId == otherNodeId) {
                                            toId = this.clusteredNodes[otherNodeId].clusterId;
                                        } else {
                                            fromId = this.clusteredNodes[otherNodeId].clusterId;
                                        }

                                        // clone the options and apply the cluster options to them
                                        var clonedOptions = NetworkUtil.cloneOptions(transferEdge, 'edge');
                                        util.deepExtend(clonedOptions, otherCluster.clusterEdgeProperties);

                                        // apply the edge specific options to it.
                                        var id = 'clusterEdge:' + util.randomUUID();
                                        util.deepExtend(clonedOptions, { from: fromId, to: toId, hidden: false, physics: true, id: id });

                                        // create it
                                        var newEdge = this.body.functions.createEdge(clonedOptions);
                                        newEdge.clusteringEdgeReplacingId = transferEdge.id;
                                        this.body.edges[id] = newEdge;
                                        this.body.edges[id].connect();
                                    }
                                } else {
                                    var replacedEdge = this.body.edges[edge.clusteringEdgeReplacingId];
                                    if (replacedEdge !== undefined) {
                                        this._restoreEdge(replacedEdge);
                                    }
                                }
                                edge.cleanup();
                                // this removes the edge from node.edges, which is why edgeIds is formed
                                edge.disconnect();
                                delete this.body.edges[edge.id];
                            }

                            // handle the releasing of the edges
                            for (var edgeId in containedEdges) {
                                if (containedEdges.hasOwnProperty(edgeId)) {
                                    this._restoreEdge(containedEdges[edgeId]);
                                }
                            }

                            // remove clusterNode
                            delete this.body.nodes[clusterNodeId];

                            if (refreshData === true) {
                                this.body.emitter.emit('_dataChanged');
                            }
                        }
                    }, {
                        key: 'getNodesInCluster',
                        value: function getNodesInCluster(clusterId) {
                            var nodesArray = [];
                            if (this.isCluster(clusterId) === true) {
                                var containedNodes = this.body.nodes[clusterId].containedNodes;
                                for (var nodeId in containedNodes) {
                                    if (containedNodes.hasOwnProperty(nodeId)) {
                                        nodesArray.push(this.body.nodes[nodeId].id);
                                    }
                                }
                            }

                            return nodesArray;
                        }

                        /**
                         * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
                         * @param nodeId
                         * @returns {Array}
                         */

                    }, {
                        key: 'findNode',
                        value: function findNode(nodeId) {
                            var stack = [];
                            var max = 100;
                            var counter = 0;

                            while (this.clusteredNodes[nodeId] !== undefined && counter < max) {
                                stack.push(this.body.nodes[nodeId].id);
                                nodeId = this.clusteredNodes[nodeId].clusterId;
                                counter++;
                            }
                            stack.push(this.body.nodes[nodeId].id);
                            stack.reverse();

                            return stack;
                        }

                        /**
                         * Using a clustered nodeId, update with the new options
                         * @param clusteredNodeId
                         * @param {object} newOptions
                         */

                    }, {
                        key: 'updateClusteredNode',
                        value: function updateClusteredNode(clusteredNodeId, newOptions) {
                            if (clusteredNodeId === undefined) {
                                throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
                            }
                            if (newOptions === undefined) {
                                throw new Error("No newOptions supplied to updateClusteredNode.");
                            }
                            if (this.body.nodes[clusteredNodeId] === undefined) {
                                throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
                            }

                            this.body.nodes[clusteredNodeId].setOptions(newOptions);
                            this.body.emitter.emit('_dataChanged');
                        }

                        /**
                         * Using a base edgeId, update all related clustered edges with the new options
                         * @param startEdgeId
                         * @param {object} newOptions
                         */

                    }, {
                        key: 'updateEdge',
                        value: function updateEdge(startEdgeId, newOptions) {
                            if (startEdgeId === undefined) {
                                throw new Error("No startEdgeId supplied to updateEdge.");
                            }
                            if (newOptions === undefined) {
                                throw new Error("No newOptions supplied to updateEdge.");
                            }
                            if (this.body.edges[startEdgeId] === undefined) {
                                throw new Error("The startEdgeId supplied to updateEdge does not exist.");
                            }

                            var allEdgeIds = this.getClusteredEdges(startEdgeId);
                            for (var i = 0; i < allEdgeIds.length; i++) {
                                var edge = this.body.edges[allEdgeIds[i]];
                                edge.setOptions(newOptions);
                            }
                            this.body.emitter.emit('_dataChanged');
                        }

                        /**
                         * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
                         * @param edgeId
                         * @returns {Array}
                         */

                    }, {
                        key: 'getClusteredEdges',
                        value: function getClusteredEdges(edgeId) {
                            var stack = [];
                            var max = 100;
                            var counter = 0;

                            while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {
                                stack.push(this.body.edges[edgeId].id);
                                edgeId = this.body.edges[edgeId].edgeReplacedById;
                                counter++;
                            }
                            stack.reverse();
                            return stack;
                        }

                        /**
                         * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
                         * @param clusteredEdgeId
                         * @returns baseEdgeId
                         */

                    }, {
                        key: 'getBaseEdge',
                        value: function getBaseEdge(clusteredEdgeId) {
                            var baseEdgeId = clusteredEdgeId;
                            var max = 100;
                            var counter = 0;

                            while (clusteredEdgeId !== undefined && this.body.edges[clusteredEdgeId] !== undefined && counter < max) {
                                clusteredEdgeId = this.body.edges[clusteredEdgeId].clusteringEdgeReplacingId;
                                counter++;
                                if (clusteredEdgeId !== undefined) {
                                    baseEdgeId = clusteredEdgeId;
                                }
                            }
                            return baseEdgeId;
                        }

                        /**
                         * Get the Id the node is connected to
                         * @param edge
                         * @param nodeId
                         * @returns {*}
                         * @private
                         */

                    }, {
                        key: '_getConnectedId',
                        value: function _getConnectedId(edge, nodeId) {
                            if (edge.toId != nodeId) {
                                return edge.toId;
                            } else if (edge.fromId != nodeId) {
                                return edge.fromId;
                            } else {
                                return edge.fromId;
                            }
                        }

                        /**
                         * We determine how many connections denote an important hub.
                         * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
                         *
                         * @private
                         */

                    }, {
                        key: '_getHubSize',
                        value: function _getHubSize() {
                            var average = 0;
                            var averageSquared = 0;
                            var hubCounter = 0;
                            var largestHub = 0;

                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                var node = this.body.nodes[this.body.nodeIndices[i]];
                                if (node.edges.length > largestHub) {
                                    largestHub = node.edges.length;
                                }
                                average += node.edges.length;
                                averageSquared += Math.pow(node.edges.length, 2);
                                hubCounter += 1;
                            }
                            average = average / hubCounter;
                            averageSquared = averageSquared / hubCounter;

                            var variance = averageSquared - Math.pow(average, 2);
                            var standardDeviation = Math.sqrt(variance);

                            var hubThreshold = Math.floor(average + 2 * standardDeviation);

                            // always have at least one to cluster
                            if (hubThreshold > largestHub) {
                                hubThreshold = largestHub;
                            }

                            return hubThreshold;
                        }
                    }]);
                    return ClusterEngine;
                }();

                exports['default'] = ClusterEngine;

                /***/
            }),
            /* 219 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                var util = __webpack_require__(1);

                var NetworkUtil = function() {
                    function NetworkUtil() {
                        (0, _classCallCheck3["default"])(this, NetworkUtil);
                    }

                    /**
                     * Find the center position of the network considering the bounding boxes
                     */


                    (0, _createClass3["default"])(NetworkUtil, null, [{
                        key: "getRange",
                        value: function getRange(allNodes) {
                            var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                            var minY = 1e9,
                                maxY = -1e9,
                                minX = 1e9,
                                maxX = -1e9,
                                node;
                            if (specificNodes.length > 0) {
                                for (var i = 0; i < specificNodes.length; i++) {
                                    node = allNodes[specificNodes[i]];
                                    if (minX > node.shape.boundingBox.left) {
                                        minX = node.shape.boundingBox.left;
                                    }
                                    if (maxX < node.shape.boundingBox.right) {
                                        maxX = node.shape.boundingBox.right;
                                    }
                                    if (minY > node.shape.boundingBox.top) {
                                        minY = node.shape.boundingBox.top;
                                    } // top is negative, bottom is positive
                                    if (maxY < node.shape.boundingBox.bottom) {
                                        maxY = node.shape.boundingBox.bottom;
                                    } // top is negative, bottom is positive
                                }
                            }

                            if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
                                minY = 0, maxY = 0, minX = 0, maxX = 0;
                            }
                            return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
                        }

                        /**
                         * Find the center position of the network
                         */

                    }, {
                        key: "getRangeCore",
                        value: function getRangeCore(allNodes) {
                            var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                            var minY = 1e9,
                                maxY = -1e9,
                                minX = 1e9,
                                maxX = -1e9,
                                node;
                            if (specificNodes.length > 0) {
                                for (var i = 0; i < specificNodes.length; i++) {
                                    node = allNodes[specificNodes[i]];
                                    if (minX > node.x) {
                                        minX = node.x;
                                    }
                                    if (maxX < node.x) {
                                        maxX = node.x;
                                    }
                                    if (minY > node.y) {
                                        minY = node.y;
                                    } // top is negative, bottom is positive
                                    if (maxY < node.y) {
                                        maxY = node.y;
                                    } // top is negative, bottom is positive
                                }
                            }

                            if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
                                minY = 0, maxY = 0, minX = 0, maxX = 0;
                            }
                            return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
                        }

                        /**
                         * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
                         * @returns {{x: number, y: number}}
                         */

                    }, {
                        key: "findCenter",
                        value: function findCenter(range) {
                            return {
                                x: 0.5 * (range.maxX + range.minX),
                                y: 0.5 * (range.maxY + range.minY)
                            };
                        }

                        /**
                         * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
                         * @param item
                         * @param type
                         * @returns {{}}
                         */

                    }, {
                        key: "cloneOptions",
                        value: function cloneOptions(item, type) {
                            var clonedOptions = {};
                            if (type === undefined || type === 'node') {
                                util.deepExtend(clonedOptions, item.options, true);
                                clonedOptions.x = item.x;
                                clonedOptions.y = item.y;
                                clonedOptions.amountOfConnections = item.edges.length;
                            } else {
                                util.deepExtend(clonedOptions, item.options, true);
                            }
                            return clonedOptions;
                        }
                    }]);
                    return NetworkUtil;
                }();

                exports["default"] = NetworkUtil;

                /***/
            }),
            /* 220 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _getPrototypeOf = __webpack_require__(175);

                var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _possibleConstructorReturn2 = __webpack_require__(178);

                var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

                var _inherits2 = __webpack_require__(179);

                var _inherits3 = _interopRequireDefault(_inherits2);

                var _Node2 = __webpack_require__(168);

                var _Node3 = _interopRequireDefault(_Node2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                /**
                 *
                 */
                var Cluster = function(_Node) {
                    (0, _inherits3['default'])(Cluster, _Node);

                    function Cluster(options, body, imagelist, grouplist, globalOptions) {
                        (0, _classCallCheck3['default'])(this, Cluster);

                        var _this = (0, _possibleConstructorReturn3['default'])(this, (Cluster.__proto__ || (0, _getPrototypeOf2['default'])(Cluster)).call(this, options, body, imagelist, grouplist, globalOptions));

                        _this.isCluster = true;
                        _this.containedNodes = {};
                        _this.containedEdges = {};
                        return _this;
                    }

                    return Cluster;
                }(_Node3['default']);

                exports['default'] = Cluster;

                /***/
            }),
            /* 221 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                if (typeof window !== 'undefined') {
                    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
                }

                var util = __webpack_require__(1);

                var CanvasRenderer = function() {
                    function CanvasRenderer(body, canvas) {
                        (0, _classCallCheck3['default'])(this, CanvasRenderer);

                        this.body = body;
                        this.canvas = canvas;

                        this.redrawRequested = false;
                        this.renderTimer = undefined;
                        this.requiresTimeout = true;
                        this.renderingActive = false;
                        this.renderRequests = 0;
                        this.pixelRatio = undefined;
                        this.allowRedraw = true;

                        this.dragging = false;
                        this.options = {};
                        this.defaultOptions = {
                            hideEdgesOnDrag: false,
                            hideNodesOnDrag: false
                        };
                        util.extend(this.options, this.defaultOptions);

                        this._determineBrowserMethod();
                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(CanvasRenderer, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this = this;

                            this.body.emitter.on("dragStart", function() {
                                _this.dragging = true;
                            });
                            this.body.emitter.on("dragEnd", function() {
                                _this.dragging = false;
                            });
                            this.body.emitter.on("_resizeNodes", function() {
                                _this._resizeNodes();
                            });
                            this.body.emitter.on("_redraw", function() {
                                if (_this.renderingActive === false) {
                                    _this._redraw();
                                }
                            });
                            this.body.emitter.on("_blockRedraw", function() {
                                _this.allowRedraw = false;
                            });
                            this.body.emitter.on("_allowRedraw", function() {
                                _this.allowRedraw = true;
                                _this.redrawRequested = false;
                            });
                            this.body.emitter.on("_requestRedraw", this._requestRedraw.bind(this));
                            this.body.emitter.on("_startRendering", function() {
                                _this.renderRequests += 1;
                                _this.renderingActive = true;
                                _this._startRendering();
                            });
                            this.body.emitter.on("_stopRendering", function() {
                                _this.renderRequests -= 1;
                                _this.renderingActive = _this.renderRequests > 0;
                                _this.renderTimer = undefined;
                            });
                            this.body.emitter.on('destroy', function() {
                                _this.renderRequests = 0;
                                _this.allowRedraw = false;
                                _this.renderingActive = false;
                                if (_this.requiresTimeout === true) {
                                    clearTimeout(_this.renderTimer);
                                } else {
                                    cancelAnimationFrame(_this.renderTimer);
                                }
                                _this.body.emitter.off();
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag'];
                                util.selectiveDeepExtend(fields, this.options, options);
                            }
                        }
                    }, {
                        key: '_startRendering',
                        value: function _startRendering() {
                            if (this.renderingActive === true) {
                                if (this.renderTimer === undefined) {
                                    if (this.requiresTimeout === true) {
                                        this.renderTimer = window.setTimeout(this._renderStep.bind(this), this.simulationInterval); // wait this.renderTimeStep milliseconds and perform the animation step function
                                    } else {
                                        this.renderTimer = window.requestAnimationFrame(this._renderStep.bind(this)); // wait this.renderTimeStep milliseconds and perform the animation step function
                                    }
                                }
                            }
                        }
                    }, {
                        key: '_renderStep',
                        value: function _renderStep() {
                            if (this.renderingActive === true) {
                                // reset the renderTimer so a new scheduled animation step can be set
                                this.renderTimer = undefined;

                                if (this.requiresTimeout === true) {
                                    // this schedules a new simulation step
                                    this._startRendering();
                                }

                                this._redraw();

                                if (this.requiresTimeout === false) {
                                    // this schedules a new simulation step
                                    this._startRendering();
                                }
                            }
                        }

                        /**
                         * Redraw the network with the current data
                         * chart will be resized too.
                         */

                    }, {
                        key: 'redraw',
                        value: function redraw() {
                            this.body.emitter.emit('setSize');
                            this._redraw();
                        }

                        /**
                         * Redraw the network with the current data
                         * @param hidden | used to get the first estimate of the node sizes. only the nodes are drawn after which they are quickly drawn over.
                         * @private
                         */

                    }, {
                        key: '_requestRedraw',
                        value: function _requestRedraw() {
                            var _this2 = this;

                            if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
                                this.redrawRequested = true;
                                if (this.requiresTimeout === true) {
                                    window.setTimeout(function() {
                                        _this2._redraw(false);
                                    }, 0);
                                } else {
                                    window.requestAnimationFrame(function() {
                                        _this2._redraw(false);
                                    });
                                }
                            }
                        }
                    }, {
                        key: '_redraw',
                        value: function _redraw() {
                            var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                            if (this.allowRedraw === true) {
                                this.body.emitter.emit("initRedraw");

                                this.redrawRequested = false;
                                var ctx = this.canvas.frame.canvas.getContext('2d');

                                // when the container div was hidden, this fixes it back up!
                                if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
                                    this.canvas.setSize();
                                }

                                this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

                                ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

                                // clear the canvas
                                var w = this.canvas.frame.canvas.clientWidth;
                                var h = this.canvas.frame.canvas.clientHeight;
                                ctx.clearRect(0, 0, w, h);

                                // if the div is hidden, we stop the redraw here for performance.
                                if (this.canvas.frame.clientWidth === 0) {
                                    return;
                                }

                                // set scaling and translation
                                ctx.save();
                                ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
                                ctx.scale(this.body.view.scale, this.body.view.scale);

                                ctx.beginPath();
                                this.body.emitter.emit("beforeDrawing", ctx);
                                ctx.closePath();

                                if (hidden === false) {
                                    if (this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) {
                                        this._drawEdges(ctx);
                                    }
                                }

                                if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
                                    this._drawNodes(ctx, hidden);
                                }

                                ctx.beginPath();
                                this.body.emitter.emit("afterDrawing", ctx);
                                ctx.closePath();

                                // restore original scaling and translation
                                ctx.restore();
                                if (hidden === true) {
                                    ctx.clearRect(0, 0, w, h);
                                }
                            }
                        }

                        /**
                         * Redraw all nodes
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
                         * @param {CanvasRenderingContext2D}   ctx
                         * @param {Boolean} [alwaysShow]
                         * @private
                         */

                    }, {
                        key: '_resizeNodes',
                        value: function _resizeNodes() {
                            var ctx = this.canvas.frame.canvas.getContext('2d');
                            if (this.pixelRatio === undefined) {
                                this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
                            }
                            ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                            ctx.save();
                            ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
                            ctx.scale(this.body.view.scale, this.body.view.scale);

                            var nodes = this.body.nodes;
                            var node = void 0;

                            // resize all nodes
                            for (var nodeId in nodes) {
                                if (nodes.hasOwnProperty(nodeId)) {
                                    node = nodes[nodeId];
                                    node.resize(ctx);
                                    node.updateBoundingBox(ctx, node.selected);
                                }
                            }

                            // restore original scaling and translation
                            ctx.restore();
                        }

                        /**
                         * Redraw all nodes
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
                         * @param {CanvasRenderingContext2D}   ctx
                         * @param {Boolean} [alwaysShow]
                         * @private
                         */

                    }, {
                        key: '_drawNodes',
                        value: function _drawNodes(ctx) {
                            var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var nodes = this.body.nodes;
                            var nodeIndices = this.body.nodeIndices;
                            var node = void 0;
                            var selected = [];
                            var margin = 20;
                            var topLeft = this.canvas.DOMtoCanvas({ x: -margin, y: -margin });
                            var bottomRight = this.canvas.DOMtoCanvas({
                                x: this.canvas.frame.canvas.clientWidth + margin,
                                y: this.canvas.frame.canvas.clientHeight + margin
                            });
                            var viewableArea = { top: topLeft.y, left: topLeft.x, bottom: bottomRight.y, right: bottomRight.x };

                            // draw unselected nodes;
                            for (var i = 0; i < nodeIndices.length; i++) {
                                node = nodes[nodeIndices[i]];
                                // set selected nodes aside
                                if (node.isSelected()) {
                                    selected.push(nodeIndices[i]);
                                } else {
                                    if (alwaysShow === true) {
                                        node.draw(ctx);
                                    } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
                                        node.draw(ctx);
                                    } else {
                                        node.updateBoundingBox(ctx, node.selected);
                                    }
                                }
                            }

                            // draw the selected nodes on top
                            for (var _i = 0; _i < selected.length; _i++) {
                                node = nodes[selected[_i]];
                                node.draw(ctx);
                            }
                        }

                        /**
                         * Redraw all edges
                         * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
                         * @param {CanvasRenderingContext2D}   ctx
                         * @private
                         */

                    }, {
                        key: '_drawEdges',
                        value: function _drawEdges(ctx) {
                            var edges = this.body.edges;
                            var edgeIndices = this.body.edgeIndices;
                            var edge = void 0;

                            for (var i = 0; i < edgeIndices.length; i++) {
                                edge = edges[edgeIndices[i]];
                                if (edge.connected === true) {
                                    edge.draw(ctx);
                                }
                            }
                        }

                        /**
                         * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
                         * some implementations (safari and IE9) did not support requestAnimationFrame
                         * @private
                         */

                    }, {
                        key: '_determineBrowserMethod',
                        value: function _determineBrowserMethod() {
                            if (typeof window !== 'undefined') {
                                var browserType = navigator.userAgent.toLowerCase();
                                this.requiresTimeout = false;
                                if (browserType.indexOf('msie 9.0') != -1) {
                                    // IE 9
                                    this.requiresTimeout = true;
                                } else if (browserType.indexOf('safari') != -1) {
                                    // safari
                                    if (browserType.indexOf('chrome') <= -1) {
                                        this.requiresTimeout = true;
                                    }
                                }
                            } else {
                                this.requiresTimeout = true;
                            }
                        }
                    }]);
                    return CanvasRenderer;
                }();

                exports['default'] = CanvasRenderer;

                /***/
            }),
            /* 222 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Hammer = __webpack_require__(112);
                var hammerUtil = __webpack_require__(119);

                var util = __webpack_require__(1);

                /**
                 * Create the main frame for the Network.
                 * This function is executed once when a Network object is created. The frame
                 * contains a canvas, and this canvas contains all objects like the axis and
                 * nodes.
                 * @private
                 */

                var Canvas = function() {
                    function Canvas(body) {
                        (0, _classCallCheck3['default'])(this, Canvas);

                        this.body = body;
                        this.pixelRatio = 1;
                        this.resizeTimer = undefined;
                        this.resizeFunction = this._onResize.bind(this);
                        this.cameraState = {};
                        this.initialized = false;
                        this.canvasViewCenter = {};

                        this.options = {};
                        this.defaultOptions = {
                            autoResize: true,
                            height: '100%',
                            width: '100%'
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(Canvas, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this = this;

                            // bind the events
                            this.body.emitter.once("resize", function(obj) {
                                if (obj.width !== 0) {
                                    _this.body.view.translation.x = obj.width * 0.5;
                                }
                                if (obj.height !== 0) {
                                    _this.body.view.translation.y = obj.height * 0.5;
                                }
                            });
                            this.body.emitter.on("setSize", this.setSize.bind(this));
                            this.body.emitter.on("destroy", function() {
                                _this.hammerFrame.destroy();
                                _this.hammer.destroy();
                                _this._cleanUp();
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            var _this2 = this;

                            if (options !== undefined) {
                                var fields = ['width', 'height', 'autoResize'];
                                util.selectiveDeepExtend(fields, this.options, options);
                            }

                            if (this.options.autoResize === true) {
                                // automatically adapt to a changing size of the browser.
                                this._cleanUp();
                                this.resizeTimer = setInterval(function() {
                                    var changed = _this2.setSize();
                                    if (changed === true) {
                                        _this2.body.emitter.emit("_requestRedraw");
                                    }
                                }, 1000);
                                this.resizeFunction = this._onResize.bind(this);
                                util.addEventListener(window, 'resize', this.resizeFunction);
                            }
                        }
                    }, {
                        key: '_cleanUp',
                        value: function _cleanUp() {
                            // automatically adapt to a changing size of the browser.
                            if (this.resizeTimer !== undefined) {
                                clearInterval(this.resizeTimer);
                            }
                            util.removeEventListener(window, 'resize', this.resizeFunction);
                            this.resizeFunction = undefined;
                        }
                    }, {
                        key: '_onResize',
                        value: function _onResize() {
                            this.setSize();
                            this.body.emitter.emit("_redraw");
                        }

                        /**
                         * Get and store the cameraState
                         * @private
                         */

                    }, {
                        key: '_getCameraState',
                        value: function _getCameraState() {
                            var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;

                            if (this.initialized === true) {
                                this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
                                this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
                                this.cameraState.scale = this.body.view.scale;
                                this.cameraState.position = this.DOMtoCanvas({
                                    x: 0.5 * this.frame.canvas.width / pixelRatio,
                                    y: 0.5 * this.frame.canvas.height / pixelRatio
                                });
                            }
                        }

                        /**
                         * Set the cameraState
                         * @private
                         */

                    }, {
                        key: '_setCameraState',
                        value: function _setCameraState() {
                            if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0) {

                                var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
                                var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
                                var newScale = this.cameraState.scale;

                                if (widthRatio != 1 && heightRatio != 1) {
                                    newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
                                } else if (widthRatio != 1) {
                                    newScale = this.cameraState.scale * widthRatio;
                                } else if (heightRatio != 1) {
                                    newScale = this.cameraState.scale * heightRatio;
                                }

                                this.body.view.scale = newScale;
                                // this comes from the view module.
                                var currentViewCenter = this.DOMtoCanvas({
                                    x: 0.5 * this.frame.canvas.clientWidth,
                                    y: 0.5 * this.frame.canvas.clientHeight
                                });

                                var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
                                    x: currentViewCenter.x - this.cameraState.position.x,
                                    y: currentViewCenter.y - this.cameraState.position.y
                                };
                                this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
                                this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
                            }
                        }
                    }, {
                        key: '_prepareValue',
                        value: function _prepareValue(value) {
                            if (typeof value === 'number') {
                                return value + 'px';
                            } else if (typeof value === 'string') {
                                if (value.indexOf('%') !== -1 || value.indexOf('px') !== -1) {
                                    return value;
                                } else if (value.indexOf('%') === -1) {
                                    return value + 'px';
                                }
                            }
                            throw new Error('Could not use the value supplied for width or height:' + value);
                        }

                        /**
                         * Create the HTML
                         */

                    }, {
                        key: '_create',
                        value: function _create() {
                            // remove all elements from the container element.
                            while (this.body.container.hasChildNodes()) {
                                this.body.container.removeChild(this.body.container.firstChild);
                            }

                            this.frame = document.createElement('div');
                            this.frame.className = 'vis-network';
                            this.frame.style.position = 'relative';
                            this.frame.style.overflow = 'hidden';
                            this.frame.tabIndex = 900; // tab index is required for keycharm to bind keystrokes to the div instead of the window

                            //////////////////////////////////////////////////////////////////

                            this.frame.canvas = document.createElement("canvas");
                            this.frame.canvas.style.position = 'relative';
                            this.frame.appendChild(this.frame.canvas);

                            if (!this.frame.canvas.getContext) {
                                var noCanvas = document.createElement('DIV');
                                noCanvas.style.color = 'red';
                                noCanvas.style.fontWeight = 'bold';
                                noCanvas.style.padding = '10px';
                                noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
                                this.frame.canvas.appendChild(noCanvas);
                            } else {
                                var ctx = this.frame.canvas.getContext("2d");
                                this._setPixelRatio(ctx);
                                this.frame.canvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                            }

                            // add the frame to the container element
                            this.body.container.appendChild(this.frame);

                            this.body.view.scale = 1;
                            this.body.view.translation = { x: 0.5 * this.frame.canvas.clientWidth, y: 0.5 * this.frame.canvas.clientHeight };

                            this._bindHammer();
                        }

                        /**
                         * This function binds hammer, it can be repeated over and over due to the uniqueness check.
                         * @private
                         */

                    }, {
                        key: '_bindHammer',
                        value: function _bindHammer() {
                            var _this3 = this;

                            if (this.hammer !== undefined) {
                                this.hammer.destroy();
                            }
                            this.drag = {};
                            this.pinch = {};

                            // init hammer
                            this.hammer = new Hammer(this.frame.canvas);
                            this.hammer.get('pinch').set({ enable: true });
                            // enable to get better response, todo: test on mobile.
                            this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_ALL });

                            hammerUtil.onTouch(this.hammer, function(event) {
                                _this3.body.eventListeners.onTouch(event);
                            });
                            this.hammer.on('tap', function(event) {
                                _this3.body.eventListeners.onTap(event);
                            });
                            this.hammer.on('doubletap', function(event) {
                                _this3.body.eventListeners.onDoubleTap(event);
                            });
                            this.hammer.on('press', function(event) {
                                _this3.body.eventListeners.onHold(event);
                            });
                            this.hammer.on('panstart', function(event) {
                                _this3.body.eventListeners.onDragStart(event);
                            });
                            this.hammer.on('panmove', function(event) {
                                _this3.body.eventListeners.onDrag(event);
                            });
                            this.hammer.on('panend', function(event) {
                                _this3.body.eventListeners.onDragEnd(event);
                            });
                            this.hammer.on('pinch', function(event) {
                                _this3.body.eventListeners.onPinch(event);
                            });

                            // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?
                            this.frame.canvas.addEventListener('mousewheel', function(event) {
                                _this3.body.eventListeners.onMouseWheel(event);
                            });
                            this.frame.canvas.addEventListener('DOMMouseScroll', function(event) {
                                _this3.body.eventListeners.onMouseWheel(event);
                            });

                            this.frame.canvas.addEventListener('mousemove', function(event) {
                                _this3.body.eventListeners.onMouseMove(event);
                            });
                            this.frame.canvas.addEventListener('contextmenu', function(event) {
                                _this3.body.eventListeners.onContext(event);
                            });

                            this.hammerFrame = new Hammer(this.frame);
                            hammerUtil.onRelease(this.hammerFrame, function(event) {
                                _this3.body.eventListeners.onRelease(event);
                            });
                        }

                        /**
                         * Set a new size for the network
                         * @param {string} width   Width in pixels or percentage (for example '800px'
                         *                         or '50%')
                         * @param {string} height  Height in pixels or percentage  (for example '400px'
                         *                         or '30%')
                         */

                    }, {
                        key: 'setSize',
                        value: function setSize() {
                            var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;
                            var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;

                            width = this._prepareValue(width);
                            height = this._prepareValue(height);

                            var emitEvent = false;
                            var oldWidth = this.frame.canvas.width;
                            var oldHeight = this.frame.canvas.height;

                            // update the pixel ratio
                            var ctx = this.frame.canvas.getContext("2d");
                            var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value
                            this._setPixelRatio(ctx);

                            if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
                                this._getCameraState(previousRatio);

                                this.frame.style.width = width;
                                this.frame.style.height = height;

                                this.frame.canvas.style.width = '100%';
                                this.frame.canvas.style.height = '100%';

                                this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
                                this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

                                this.options.width = width;
                                this.options.height = height;

                                this.canvasViewCenter = {
                                    x: 0.5 * this.frame.clientWidth,
                                    y: 0.5 * this.frame.clientHeight
                                };

                                emitEvent = true;
                            } else {
                                // this would adapt the width of the canvas to the width from 100% if and only if
                                // there is a change.

                                var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
                                var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

                                // store the camera if there is a change in size.
                                if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
                                    this._getCameraState(previousRatio);
                                }

                                if (this.frame.canvas.width !== newWidth) {
                                    this.frame.canvas.width = newWidth;
                                    emitEvent = true;
                                }
                                if (this.frame.canvas.height !== newHeight) {
                                    this.frame.canvas.height = newHeight;
                                    emitEvent = true;
                                }
                            }

                            if (emitEvent === true) {
                                this.body.emitter.emit('resize', {
                                    width: Math.round(this.frame.canvas.width / this.pixelRatio),
                                    height: Math.round(this.frame.canvas.height / this.pixelRatio),
                                    oldWidth: Math.round(oldWidth / this.pixelRatio),
                                    oldHeight: Math.round(oldHeight / this.pixelRatio)
                                });

                                // restore the camera on change.
                                this._setCameraState();
                            }

                            // set initialized so the get and set camera will work from now on.
                            this.initialized = true;
                            return emitEvent;
                        }
                    }, {
                        key: '_setPixelRatio',


                        /**
                         * @private
                         */
                        value: function _setPixelRatio(ctx) {
                            this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
                        }

                        /**
                         * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
                         * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
                         * @param {number} x
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_XconvertDOMtoCanvas',
                        value: function _XconvertDOMtoCanvas(x) {
                            return (x - this.body.view.translation.x) / this.body.view.scale;
                        }

                        /**
                         * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
                         * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
                         * @param {number} x
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_XconvertCanvasToDOM',
                        value: function _XconvertCanvasToDOM(x) {
                            return x * this.body.view.scale + this.body.view.translation.x;
                        }

                        /**
                         * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
                         * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
                         * @param {number} y
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_YconvertDOMtoCanvas',
                        value: function _YconvertDOMtoCanvas(y) {
                            return (y - this.body.view.translation.y) / this.body.view.scale;
                        }

                        /**
                         * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
                         * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
                         * @param {number} y
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_YconvertCanvasToDOM',
                        value: function _YconvertCanvasToDOM(y) {
                            return y * this.body.view.scale + this.body.view.translation.y;
                        }

                        /**
                         *
                         * @param {object} pos   = {x: number, y: number}
                         * @returns {{x: number, y: number}}
                         * @constructor
                         */

                    }, {
                        key: 'canvasToDOM',
                        value: function canvasToDOM(pos) {
                            return { x: this._XconvertCanvasToDOM(pos.x), y: this._YconvertCanvasToDOM(pos.y) };
                        }

                        /**
                         *
                         * @param {object} pos   = {x: number, y: number}
                         * @returns {{x: number, y: number}}
                         * @constructor
                         */

                    }, {
                        key: 'DOMtoCanvas',
                        value: function DOMtoCanvas(pos) {
                            return { x: this._XconvertDOMtoCanvas(pos.x), y: this._YconvertDOMtoCanvas(pos.y) };
                        }
                    }]);
                    return Canvas;
                }();

                exports['default'] = Canvas;

                /***/
            }),
            /* 223 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var NetworkUtil = __webpack_require__(219)['default'];

                var View = function() {
                    function View(body, canvas) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, View);

                        this.body = body;
                        this.canvas = canvas;

                        this.animationSpeed = 1 / this.renderRefreshRate;
                        this.animationEasingFunction = "easeInOutQuint";
                        this.easingTime = 0;
                        this.sourceScale = 0;
                        this.targetScale = 0;
                        this.sourceTranslation = 0;
                        this.targetTranslation = 0;
                        this.lockedOnNodeId = undefined;
                        this.lockedOnNodeOffset = undefined;
                        this.touchTime = 0;

                        this.viewFunction = undefined;

                        this.body.emitter.on("fit", this.fit.bind(this));
                        this.body.emitter.on("animationFinished", function() {
                            _this.body.emitter.emit("_stopRendering");
                        });
                        this.body.emitter.on("unlockNode", this.releaseNode.bind(this));
                    }

                    (0, _createClass3['default'])(View, [{
                        key: 'setOptions',
                        value: function setOptions() {
                            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                            this.options = options;
                        }

                        /**
                         * This function zooms out to fit all data on screen based on amount of nodes
                         * @param {Object} Options
                         * @param {Boolean} [initialZoom]  | zoom based on fitted formula or range, true = fitted, default = false;
                         */

                    }, {
                        key: 'fit',
                        value: function fit() {
                            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { nodes: [] };
                            var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                            var range = void 0;
                            var zoomLevel = void 0;
                            if (options.nodes === undefined || options.nodes.length === 0) {
                                options.nodes = this.body.nodeIndices;
                            }

                            if (initialZoom === true) {
                                // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.
                                var positionDefined = 0;
                                for (var nodeId in this.body.nodes) {
                                    if (this.body.nodes.hasOwnProperty(nodeId)) {
                                        var node = this.body.nodes[nodeId];
                                        if (node.predefinedPosition === true) {
                                            positionDefined += 1;
                                        }
                                    }
                                }
                                if (positionDefined > 0.5 * this.body.nodeIndices.length) {
                                    this.fit(options, false);
                                    return;
                                }

                                range = NetworkUtil.getRange(this.body.nodes, options.nodes);

                                var numberOfNodes = this.body.nodeIndices.length;
                                zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.

                                // correct for larger canvasses.
                                var factor = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);
                                zoomLevel *= factor;
                            } else {
                                this.body.emitter.emit("_resizeNodes");
                                range = NetworkUtil.getRange(this.body.nodes, options.nodes);

                                var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
                                var yDistance = Math.abs(range.maxY - range.minY) * 1.1;

                                var xZoomLevel = this.canvas.frame.canvas.clientWidth / xDistance;
                                var yZoomLevel = this.canvas.frame.canvas.clientHeight / yDistance;

                                zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
                            }

                            if (zoomLevel > 1.0) {
                                zoomLevel = 1.0;
                            } else if (zoomLevel === 0) {
                                zoomLevel = 1.0;
                            }

                            var center = NetworkUtil.findCenter(range);
                            var animationOptions = { position: center, scale: zoomLevel, animation: options.animation };
                            this.moveTo(animationOptions);
                        }

                        // animation

                        /**
                         * Center a node in view.
                         *
                         * @param {Number} nodeId
                         * @param {Number} [options]
                         */

                    }, {
                        key: 'focus',
                        value: function focus(nodeId) {
                            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                            if (this.body.nodes[nodeId] !== undefined) {
                                var nodePosition = { x: this.body.nodes[nodeId].x, y: this.body.nodes[nodeId].y };
                                options.position = nodePosition;
                                options.lockedOnNode = nodeId;

                                this.moveTo(options);
                            } else {
                                console.log("Node: " + nodeId + " cannot be found.");
                            }
                        }

                        /**
                         *
                         * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
                         *                          |  options.scale    = Number                 // scale to move to
                         *                          |  options.position = {x:Number, y:Number}   // position to move to
                         *                          |  options.animation = {duration:Number, easingFunction:String} || Boolean   // position to move to
                         */

                    }, {
                        key: 'moveTo',
                        value: function moveTo(options) {
                            if (options === undefined) {
                                options = {};
                                return;
                            }
                            if (options.offset === undefined) {
                                options.offset = { x: 0, y: 0 };
                            }
                            if (options.offset.x === undefined) {
                                options.offset.x = 0;
                            }
                            if (options.offset.y === undefined) {
                                options.offset.y = 0;
                            }
                            if (options.scale === undefined) {
                                options.scale = this.body.view.scale;
                            }
                            if (options.position === undefined) {
                                options.position = this.getViewPosition();
                            }
                            if (options.animation === undefined) {
                                options.animation = { duration: 0 };
                            }
                            if (options.animation === false) {
                                options.animation = { duration: 0 };
                            }
                            if (options.animation === true) {
                                options.animation = {};
                            }
                            if (options.animation.duration === undefined) {
                                options.animation.duration = 1000;
                            } // default duration
                            if (options.animation.easingFunction === undefined) {
                                options.animation.easingFunction = "easeInOutQuad";
                            } // default easing function

                            this.animateView(options);
                        }

                        /**
                         *
                         * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
                         *                          |  options.time     = Number                 // animation time in milliseconds
                         *                          |  options.scale    = Number                 // scale to animate to
                         *                          |  options.position = {x:Number, y:Number}   // position to animate to
                         *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
                         *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
                         *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
                         *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
                         */

                    }, {
                        key: 'animateView',
                        value: function animateView(options) {
                            if (options === undefined) {
                                return;
                            }
                            this.animationEasingFunction = options.animation.easingFunction;
                            // release if something focussed on the node
                            this.releaseNode();
                            if (options.locked === true) {
                                this.lockedOnNodeId = options.lockedOnNode;
                                this.lockedOnNodeOffset = options.offset;
                            }

                            // forcefully complete the old animation if it was still running
                            if (this.easingTime != 0) {
                                this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.
                            }

                            this.sourceScale = this.body.view.scale;
                            this.sourceTranslation = this.body.view.translation;
                            this.targetScale = options.scale;

                            // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw
                            // but at least then we'll have the target transition
                            this.body.view.scale = this.targetScale;
                            var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });

                            var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
                                x: viewCenter.x - options.position.x,
                                y: viewCenter.y - options.position.y
                            };
                            this.targetTranslation = {
                                x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,
                                y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y
                            };

                            // if the time is set to 0, don't do an animation
                            if (options.animation.duration === 0) {
                                if (this.lockedOnNodeId != undefined) {
                                    this.viewFunction = this._lockedRedraw.bind(this);
                                    this.body.emitter.on("initRedraw", this.viewFunction);
                                } else {
                                    this.body.view.scale = this.targetScale;
                                    this.body.view.translation = this.targetTranslation;
                                    this.body.emitter.emit("_requestRedraw");
                                }
                            } else {
                                this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's
                                this.animationEasingFunction = options.animation.easingFunction;

                                this.viewFunction = this._transitionRedraw.bind(this);
                                this.body.emitter.on("initRedraw", this.viewFunction);
                                this.body.emitter.emit("_startRendering");
                            }
                        }

                        /**
                         * used to animate smoothly by hijacking the redraw function.
                         * @private
                         */

                    }, {
                        key: '_lockedRedraw',
                        value: function _lockedRedraw() {
                            var nodePosition = { x: this.body.nodes[this.lockedOnNodeId].x, y: this.body.nodes[this.lockedOnNodeId].y };
                            var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
                            var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
                                x: viewCenter.x - nodePosition.x,
                                y: viewCenter.y - nodePosition.y
                            };
                            var sourceTranslation = this.body.view.translation;
                            var targetTranslation = {
                                x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
                                y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
                            };

                            this.body.view.translation = targetTranslation;
                        }
                    }, {
                        key: 'releaseNode',
                        value: function releaseNode() {
                            if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {
                                this.body.emitter.off("initRedraw", this.viewFunction);
                                this.lockedOnNodeId = undefined;
                                this.lockedOnNodeOffset = undefined;
                            }
                        }

                        /**
                         *
                         * @param easingTime
                         * @private
                         */

                    }, {
                        key: '_transitionRedraw',
                        value: function _transitionRedraw() {
                            var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                            this.easingTime += this.animationSpeed;
                            this.easingTime = finished === true ? 1.0 : this.easingTime;

                            var progress = util.easingFunctions[this.animationEasingFunction](this.easingTime);

                            this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
                            this.body.view.translation = {
                                x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
                                y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
                            };

                            // cleanup
                            if (this.easingTime >= 1.0) {
                                this.body.emitter.off("initRedraw", this.viewFunction);
                                this.easingTime = 0;
                                if (this.lockedOnNodeId != undefined) {
                                    this.viewFunction = this._lockedRedraw.bind(this);
                                    this.body.emitter.on("initRedraw", this.viewFunction);
                                }
                                this.body.emitter.emit("animationFinished");
                            }
                        }
                    }, {
                        key: 'getScale',
                        value: function getScale() {
                            return this.body.view.scale;
                        }
                    }, {
                        key: 'getViewPosition',
                        value: function getViewPosition() {
                            return this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
                        }
                    }]);
                    return View;
                }();

                exports['default'] = View;

                /***/
            }),
            /* 224 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);

                var NavigationHandler = __webpack_require__(225)['default'];
                var Popup = __webpack_require__(133)['default'];

                var InteractionHandler = function() {
                    function InteractionHandler(body, canvas, selectionHandler) {
                        (0, _classCallCheck3['default'])(this, InteractionHandler);

                        this.body = body;
                        this.canvas = canvas;
                        this.selectionHandler = selectionHandler;
                        this.navigationHandler = new NavigationHandler(body, canvas);

                        // bind the events from hammer to functions in this object
                        this.body.eventListeners.onTap = this.onTap.bind(this);
                        this.body.eventListeners.onTouch = this.onTouch.bind(this);
                        this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this);
                        this.body.eventListeners.onHold = this.onHold.bind(this);
                        this.body.eventListeners.onDragStart = this.onDragStart.bind(this);
                        this.body.eventListeners.onDrag = this.onDrag.bind(this);
                        this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this);
                        this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this);
                        this.body.eventListeners.onPinch = this.onPinch.bind(this);
                        this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this);
                        this.body.eventListeners.onRelease = this.onRelease.bind(this);
                        this.body.eventListeners.onContext = this.onContext.bind(this);

                        this.touchTime = 0;
                        this.drag = {};
                        this.pinch = {};
                        this.popup = undefined;
                        this.popupObj = undefined;
                        this.popupTimer = undefined;

                        this.body.functions.getPointer = this.getPointer.bind(this);

                        this.options = {};
                        this.defaultOptions = {
                            dragNodes: true,
                            dragView: true,
                            hover: false,
                            keyboard: {
                                enabled: false,
                                speed: { x: 10, y: 10, zoom: 0.02 },
                                bindToWindow: true
                            },
                            navigationButtons: false,
                            tooltipDelay: 300,
                            zoomView: true
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(InteractionHandler, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this = this;

                            this.body.emitter.on('destroy', function() {
                                clearTimeout(_this.popupTimer);
                                delete _this.body.functions.getPointer;
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                // extend all but the values in fields
                                var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag', 'keyboard', 'multiselect', 'selectable', 'selectConnectedEdges'];
                                util.selectiveNotDeepExtend(fields, this.options, options);

                                // merge the keyboard options in.
                                util.mergeOptions(this.options, options, 'keyboard');

                                if (options.tooltip) {
                                    util.extend(this.options.tooltip, options.tooltip);
                                    if (options.tooltip.color) {
                                        this.options.tooltip.color = util.parseColor(options.tooltip.color);
                                    }
                                }
                            }

                            this.navigationHandler.setOptions(this.options);
                        }

                        /**
                         * Get the pointer location from a touch location
                         * @param {{x: Number, y: Number}} touch
                         * @return {{x: Number, y: Number}} pointer
                         * @private
                         */

                    }, {
                        key: 'getPointer',
                        value: function getPointer(touch) {
                            return {
                                x: touch.x - util.getAbsoluteLeft(this.canvas.frame.canvas),
                                y: touch.y - util.getAbsoluteTop(this.canvas.frame.canvas)
                            };
                        }

                        /**
                         * On start of a touch gesture, store the pointer
                         * @param event
                         * @private
                         */

                    }, {
                        key: 'onTouch',
                        value: function onTouch(event) {
                            if (new Date().valueOf() - this.touchTime > 50) {
                                this.drag.pointer = this.getPointer(event.center);
                                this.drag.pinched = false;
                                this.pinch.scale = this.body.view.scale;
                                // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
                                this.touchTime = new Date().valueOf();
                            }
                        }

                        /**
                         * handle tap/click event: select/unselect a node
                         * @private
                         */

                    }, {
                        key: 'onTap',
                        value: function onTap(event) {
                            var pointer = this.getPointer(event.center);
                            var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);

                            this.checkSelectionChanges(pointer, event, multiselect);
                            this.selectionHandler._generateClickEvent('click', event, pointer);
                        }

                        /**
                         * handle doubletap event
                         * @private
                         */

                    }, {
                        key: 'onDoubleTap',
                        value: function onDoubleTap(event) {
                            var pointer = this.getPointer(event.center);
                            this.selectionHandler._generateClickEvent('doubleClick', event, pointer);
                        }

                        /**
                         * handle long tap event: multi select nodes
                         * @private
                         */

                    }, {
                        key: 'onHold',
                        value: function onHold(event) {
                            var pointer = this.getPointer(event.center);
                            var multiselect = this.selectionHandler.options.multiselect;

                            this.checkSelectionChanges(pointer, event, multiselect);

                            this.selectionHandler._generateClickEvent('click', event, pointer);
                            this.selectionHandler._generateClickEvent('hold', event, pointer);
                        }

                        /**
                         * handle the release of the screen
                         *
                         * @private
                         */

                    }, {
                        key: 'onRelease',
                        value: function onRelease(event) {
                            if (new Date().valueOf() - this.touchTime > 10) {
                                var pointer = this.getPointer(event.center);
                                this.selectionHandler._generateClickEvent('release', event, pointer);
                                // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
                                this.touchTime = new Date().valueOf();
                            }
                        }
                    }, {
                        key: 'onContext',
                        value: function onContext(event) {
                            var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
                            this.selectionHandler._generateClickEvent('oncontext', event, pointer);
                        }

                        /**
                         *
                         * @param pointer
                         * @param add
                         */

                    }, {
                        key: 'checkSelectionChanges',
                        value: function checkSelectionChanges(pointer, event) {
                            var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            var previouslySelectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
                            var previouslySelectedNodeCount = this.selectionHandler._getSelectedNodeCount();
                            var previousSelection = this.selectionHandler.getSelection();
                            var selected = void 0;
                            if (add === true) {
                                selected = this.selectionHandler.selectAdditionalOnPoint(pointer);
                            } else {
                                selected = this.selectionHandler.selectOnPoint(pointer);
                            }
                            var selectedEdgesCount = this.selectionHandler._getSelectedEdgeCount();
                            var selectedNodesCount = this.selectionHandler._getSelectedNodeCount();
                            var currentSelection = this.selectionHandler.getSelection();

                            var _determineIfDifferent2 = this._determineIfDifferent(previousSelection, currentSelection),
                                nodesChanged = _determineIfDifferent2.nodesChanged,
                                edgesChanged = _determineIfDifferent2.edgesChanged;

                            var nodeSelected = false;

                            if (selectedNodesCount - previouslySelectedNodeCount > 0) {
                                // node was selected
                                this.selectionHandler._generateClickEvent('selectNode', event, pointer);
                                selected = true;
                                nodeSelected = true;
                            } else if (nodesChanged === true && selectedNodesCount > 0) {
                                this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
                                this.selectionHandler._generateClickEvent('selectNode', event, pointer);
                                nodeSelected = true;
                                selected = true;
                            } else if (selectedNodesCount - previouslySelectedNodeCount < 0) {
                                // node was deselected
                                this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
                                selected = true;
                            }

                            // handle the selected edges
                            if (selectedEdgesCount - previouslySelectedEdgeCount > 0 && nodeSelected === false) {
                                // edge was selected
                                this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
                                selected = true;
                            } else if (selectedEdgesCount > 0 && edgesChanged === true) {
                                this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
                                this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
                                selected = true;
                            } else if (selectedEdgesCount - previouslySelectedEdgeCount < 0) {
                                // edge was deselected
                                this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
                                selected = true;
                            }

                            // fire the select event if anything has been selected or deselected
                            if (selected === true) {
                                // select or unselect
                                this.selectionHandler._generateClickEvent('select', event, pointer);
                            }
                        }

                        /**
                         * This function checks if the nodes and edges previously selected have changed.
                         * @param previousSelection
                         * @param currentSelection
                         * @returns {{nodesChanged: boolean, edgesChanged: boolean}}
                         * @private
                         */

                    }, {
                        key: '_determineIfDifferent',
                        value: function _determineIfDifferent(previousSelection, currentSelection) {
                            var nodesChanged = false;
                            var edgesChanged = false;

                            for (var i = 0; i < previousSelection.nodes.length; i++) {
                                if (currentSelection.nodes.indexOf(previousSelection.nodes[i]) === -1) {
                                    nodesChanged = true;
                                }
                            }
                            for (var _i = 0; _i < currentSelection.nodes.length; _i++) {
                                if (previousSelection.nodes.indexOf(previousSelection.nodes[_i]) === -1) {
                                    nodesChanged = true;
                                }
                            }
                            for (var _i2 = 0; _i2 < previousSelection.edges.length; _i2++) {
                                if (currentSelection.edges.indexOf(previousSelection.edges[_i2]) === -1) {
                                    edgesChanged = true;
                                }
                            }
                            for (var _i3 = 0; _i3 < currentSelection.edges.length; _i3++) {
                                if (previousSelection.edges.indexOf(previousSelection.edges[_i3]) === -1) {
                                    edgesChanged = true;
                                }
                            }

                            return { nodesChanged: nodesChanged, edgesChanged: edgesChanged };
                        }

                        /**
                         * This function is called by onDragStart.
                         * It is separated out because we can then overload it for the datamanipulation system.
                         *
                         * @private
                         */

                    }, {
                        key: 'onDragStart',
                        value: function onDragStart(event) {
                            //in case the touch event was triggered on an external div, do the initial touch now.
                            if (this.drag.pointer === undefined) {
                                this.onTouch(event);
                            }

                            // note: drag.pointer is set in onTouch to get the initial touch location
                            var node = this.selectionHandler.getNodeAt(this.drag.pointer);

                            this.drag.dragging = true;
                            this.drag.selection = [];
                            this.drag.translation = util.extend({}, this.body.view.translation); // copy the object
                            this.drag.nodeId = undefined;

                            if (node !== undefined && this.options.dragNodes === true) {
                                this.drag.nodeId = node.id;
                                // select the clicked node if not yet selected
                                if (node.isSelected() === false) {
                                    this.selectionHandler.unselectAll();
                                    this.selectionHandler.selectObject(node);
                                }

                                // after select to contain the node
                                this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer);

                                var selection = this.selectionHandler.selectionObj.nodes;
                                // create an array with the selected nodes and their original location and status
                                for (var nodeId in selection) {
                                    if (selection.hasOwnProperty(nodeId)) {
                                        var object = selection[nodeId];
                                        var s = {
                                            id: object.id,
                                            node: object,

                                            // store original x, y, xFixed and yFixed, make the node temporarily Fixed
                                            x: object.x,
                                            y: object.y,
                                            xFixed: object.options.fixed.x,
                                            yFixed: object.options.fixed.y
                                        };

                                        object.options.fixed.x = true;
                                        object.options.fixed.y = true;

                                        this.drag.selection.push(s);
                                    }
                                }
                            } else {
                                // fallback if no node is selected and thus the view is dragged.
                                this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer, undefined, true);
                            }
                        }

                        /**
                         * handle drag event
                         * @private
                         */

                    }, {
                        key: 'onDrag',
                        value: function onDrag(event) {
                            var _this2 = this;

                            if (this.drag.pinched === true) {
                                return;
                            }

                            // remove the focus on node if it is focussed on by the focusOnNode
                            this.body.emitter.emit('unlockNode');

                            var pointer = this.getPointer(event.center);

                            var selection = this.drag.selection;
                            if (selection && selection.length && this.options.dragNodes === true) {
                                this.selectionHandler._generateClickEvent('dragging', event, pointer);

                                // calculate delta's and new location
                                var deltaX = pointer.x - this.drag.pointer.x;
                                var deltaY = pointer.y - this.drag.pointer.y;

                                // update position of all selected nodes
                                selection.forEach(function(selection) {
                                    var node = selection.node;
                                    // only move the node if it was not fixed initially
                                    if (selection.xFixed === false) {
                                        node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);
                                    }
                                    // only move the node if it was not fixed initially
                                    if (selection.yFixed === false) {
                                        node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);
                                    }
                                });

                                // start the simulation of the physics
                                this.body.emitter.emit('startSimulation');
                            } else {
                                // move the network
                                if (this.options.dragView === true) {
                                    this.selectionHandler._generateClickEvent('dragging', event, pointer, undefined, true);

                                    // if the drag was not started properly because the click started outside the network div, start it now.
                                    if (this.drag.pointer === undefined) {
                                        this.onDragStart(event);
                                        return;
                                    }
                                    var diffX = pointer.x - this.drag.pointer.x;
                                    var diffY = pointer.y - this.drag.pointer.y;

                                    this.body.view.translation = { x: this.drag.translation.x + diffX, y: this.drag.translation.y + diffY };
                                    this.body.emitter.emit('_redraw');
                                }
                            }
                        }

                        /**
                         * handle drag start event
                         * @private
                         */

                    }, {
                        key: 'onDragEnd',
                        value: function onDragEnd(event) {
                            this.drag.dragging = false;
                            var selection = this.drag.selection;
                            if (selection && selection.length) {
                                selection.forEach(function(s) {
                                    // restore original xFixed and yFixed
                                    s.node.options.fixed.x = s.xFixed;
                                    s.node.options.fixed.y = s.yFixed;
                                });
                                this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center));
                                this.body.emitter.emit('startSimulation');
                            } else {
                                this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center), undefined, true);
                                this.body.emitter.emit('_requestRedraw');
                            }
                        }

                        /**
                         * Handle pinch event
                         * @param event
                         * @private
                         */

                    }, {
                        key: 'onPinch',
                        value: function onPinch(event) {
                            var pointer = this.getPointer(event.center);

                            this.drag.pinched = true;
                            if (this.pinch['scale'] === undefined) {
                                this.pinch.scale = 1;
                            }

                            // TODO: enabled moving while pinching?
                            var scale = this.pinch.scale * event.scale;
                            this.zoom(scale, pointer);
                        }

                        /**
                         * Zoom the network in or out
                         * @param {Number} scale a number around 1, and between 0.01 and 10
                         * @param {{x: Number, y: Number}} pointer    Position on screen
                         * @return {Number} appliedScale    scale is limited within the boundaries
                         * @private
                         */

                    }, {
                        key: 'zoom',
                        value: function zoom(scale, pointer) {
                            if (this.options.zoomView === true) {
                                var scaleOld = this.body.view.scale;
                                if (scale < 0.00001) {
                                    scale = 0.00001;
                                }
                                if (scale > 10) {
                                    scale = 10;
                                }

                                var preScaleDragPointer = undefined;
                                if (this.drag !== undefined) {
                                    if (this.drag.dragging === true) {
                                        preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
                                    }
                                }
                                // + this.canvas.frame.canvas.clientHeight / 2
                                var translation = this.body.view.translation;

                                var scaleFrac = scale / scaleOld;
                                var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
                                var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;

                                this.body.view.scale = scale;
                                this.body.view.translation = { x: tx, y: ty };

                                if (preScaleDragPointer != undefined) {
                                    var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
                                    this.drag.pointer.x = postScaleDragPointer.x;
                                    this.drag.pointer.y = postScaleDragPointer.y;
                                }

                                this.body.emitter.emit('_requestRedraw');

                                if (scaleOld < scale) {
                                    this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: pointer });
                                } else {
                                    this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: pointer });
                                }
                            }
                        }

                        /**
                         * Event handler for mouse wheel event, used to zoom the timeline
                         * See http://adomas.org/javascript-mouse-wheel/
                         *     https://github.com/EightMedia/hammer.js/issues/256
                         * @param {MouseEvent}  event
                         * @private
                         */

                    }, {
                        key: 'onMouseWheel',
                        value: function onMouseWheel(event) {
                            if (this.options.zoomView === true) {
                                // retrieve delta
                                var delta = 0;
                                if (event.wheelDelta) {
                                    /* IE/Opera. */
                                    delta = event.wheelDelta / 120;
                                } else if (event.detail) {
                                    /* Mozilla case. */
                                    // In Mozilla, sign of delta is different than in IE.
                                    // Also, delta is multiple of 3.
                                    delta = -event.detail / 3;
                                }

                                // If delta is nonzero, handle it.
                                // Basically, delta is now positive if wheel was scrolled up,
                                // and negative, if wheel was scrolled down.
                                if (delta !== 0) {

                                    // calculate the new scale
                                    var scale = this.body.view.scale;
                                    var zoom = delta / 10;
                                    if (delta < 0) {
                                        zoom = zoom / (1 - zoom);
                                    }
                                    scale *= 1 + zoom;

                                    // calculate the pointer location
                                    var pointer = this.getPointer({ x: event.clientX, y: event.clientY });

                                    // apply the new scale
                                    this.zoom(scale, pointer);
                                }

                                // Prevent default actions caused by mouse wheel.
                                event.preventDefault();
                            }
                        }

                        /**
                         * Mouse move handler for checking whether the title moves over a node with a title.
                         * @param  {Event} event
                         * @private
                         */

                    }, {
                        key: 'onMouseMove',
                        value: function onMouseMove(event) {
                            var _this3 = this;

                            var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
                            var popupVisible = false;

                            // check if the previously selected node is still selected
                            if (this.popup !== undefined) {
                                if (this.popup.hidden === false) {
                                    this._checkHidePopup(pointer);
                                }

                                // if the popup was not hidden above
                                if (this.popup.hidden === false) {
                                    popupVisible = true;
                                    this.popup.setPosition(pointer.x + 3, pointer.y - 5);
                                    this.popup.show();
                                }
                            }

                            // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.
                            if (this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
                                this.canvas.frame.focus();
                            }

                            // start a timeout that will check if the mouse is positioned above an element
                            if (popupVisible === false) {
                                if (this.popupTimer !== undefined) {
                                    clearInterval(this.popupTimer); // stop any running calculationTimer
                                    this.popupTimer = undefined;
                                }
                                if (!this.drag.dragging) {
                                    this.popupTimer = setTimeout(function() {
                                        return _this3._checkShowPopup(pointer);
                                    }, this.options.tooltipDelay);
                                }
                            }

                            /**
                             * Adding hover highlights
                             */
                            if (this.options.hover === true) {
                                // adding hover highlights
                                var obj = this.selectionHandler.getNodeAt(pointer);
                                if (obj === undefined) {
                                    obj = this.selectionHandler.getEdgeAt(pointer);
                                }
                                this.selectionHandler.hoverObject(obj);
                            }
                        }

                        /**
                         * Check if there is an element on the given position in the network
                         * (a node or edge). If so, and if this element has a title,
                         * show a popup window with its title.
                         *
                         * @param {{x:Number, y:Number}} pointer
                         * @private
                         */

                    }, {
                        key: '_checkShowPopup',
                        value: function _checkShowPopup(pointer) {
                            var x = this.canvas._XconvertDOMtoCanvas(pointer.x);
                            var y = this.canvas._YconvertDOMtoCanvas(pointer.y);
                            var pointerObj = {
                                left: x,
                                top: y,
                                right: x,
                                bottom: y
                            };

                            var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;
                            var nodeUnderCursor = false;
                            var popupType = 'node';

                            // check if a node is under the cursor.
                            if (this.popupObj === undefined) {
                                // search the nodes for overlap, select the top one in case of multiple nodes
                                var nodeIndices = this.body.nodeIndices;
                                var nodes = this.body.nodes;
                                var node = void 0;
                                var overlappingNodes = [];
                                for (var i = 0; i < nodeIndices.length; i++) {
                                    node = nodes[nodeIndices[i]];
                                    if (node.isOverlappingWith(pointerObj) === true) {
                                        if (node.getTitle() !== undefined) {
                                            overlappingNodes.push(nodeIndices[i]);
                                        }
                                    }
                                }

                                if (overlappingNodes.length > 0) {
                                    // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others
                                    this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
                                    // if you hover over a node, the title of the edge is not supposed to be shown.
                                    nodeUnderCursor = true;
                                }
                            }

                            if (this.popupObj === undefined && nodeUnderCursor === false) {
                                // search the edges for overlap
                                var edgeIndices = this.body.edgeIndices;
                                var edges = this.body.edges;
                                var edge = void 0;
                                var overlappingEdges = [];
                                for (var _i4 = 0; _i4 < edgeIndices.length; _i4++) {
                                    edge = edges[edgeIndices[_i4]];
                                    if (edge.isOverlappingWith(pointerObj) === true) {
                                        if (edge.connected === true && edge.getTitle() !== undefined) {
                                            overlappingEdges.push(edgeIndices[_i4]);
                                        }
                                    }
                                }

                                if (overlappingEdges.length > 0) {
                                    this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
                                    popupType = 'edge';
                                }
                            }

                            if (this.popupObj !== undefined) {
                                // show popup message window
                                if (this.popupObj.id !== previousPopupObjId) {
                                    if (this.popup === undefined) {
                                        this.popup = new Popup(this.canvas.frame);
                                    }

                                    this.popup.popupTargetType = popupType;
                                    this.popup.popupTargetId = this.popupObj.id;

                                    // adjust a small offset such that the mouse cursor is located in the
                                    // bottom left location of the popup, and you can easily move over the
                                    // popup area
                                    this.popup.setPosition(pointer.x + 3, pointer.y - 5);
                                    this.popup.setText(this.popupObj.getTitle());
                                    this.popup.show();
                                    this.body.emitter.emit('showPopup', this.popupObj.id);
                                }
                            } else {
                                if (this.popup !== undefined) {
                                    this.popup.hide();
                                    this.body.emitter.emit('hidePopup');
                                }
                            }
                        }

                        /**
                         * Check if the popup must be hidden, which is the case when the mouse is no
                         * longer hovering on the object
                         * @param {{x:Number, y:Number}} pointer
                         * @private
                         */

                    }, {
                        key: '_checkHidePopup',
                        value: function _checkHidePopup(pointer) {
                            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

                            var stillOnObj = false;
                            if (this.popup.popupTargetType === 'node') {
                                if (this.body.nodes[this.popup.popupTargetId] !== undefined) {
                                    stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);

                                    // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.
                                    // we initially only check stillOnObj because this is much faster.
                                    if (stillOnObj === true) {
                                        var overNode = this.selectionHandler.getNodeAt(pointer);
                                        stillOnObj = overNode === undefined ? false : overNode.id === this.popup.popupTargetId;
                                    }
                                }
                            } else {
                                if (this.selectionHandler.getNodeAt(pointer) === undefined) {
                                    if (this.body.edges[this.popup.popupTargetId] !== undefined) {
                                        stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
                                    }
                                }
                            }

                            if (stillOnObj === false) {
                                this.popupObj = undefined;
                                this.popup.hide();
                                this.body.emitter.emit('hidePopup');
                            }
                        }
                    }]);
                    return InteractionHandler;
                }();

                exports['default'] = InteractionHandler;

                /***/
            }),
            /* 225 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var Hammer = __webpack_require__(112);
                var hammerUtil = __webpack_require__(119);
                var keycharm = __webpack_require__(115);

                var NavigationHandler = function() {
                    function NavigationHandler(body, canvas) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, NavigationHandler);

                        this.body = body;
                        this.canvas = canvas;

                        this.iconsCreated = false;
                        this.navigationHammers = [];
                        this.boundFunctions = {};
                        this.touchTime = 0;
                        this.activated = false;

                        this.body.emitter.on("activate", function() {
                            _this.activated = true;
                            _this.configureKeyboardBindings();
                        });
                        this.body.emitter.on("deactivate", function() {
                            _this.activated = false;
                            _this.configureKeyboardBindings();
                        });
                        this.body.emitter.on("destroy", function() {
                            if (_this.keycharm !== undefined) {
                                _this.keycharm.destroy();
                            }
                        });

                        this.options = {};
                    }

                    (0, _createClass3['default'])(NavigationHandler, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                this.options = options;
                                this.create();
                            }
                        }
                    }, {
                        key: 'create',
                        value: function create() {
                            if (this.options.navigationButtons === true) {
                                if (this.iconsCreated === false) {
                                    this.loadNavigationElements();
                                }
                            } else if (this.iconsCreated === true) {
                                this.cleanNavigation();
                            }

                            this.configureKeyboardBindings();
                        }
                    }, {
                        key: 'cleanNavigation',
                        value: function cleanNavigation() {
                            // clean hammer bindings
                            if (this.navigationHammers.length != 0) {
                                for (var i = 0; i < this.navigationHammers.length; i++) {
                                    this.navigationHammers[i].destroy();
                                }
                                this.navigationHammers = [];
                            }

                            // clean up previous navigation items
                            if (this.navigationDOM && this.navigationDOM['wrapper'] && this.navigationDOM['wrapper'].parentNode) {
                                this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);
                            }

                            this.iconsCreated = false;
                        }

                        /**
                         * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
                         * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
                         * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
                         * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
                         *
                         * @private
                         */

                    }, {
                        key: 'loadNavigationElements',
                        value: function loadNavigationElements() {
                            var _this2 = this;

                            this.cleanNavigation();

                            this.navigationDOM = {};
                            var navigationDivs = ['up', 'down', 'left', 'right', 'zoomIn', 'zoomOut', 'zoomExtends'];
                            var navigationDivActions = ['_moveUp', '_moveDown', '_moveLeft', '_moveRight', '_zoomIn', '_zoomOut', '_fit'];

                            this.navigationDOM['wrapper'] = document.createElement('div');
                            this.navigationDOM['wrapper'].className = 'vis-navigation';
                            this.canvas.frame.appendChild(this.navigationDOM['wrapper']);

                            for (var i = 0; i < navigationDivs.length; i++) {
                                this.navigationDOM[navigationDivs[i]] = document.createElement('div');
                                this.navigationDOM[navigationDivs[i]].className = 'vis-button vis-' + navigationDivs[i];
                                this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);

                                var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);
                                if (navigationDivActions[i] === "_fit") {
                                    hammerUtil.onTouch(hammer, this._fit.bind(this));
                                } else {
                                    hammerUtil.onTouch(hammer, this.bindToRedraw.bind(this, navigationDivActions[i]));
                                }

                                this.navigationHammers.push(hammer);
                            }

                            // use a hammer for the release so we do not require the one used in the rest of the network
                            // the one the rest uses can be overloaded by the manipulation system.
                            var hammerFrame = new Hammer(this.canvas.frame);
                            hammerUtil.onRelease(hammerFrame, function() {
                                _this2._stopMovement();
                            });
                            this.navigationHammers.push(hammerFrame);

                            this.iconsCreated = true;
                        }
                    }, {
                        key: 'bindToRedraw',
                        value: function bindToRedraw(action) {
                            if (this.boundFunctions[action] === undefined) {
                                this.boundFunctions[action] = this[action].bind(this);
                                this.body.emitter.on("initRedraw", this.boundFunctions[action]);
                                this.body.emitter.emit("_startRendering");
                            }
                        }
                    }, {
                        key: 'unbindFromRedraw',
                        value: function unbindFromRedraw(action) {
                            if (this.boundFunctions[action] !== undefined) {
                                this.body.emitter.off("initRedraw", this.boundFunctions[action]);
                                this.body.emitter.emit("_stopRendering");
                                delete this.boundFunctions[action];
                            }
                        }

                        /**
                         * this stops all movement induced by the navigation buttons
                         *
                         * @private
                         */

                    }, {
                        key: '_fit',
                        value: function _fit() {
                            if (new Date().valueOf() - this.touchTime > 700) {
                                // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)
                                this.body.emitter.emit("fit", { duration: 700 });
                                this.touchTime = new Date().valueOf();
                            }
                        }

                        /**
                         * this stops all movement induced by the navigation buttons
                         *
                         * @private
                         */

                    }, {
                        key: '_stopMovement',
                        value: function _stopMovement() {
                            for (var boundAction in this.boundFunctions) {
                                if (this.boundFunctions.hasOwnProperty(boundAction)) {
                                    this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
                                    this.body.emitter.emit("_stopRendering");
                                }
                            }
                            this.boundFunctions = {};
                        }
                    }, {
                        key: '_moveUp',
                        value: function _moveUp() {
                            this.body.view.translation.y += this.options.keyboard.speed.y;
                        }
                    }, {
                        key: '_moveDown',
                        value: function _moveDown() {
                            this.body.view.translation.y -= this.options.keyboard.speed.y;
                        }
                    }, {
                        key: '_moveLeft',
                        value: function _moveLeft() {
                            this.body.view.translation.x += this.options.keyboard.speed.x;
                        }
                    }, {
                        key: '_moveRight',
                        value: function _moveRight() {
                            this.body.view.translation.x -= this.options.keyboard.speed.x;
                        }
                    }, {
                        key: '_zoomIn',
                        value: function _zoomIn() {
                            var scaleOld = this.body.view.scale;
                            var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
                            var translation = this.body.view.translation;
                            var scaleFrac = scale / scaleOld;
                            var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
                            var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

                            this.body.view.scale = scale;
                            this.body.view.translation = { x: tx, y: ty };
                            this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: null });
                        }
                    }, {
                        key: '_zoomOut',
                        value: function _zoomOut() {
                            var scaleOld = this.body.view.scale;
                            var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
                            var translation = this.body.view.translation;
                            var scaleFrac = scale / scaleOld;
                            var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
                            var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

                            this.body.view.scale = scale;
                            this.body.view.translation = { x: tx, y: ty };
                            this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: null });
                        }

                        /**
                         * bind all keys using keycharm.
                         */

                    }, {
                        key: 'configureKeyboardBindings',
                        value: function configureKeyboardBindings() {
                            var _this3 = this;

                            if (this.keycharm !== undefined) {
                                this.keycharm.destroy();
                            }

                            if (this.options.keyboard.enabled === true) {
                                if (this.options.keyboard.bindToWindow === true) {
                                    this.keycharm = keycharm({ container: window, preventDefault: true });
                                } else {
                                    this.keycharm = keycharm({ container: this.canvas.frame, preventDefault: true });
                                }

                                this.keycharm.reset();

                                if (this.activated === true) {
                                    this.keycharm.bind("up", function() {
                                        _this3.bindToRedraw("_moveUp");
                                    }, "keydown");
                                    this.keycharm.bind("down", function() {
                                        _this3.bindToRedraw("_moveDown");
                                    }, "keydown");
                                    this.keycharm.bind("left", function() {
                                        _this3.bindToRedraw("_moveLeft");
                                    }, "keydown");
                                    this.keycharm.bind("right", function() {
                                        _this3.bindToRedraw("_moveRight");
                                    }, "keydown");
                                    this.keycharm.bind("=", function() {
                                        _this3.bindToRedraw("_zoomIn");
                                    }, "keydown");
                                    this.keycharm.bind("num+", function() {
                                        _this3.bindToRedraw("_zoomIn");
                                    }, "keydown");
                                    this.keycharm.bind("num-", function() {
                                        _this3.bindToRedraw("_zoomOut");
                                    }, "keydown");
                                    this.keycharm.bind("-", function() {
                                        _this3.bindToRedraw("_zoomOut");
                                    }, "keydown");
                                    this.keycharm.bind("[", function() {
                                        _this3.bindToRedraw("_zoomOut");
                                    }, "keydown");
                                    this.keycharm.bind("]", function() {
                                        _this3.bindToRedraw("_zoomIn");
                                    }, "keydown");
                                    this.keycharm.bind("pageup", function() {
                                        _this3.bindToRedraw("_zoomIn");
                                    }, "keydown");
                                    this.keycharm.bind("pagedown", function() {
                                        _this3.bindToRedraw("_zoomOut");
                                    }, "keydown");

                                    this.keycharm.bind("up", function() {
                                        _this3.unbindFromRedraw("_moveUp");
                                    }, "keyup");
                                    this.keycharm.bind("down", function() {
                                        _this3.unbindFromRedraw("_moveDown");
                                    }, "keyup");
                                    this.keycharm.bind("left", function() {
                                        _this3.unbindFromRedraw("_moveLeft");
                                    }, "keyup");
                                    this.keycharm.bind("right", function() {
                                        _this3.unbindFromRedraw("_moveRight");
                                    }, "keyup");
                                    this.keycharm.bind("=", function() {
                                        _this3.unbindFromRedraw("_zoomIn");
                                    }, "keyup");
                                    this.keycharm.bind("num+", function() {
                                        _this3.unbindFromRedraw("_zoomIn");
                                    }, "keyup");
                                    this.keycharm.bind("num-", function() {
                                        _this3.unbindFromRedraw("_zoomOut");
                                    }, "keyup");
                                    this.keycharm.bind("-", function() {
                                        _this3.unbindFromRedraw("_zoomOut");
                                    }, "keyup");
                                    this.keycharm.bind("[", function() {
                                        _this3.unbindFromRedraw("_zoomOut");
                                    }, "keyup");
                                    this.keycharm.bind("]", function() {
                                        _this3.unbindFromRedraw("_zoomIn");
                                    }, "keyup");
                                    this.keycharm.bind("pageup", function() {
                                        _this3.unbindFromRedraw("_zoomIn");
                                    }, "keyup");
                                    this.keycharm.bind("pagedown", function() {
                                        _this3.unbindFromRedraw("_zoomOut");
                                    }, "keyup");
                                }
                            }
                        }
                    }]);
                    return NavigationHandler;
                }();

                exports['default'] = NavigationHandler;

                /***/
            }),
            /* 226 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var Node = __webpack_require__(168)['default'];
                var Edge = __webpack_require__(201)['default'];

                var util = __webpack_require__(1);

                var SelectionHandler = function() {
                    function SelectionHandler(body, canvas) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, SelectionHandler);

                        this.body = body;
                        this.canvas = canvas;
                        this.selectionObj = { nodes: [], edges: [] };
                        this.hoverObj = { nodes: {}, edges: {} };

                        this.options = {};
                        this.defaultOptions = {
                            multiselect: false,
                            selectable: true,
                            selectConnectedEdges: true,
                            hoverConnectedEdges: true
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.body.emitter.on("_dataChanged", function() {
                            _this.updateSelection();
                        });
                    }

                    (0, _createClass3['default'])(SelectionHandler, [{
                        key: 'setOptions',
                        value: function setOptions(options) {
                            if (options !== undefined) {
                                var fields = ['multiselect', 'hoverConnectedEdges', 'selectable', 'selectConnectedEdges'];
                                util.selectiveDeepExtend(fields, this.options, options);
                            }
                        }

                        /**
                         * handles the selection part of the tap;
                         *
                         * @param {Object} pointer
                         * @private
                         */

                    }, {
                        key: 'selectOnPoint',
                        value: function selectOnPoint(pointer) {
                            var selected = false;
                            if (this.options.selectable === true) {
                                var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

                                // unselect after getting the objects in order to restore width and height.
                                this.unselectAll();

                                if (obj !== undefined) {
                                    selected = this.selectObject(obj);
                                }
                                this.body.emitter.emit("_requestRedraw");
                            }
                            return selected;
                        }
                    }, {
                        key: 'selectAdditionalOnPoint',
                        value: function selectAdditionalOnPoint(pointer) {
                            var selectionChanged = false;
                            if (this.options.selectable === true) {
                                var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

                                if (obj !== undefined) {
                                    selectionChanged = true;
                                    if (obj.isSelected() === true) {
                                        this.deselectObject(obj);
                                    } else {
                                        this.selectObject(obj);
                                    }

                                    this.body.emitter.emit("_requestRedraw");
                                }
                            }
                            return selectionChanged;
                        }
                    }, {
                        key: '_generateClickEvent',
                        value: function _generateClickEvent(eventType, event, pointer, oldSelection) {
                            var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

                            var properties = void 0;
                            if (emptySelection === true) {
                                properties = { nodes: [], edges: [] };
                            } else {
                                properties = this.getSelection();
                            }
                            properties['pointer'] = {
                                DOM: { x: pointer.x, y: pointer.y },
                                canvas: this.canvas.DOMtoCanvas(pointer)
                            };
                            properties['event'] = event;

                            if (oldSelection !== undefined) {
                                properties['previousSelection'] = oldSelection;
                            }
                            this.body.emitter.emit(eventType, properties);
                        }
                    }, {
                        key: 'selectObject',
                        value: function selectObject(obj) {
                            var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;

                            if (obj !== undefined) {
                                if (obj instanceof Node) {
                                    if (highlightEdges === true) {
                                        this._selectConnectedEdges(obj);
                                    }
                                }
                                obj.select();
                                this._addToSelection(obj);
                                return true;
                            }
                            return false;
                        }
                    }, {
                        key: 'deselectObject',
                        value: function deselectObject(obj) {
                            if (obj.isSelected() === true) {
                                obj.selected = false;
                                this._removeFromSelection(obj);
                            }
                        }

                        /**
                         * retrieve all nodes overlapping with given object
                         * @param {Object} object  An object with parameters left, top, right, bottom
                         * @return {Number[]}   An array with id's of the overlapping nodes
                         * @private
                         */

                    }, {
                        key: '_getAllNodesOverlappingWith',
                        value: function _getAllNodesOverlappingWith(object) {
                            var overlappingNodes = [];
                            var nodes = this.body.nodes;
                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                var nodeId = this.body.nodeIndices[i];
                                if (nodes[nodeId].isOverlappingWith(object)) {
                                    overlappingNodes.push(nodeId);
                                }
                            }
                            return overlappingNodes;
                        }

                        /**
                         * Return a position object in canvasspace from a single point in screenspace
                         *
                         * @param pointer
                         * @returns {{left: number, top: number, right: number, bottom: number}}
                         * @private
                         */

                    }, {
                        key: '_pointerToPositionObject',
                        value: function _pointerToPositionObject(pointer) {
                            var canvasPos = this.canvas.DOMtoCanvas(pointer);
                            return {
                                left: canvasPos.x - 1,
                                top: canvasPos.y + 1,
                                right: canvasPos.x + 1,
                                bottom: canvasPos.y - 1
                            };
                        }

                        /**
                         * Get the top node at the passed point (like a click)
                         *
                         * @param {{x: Number, y: Number}} pointer
                         * @return {Node | undefined} node
                         */

                    }, {
                        key: 'getNodeAt',
                        value: function getNodeAt(pointer) {
                            var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            // we first check if this is an navigation controls element
                            var positionObject = this._pointerToPositionObject(pointer);
                            var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
                            // if there are overlapping nodes, select the last one, this is the
                            // one which is drawn on top of the others
                            if (overlappingNodes.length > 0) {
                                if (returnNode === true) {
                                    return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
                                } else {
                                    return overlappingNodes[overlappingNodes.length - 1];
                                }
                            } else {
                                return undefined;
                            }
                        }

                        /**
                         * retrieve all edges overlapping with given object, selector is around center
                         * @param {Object} object  An object with parameters left, top, right, bottom
                         * @return {Number[]}   An array with id's of the overlapping nodes
                         * @private
                         */

                    }, {
                        key: '_getEdgesOverlappingWith',
                        value: function _getEdgesOverlappingWith(object, overlappingEdges) {
                            var edges = this.body.edges;
                            for (var i = 0; i < this.body.edgeIndices.length; i++) {
                                var edgeId = this.body.edgeIndices[i];
                                if (edges[edgeId].isOverlappingWith(object)) {
                                    overlappingEdges.push(edgeId);
                                }
                            }
                        }

                        /**
                         * retrieve all nodes overlapping with given object
                         * @param {Object} object  An object with parameters left, top, right, bottom
                         * @return {Number[]}   An array with id's of the overlapping nodes
                         * @private
                         */

                    }, {
                        key: '_getAllEdgesOverlappingWith',
                        value: function _getAllEdgesOverlappingWith(object) {
                            var overlappingEdges = [];
                            this._getEdgesOverlappingWith(object, overlappingEdges);
                            return overlappingEdges;
                        }

                        /**
                         * Get the edges nearest to the passed point (like a click)
                         *
                         * @param {{x: Number, y: Number}} pointer
                         * @return {Edge | undefined} node
                         */

                    }, {
                        key: 'getEdgeAt',
                        value: function getEdgeAt(pointer) {
                            var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            // Iterate over edges, pick closest within 10
                            var canvasPos = this.canvas.DOMtoCanvas(pointer);
                            var mindist = 10;
                            var overlappingEdge = null;
                            var edges = this.body.edges;
                            for (var i = 0; i < this.body.edgeIndices.length; i++) {
                                var edgeId = this.body.edgeIndices[i];
                                var edge = edges[edgeId];
                                if (edge.connected) {
                                    var xFrom = edge.from.x;
                                    var yFrom = edge.from.y;
                                    var xTo = edge.to.x;
                                    var yTo = edge.to.y;
                                    var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
                                    if (dist < mindist) {
                                        overlappingEdge = edgeId;
                                        mindist = dist;
                                    }
                                }
                            }
                            if (overlappingEdge !== null) {
                                if (returnEdge === true) {
                                    return this.body.edges[overlappingEdge];
                                } else {
                                    return overlappingEdge;
                                }
                            } else {
                                return undefined;
                            }
                        }

                        /**
                         * Add object to the selection array.
                         *
                         * @param obj
                         * @private
                         */

                    }, {
                        key: '_addToSelection',
                        value: function _addToSelection(obj) {
                            if (obj instanceof Node) {
                                this.selectionObj.nodes[obj.id] = obj;
                            } else {
                                this.selectionObj.edges[obj.id] = obj;
                            }
                        }

                        /**
                         * Add object to the selection array.
                         *
                         * @param obj
                         * @private
                         */

                    }, {
                        key: '_addToHover',
                        value: function _addToHover(obj) {
                            if (obj instanceof Node) {
                                this.hoverObj.nodes[obj.id] = obj;
                            } else {
                                this.hoverObj.edges[obj.id] = obj;
                            }
                        }

                        /**
                         * Remove a single option from selection.
                         *
                         * @param {Object} obj
                         * @private
                         */

                    }, {
                        key: '_removeFromSelection',
                        value: function _removeFromSelection(obj) {
                            if (obj instanceof Node) {
                                delete this.selectionObj.nodes[obj.id];
                                this._unselectConnectedEdges(obj);
                            } else {
                                delete this.selectionObj.edges[obj.id];
                            }
                        }

                        /**
                         * Unselect all. The selectionObj is useful for this.
                         */

                    }, {
                        key: 'unselectAll',
                        value: function unselectAll() {
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    this.selectionObj.nodes[nodeId].unselect();
                                }
                            }
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    this.selectionObj.edges[edgeId].unselect();
                                }
                            }

                            this.selectionObj = { nodes: {}, edges: {} };
                        }

                        /**
                         * return the number of selected nodes
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getSelectedNodeCount',
                        value: function _getSelectedNodeCount() {
                            var count = 0;
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    count += 1;
                                }
                            }
                            return count;
                        }

                        /**
                         * return the selected node
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getSelectedNode',
                        value: function _getSelectedNode() {
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    return this.selectionObj.nodes[nodeId];
                                }
                            }
                            return undefined;
                        }

                        /**
                         * return the selected edge
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getSelectedEdge',
                        value: function _getSelectedEdge() {
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    return this.selectionObj.edges[edgeId];
                                }
                            }
                            return undefined;
                        }

                        /**
                         * return the number of selected edges
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getSelectedEdgeCount',
                        value: function _getSelectedEdgeCount() {
                            var count = 0;
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    count += 1;
                                }
                            }
                            return count;
                        }

                        /**
                         * return the number of selected objects.
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getSelectedObjectCount',
                        value: function _getSelectedObjectCount() {
                            var count = 0;
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    count += 1;
                                }
                            }
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    count += 1;
                                }
                            }
                            return count;
                        }

                        /**
                         * Check if anything is selected
                         *
                         * @returns {boolean}
                         * @private
                         */

                    }, {
                        key: '_selectionIsEmpty',
                        value: function _selectionIsEmpty() {
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    return false;
                                }
                            }
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        /**
                         * check if one of the selected nodes is a cluster.
                         *
                         * @returns {boolean}
                         * @private
                         */

                    }, {
                        key: '_clusterInSelection',
                        value: function _clusterInSelection() {
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    if (this.selectionObj.nodes[nodeId].clusterSize > 1) {
                                        return true;
                                    }
                                }
                            }
                            return false;
                        }

                        /**
                         * select the edges connected to the node that is being selected
                         *
                         * @param {Node} node
                         * @private
                         */

                    }, {
                        key: '_selectConnectedEdges',
                        value: function _selectConnectedEdges(node) {
                            for (var i = 0; i < node.edges.length; i++) {
                                var edge = node.edges[i];
                                edge.select();
                                this._addToSelection(edge);
                            }
                        }

                        /**
                         * select the edges connected to the node that is being selected
                         *
                         * @param {Node} node
                         * @private
                         */

                    }, {
                        key: '_hoverConnectedEdges',
                        value: function _hoverConnectedEdges(node) {
                            for (var i = 0; i < node.edges.length; i++) {
                                var edge = node.edges[i];
                                edge.hover = true;
                                this._addToHover(edge);
                            }
                        }

                        /**
                         * unselect the edges connected to the node that is being selected
                         *
                         * @param {Node} node
                         * @private
                         */

                    }, {
                        key: '_unselectConnectedEdges',
                        value: function _unselectConnectedEdges(node) {
                            for (var i = 0; i < node.edges.length; i++) {
                                var edge = node.edges[i];
                                edge.unselect();
                                this._removeFromSelection(edge);
                            }
                        }

                        /**
                         * This is called when someone clicks on a node. either select or deselect it.
                         * If there is an existing selection and we don't want to append to it, clear the existing selection
                         *
                         * @param {Node || Edge} object
                         * @private
                         */

                    }, {
                        key: 'blurObject',
                        value: function blurObject(object) {
                            if (object.hover === true) {
                                object.hover = false;
                                if (object instanceof Node) {
                                    this.body.emitter.emit("blurNode", { node: object.id });
                                } else {
                                    this.body.emitter.emit("blurEdge", { edge: object.id });
                                }
                            }
                        }

                        /**
                         * This is called when someone clicks on a node. either select or deselect it.
                         * If there is an existing selection and we don't want to append to it, clear the existing selection
                         *
                         * @param {Node || Edge} object
                         * @private
                         */

                    }, {
                        key: 'hoverObject',
                        value: function hoverObject(object) {
                            var hoverChanged = false;
                            // remove all node hover highlights
                            for (var nodeId in this.hoverObj.nodes) {
                                if (this.hoverObj.nodes.hasOwnProperty(nodeId)) {
                                    if (object === undefined || object instanceof Node && object.id != nodeId || object instanceof Edge) {
                                        this.blurObject(this.hoverObj.nodes[nodeId]);
                                        delete this.hoverObj.nodes[nodeId];
                                        hoverChanged = true;
                                    }
                                }
                            }

                            // removing all edge hover highlights
                            for (var edgeId in this.hoverObj.edges) {
                                if (this.hoverObj.edges.hasOwnProperty(edgeId)) {
                                    // if the hover has been changed here it means that the node has been hovered over or off
                                    // we then do not use the blurObject method here.
                                    if (hoverChanged === true) {
                                        this.hoverObj.edges[edgeId].hover = false;
                                        delete this.hoverObj.edges[edgeId];
                                    }
                                    // if the blur remains the same and the object is undefined (mouse off) or another
                                    // edge has been hovered, or another node has been hovered we blur the edge.
                                    else if (object === undefined || object instanceof Edge && object.id != edgeId || object instanceof Node && !object.hover) {
                                        this.blurObject(this.hoverObj.edges[edgeId]);
                                        delete this.hoverObj.edges[edgeId];
                                        hoverChanged = true;
                                    }
                                }
                            }

                            if (object !== undefined) {
                                if (object.hover === false) {
                                    object.hover = true;
                                    this._addToHover(object);
                                    hoverChanged = true;
                                    if (object instanceof Node) {
                                        this.body.emitter.emit("hoverNode", { node: object.id });
                                    } else {
                                        this.body.emitter.emit("hoverEdge", { edge: object.id });
                                    }
                                }
                                if (object instanceof Node && this.options.hoverConnectedEdges === true) {
                                    this._hoverConnectedEdges(object);
                                }
                            }

                            if (hoverChanged === true) {
                                this.body.emitter.emit('_requestRedraw');
                            }
                        }

                        /**
                         *
                         * retrieve the currently selected objects
                         * @return {{nodes: Array.<String>, edges: Array.<String>}} selection
                         */

                    }, {
                        key: 'getSelection',
                        value: function getSelection() {
                            var nodeIds = this.getSelectedNodes();
                            var edgeIds = this.getSelectedEdges();
                            return { nodes: nodeIds, edges: edgeIds };
                        }

                        /**
                         *
                         * retrieve the currently selected nodes
                         * @return {String[]} selection    An array with the ids of the
                         *                                            selected nodes.
                         */

                    }, {
                        key: 'getSelectedNodes',
                        value: function getSelectedNodes() {
                            var idArray = [];
                            if (this.options.selectable === true) {
                                for (var nodeId in this.selectionObj.nodes) {
                                    if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                        idArray.push(this.selectionObj.nodes[nodeId].id);
                                    }
                                }
                            }
                            return idArray;
                        }

                        /**
                         *
                         * retrieve the currently selected edges
                         * @return {Array} selection    An array with the ids of the
                         *                                            selected nodes.
                         */

                    }, {
                        key: 'getSelectedEdges',
                        value: function getSelectedEdges() {
                            var idArray = [];
                            if (this.options.selectable === true) {
                                for (var edgeId in this.selectionObj.edges) {
                                    if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                        idArray.push(this.selectionObj.edges[edgeId].id);
                                    }
                                }
                            }
                            return idArray;
                        }

                        /**
                         * Updates the current selection
                         * @param {{nodes: Array.<String>, edges: Array.<String>}} Selection
                         * @param {Object} options                                 Options
                         */

                    }, {
                        key: 'setSelection',
                        value: function setSelection(selection) {
                            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                            var i = void 0,
                                id = void 0;

                            if (!selection || !selection.nodes && !selection.edges) throw 'Selection must be an object with nodes and/or edges properties';
                            // first unselect any selected node, if option is true or undefined
                            if (options.unselectAll || options.unselectAll === undefined) {
                                this.unselectAll();
                            }
                            if (selection.nodes) {
                                for (i = 0; i < selection.nodes.length; i++) {
                                    id = selection.nodes[i];

                                    var node = this.body.nodes[id];
                                    if (!node) {
                                        throw new RangeError('Node with id "' + id + '" not found');
                                    }
                                    // don't select edges with it
                                    this.selectObject(node, options.highlightEdges);
                                }
                            }

                            if (selection.edges) {
                                for (i = 0; i < selection.edges.length; i++) {
                                    id = selection.edges[i];

                                    var edge = this.body.edges[id];
                                    if (!edge) {
                                        throw new RangeError('Edge with id "' + id + '" not found');
                                    }
                                    this.selectObject(edge);
                                }
                            }
                            this.body.emitter.emit('_requestRedraw');
                        }

                        /**
                         * select zero or more nodes with the option to highlight edges
                         * @param {Number[] | String[]} selection     An array with the ids of the
                         *                                            selected nodes.
                         * @param {boolean} [highlightEdges]
                         */

                    }, {
                        key: 'selectNodes',
                        value: function selectNodes(selection) {
                            var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                            if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

                            this.setSelection({ nodes: selection }, { highlightEdges: highlightEdges });
                        }

                        /**
                         * select zero or more edges
                         * @param {Number[] | String[]} selection     An array with the ids of the
                         *                                            selected nodes.
                         */

                    }, {
                        key: 'selectEdges',
                        value: function selectEdges(selection) {
                            if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

                            this.setSelection({ edges: selection });
                        }

                        /**
                         * Validate the selection: remove ids of nodes which no longer exist
                         * @private
                         */

                    }, {
                        key: 'updateSelection',
                        value: function updateSelection() {
                            for (var nodeId in this.selectionObj.nodes) {
                                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                                    if (!this.body.nodes.hasOwnProperty(nodeId)) {
                                        delete this.selectionObj.nodes[nodeId];
                                    }
                                }
                            }
                            for (var edgeId in this.selectionObj.edges) {
                                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                                    if (!this.body.edges.hasOwnProperty(edgeId)) {
                                        delete this.selectionObj.edges[edgeId];
                                    }
                                }
                            }
                        }
                    }]);
                    return SelectionHandler;
                }();

                exports['default'] = SelectionHandler;

                /***/
            }),
            /* 227 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var NetworkUtil = __webpack_require__(219)['default'];

                /**
                 * Container for derived data on current network, relating to hierarchy.
                 *
                 * Local, private class.
                 *
                 * TODO: Perhaps move more code for hierarchy state handling to this class.
                 *       Till now, only the required and most obvious has been done.
                 */

                var HierarchicalStatus = function() {
                    function HierarchicalStatus() {
                        (0, _classCallCheck3['default'])(this, HierarchicalStatus);

                        this.childrenReference = {};
                        this.parentReference = {};
                        this.levels = {};
                        this.trees = {};

                        this.isTree = false;
                    }

                    /**
                     * Add the relation between given nodes to the current state.
                     */


                    (0, _createClass3['default'])(HierarchicalStatus, [{
                        key: 'addRelation',
                        value: function addRelation(parentNodeId, childNodeId) {
                            if (this.childrenReference[parentNodeId] === undefined) {
                                this.childrenReference[parentNodeId] = [];
                            }
                            this.childrenReference[parentNodeId].push(childNodeId);

                            if (this.parentReference[childNodeId] === undefined) {
                                this.parentReference[childNodeId] = [];
                            }
                            this.parentReference[childNodeId].push(parentNodeId);
                        }

                        /**
                         * Check if the current state is for a tree or forest network.
                         *
                         * This is the case if every node has at most one parent.
                         *
                         * Pre: parentReference init'ed properly for current network
                         */

                    }, {
                        key: 'checkIfTree',
                        value: function checkIfTree() {
                            for (var i in this.parentReference) {
                                if (this.parentReference[i].length > 1) {
                                    this.isTree = false;
                                    return;
                                }
                            }

                            this.isTree = true;
                        }

                        /**
                         * Ensure level for given id is defined.
                         *
                         * Sets level to zero for given node id if not already present
                         */

                    }, {
                        key: 'ensureLevel',
                        value: function ensureLevel(nodeId) {
                            if (this.levels[nodeId] === undefined) {
                                this.levels[nodeId] = 0;
                            }
                        }

                        /**
                         * get the maximum level of a branch.
                         *
                         * TODO: Never entered; find a test case to test this!
                         */

                    }, {
                        key: 'getMaxLevel',
                        value: function getMaxLevel(nodeId) {
                            var _this = this;

                            var accumulator = {};

                            var _getMaxLevel = function _getMaxLevel(nodeId) {
                                if (accumulator[nodeId] !== undefined) {
                                    return accumulator[nodeId];
                                }
                                var level = _this.levels[nodeId];
                                if (_this.childrenReference[nodeId]) {
                                    var children = _this.childrenReference[nodeId];
                                    if (children.length > 0) {
                                        for (var i = 0; i < children.length; i++) {
                                            level = Math.max(level, _getMaxLevel(children[i]));
                                        }
                                    }
                                }
                                accumulator[nodeId] = level;
                                return level;
                            };

                            return _getMaxLevel(nodeId);
                        }
                    }, {
                        key: 'levelDownstream',
                        value: function levelDownstream(nodeA, nodeB) {
                            if (this.levels[nodeB.id] === undefined) {
                                // set initial level
                                if (this.levels[nodeA.id] === undefined) {
                                    this.levels[nodeA.id] = 0;
                                }
                                // set level
                                this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
                            }
                        }

                        /**
                         * Small util method to set the minimum levels of the nodes to zero.
                         */

                    }, {
                        key: 'setMinLevelToZero',
                        value: function setMinLevelToZero(nodes) {
                            var minLevel = 1e9;
                            // get the minimum level
                            for (var nodeId in nodes) {
                                if (nodes.hasOwnProperty(nodeId)) {
                                    if (this.levels[nodeId] !== undefined) {
                                        minLevel = Math.min(this.levels[nodeId], minLevel);
                                    }
                                }
                            }

                            // subtract the minimum from the set so we have a range starting from 0
                            for (var _nodeId in nodes) {
                                if (nodes.hasOwnProperty(_nodeId)) {
                                    if (this.levels[_nodeId] !== undefined) {
                                        this.levels[_nodeId] -= minLevel;
                                    }
                                }
                            }
                        }

                        /**
                         * Get the min and max xy-coordinates of a given tree
                         */

                    }, {
                        key: 'getTreeSize',
                        value: function getTreeSize(nodes, index) {
                            var min_x = 1e9;
                            var max_x = -1e9;
                            var min_y = 1e9;
                            var max_y = -1e9;

                            for (var nodeId in this.trees) {
                                if (this.trees.hasOwnProperty(nodeId)) {
                                    if (this.trees[nodeId] === index) {
                                        var node = nodes[nodeId];
                                        min_x = Math.min(node.x, min_x);
                                        max_x = Math.max(node.x, max_x);
                                        min_y = Math.min(node.y, min_y);
                                        max_y = Math.max(node.y, max_y);
                                    }
                                }
                            }

                            return {
                                min_x: min_x,
                                max_x: max_x,
                                min_y: min_y,
                                max_y: max_y
                            };
                        }
                    }]);
                    return HierarchicalStatus;
                }();

                var LayoutEngine = function() {
                    function LayoutEngine(body) {
                        (0, _classCallCheck3['default'])(this, LayoutEngine);

                        this.body = body;

                        this.initialRandomSeed = Math.round(Math.random() * 1000000);
                        this.randomSeed = this.initialRandomSeed;
                        this.setPhysics = false;
                        this.options = {};
                        this.optionsBackup = { physics: {} };

                        this.defaultOptions = {
                            randomSeed: undefined,
                            improvedLayout: true,
                            hierarchical: {
                                enabled: false,
                                levelSeparation: 150,
                                nodeSpacing: 100,
                                treeSpacing: 200,
                                blockShifting: true,
                                edgeMinimization: true,
                                parentCentralization: true,
                                direction: 'UD', // UD, DU, LR, RL
                                sortMethod: 'hubsize' // hubsize, directed
                            }
                        };
                        util.extend(this.options, this.defaultOptions);
                        this.bindEventListeners();
                    }

                    (0, _createClass3['default'])(LayoutEngine, [{
                        key: 'bindEventListeners',
                        value: function bindEventListeners() {
                            var _this2 = this;

                            this.body.emitter.on('_dataChanged', function() {
                                _this2.setupHierarchicalLayout();
                            });
                            this.body.emitter.on('_dataLoaded', function() {
                                _this2.layoutNetwork();
                            });
                            this.body.emitter.on('_resetHierarchicalLayout', function() {
                                _this2.setupHierarchicalLayout();
                            });
                        }
                    }, {
                        key: 'setOptions',
                        value: function setOptions(options, allOptions) {
                            if (options !== undefined) {
                                var prevHierarchicalState = this.options.hierarchical.enabled;
                                util.selectiveDeepExtend(["randomSeed", "improvedLayout"], this.options, options);
                                util.mergeOptions(this.options, options, 'hierarchical');
                                if (options.randomSeed !== undefined) {
                                    this.initialRandomSeed = options.randomSeed;
                                }

                                if (this.options.hierarchical.enabled === true) {
                                    if (prevHierarchicalState === true) {
                                        // refresh the overridden options for nodes and edges.
                                        this.body.emitter.emit('refresh', true);
                                    }

                                    // make sure the level separation is the right way up
                                    if (this.options.hierarchical.direction === 'RL' || this.options.hierarchical.direction === 'DU') {
                                        if (this.options.hierarchical.levelSeparation > 0) {
                                            this.options.hierarchical.levelSeparation *= -1;
                                        }
                                    } else {
                                        if (this.options.hierarchical.levelSeparation < 0) {
                                            this.options.hierarchical.levelSeparation *= -1;
                                        }
                                    }

                                    this.body.emitter.emit('_resetHierarchicalLayout');
                                    // because the hierarchical system needs it's own physics and smooth curve settings, we adapt the other options if needed.
                                    return this.adaptAllOptionsForHierarchicalLayout(allOptions);
                                } else {
                                    if (prevHierarchicalState === true) {
                                        // refresh the overridden options for nodes and edges.
                                        this.body.emitter.emit('refresh');
                                        return util.deepExtend(allOptions, this.optionsBackup);
                                    }
                                }
                            }
                            return allOptions;
                        }
                    }, {
                        key: 'adaptAllOptionsForHierarchicalLayout',
                        value: function adaptAllOptionsForHierarchicalLayout(allOptions) {
                            if (this.options.hierarchical.enabled === true) {
                                // set the physics
                                if (allOptions.physics === undefined || allOptions.physics === true) {
                                    allOptions.physics = {
                                        enabled: this.optionsBackup.physics.enabled === undefined ? true : this.optionsBackup.physics.enabled,
                                        solver: 'hierarchicalRepulsion'
                                    };
                                    this.optionsBackup.physics.enabled = this.optionsBackup.physics.enabled === undefined ? true : this.optionsBackup.physics.enabled;
                                    this.optionsBackup.physics.solver = this.optionsBackup.physics.solver || 'barnesHut';
                                } else if ((0, _typeof3['default'])(allOptions.physics) === 'object') {
                                    this.optionsBackup.physics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;
                                    this.optionsBackup.physics.solver = allOptions.physics.solver || 'barnesHut';
                                    allOptions.physics.solver = 'hierarchicalRepulsion';
                                } else if (allOptions.physics !== false) {
                                    this.optionsBackup.physics.solver = 'barnesHut';
                                    allOptions.physics = { solver: 'hierarchicalRepulsion' };
                                }

                                // get the type of static smooth curve in case it is required
                                var type = 'horizontal';
                                if (this.options.hierarchical.direction === 'RL' || this.options.hierarchical.direction === 'LR') {
                                    type = 'vertical';
                                }

                                // disable smooth curves if nothing is defined. If smooth curves have been turned on, turn them into static smooth curves.
                                if (allOptions.edges === undefined) {
                                    this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
                                    allOptions.edges = { smooth: false };
                                } else if (allOptions.edges.smooth === undefined) {
                                    this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
                                    allOptions.edges.smooth = false;
                                } else {
                                    if (typeof allOptions.edges.smooth === 'boolean') {
                                        this.optionsBackup.edges = { smooth: allOptions.edges.smooth };
                                        allOptions.edges.smooth = { enabled: allOptions.edges.smooth, type: type };
                                    } else {
                                        // allow custom types except for dynamic
                                        if (allOptions.edges.smooth.type !== undefined && allOptions.edges.smooth.type !== 'dynamic') {
                                            type = allOptions.edges.smooth.type;
                                        }

                                        this.optionsBackup.edges = {
                                            smooth: allOptions.edges.smooth.enabled === undefined ? true : allOptions.edges.smooth.enabled,
                                            type: allOptions.edges.smooth.type === undefined ? 'dynamic' : allOptions.edges.smooth.type,
                                            roundness: allOptions.edges.smooth.roundness === undefined ? 0.5 : allOptions.edges.smooth.roundness,
                                            forceDirection: allOptions.edges.smooth.forceDirection === undefined ? false : allOptions.edges.smooth.forceDirection
                                        };
                                        allOptions.edges.smooth = {
                                            enabled: allOptions.edges.smooth.enabled === undefined ? true : allOptions.edges.smooth.enabled,
                                            type: type,
                                            roundness: allOptions.edges.smooth.roundness === undefined ? 0.5 : allOptions.edges.smooth.roundness,
                                            forceDirection: allOptions.edges.smooth.forceDirection === undefined ? false : allOptions.edges.smooth.forceDirection
                                        };
                                    }
                                }

                                // force all edges into static smooth curves. Only applies to edges that do not use the global options for smooth.
                                this.body.emitter.emit('_forceDisableDynamicCurves', type);
                            }

                            return allOptions;
                        }
                    }, {
                        key: 'seededRandom',
                        value: function seededRandom() {
                            var x = Math.sin(this.randomSeed++) * 10000;
                            return x - Math.floor(x);
                        }
                    }, {
                        key: 'positionInitially',
                        value: function positionInitially(nodesArray) {
                            if (this.options.hierarchical.enabled !== true) {
                                this.randomSeed = this.initialRandomSeed;
                                var radius = nodesArray.length + 50;
                                for (var i = 0; i < nodesArray.length; i++) {
                                    var node = nodesArray[i];
                                    var angle = 2 * Math.PI * this.seededRandom();
                                    if (node.x === undefined) {
                                        node.x = radius * Math.cos(angle);
                                    }
                                    if (node.y === undefined) {
                                        node.y = radius * Math.sin(angle);
                                    }
                                }
                            }
                        }

                        /**
                         * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
                         * cluster them first to reduce the amount.
                         */

                    }, {
                        key: 'layoutNetwork',
                        value: function layoutNetwork() {
                            if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
                                // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible
                                // nodes have predefined positions we use this.
                                var positionDefined = 0;
                                for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                    var node = this.body.nodes[this.body.nodeIndices[i]];
                                    if (node.predefinedPosition === true) {
                                        positionDefined += 1;
                                    }
                                }

                                // if less than half of the nodes have a predefined position we continue
                                if (positionDefined < 0.5 * this.body.nodeIndices.length) {
                                    var MAX_LEVELS = 10;
                                    var level = 0;
                                    var clusterThreshold = 150;
                                    //Performance enhancement, during clustering edges need only be simple straight lines. These options don't propagate outside the clustering phase.
                                    var clusterOptions = {
                                        clusterEdgeProperties: {
                                            smooth: {
                                                enabled: false
                                            }
                                        }
                                    };

                                    // if there are a lot of nodes, we cluster before we run the algorithm.
                                    if (this.body.nodeIndices.length > clusterThreshold) {
                                        var startLength = this.body.nodeIndices.length;
                                        while (this.body.nodeIndices.length > clusterThreshold && level <= MAX_LEVELS) {
                                            //console.time("clustering")
                                            level += 1;
                                            var before = this.body.nodeIndices.length;
                                            // if there are many nodes we do a hubsize cluster
                                            if (level % 3 === 0) {
                                                this.body.modules.clustering.clusterBridges(clusterOptions);
                                            } else {
                                                this.body.modules.clustering.clusterOutliers(clusterOptions);
                                            }
                                            var after = this.body.nodeIndices.length;
                                            if (before == after && level % 3 !== 0) {
                                                this._declusterAll();
                                                this.body.emitter.emit("_layoutFailed");
                                                console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                                                return;
                                            }
                                            //console.timeEnd("clustering")
                                            //console.log(before,level,after);
                                        }
                                        // increase the size of the edges
                                        this.body.modules.kamadaKawai.setOptions({ springLength: Math.max(150, 2 * startLength) });
                                    }
                                    if (level > MAX_LEVELS) {
                                        console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result.");
                                    }

                                    // position the system for these nodes and edges
                                    this.body.modules.kamadaKawai.solve(this.body.nodeIndices, this.body.edgeIndices, true);

                                    // shift to center point
                                    this._shiftToCenter();

                                    // perturb the nodes a little bit to force the physics to kick in
                                    var offset = 70;
                                    for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
                                        // Only perturb the nodes that aren't fixed
                                        if (this.body.nodes[this.body.nodeIndices[_i]].predefinedPosition === false) {
                                            this.body.nodes[this.body.nodeIndices[_i]].x += (0.5 - this.seededRandom()) * offset;
                                            this.body.nodes[this.body.nodeIndices[_i]].y += (0.5 - this.seededRandom()) * offset;
                                        }
                                    }

                                    // uncluster all clusters
                                    this._declusterAll();

                                    // reposition all bezier nodes.
                                    this.body.emitter.emit("_repositionBezierNodes");
                                }
                            }
                        }

                        /**
                         * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
                         * @private
                         */

                    }, {
                        key: '_shiftToCenter',
                        value: function _shiftToCenter() {
                            var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
                            var center = NetworkUtil.findCenter(range);
                            for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                this.body.nodes[this.body.nodeIndices[i]].x -= center.x;
                                this.body.nodes[this.body.nodeIndices[i]].y -= center.y;
                            }
                        }
                    }, {
                        key: '_declusterAll',
                        value: function _declusterAll() {
                            var clustersPresent = true;
                            while (clustersPresent === true) {
                                clustersPresent = false;
                                for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                    if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
                                        clustersPresent = true;
                                        this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
                                    }
                                }
                                if (clustersPresent === true) {
                                    this.body.emitter.emit('_dataChanged');
                                }
                            }
                        }
                    }, {
                        key: 'getSeed',
                        value: function getSeed() {
                            return this.initialRandomSeed;
                        }

                        /**
                         * This is the main function to layout the nodes in a hierarchical way.
                         * It checks if the node details are supplied correctly
                         *
                         * @private
                         */

                    }, {
                        key: 'setupHierarchicalLayout',
                        value: function setupHierarchicalLayout() {
                            if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
                                // get the size of the largest hubs and check if the user has defined a level for a node.
                                var node = void 0,
                                    nodeId = void 0;
                                var definedLevel = false;
                                var definedPositions = true;
                                var undefinedLevel = false;
                                this.lastNodeOnLevel = {};
                                this.hierarchical = new HierarchicalStatus();
                                this.treeIndex = -1;

                                this.distributionOrdering = {};
                                this.distributionIndex = {};
                                this.distributionOrderingPresence = {};

                                for (nodeId in this.body.nodes) {
                                    if (this.body.nodes.hasOwnProperty(nodeId)) {
                                        node = this.body.nodes[nodeId];
                                        if (node.options.x === undefined && node.options.y === undefined) {
                                            definedPositions = false;
                                        }
                                        if (node.options.level !== undefined) {
                                            definedLevel = true;
                                            this.hierarchical.levels[nodeId] = node.options.level;
                                        } else {
                                            undefinedLevel = true;
                                        }
                                    }
                                }

                                // if the user defined some levels but not all, alert and run without hierarchical layout
                                if (undefinedLevel === true && definedLevel === true) {
                                    throw new Error('To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.');
                                } else {
                                    // define levels if undefined by the users. Based on hubsize.
                                    if (undefinedLevel === true) {
                                        if (this.options.hierarchical.sortMethod === 'hubsize') {
                                            this._determineLevelsByHubsize();
                                        } else if (this.options.hierarchical.sortMethod === 'directed') {
                                            this._determineLevelsDirected();
                                        } else if (this.options.hierarchical.sortMethod === 'custom') {
                                            this._determineLevelsCustomCallback();
                                        }
                                    }

                                    // fallback for cases where there are nodes but no edges
                                    for (var _nodeId2 in this.body.nodes) {
                                        if (this.body.nodes.hasOwnProperty(_nodeId2)) {
                                            this.hierarchical.ensureLevel(_nodeId2);
                                        }
                                    }
                                    // check the distribution of the nodes per level.
                                    var distribution = this._getDistribution();

                                    // get the parent children relations.
                                    this._generateMap();

                                    // place the nodes on the canvas.
                                    this._placeNodesByHierarchy(distribution);

                                    // condense the whitespace.
                                    this._condenseHierarchy();

                                    // shift to center so gravity does not have to do much
                                    this._shiftToCenter();
                                }
                            }
                        }

                        /**
                         * @private
                         */

                    }, {
                        key: '_condenseHierarchy',
                        value: function _condenseHierarchy() {
                            var _this3 = this;

                            // Global var in this scope to define when the movement has stopped.
                            var stillShifting = false;
                            var branches = {};
                            // first we have some methods to help shifting trees around.
                            // the main method to shift the trees
                            var shiftTrees = function shiftTrees() {
                                var treeSizes = getTreeSizes();
                                var shiftBy = 0;
                                for (var i = 0; i < treeSizes.length - 1; i++) {
                                    var diff = treeSizes[i].max - treeSizes[i + 1].min;
                                    shiftBy += diff + _this3.options.hierarchical.treeSpacing;
                                    shiftTree(i + 1, shiftBy);
                                }
                            };

                            // shift a single tree by an offset
                            var shiftTree = function shiftTree(index, offset) {
                                for (var nodeId in _this3.hierarchical.trees) {
                                    if (_this3.hierarchical.trees.hasOwnProperty(nodeId)) {
                                        if (_this3.hierarchical.trees[nodeId] === index) {
                                            var node = _this3.body.nodes[nodeId];
                                            var pos = _this3._getPositionForHierarchy(node);
                                            _this3._setPositionForHierarchy(node, pos + offset, undefined, true);
                                        }
                                    }
                                }
                            };

                            // get the width of a tree
                            var getTreeSize = function getTreeSize(index) {
                                var res = _this3.hierarchical.getTreeSize(_this3.body.nodes, index);
                                if (_this3._isVertical()) {
                                    return { min: res.min_x, max: res.max_x };
                                } else {
                                    return { min: res.min_y, max: res.max_y };
                                }
                            };

                            // get the width of all trees
                            var getTreeSizes = function getTreeSizes() {
                                var treeWidths = [];
                                for (var i = 0; i <= _this3.treeIndex; i++) {
                                    treeWidths.push(getTreeSize(i));
                                }
                                return treeWidths;
                            };

                            // get a map of all nodes in this branch
                            var getBranchNodes = function getBranchNodes(source, map) {
                                if (map[source.id]) {
                                    return;
                                }
                                map[source.id] = true;
                                if (_this3.hierarchical.childrenReference[source.id]) {
                                    var children = _this3.hierarchical.childrenReference[source.id];
                                    if (children.length > 0) {
                                        for (var i = 0; i < children.length; i++) {
                                            getBranchNodes(_this3.body.nodes[children[i]], map);
                                        }
                                    }
                                }
                            };

                            // get a min max width as well as the maximum movement space it has on either sides
                            // we use min max terminology because width and height can interchange depending on the direction of the layout
                            var getBranchBoundary = function getBranchBoundary(branchMap) {
                                var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;

                                var minSpace = 1e9;
                                var maxSpace = 1e9;
                                var min = 1e9;
                                var max = -1e9;
                                for (var branchNode in branchMap) {
                                    if (branchMap.hasOwnProperty(branchNode)) {
                                        var node = _this3.body.nodes[branchNode];
                                        var level = _this3.hierarchical.levels[node.id];
                                        var position = _this3._getPositionForHierarchy(node);

                                        // get the space around the node.

                                        var _getSpaceAroundNode2 = _this3._getSpaceAroundNode(node, branchMap),
                                            _getSpaceAroundNode3 = (0, _slicedToArray3['default'])(_getSpaceAroundNode2, 2),
                                            minSpaceNode = _getSpaceAroundNode3[0],
                                            maxSpaceNode = _getSpaceAroundNode3[1];

                                        minSpace = Math.min(minSpaceNode, minSpace);
                                        maxSpace = Math.min(maxSpaceNode, maxSpace);

                                        // the width is only relevant for the levels two nodes have in common. This is why we filter on this.
                                        if (level <= maxLevel) {
                                            min = Math.min(position, min);
                                            max = Math.max(position, max);
                                        }
                                    }
                                }

                                return [min, max, minSpace, maxSpace];
                            };

                            // check what the maximum level is these nodes have in common.
                            var getCollisionLevel = function getCollisionLevel(node1, node2) {
                                var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);
                                var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);
                                return Math.min(maxLevel1, maxLevel2);
                            };

                            // check if two nodes have the same parent(s)
                            var hasSameParent = function hasSameParent(node1, node2) {
                                var parents1 = _this3.hierarchical.parentReference[node1.id];
                                var parents2 = _this3.hierarchical.parentReference[node2.id];
                                if (parents1 === undefined || parents2 === undefined) {
                                    return false;
                                }

                                for (var i = 0; i < parents1.length; i++) {
                                    for (var j = 0; j < parents2.length; j++) {
                                        if (parents1[i] == parents2[j]) {
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            };

                            // condense elements. These can be nodes or branches depending on the callback.
                            var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {
                                for (var i = 0; i < levels.length; i++) {
                                    var level = levels[i];
                                    var levelNodes = _this3.distributionOrdering[level];
                                    if (levelNodes.length > 1) {
                                        for (var j = 0; j < levelNodes.length - 1; j++) {
                                            if (hasSameParent(levelNodes[j], levelNodes[j + 1]) === true) {
                                                if (_this3.hierarchical.trees[levelNodes[j].id] === _this3.hierarchical.trees[levelNodes[j + 1].id]) {
                                                    callback(levelNodes[j], levelNodes[j + 1], centerParents);
                                                }
                                            }
                                        }
                                    }
                                }
                            };

                            // callback for shifting branches
                            var branchShiftCallback = function branchShiftCallback(node1, node2) {
                                var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                                //window.CALLBACKS.push(() => {
                                var pos1 = _this3._getPositionForHierarchy(node1);
                                var pos2 = _this3._getPositionForHierarchy(node2);
                                var diffAbs = Math.abs(pos2 - pos1);
                                //console.log("NOW CHEcKING:", node1.id, node2.id, diffAbs);
                                if (diffAbs > _this3.options.hierarchical.nodeSpacing) {
                                    var branchNodes1 = {};
                                    var branchNodes2 = {};

                                    getBranchNodes(node1, branchNodes1);
                                    getBranchNodes(node2, branchNodes2);

                                    // check the largest distance between the branches
                                    var maxLevel = getCollisionLevel(node1, node2);

                                    var _getBranchBoundary = getBranchBoundary(branchNodes1, maxLevel),
                                        _getBranchBoundary2 = (0, _slicedToArray3['default'])(_getBranchBoundary, 4),
                                        min1 = _getBranchBoundary2[0],
                                        max1 = _getBranchBoundary2[1],
                                        minSpace1 = _getBranchBoundary2[2],
                                        maxSpace1 = _getBranchBoundary2[3];

                                    var _getBranchBoundary3 = getBranchBoundary(branchNodes2, maxLevel),
                                        _getBranchBoundary4 = (0, _slicedToArray3['default'])(_getBranchBoundary3, 4),
                                        min2 = _getBranchBoundary4[0],
                                        max2 = _getBranchBoundary4[1],
                                        minSpace2 = _getBranchBoundary4[2],
                                        maxSpace2 = _getBranchBoundary4[3];

                                    //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id, getBranchBoundary(branchNodes2, maxLevel), maxLevel);


                                    var diffBranch = Math.abs(max1 - min2);
                                    if (diffBranch > _this3.options.hierarchical.nodeSpacing) {
                                        var offset = max1 - min2 + _this3.options.hierarchical.nodeSpacing;
                                        if (offset < -minSpace2 + _this3.options.hierarchical.nodeSpacing) {
                                            offset = -minSpace2 + _this3.options.hierarchical.nodeSpacing;
                                            //console.log("RESETTING OFFSET", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);
                                        }
                                        if (offset < 0) {
                                            //console.log("SHIFTING", node2.id, offset);
                                            _this3._shiftBlock(node2.id, offset);
                                            stillShifting = true;

                                            if (centerParent === true) _this3._centerParent(node2);
                                        }
                                    }
                                }
                                //this.body.emitter.emit("_redraw");})
                            };

                            var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {
                                //window.CALLBACKS.push(() => {
                                //  console.log("ts",node.id);
                                var nodeId = node.id;
                                var allEdges = node.edges;
                                var nodeLevel = _this3.hierarchical.levels[node.id];

                                // gather constants
                                var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;
                                var referenceNodes = {};
                                var aboveEdges = [];
                                for (var i = 0; i < allEdges.length; i++) {
                                    var edge = allEdges[i];
                                    if (edge.toId != edge.fromId) {
                                        var otherNode = edge.toId == nodeId ? edge.from : edge.to;
                                        referenceNodes[allEdges[i].id] = otherNode;
                                        if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {
                                            aboveEdges.push(edge);
                                        }
                                    }
                                }

                                // differentiated sum of lengths based on only moving one node over one axis
                                var getFx = function getFx(point, edges) {
                                    var sum = 0;
                                    for (var _i2 = 0; _i2 < edges.length; _i2++) {
                                        if (referenceNodes[edges[_i2].id] !== undefined) {
                                            var a = _this3._getPositionForHierarchy(referenceNodes[edges[_i2].id]) - point;
                                            sum += a / Math.sqrt(a * a + C2);
                                        }
                                    }
                                    return sum;
                                };

                                // doubly differentiated sum of lengths based on only moving one node over one axis
                                var getDFx = function getDFx(point, edges) {
                                    var sum = 0;
                                    for (var _i3 = 0; _i3 < edges.length; _i3++) {
                                        if (referenceNodes[edges[_i3].id] !== undefined) {
                                            var a = _this3._getPositionForHierarchy(referenceNodes[edges[_i3].id]) - point;
                                            sum -= C2 * Math.pow(a * a + C2, -1.5);
                                        }
                                    }
                                    return sum;
                                };

                                var getGuess = function getGuess(iterations, edges) {
                                    var guess = _this3._getPositionForHierarchy(node);
                                    // Newton's method for optimization
                                    var guessMap = {};
                                    for (var _i4 = 0; _i4 < iterations; _i4++) {
                                        var fx = getFx(guess, edges);
                                        var dfx = getDFx(guess, edges);

                                        // we limit the movement to avoid instability.
                                        var limit = 40;
                                        var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
                                        guess = guess - ratio;
                                        // reduce duplicates
                                        if (guessMap[guess] !== undefined) {
                                            break;
                                        }
                                        guessMap[guess] = _i4;
                                    }
                                    return guess;
                                };

                                var moveBranch = function moveBranch(guess) {
                                    // position node if there is space
                                    var nodePosition = _this3._getPositionForHierarchy(node);

                                    // check movable area of the branch
                                    if (branches[node.id] === undefined) {
                                        var branchNodes = {};
                                        getBranchNodes(node, branchNodes);
                                        branches[node.id] = branchNodes;
                                    }

                                    var _getBranchBoundary5 = getBranchBoundary(branches[node.id]),
                                        _getBranchBoundary6 = (0, _slicedToArray3['default'])(_getBranchBoundary5, 4),
                                        minBranch = _getBranchBoundary6[0],
                                        maxBranch = _getBranchBoundary6[1],
                                        minSpaceBranch = _getBranchBoundary6[2],
                                        maxSpaceBranch = _getBranchBoundary6[3];

                                    var diff = guess - nodePosition;

                                    // check if we are allowed to move the node:
                                    var branchOffset = 0;
                                    if (diff > 0) {
                                        branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);
                                    } else if (diff < 0) {
                                        branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);
                                    }

                                    if (branchOffset != 0) {
                                        //console.log("moving branch:",branchOffset, maxSpaceBranch, minSpaceBranch)
                                        _this3._shiftBlock(node.id, branchOffset);
                                        //this.body.emitter.emit("_redraw");
                                        stillShifting = true;
                                    }
                                };

                                var moveNode = function moveNode(guess) {
                                    var nodePosition = _this3._getPositionForHierarchy(node);

                                    // position node if there is space

                                    var _getSpaceAroundNode4 = _this3._getSpaceAroundNode(node),
                                        _getSpaceAroundNode5 = (0, _slicedToArray3['default'])(_getSpaceAroundNode4, 2),
                                        minSpace = _getSpaceAroundNode5[0],
                                        maxSpace = _getSpaceAroundNode5[1];

                                    var diff = guess - nodePosition;
                                    // check if we are allowed to move the node:
                                    var newPosition = nodePosition;
                                    if (diff > 0) {
                                        newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess);
                                    } else if (diff < 0) {
                                        newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess);
                                    }

                                    if (newPosition !== nodePosition) {
                                        //console.log("moving Node:",diff, minSpace, maxSpace);
                                        _this3._setPositionForHierarchy(node, newPosition, undefined, true);
                                        //this.body.emitter.emit("_redraw");
                                        stillShifting = true;
                                    }
                                };

                                var guess = getGuess(iterations, aboveEdges);
                                moveBranch(guess);
                                guess = getGuess(iterations, allEdges);
                                moveNode(guess);
                                //})
                            };

                            // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
                            var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {
                                var levels = (0, _keys2['default'])(_this3.distributionOrdering);
                                levels = levels.reverse();
                                for (var i = 0; i < iterations; i++) {
                                    stillShifting = false;
                                    for (var j = 0; j < levels.length; j++) {
                                        var level = levels[j];
                                        var levelNodes = _this3.distributionOrdering[level];
                                        for (var k = 0; k < levelNodes.length; k++) {
                                            minimizeEdgeLength(1000, levelNodes[k]);
                                        }
                                    }
                                    if (stillShifting !== true) {
                                        //console.log("FINISHED minimizeEdgeLengthBottomUp IN " + i);
                                        break;
                                    }
                                }
                            };

                            // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
                            var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {
                                var levels = (0, _keys2['default'])(_this3.distributionOrdering);
                                levels = levels.reverse();
                                for (var i = 0; i < iterations; i++) {
                                    stillShifting = false;
                                    shiftElementsCloser(branchShiftCallback, levels, true);
                                    if (stillShifting !== true) {
                                        //console.log("FINISHED shiftBranchesCloserBottomUp IN " + (i+1));
                                        break;
                                    }
                                }
                            };

                            // center all parents
                            var centerAllParents = function centerAllParents() {
                                for (var nodeId in _this3.body.nodes) {
                                    if (_this3.body.nodes.hasOwnProperty(nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);
                                }
                            };

                            // center all parents
                            var centerAllParentsBottomUp = function centerAllParentsBottomUp() {
                                var levels = (0, _keys2['default'])(_this3.distributionOrdering);
                                levels = levels.reverse();
                                for (var i = 0; i < levels.length; i++) {
                                    var level = levels[i];
                                    var levelNodes = _this3.distributionOrdering[level];
                                    for (var j = 0; j < levelNodes.length; j++) {
                                        _this3._centerParent(levelNodes[j]);
                                    }
                                }
                            };

                            // the actual work is done here.
                            if (this.options.hierarchical.blockShifting === true) {
                                shiftBranchesCloserBottomUp(5);
                                centerAllParents();
                            }

                            // minimize edge length
                            if (this.options.hierarchical.edgeMinimization === true) {
                                minimizeEdgeLengthBottomUp(20);
                            }

                            if (this.options.hierarchical.parentCentralization === true) {
                                centerAllParentsBottomUp();
                            }

                            shiftTrees();
                        }

                        /**
                         * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
                         * This is used to only get the distances to nodes outside of a branch.
                         * @param node
                         * @param map
                         * @returns {*[]}
                         * @private
                         */

                    }, {
                        key: '_getSpaceAroundNode',
                        value: function _getSpaceAroundNode(node, map) {
                            var useMap = true;
                            if (map === undefined) {
                                useMap = false;
                            }
                            var level = this.hierarchical.levels[node.id];
                            if (level !== undefined) {
                                var index = this.distributionIndex[node.id];
                                var position = this._getPositionForHierarchy(node);
                                var minSpace = 1e9;
                                var maxSpace = 1e9;
                                if (index !== 0) {
                                    var prevNode = this.distributionOrdering[level][index - 1];
                                    if (useMap === true && map[prevNode.id] === undefined || useMap === false) {
                                        var prevPos = this._getPositionForHierarchy(prevNode);
                                        minSpace = position - prevPos;
                                    }
                                }

                                if (index != this.distributionOrdering[level].length - 1) {
                                    var nextNode = this.distributionOrdering[level][index + 1];
                                    if (useMap === true && map[nextNode.id] === undefined || useMap === false) {
                                        var nextPos = this._getPositionForHierarchy(nextNode);
                                        maxSpace = Math.min(maxSpace, nextPos - position);
                                    }
                                }

                                return [minSpace, maxSpace];
                            } else {
                                return [0, 0];
                            }
                        }

                        /**
                         * We use this method to center a parent node and check if it does not cross other nodes when it does.
                         * @param node
                         * @private
                         */

                    }, {
                        key: '_centerParent',
                        value: function _centerParent(node) {
                            if (this.hierarchical.parentReference[node.id]) {
                                var parents = this.hierarchical.parentReference[node.id];
                                for (var i = 0; i < parents.length; i++) {
                                    var parentId = parents[i];
                                    var parentNode = this.body.nodes[parentId];
                                    if (this.hierarchical.childrenReference[parentId]) {
                                        // get the range of the children
                                        var minPos = 1e9;
                                        var maxPos = -1e9;
                                        var children = this.hierarchical.childrenReference[parentId];
                                        if (children.length > 0) {
                                            for (var _i5 = 0; _i5 < children.length; _i5++) {
                                                var childNode = this.body.nodes[children[_i5]];
                                                minPos = Math.min(minPos, this._getPositionForHierarchy(childNode));
                                                maxPos = Math.max(maxPos, this._getPositionForHierarchy(childNode));
                                            }
                                        }

                                        var position = this._getPositionForHierarchy(parentNode);

                                        var _getSpaceAroundNode6 = this._getSpaceAroundNode(parentNode),
                                            _getSpaceAroundNode7 = (0, _slicedToArray3['default'])(_getSpaceAroundNode6, 2),
                                            minSpace = _getSpaceAroundNode7[0],
                                            maxSpace = _getSpaceAroundNode7[1];

                                        var newPosition = 0.5 * (minPos + maxPos);
                                        var diff = position - newPosition;
                                        if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
                                            this._setPositionForHierarchy(parentNode, newPosition, undefined, true);
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * This function places the nodes on the canvas based on the hierarchial distribution.
                         *
                         * @param {Object} distribution | obtained by the function this._getDistribution()
                         * @private
                         */

                    }, {
                        key: '_placeNodesByHierarchy',
                        value: function _placeNodesByHierarchy(distribution) {
                            this.positionedNodes = {};
                            // start placing all the level 0 nodes first. Then recursively position their branches.
                            for (var level in distribution) {
                                if (distribution.hasOwnProperty(level)) {
                                    // sort nodes in level by position:
                                    var nodeArray = (0, _keys2['default'])(distribution[level]);
                                    nodeArray = this._indexArrayToNodes(nodeArray);
                                    this._sortNodeArray(nodeArray);
                                    var handledNodeCount = 0;

                                    for (var i = 0; i < nodeArray.length; i++) {
                                        var node = nodeArray[i];
                                        if (this.positionedNodes[node.id] === undefined) {
                                            var pos = this.options.hierarchical.nodeSpacing * handledNodeCount;
                                            // we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
                                            if (handledNodeCount > 0) {
                                                pos = this._getPositionForHierarchy(nodeArray[i - 1]) + this.options.hierarchical.nodeSpacing;
                                            }
                                            this._setPositionForHierarchy(node, pos, level);
                                            this._validatePositionAndContinue(node, level, pos);

                                            handledNodeCount++;
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
                         * on a X position that ensures there will be no overlap.
                         *
                         * @param parentId
                         * @param parentLevel
                         * @private
                         */

                    }, {
                        key: '_placeBranchNodes',
                        value: function _placeBranchNodes(parentId, parentLevel) {
                            // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.
                            if (this.hierarchical.childrenReference[parentId] === undefined) {
                                return;
                            }

                            // get a list of childNodes
                            var childNodes = [];
                            for (var i = 0; i < this.hierarchical.childrenReference[parentId].length; i++) {
                                childNodes.push(this.body.nodes[this.hierarchical.childrenReference[parentId][i]]);
                            }

                            // use the positions to order the nodes.
                            this._sortNodeArray(childNodes);

                            // position the childNodes
                            for (var _i6 = 0; _i6 < childNodes.length; _i6++) {
                                var childNode = childNodes[_i6];
                                var childNodeLevel = this.hierarchical.levels[childNode.id];
                                // check if the child node is below the parent node and if it has already been positioned.
                                if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {
                                    // get the amount of space required for this node. If parent the width is based on the amount of children.
                                    var pos = void 0;

                                    // we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
                                    if (_i6 === 0) {
                                        pos = this._getPositionForHierarchy(this.body.nodes[parentId]);
                                    } else {
                                        pos = this._getPositionForHierarchy(childNodes[_i6 - 1]) + this.options.hierarchical.nodeSpacing;
                                    }
                                    this._setPositionForHierarchy(childNode, pos, childNodeLevel);
                                    this._validatePositionAndContinue(childNode, childNodeLevel, pos);
                                } else {
                                    return;
                                }
                            }

                            // center the parent nodes.
                            var minPos = 1e9;
                            var maxPos = -1e9;
                            for (var _i7 = 0; _i7 < childNodes.length; _i7++) {
                                var childNodeId = childNodes[_i7].id;
                                minPos = Math.min(minPos, this._getPositionForHierarchy(this.body.nodes[childNodeId]));
                                maxPos = Math.max(maxPos, this._getPositionForHierarchy(this.body.nodes[childNodeId]));
                            }
                            this._setPositionForHierarchy(this.body.nodes[parentId], 0.5 * (minPos + maxPos), parentLevel);
                        }

                        /**
                         * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
                         * Finally it will call _placeBranchNodes to place the branch nodes.
                         * @param node
                         * @param level
                         * @param pos
                         * @private
                         */

                    }, {
                        key: '_validatePositionAndContinue',
                        value: function _validatePositionAndContinue(node, level, pos) {
                            // This only works for strict hierarchical networks, i.e. trees and forests
                            // Early exit if this is not the case
                            if (!this.hierarchical.isTree) return;

                            // if overlap has been detected, we shift the branch
                            if (this.lastNodeOnLevel[level] !== undefined) {
                                var previousPos = this._getPositionForHierarchy(this.body.nodes[this.lastNodeOnLevel[level]]);
                                if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
                                    var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
                                    var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
                                    this._shiftBlock(sharedParent.withChild, diff);
                                }
                            }

                            // store change in position.
                            this.lastNodeOnLevel[level] = node.id;

                            this.positionedNodes[node.id] = true;

                            this._placeBranchNodes(node.id, level);
                        }

                        /**
                         * Receives an array with node indices and returns an array with the actual node references. Used for sorting based on
                         * node properties.
                         * @param idArray
                         */

                    }, {
                        key: '_indexArrayToNodes',
                        value: function _indexArrayToNodes(idArray) {
                            var array = [];
                            for (var i = 0; i < idArray.length; i++) {
                                array.push(this.body.nodes[idArray[i]]);
                            }
                            return array;
                        }

                        /**
                         * This function get the distribution of levels based on hubsize
                         *
                         * @returns {Object}
                         * @private
                         */

                    }, {
                        key: '_getDistribution',
                        value: function _getDistribution() {
                            var distribution = {};
                            var nodeId = void 0,
                                node = void 0;

                            // we fix Y because the hierarchy is vertical, we fix X so we do not give a node an x position for a second time.
                            // the fix of X is removed after the x value has been set.
                            for (nodeId in this.body.nodes) {
                                if (this.body.nodes.hasOwnProperty(nodeId)) {
                                    node = this.body.nodes[nodeId];
                                    var level = this.hierarchical.levels[nodeId] === undefined ? 0 : this.hierarchical.levels[nodeId];
                                    if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
                                        node.y = this.options.hierarchical.levelSeparation * level;
                                        node.options.fixed.y = true;
                                    } else {
                                        node.x = this.options.hierarchical.levelSeparation * level;
                                        node.options.fixed.x = true;
                                    }
                                    if (distribution[level] === undefined) {
                                        distribution[level] = {};
                                    }
                                    distribution[level][nodeId] = node;
                                }
                            }
                            return distribution;
                        }

                        /**
                         * Get the hubsize from all remaining unlevelled nodes.
                         *
                         * @returns {number}
                         * @private
                         */

                    }, {
                        key: '_getHubSize',
                        value: function _getHubSize() {
                            var hubSize = 0;
                            for (var nodeId in this.body.nodes) {
                                if (this.body.nodes.hasOwnProperty(nodeId)) {
                                    var node = this.body.nodes[nodeId];
                                    if (this.hierarchical.levels[nodeId] === undefined) {
                                        hubSize = node.edges.length < hubSize ? hubSize : node.edges.length;
                                    }
                                }
                            }
                            return hubSize;
                        }

                        /**
                         * this function allocates nodes in levels based on the recursive branching from the largest hubs.
                         *
                         * @param hubsize
                         * @private
                         */

                    }, {
                        key: '_determineLevelsByHubsize',
                        value: function _determineLevelsByHubsize() {
                            var _this4 = this;

                            var hubSize = 1;

                            var levelDownstream = function levelDownstream(nodeA, nodeB) {
                                _this4.hierarchical.levelDownstream(nodeA, nodeB);
                            };

                            while (hubSize > 0) {
                                // determine hubs
                                hubSize = this._getHubSize();
                                if (hubSize === 0) break;

                                for (var nodeId in this.body.nodes) {
                                    if (this.body.nodes.hasOwnProperty(nodeId)) {
                                        var node = this.body.nodes[nodeId];
                                        if (node.edges.length === hubSize) {
                                            this._crawlNetwork(levelDownstream, nodeId);
                                        }
                                    }
                                }
                            }
                        }

                        /**
                         * TODO: release feature
                         * TODO: Determine if this feature is needed at all
                         *
                         * @private
                         */

                    }, {
                        key: '_determineLevelsCustomCallback',
                        value: function _determineLevelsCustomCallback() {
                            var _this5 = this;

                            var minLevel = 100000;

                            // TODO: this should come from options.
                            var customCallback = function customCallback(nodeA, nodeB, edge) {};

                            // TODO: perhaps move to HierarchicalStatus.
                            //       But I currently don't see the point, this method is not used.
                            var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
                                var levelA = _this5.hierarchical.levels[nodeA.id];
                                // set initial level
                                if (levelA === undefined) {
                                    _this5.hierarchical.levels[nodeA.id] = minLevel;
                                }

                                var diff = customCallback(NetworkUtil.cloneOptions(nodeA, 'node'), NetworkUtil.cloneOptions(nodeB, 'node'), NetworkUtil.cloneOptions(edge, 'edge'));

                                _this5.hierarchical.levels[nodeB.id] = _this5.hierarchical.levels[nodeA.id] + diff;
                            };

                            this._crawlNetwork(levelByDirection);
                            this.hierarchical.setMinLevelToZero(this.body.nodes);
                        }

                        /**
                         * this function allocates nodes in levels based on the direction of the edges
                         *
                         * @param hubsize
                         * @private
                         */

                    }, {
                        key: '_determineLevelsDirected',
                        value: function _determineLevelsDirected() {
                            var _this6 = this;

                            var minLevel = 10000;

                            var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
                                var levelA = _this6.hierarchical.levels[nodeA.id];
                                // set initial level
                                if (levelA === undefined) {
                                    _this6.hierarchical.levels[nodeA.id] = minLevel;
                                }
                                if (edge.toId == nodeB.id) {
                                    _this6.hierarchical.levels[nodeB.id] = _this6.hierarchical.levels[nodeA.id] + 1;
                                } else {
                                    _this6.hierarchical.levels[nodeB.id] = _this6.hierarchical.levels[nodeA.id] - 1;
                                }
                            };

                            this._crawlNetwork(levelByDirection);
                            this.hierarchical.setMinLevelToZero(this.body.nodes);
                        }

                        /**
                         * Update the bookkeeping of parent and child.
                         * @private
                         */

                    }, {
                        key: '_generateMap',
                        value: function _generateMap() {
                            var _this7 = this;

                            var fillInRelations = function fillInRelations(parentNode, childNode) {
                                if (_this7.hierarchical.levels[childNode.id] > _this7.hierarchical.levels[parentNode.id]) {
                                    _this7.hierarchical.addRelation(parentNode.id, childNode.id);
                                }
                            };

                            this._crawlNetwork(fillInRelations);
                            this.hierarchical.checkIfTree();
                        }

                        /**
                         * Crawl over the entire network and use a callback on each node couple that is connected to each other.
                         * @param callback          | will receive nodeA nodeB and the connecting edge. A and B are unique.
                         * @param startingNodeId
                         * @private
                         */

                    }, {
                        key: '_crawlNetwork',
                        value: function _crawlNetwork() {
                            var _this8 = this;

                            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function() {};
                            var startingNodeId = arguments[1];

                            var progress = {};
                            var treeIndex = 0;

                            var crawler = function crawler(node, tree) {
                                if (progress[node.id] === undefined) {

                                    if (_this8.hierarchical.trees[node.id] === undefined) {
                                        _this8.hierarchical.trees[node.id] = tree;
                                        _this8.treeIndex = Math.max(tree, _this8.treeIndex);
                                    }

                                    progress[node.id] = true;
                                    var childNode = void 0;
                                    for (var i = 0; i < node.edges.length; i++) {
                                        if (node.edges[i].connected === true) {
                                            if (node.edges[i].toId === node.id) {
                                                childNode = node.edges[i].from;
                                            } else {
                                                childNode = node.edges[i].to;
                                            }

                                            if (node.id !== childNode.id) {
                                                callback(node, childNode, node.edges[i]);
                                                crawler(childNode, tree);
                                            }
                                        }
                                    }
                                }
                            };

                            // we can crawl from a specific node or over all nodes.
                            if (startingNodeId === undefined) {
                                for (var i = 0; i < this.body.nodeIndices.length; i++) {
                                    var node = this.body.nodes[this.body.nodeIndices[i]];
                                    if (progress[node.id] === undefined) {
                                        crawler(node, treeIndex);
                                        treeIndex += 1;
                                    }
                                }
                            } else {
                                var _node = this.body.nodes[startingNodeId];
                                if (_node === undefined) {
                                    console.error("Node not found:", startingNodeId);
                                    return;
                                }
                                crawler(_node);
                            }
                        }

                        /**
                         * Shift a branch a certain distance
                         * @param parentId
                         * @param diff
                         * @private
                         */

                    }, {
                        key: '_shiftBlock',
                        value: function _shiftBlock(parentId, diff) {
                            var _this9 = this;

                            var progress = {};
                            var shifter = function shifter(parentId) {
                                if (progress[parentId]) {
                                    return;
                                }
                                progress[parentId] = true;
                                if (_this9.options.hierarchical.direction === 'UD' || _this9.options.hierarchical.direction === 'DU') {
                                    _this9.body.nodes[parentId].x += diff;
                                } else {
                                    _this9.body.nodes[parentId].y += diff;
                                }
                                if (_this9.hierarchical.childrenReference[parentId] !== undefined) {
                                    for (var i = 0; i < _this9.hierarchical.childrenReference[parentId].length; i++) {
                                        shifter(_this9.hierarchical.childrenReference[parentId][i]);
                                    }
                                }
                            };
                            shifter(parentId);
                        }

                        /**
                         * Find a common parent between branches.
                         * @param childA
                         * @param childB
                         * @returns {{foundParent, withChild}}
                         * @private
                         */

                    }, {
                        key: '_findCommonParent',
                        value: function _findCommonParent(childA, childB) {
                            var _this10 = this;

                            var parents = {};
                            var iterateParents = function iterateParents(parents, child) {
                                if (_this10.hierarchical.parentReference[child] !== undefined) {
                                    for (var i = 0; i < _this10.hierarchical.parentReference[child].length; i++) {
                                        var parent = _this10.hierarchical.parentReference[child][i];
                                        parents[parent] = true;
                                        iterateParents(parents, parent);
                                    }
                                }
                            };
                            var findParent = function findParent(parents, child) {
                                if (_this10.hierarchical.parentReference[child] !== undefined) {
                                    for (var i = 0; i < _this10.hierarchical.parentReference[child].length; i++) {
                                        var parent = _this10.hierarchical.parentReference[child][i];
                                        if (parents[parent] !== undefined) {
                                            return { foundParent: parent, withChild: child };
                                        }
                                        var branch = findParent(parents, parent);
                                        if (branch.foundParent !== null) {
                                            return branch;
                                        }
                                    }
                                }
                                return { foundParent: null, withChild: child };
                            };

                            iterateParents(parents, childA);
                            return findParent(parents, childB);
                        }

                        /**
                         * Abstract the getting of the position so we won't have to repeat the check for direction all the time
                         * @param node
                         * @param position
                         * @param level
                         * @private
                         */

                    }, {
                        key: '_setPositionForHierarchy',
                        value: function _setPositionForHierarchy(node, position, level) {
                            var doNotUpdate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                            //console.log('_setPositionForHierarchy',node.id, position)
                            if (doNotUpdate !== true) {
                                if (this.distributionOrdering[level] === undefined) {
                                    this.distributionOrdering[level] = [];
                                    this.distributionOrderingPresence[level] = {};
                                }

                                if (this.distributionOrderingPresence[level][node.id] === undefined) {
                                    this.distributionOrdering[level].push(node);
                                    this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
                                }
                                this.distributionOrderingPresence[level][node.id] = true;
                            }

                            if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
                                node.x = position;
                            } else {
                                node.y = position;
                            }
                        }

                        /**
                         * Utility function to cut down on typing this all the time.
                         *
                         * TODO: use this in all applicable situations in this class.
                         *
                         * @private
                         */

                    }, {
                        key: '_isVertical',
                        value: function _isVertical() {
                            return this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU';
                        }

                        /**
                         * Abstract the getting of the position of a node so we do not have to repeat the direction check all the time.
                         * @param node
                         * @returns {number|*}
                         * @private
                         */

                    }, {
                        key: '_getPositionForHierarchy',
                        value: function _getPositionForHierarchy(node) {
                            if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
                                return node.x;
                            } else {
                                return node.y;
                            }
                        }

                        /**
                         * Use the x or y value to sort the array, allowing users to specify order.
                         * @param nodeArray
                         * @private
                         */

                    }, {
                        key: '_sortNodeArray',
                        value: function _sortNodeArray(nodeArray) {
                            if (nodeArray.length > 1) {
                                if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
                                    nodeArray.sort(function(a, b) {
                                        return a.x - b.x;
                                    });
                                } else {
                                    nodeArray.sort(function(a, b) {
                                        return a.y - b.y;
                                    });
                                }
                            }
                        }
                    }]);
                    return LayoutEngine;
                }();

                exports['default'] = LayoutEngine;

                /***/
            }),
            /* 228 */
            /***/
            (function(module, exports, __webpack_require__) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _keys = __webpack_require__(58);

                var _keys2 = _interopRequireDefault(_keys);

                var _stringify = __webpack_require__(90);

                var _stringify2 = _interopRequireDefault(_stringify);

                var _typeof2 = __webpack_require__(62);

                var _typeof3 = _interopRequireDefault(_typeof2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

                var util = __webpack_require__(1);
                var Hammer = __webpack_require__(112);
                var hammerUtil = __webpack_require__(119);

                /**
                 * clears the toolbar div element of children
                 *
                 * @private
                 */

                var ManipulationSystem = function() {
                    function ManipulationSystem(body, canvas, selectionHandler) {
                        var _this = this;

                        (0, _classCallCheck3['default'])(this, ManipulationSystem);

                        this.body = body;
                        this.canvas = canvas;
                        this.selectionHandler = selectionHandler;

                        this.editMode = false;
                        this.manipulationDiv = undefined;
                        this.editModeDiv = undefined;
                        this.closeDiv = undefined;

                        this.manipulationHammers = [];
                        this.temporaryUIFunctions = {};
                        this.temporaryEventFunctions = [];

                        this.touchTime = 0;
                        this.temporaryIds = { nodes: [], edges: [] };
                        this.guiEnabled = false;
                        this.inMode = false;
                        this.selectedControlNode = undefined;

                        this.options = {};
                        this.defaultOptions = {
                            enabled: false,
                            initiallyActive: false,
                            addNode: true,
                            addEdge: true,
                            editNode: undefined,
                            editEdge: true,
                            deleteNode: true,
                            deleteEdge: true,
                            controlNodeStyle: {
                                shape: 'dot',
                                size: 6,
                                color: { background: '#ff0000', border: '#3c3c3c', highlight: { background: '#07f968', border: '#3c3c3c' } },
                                borderWidth: 2,
                                borderWidthSelected: 2
                            }
                        };
                        util.extend(this.options, this.defaultOptions);

                        this.body.emitter.on('destroy', function() {
                            _this._clean();
                        });
                        this.body.emitter.on('_dataChanged', this._restore.bind(this));
                        this.body.emitter.on('_resetData', this._restore.bind(this));
                    }

                    /**
                     * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
                     * @private
                     */


                    (0, _createClass3['default'])(ManipulationSystem, [{
                        key: '_restore',
                        value: function _restore() {
                            if (this.inMode !== false) {
                                if (this.options.initiallyActive === true) {
                                    this.enableEditMode();
                                } else {
                                    this.disableEditMode();
                                }
                            }
                        }

                        /**
                         * Set the Options
                         * @param options
                         */

                    }, {
                        key: 'setOptions',
                        value: function setOptions(options, allOptions, globalOptions) {
                            if (allOptions !== undefined) {
                                if (allOptions.locale !== undefined) {
                                    this.options.locale = allOptions.locale;
                                } else {
                                    this.options.locale = globalOptions.locale;
                                }
                                if (allOptions.locales !== undefined) {
                                    this.options.locales = allOptions.locales;
                                } else {
                                    this.options.locales = globalOptions.locales;
                                }
                            }

                            if (options !== undefined) {
                                if (typeof options === 'boolean') {
                                    this.options.enabled = options;
                                } else {
                                    this.options.enabled = true;
                                    util.deepExtend(this.options, options);
                                }
                                if (this.options.initiallyActive === true) {
                                    this.editMode = true;
                                }
                                this._setup();
                            }
                        }

                        /**
                         * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
                         *
                         * @private
                         */

                    }, {
                        key: 'toggleEditMode',
                        value: function toggleEditMode() {
                            if (this.editMode === true) {
                                this.enableEditMode();
                            } else {
                                this.enableEditMode();
                            }
                        }
                    }, {
                        key: 'enableEditMode',
                        value: function enableEditMode() {
                            this.editMode = true;

                            this._clean();
                            if (this.guiEnabled === true) {
                                this.manipulationDiv.style.display = 'block';
                                this.closeDiv.style.display = 'block';
                                this.editModeDiv.style.display = 'none';
                                this.showManipulatorToolbar();
                            }
                        }
                    }, {
                        key: 'disableEditMode',
                        value: function disableEditMode() {
                            this.editMode = false;

                            this._clean();
                            if (this.guiEnabled === true) {
                                this.manipulationDiv.style.display = 'none';
                                this.closeDiv.style.display = 'none';
                                this.editModeDiv.style.display = 'block';
                                // this._createEditButton(); //hoge Editのボタン
                                this.showManipulatorToolbar(); //Add Stateのボタン
                            }
                        }

                        /**
                         * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
                         *
                         * @private
                         */

                    }, {
                        key: 'showManipulatorToolbar',
                        value: function showManipulatorToolbar() {
                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();

                            // reset global variables
                            this.manipulationDOM = {};

                            // if the gui is enabled, draw all elements.
                            if (this.guiEnabled === true) {
                                // a _restore will hide these menus
                                this.editMode = true;
                                this.manipulationDiv.style.display = 'block';
                                this.closeDiv.style.display = 'block';

                                var selectedNodeCount = this.selectionHandler._getSelectedNodeCount();
                                var selectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
                                var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
                                var locale = this.options.locales[this.options.locale];
                                var needSeperator = false;

                                if (this.options.addNode !== false) {
                                    this._createAddNodeButton(locale);
                                    needSeperator = true;
                                }
                                if (this.options.addEdge !== false) {
                                    if (needSeperator === true) {
                                        this._createSeperator(1);
                                    } else {
                                        needSeperator = true;
                                    }
                                    this._createAddEdgeButton(locale);
                                }

                                if (selectedNodeCount === 1 && typeof this.options.editNode === 'function') {
                                    if (needSeperator === true) {
                                        this._createSeperator(2);
                                    } else {
                                        needSeperator = true;
                                    }
                                    this._createEditNodeButton(locale);
                                } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
                                    if (needSeperator === true) {
                                        this._createSeperator(3);
                                    } else {
                                        needSeperator = true;
                                    }
                                    this._createEditEdgeButton(locale);
                                }

                                // remove buttons
                                //hoge deletebuttonをclickで出す
                                if (selectedTotalCount !== 0) {
                                    if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
                                        if (needSeperator === true) {
                                            this._createSeperator(4);
                                        }
                                        this._createDeleteButton(locale);
                                    } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
                                        if (needSeperator === true) {
                                            this._createSeperator(4);
                                        }
                                        this._createDeleteButton(locale);
                                    }
                                }
                                //hoge 常にdeletebuttonを出す
                                // this._createDeleteButton(locale); //hoge

                                // bind the close button
                                this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));

                                // refresh this bar based on what has been selected
                                this._temporaryBindEvent('select', this.showManipulatorToolbar.bind(this));
                            }

                            // redraw to show any possible changes
                            this.body.emitter.emit('_redraw');

                            $('.vis-button_textarea').remove(); //hoge
                            inputTextArea4Agent(); //hoge
                            inputTextArea4Agent_kripke(); //hoge
                            backup2manipulation();
                            backup2manipulation_kripke();
                        }

                        /**
                         * Create the toolbar for adding Nodes
                         */

                    }, {
                        key: 'addNodeMode',
                        value: function addNodeMode() {
                            // when using the gui, enable edit mode if it wasnt already.
                            if (this.editMode !== true) {
                                this.enableEditMode();
                            }

                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();

                            this.inMode = 'addNode';
                            if (this.guiEnabled === true) {
                                var locale = this.options.locales[this.options.locale];
                                this.manipulationDOM = {};
                                this._createBackButton(locale);
                                this._createSeperator();
                                this._createDescription(locale['addDescription'] || this.options.locales['en']['addDescription']);

                                // bind the close button
                                this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
                            }

                            this._temporaryBindEvent('click', this._performAddNode.bind(this));
                        }

                        /**
                         * call the bound function to handle the editing of the node. The node has to be selected.
                         */

                    }, {
                        key: 'editNode',
                        value: function editNode() {
                            var _this2 = this;

                            // when using the gui, enable edit mode if it wasnt already.
                            if (this.editMode !== true) {
                                this.enableEditMode();
                            }

                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();
                            var node = this.selectionHandler._getSelectedNode();
                            if (node !== undefined) {
                                this.inMode = 'editNode';
                                if (typeof this.options.editNode === 'function') {
                                    if (node.isCluster !== true) {
                                        var data = util.deepExtend({}, node.options, false);
                                        data.x = node.x;
                                        data.y = node.y;

                                        if (this.options.editNode.length === 2) {
                                            this.options.editNode(data, function(finalizedData) {
                                                if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === 'editNode') {
                                                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                                                    _this2.body.data.nodes.getDataSet().update(finalizedData);
                                                }
                                                _this2.showManipulatorToolbar();
                                            });
                                        } else {
                                            throw new Error('The function for edit does not support two arguments (data, callback)');
                                        }
                                    } else {
                                        alert(this.options.locales[this.options.locale]['editClusterError'] || this.options.locales['en']['editClusterError']);
                                    }
                                } else {
                                    throw new Error('No function has been configured to handle the editing of nodes.');
                                }
                            } else {
                                this.showManipulatorToolbar();
                            }
                        }

                        /**
                         * create the toolbar to connect nodes
                         */

                    }, {
                        key: 'addEdgeMode',
                        value: function addEdgeMode() {
                            // when using the gui, enable edit mode if it wasnt already.
                            if (this.editMode !== true) {
                                this.enableEditMode();
                            }

                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();

                            this.inMode = 'addEdge';
                            if (this.guiEnabled === true) {
                                var locale = this.options.locales[this.options.locale];
                                this.manipulationDOM = {};
                                this._createBackButton(locale);
                                this._createSeperator();
                                this._createDescription(locale['edgeDescription'] || this.options.locales['en']['edgeDescription']);

                                // bind the close button
                                this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
                            }

                            // temporarily overload functions
                            this._temporaryBindUI('onTouch', this._handleConnect.bind(this));
                            this._temporaryBindUI('onDragEnd', this._finishConnect.bind(this));
                            this._temporaryBindUI('onDrag', this._dragControlNode.bind(this));
                            this._temporaryBindUI('onRelease', this._finishConnect.bind(this));

                            this._temporaryBindUI('onDragStart', function() {});
                            this._temporaryBindUI('onHold', function() {});
                        }

                        /**
                         * create the toolbar to edit edges
                         */

                    }, {
                        key: 'editEdgeMode',
                        value: function editEdgeMode() {
                            // when using the gui, enable edit mode if it wasn't already.
                            if (this.editMode !== true) {
                                this.enableEditMode();
                            }

                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();

                            this.inMode = 'editEdge';
                            if ((0, _typeof3['default'])(this.options.editEdge) === 'object' && typeof this.options.editEdge.editWithoutDrag === "function") {
                                this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
                                if (this.edgeBeingEditedId !== undefined) {
                                    var edge = this.body.edges[this.edgeBeingEditedId];
                                    this._performEditEdge(edge.from, edge.to);
                                    return;
                                }
                            }
                            if (this.guiEnabled === true) {
                                var locale = this.options.locales[this.options.locale];
                                this.manipulationDOM = {};
                                this._createBackButton(locale);
                                this._createSeperator();
                                this._createDescription(locale['editEdgeDescription'] || this.options.locales['en']['editEdgeDescription']);

                                // bind the close button
                                this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
                            }

                            this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
                            if (this.edgeBeingEditedId !== undefined) {
                                var _edge = this.body.edges[this.edgeBeingEditedId];

                                // create control nodes
                                var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);
                                var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);

                                this.temporaryIds.nodes.push(controlNodeFrom.id);
                                this.temporaryIds.nodes.push(controlNodeTo.id);

                                this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
                                this.body.nodeIndices.push(controlNodeFrom.id);
                                this.body.nodes[controlNodeTo.id] = controlNodeTo;
                                this.body.nodeIndices.push(controlNodeTo.id);

                                // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI
                                this._temporaryBindUI('onTouch', this._controlNodeTouch.bind(this)); // used to get the position
                                this._temporaryBindUI('onTap', function() {}); // disabled
                                this._temporaryBindUI('onHold', function() {}); // disabled
                                this._temporaryBindUI('onDragStart', this._controlNodeDragStart.bind(this)); // used to select control node
                                this._temporaryBindUI('onDrag', this._controlNodeDrag.bind(this)); // used to drag control node
                                this._temporaryBindUI('onDragEnd', this._controlNodeDragEnd.bind(this)); // used to connect or revert control nodes
                                this._temporaryBindUI('onMouseMove', function() {}); // disabled

                                // create function to position control nodes correctly on movement
                                // automatically cleaned up because we use the temporary bind
                                this._temporaryBindEvent('beforeDrawing', function(ctx) {
                                    var positions = _edge.edgeType.findBorderPositions(ctx);
                                    if (controlNodeFrom.selected === false) {
                                        controlNodeFrom.x = positions.from.x;
                                        controlNodeFrom.y = positions.from.y;
                                    }
                                    if (controlNodeTo.selected === false) {
                                        controlNodeTo.x = positions.to.x;
                                        controlNodeTo.y = positions.to.y;
                                    }
                                });

                                this.body.emitter.emit('_redraw');
                            } else {
                                this.showManipulatorToolbar();
                            }
                        }

                        /**
                         * delete everything in the selection
                         */

                    }, {
                        key: 'deleteSelected',
                        value: function deleteSelected() {
                            var _this3 = this;

                            // when using the gui, enable edit mode if it wasnt already.
                            if (this.editMode !== true) {
                                this.enableEditMode();
                            }

                            //hoge node delete
                            // console.log("nodes")
                            // console.log(ccc)
                            // console.log(edges);

                            // var ccc = this.selectionHandler.getSelectedNodes();
                            // var aaa = nodes;
                            // nodes.remove({ id: ccc });
                            // deleteNode2deleteEdges(ccc, edges)
                            // nodes2htmlDoamin(nodes);
                            // edges2html(edges);
                            // nodes2htmlPrecondition(nodes);

                            // restore the state of any bound functions or events, remove control nodes, restore physics
                            this._clean();

                            this.inMode = 'delete';
                            var selectedNodes = this.selectionHandler.getSelectedNodes();
                            var selectedEdges = this.selectionHandler.getSelectedEdges();
                            var deleteFunction = undefined;
                            if (selectedNodes.length > 0) {
                                for (var i = 0; i < selectedNodes.length; i++) {
                                    if (this.body.nodes[selectedNodes[i]].isCluster === true) {
                                        alert(this.options.locales[this.options.locale]['deleteClusterError'] || this.options.locales['en']['deleteClusterError']);
                                        return;
                                    }
                                }

                                if (typeof this.options.deleteNode === 'function') {
                                    deleteFunction = this.options.deleteNode;
                                }
                            } else if (selectedEdges.length > 0) {
                                if (typeof this.options.deleteEdge === 'function') {
                                    deleteFunction = this.options.deleteEdge;
                                }
                            }

                            // watchDeleteButtonClicked(); //piyo hoge
                            if (typeof deleteFunction === 'function') {

                                var data = { nodes: selectedNodes, edges: selectedEdges };
                                if (deleteFunction.length === 2) {
                                    deleteFunction(data, function(finalizedData) {
                                        if (finalizedData !== null && finalizedData !== undefined && _this3.inMode === 'delete') {
                                            // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                                            _this3.body.data.edges.getDataSet().remove(finalizedData.edges);
                                            _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);
                                            _this3.body.emitter.emit('startSimulation');
                                            _this3.showManipulatorToolbar();
                                        } else {
                                            _this3.body.emitter.emit('startSimulation');
                                            _this3.showManipulatorToolbar();
                                        }
                                    });
                                } else {
                                    throw new Error('The function for delete does not support two arguments (data, callback)');
                                }
                            } else {
                                this.body.data.edges.getDataSet().remove(selectedEdges);
                                this.body.data.nodes.getDataSet().remove(selectedNodes);
                                this.body.emitter.emit('startSimulation');
                                this.showManipulatorToolbar();
                            }
                        }

                        //********************************************** PRIVATE ***************************************//

                        /**
                         * draw or remove the DOM
                         * @private
                         */

                    }, {
                        key: '_setup',
                        value: function _setup() {
                            if (this.options.enabled === true) {
                                // Enable the GUI
                                this.guiEnabled = true;

                                this._createWrappers();
                                //          if (this.editMode === false) { //hoge
                                if (false) {
                                    this._createEditButton();
                                } else {
                                    this.showManipulatorToolbar();
                                }
                            } else {
                                this._removeManipulationDOM();

                                // disable the gui
                                this.guiEnabled = false;
                            }
                        }

                        /**
                         * create the div overlays that contain the DOM
                         * @private
                         */

                    }, {
                        key: '_createWrappers',
                        value: function _createWrappers() {
                            // load the manipulator HTML elements. All styling done in css.
                            if (this.manipulationDiv === undefined) {
                                this.manipulationDiv = document.createElement('div');
                                this.manipulationDiv.className = 'vis-manipulation';
                                if (this.editMode === true) {
                                    this.manipulationDiv.style.display = 'block';
                                } else {
                                    this.manipulationDiv.style.display = 'none';
                                }
                                this.canvas.frame.appendChild(this.manipulationDiv);
                            }

                            // container for the edit button.
                            if (this.editModeDiv === undefined) {
                                this.editModeDiv = document.createElement('div');
                                this.editModeDiv.className = 'vis-edit-mode';
                                if (this.editMode === true) {
                                    this.editModeDiv.style.display = 'none';
                                } else {
                                    this.editModeDiv.style.display = 'block';
                                }
                                this.canvas.frame.appendChild(this.editModeDiv);
                            }

                            // container for the close div button
                            if (this.closeDiv === undefined) {
                                this.closeDiv = document.createElement('div');
                                this.closeDiv.className = 'vis-close';
                                this.closeDiv.style.display = this.manipulationDiv.style.display;
                                this.canvas.frame.appendChild(this.closeDiv);
                            }
                        }

                        /**
                         * generate a new target node. Used for creating new edges and editing edges
                         * @param x
                         * @param y
                         * @returns {*}
                         * @private
                         */

                    }, {
                        key: '_getNewTargetNode',
                        value: function _getNewTargetNode(x, y) {
                            var controlNodeStyle = util.deepExtend({}, this.options.controlNodeStyle);

                            controlNodeStyle.id = 'targetNode' + util.randomUUID();
                            controlNodeStyle.hidden = false;
                            controlNodeStyle.physics = false;
                            controlNodeStyle.x = x;
                            controlNodeStyle.y = y;

                            // we have to define the bounding box in order for the nodes to be drawn immediately
                            var node = this.body.functions.createNode(controlNodeStyle);
                            node.shape.boundingBox = { left: x, right: x, top: y, bottom: y };

                            return node;
                        }

                        /**
                         * Create the edit button
                         */

                    }, {
                        key: '_createEditButton',
                        value: function _createEditButton() {
                            // restore everything to it's original state (if applicable)
                            this._clean();

                            // reset the manipulationDOM
                            this.manipulationDOM = {};

                            // empty the editModeDiv
                            util.recursiveDOMDelete(this.editModeDiv);

                            // create the contents for the editMode button
                            var locale = this.options.locales[this.options.locale];
                            var button = this._createButton('editMode', 'vis-button vis-edit vis-edit-mode', locale['edit'] || this.options.locales['en']['edit']);
                            this.editModeDiv.appendChild(button);

                            // bind a hammer listener to the button, calling the function toggleEditMode.
                            this._bindHammerToDiv(button, this.toggleEditMode.bind(this));
                        }

                        /**
                         * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
                         * @private
                         */

                    }, {
                        key: '_clean',
                        value: function _clean() {
                            // not in mode
                            this.inMode = false;

                            // _clean the divs
                            if (this.guiEnabled === true) {
                                util.recursiveDOMDelete(this.editModeDiv);
                                util.recursiveDOMDelete(this.manipulationDiv);

                                // removes all the bindings and overloads
                                this._cleanManipulatorHammers();
                            }

                            // remove temporary nodes and edges
                            this._cleanupTemporaryNodesAndEdges();

                            // restore overloaded UI functions
                            this._unbindTemporaryUIs();

                            // remove the temporaryEventFunctions
                            this._unbindTemporaryEvents();

                            // restore the physics if required
                            this.body.emitter.emit('restorePhysics');
                        }

                        /**
                         * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
                         * @private
                         */

                    }, {
                        key: '_cleanManipulatorHammers',
                        value: function _cleanManipulatorHammers() {
                            // _clean hammer bindings
                            if (this.manipulationHammers.length != 0) {
                                for (var i = 0; i < this.manipulationHammers.length; i++) {
                                    this.manipulationHammers[i].destroy();
                                }
                                this.manipulationHammers = [];
                            }
                        }

                        /**
                         * Remove all DOM elements created by this module.
                         * @private
                         */

                    }, {
                        key: '_removeManipulationDOM',
                        value: function _removeManipulationDOM() {
                            // removes all the bindings and overloads
                            this._clean();

                            // empty the manipulation divs
                            util.recursiveDOMDelete(this.manipulationDiv);
                            util.recursiveDOMDelete(this.editModeDiv);
                            util.recursiveDOMDelete(this.closeDiv);

                            // remove the manipulation divs
                            if (this.manipulationDiv) {
                                this.canvas.frame.removeChild(this.manipulationDiv);
                            }
                            if (this.editModeDiv) {
                                this.canvas.frame.removeChild(this.editModeDiv);
                            }
                            if (this.closeDiv) {
                                this.canvas.frame.removeChild(this.closeDiv);
                            }

                            // set the references to undefined
                            this.manipulationDiv = undefined;
                            this.editModeDiv = undefined;
                            this.closeDiv = undefined;
                        }

                        /**
                         * create a seperator line. the index is to differentiate in the manipulation dom
                         * @param index
                         * @private
                         */

                    }, {
                        key: '_createSeperator',
                        value: function _createSeperator() {
                            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                            this.manipulationDOM['seperatorLineDiv' + index] = document.createElement('div');
                            this.manipulationDOM['seperatorLineDiv' + index].className = 'vis-separator-line';
                            this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv' + index]);
                        }

                        // ----------------------    DOM functions for buttons    --------------------------//

                    }, {
                        key: '_createAddNodeButton',
                        value: function _createAddNodeButton(locale) {
                            var button = this._createButton('addNode', 'vis-button vis-add', locale['addNode'] || this.options.locales['en']['addNode']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.addNodeMode.bind(this));
                        }
                    }, {
                        key: '_createAddEdgeButton',
                        value: function _createAddEdgeButton(locale) {
                            var button = this._createButton('addEdge', 'vis-button vis-connect', locale['addEdge'] || this.options.locales['en']['addEdge']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.addEdgeMode.bind(this));
                        }
                    }, {
                        key: '_createEditNodeButton',
                        value: function _createEditNodeButton(locale) {
                            var button = this._createButton('editNode', 'vis-button vis-edit', locale['editNode'] || this.options.locales['en']['editNode']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.editNode.bind(this));
                        }
                    }, {
                        key: '_createEditEdgeButton',
                        value: function _createEditEdgeButton(locale) {
                            var button = this._createButton('editEdge', 'vis-button vis-edit', locale['editEdge'] || this.options.locales['en']['editEdge']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.editEdgeMode.bind(this));
                        }
                    }, {
                        key: '_createDeleteButton',
                        value: function _createDeleteButton(locale) {
                            if (this.options.rtl) {
                                var deleteBtnClass = 'vis-button vis-delete-rtl';
                            } else {
                                var deleteBtnClass = 'vis-button vis-delete';
                            }
                            var button = this._createButton('delete', deleteBtnClass, locale['del'] || this.options.locales['en']['del']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.deleteSelected.bind(this));
                        }
                    }, {
                        key: '_createBackButton',
                        value: function _createBackButton(locale) {
                            var button = this._createButton('back', 'vis-button vis-back', locale['back'] || this.options.locales['en']['back']);
                            this.manipulationDiv.appendChild(button);
                            this._bindHammerToDiv(button, this.showManipulatorToolbar.bind(this));
                        }
                    }, {
                        key: '_createButton',
                        value: function _createButton(id, className, label) {
                            var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'vis-label';


                            this.manipulationDOM[id + 'Div'] = document.createElement('div');
                            this.manipulationDOM[id + 'Div'].className = className;
                            this.manipulationDOM[id + 'Label'] = document.createElement('div');
                            this.manipulationDOM[id + 'Label'].className = labelClassName;
                            this.manipulationDOM[id + 'Label'].innerHTML = label;
                            this.manipulationDOM[id + 'Div'].appendChild(this.manipulationDOM[id + 'Label']);
                            return this.manipulationDOM[id + 'Div'];
                        }
                    }, {
                        key: '_createDescription',
                        value: function _createDescription(label) {
                            this.manipulationDiv.appendChild(this._createButton('description', 'vis-button vis-none', label));
                        }

                        // -------------------------- End of DOM functions for buttons ------------------------------//

                        /**
                         * this binds an event until cleanup by the clean functions.
                         * @param event
                         * @param newFunction
                         * @private
                         */

                    }, {
                        key: '_temporaryBindEvent',
                        value: function _temporaryBindEvent(event, newFunction) {
                            this.temporaryEventFunctions.push({ event: event, boundFunction: newFunction });
                            this.body.emitter.on(event, newFunction);
                        }

                        /**
                         * this overrides an UI function until cleanup by the clean function
                         * @param UIfunctionName
                         * @param newFunction
                         * @private
                         */

                    }, {
                        key: '_temporaryBindUI',
                        value: function _temporaryBindUI(UIfunctionName, newFunction) {
                            if (this.body.eventListeners[UIfunctionName] !== undefined) {
                                this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
                                this.body.eventListeners[UIfunctionName] = newFunction;
                            } else {
                                throw new Error('This UI function does not exist. Typo? You tried: ' + UIfunctionName + ' possible are: ' + (0, _stringify2['default'])((0, _keys2['default'])(this.body.eventListeners)));
                            }
                        }

                        /**
                         * Restore the overridden UI functions to their original state.
                         *
                         * @private
                         */

                    }, {
                        key: '_unbindTemporaryUIs',
                        value: function _unbindTemporaryUIs() {
                            for (var functionName in this.temporaryUIFunctions) {
                                if (this.temporaryUIFunctions.hasOwnProperty(functionName)) {
                                    this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];
                                    delete this.temporaryUIFunctions[functionName];
                                }
                            }
                            this.temporaryUIFunctions = {};
                        }

                        /**
                         * Unbind the events created by _temporaryBindEvent
                         * @private
                         */

                    }, {
                        key: '_unbindTemporaryEvents',
                        value: function _unbindTemporaryEvents() {
                            for (var i = 0; i < this.temporaryEventFunctions.length; i++) {
                                var eventName = this.temporaryEventFunctions[i].event;
                                var boundFunction = this.temporaryEventFunctions[i].boundFunction;
                                this.body.emitter.off(eventName, boundFunction);
                            }
                            this.temporaryEventFunctions = [];
                        }

                        /**
                         * Bind an hammer instance to a DOM element.
                         * @param domElement
                         * @param funct
                         */

                    }, {
                        key: '_bindHammerToDiv',
                        value: function _bindHammerToDiv(domElement, boundFunction) {
                            var hammer = new Hammer(domElement, {});
                            hammerUtil.onTouch(hammer, boundFunction);
                            this.manipulationHammers.push(hammer);
                        }

                        /**
                         * Neatly clean up temporary edges and nodes
                         * @private
                         */

                    }, {
                        key: '_cleanupTemporaryNodesAndEdges',
                        value: function _cleanupTemporaryNodesAndEdges() {
                            // _clean temporary edges
                            for (var i = 0; i < this.temporaryIds.edges.length; i++) {
                                this.body.edges[this.temporaryIds.edges[i]].disconnect();
                                delete this.body.edges[this.temporaryIds.edges[i]];
                                var indexTempEdge = this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);
                                if (indexTempEdge !== -1) {
                                    this.body.edgeIndices.splice(indexTempEdge, 1);
                                }
                            }

                            // _clean temporary nodes
                            for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
                                delete this.body.nodes[this.temporaryIds.nodes[_i]];
                                var indexTempNode = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);
                                if (indexTempNode !== -1) {
                                    this.body.nodeIndices.splice(indexTempNode, 1);
                                }
                            }

                            this.temporaryIds = { nodes: [], edges: [] };
                        }

                        // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//

                        /**
                         * the touch is used to get the position of the initial click
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_controlNodeTouch',
                        value: function _controlNodeTouch(event) {
                            this.selectionHandler.unselectAll();
                            this.lastTouch = this.body.functions.getPointer(event.center);
                            this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object
                        }

                        /**
                         * the drag start is used to mark one of the control nodes as selected.
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_controlNodeDragStart',
                        value: function _controlNodeDragStart(event) {
                            var pointer = this.lastTouch;
                            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
                            var from = this.body.nodes[this.temporaryIds.nodes[0]];
                            var to = this.body.nodes[this.temporaryIds.nodes[1]];
                            var edge = this.body.edges[this.edgeBeingEditedId];
                            this.selectedControlNode = undefined;

                            var fromSelect = from.isOverlappingWith(pointerObj);
                            var toSelect = to.isOverlappingWith(pointerObj);

                            if (fromSelect === true) {
                                this.selectedControlNode = from;
                                edge.edgeType.from = from;
                            } else if (toSelect === true) {
                                this.selectedControlNode = to;
                                edge.edgeType.to = to;
                            }

                            // we use the selection to find the node that is being dragged. We explicitly select it here.
                            if (this.selectedControlNode !== undefined) {
                                this.selectionHandler.selectObject(this.selectedControlNode);
                            }

                            this.body.emitter.emit('_redraw');
                        }

                        /**
                         * dragging the control nodes or the canvas
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_controlNodeDrag',
                        value: function _controlNodeDrag(event) {
                            this.body.emitter.emit('disablePhysics');
                            var pointer = this.body.functions.getPointer(event.center);
                            var pos = this.canvas.DOMtoCanvas(pointer);
                            if (this.selectedControlNode !== undefined) {
                                this.selectedControlNode.x = pos.x;
                                this.selectedControlNode.y = pos.y;
                            } else {
                                // if the drag was not started properly because the click started outside the network div, start it now.
                                var diffX = pointer.x - this.lastTouch.x;
                                var diffY = pointer.y - this.lastTouch.y;
                                this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
                            }
                            this.body.emitter.emit('_redraw');
                        }

                        /**
                         * connecting or restoring the control nodes.
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_controlNodeDragEnd',
                        value: function _controlNodeDragEnd(event) {
                            var pointer = this.body.functions.getPointer(event.center);
                            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
                            var edge = this.body.edges[this.edgeBeingEditedId];
                            // if the node that was dragged is not a control node, return
                            if (this.selectedControlNode === undefined) {
                                return;
                            }

                            // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.
                            this.selectionHandler.unselectAll();
                            var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
                            var node = undefined;
                            for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
                                if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
                                    node = this.body.nodes[overlappingNodeIds[i]];
                                    break;
                                }
                            }
                            // perform the connection
                            if (node !== undefined && this.selectedControlNode !== undefined) {
                                if (node.isCluster === true) {
                                    alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
                                } else {
                                    var from = this.body.nodes[this.temporaryIds.nodes[0]];
                                    if (this.selectedControlNode.id === from.id) {
                                        this._performEditEdge(node.id, edge.to.id);
                                    } else {
                                        this._performEditEdge(edge.from.id, node.id);
                                    }
                                }
                            } else {
                                edge.updateEdgeType();
                                this.body.emitter.emit('restorePhysics');
                            }
                            this.body.emitter.emit('_redraw');
                        }

                        // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//


                        // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
                        /**
                         * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
                         * to walk the user through the process.
                         *
                         * @private
                         */

                    }, {
                        key: '_handleConnect',
                        value: function _handleConnect(event) {
                            // check to avoid double fireing of this function.
                            if (new Date().valueOf() - this.touchTime > 100) {
                                this.lastTouch = this.body.functions.getPointer(event.center);
                                this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object

                                var pointer = this.lastTouch;
                                var node = this.selectionHandler.getNodeAt(pointer);

                                if (node !== undefined) {
                                    if (node.isCluster === true) {
                                        alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
                                    } else {
                                        // create a node the temporary line can look at
                                        var targetNode = this._getNewTargetNode(node.x, node.y);
                                        this.body.nodes[targetNode.id] = targetNode;
                                        this.body.nodeIndices.push(targetNode.id);

                                        // create a temporary edge
                                        var connectionEdge = this.body.functions.createEdge({
                                            id: 'connectionEdge' + util.randomUUID(),
                                            from: node.id,
                                            to: targetNode.id,
                                            physics: false,
                                            smooth: {
                                                enabled: true,
                                                type: 'continuous',
                                                roundness: 0.5
                                            }
                                        });
                                        this.body.edges[connectionEdge.id] = connectionEdge;
                                        this.body.edgeIndices.push(connectionEdge.id);

                                        this.temporaryIds.nodes.push(targetNode.id);
                                        this.temporaryIds.edges.push(connectionEdge.id);
                                    }
                                }
                                this.touchTime = new Date().valueOf();
                            }
                        }
                    }, {
                        key: '_dragControlNode',
                        value: function _dragControlNode(event) {
                            var pointer = this.body.functions.getPointer(event.center);
                            if (this.temporaryIds.nodes[0] !== undefined) {
                                var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.
                                targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
                                targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
                                this.body.emitter.emit('_redraw');
                            } else {
                                var diffX = pointer.x - this.lastTouch.x;
                                var diffY = pointer.y - this.lastTouch.y;
                                this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
                            }
                        }

                        /**
                         * Connect the new edge to the target if one exists, otherwise remove temp line
                         * @param event
                         * @private
                         */

                    }, {
                        key: '_finishConnect',
                        value: function _finishConnect(event) {
                            var pointer = this.body.functions.getPointer(event.center);
                            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

                            // remember the edge id
                            var connectFromId = undefined;
                            if (this.temporaryIds.edges[0] !== undefined) {
                                connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
                            }

                            // get the overlapping node but NOT the temporary node;
                            var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
                            var node = undefined;
                            for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
                                // if the node id is NOT a temporary node, accept the node.
                                if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {
                                    node = this.body.nodes[overlappingNodeIds[i]];
                                    break;
                                }
                            }

                            // clean temporary nodes and edges.
                            this._cleanupTemporaryNodesAndEdges();

                            // perform the connection
                            if (node !== undefined) {
                                if (node.isCluster === true) {
                                    alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
                                } else {
                                    if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {
                                        this._performAddEdge(connectFromId, node.id);
                                    }
                                }
                            }
                            this.body.emitter.emit('_redraw');
                        }

                        // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//


                        // ------------------------------ Performing all the actual data manipulation ------------------------//

                        /**
                         * Adds a node on the specified location
                         */

                    }, {
                        key: '_performAddNode',
                        value: function _performAddNode(clickData) {
                            var _this4 = this;

                            var defaultData = {
                                id: util.randomUUID(),
                                x: clickData.pointer.canvas.x,
                                y: clickData.pointer.canvas.y,
                                label: 'new'
                            };

                            if (typeof this.options.addNode === 'function') {
                                if (this.options.addNode.length === 2) {
                                    this.options.addNode(defaultData, function(finalizedData) {
                                        if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === 'addNode') {
                                            // if for whatever reason the mode has changes (due to dataset change) disregard the callback
                                            _this4.body.data.nodes.getDataSet().add(finalizedData);
                                            _this4.showManipulatorToolbar();
                                        }
                                    });
                                } else {
                                    throw new Error('The function for add does not support two arguments (data,callback)');
                                    this.showManipulatorToolbar();
                                }
                            } else {
                                this.body.data.nodes.getDataSet().add(defaultData);
                                this.showManipulatorToolbar();
                            }
                        }

                        /**
                         * connect two nodes with a new edge.
                         *
                         * @private
                         */

                    }, {
                        key: '_performAddEdge',
                        value: function _performAddEdge(sourceNodeId, targetNodeId) {
                            var _this5 = this;

                            var defaultData = { from: sourceNodeId, to: targetNodeId };
                            if (typeof this.options.addEdge === 'function') {
                                if (this.options.addEdge.length === 2) {
                                    this.options.addEdge(defaultData, function(finalizedData) {
                                        if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === 'addEdge') {
                                            // if for whatever reason the mode has changes (due to dataset change) disregard the callback
                                            _this5.body.data.edges.getDataSet().add(finalizedData);
                                            _this5.selectionHandler.unselectAll();
                                            _this5.showManipulatorToolbar();
                                        }
                                    });
                                } else {
                                    throw new Error('The function for connect does not support two arguments (data,callback)');
                                }
                            } else {
                                this.body.data.edges.getDataSet().add(defaultData);
                                this.selectionHandler.unselectAll();
                                this.showManipulatorToolbar();
                            }
                        }

                        /**
                         * connect two nodes with a new edge.
                         *
                         * @private
                         */

                    }, {
                        key: '_performEditEdge',
                        value: function _performEditEdge(sourceNodeId, targetNodeId) {
                            var _this6 = this;

                            var defaultData = { id: this.edgeBeingEditedId, from: sourceNodeId, to: targetNodeId, label: this.body.data.edges._data[this.edgeBeingEditedId].label };
                            var eeFunct = this.options.editEdge;
                            if ((typeof eeFunct === 'undefined' ? 'undefined' : (0, _typeof3['default'])(eeFunct)) === 'object') {
                                eeFunct = eeFunct.editWithoutDrag;
                            }
                            if (typeof eeFunct === 'function') {
                                if (eeFunct.length === 2) {
                                    eeFunct(defaultData, function(finalizedData) {
                                        if (finalizedData === null || finalizedData === undefined || _this6.inMode !== 'editEdge') {
                                            // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                                            _this6.body.edges[defaultData.id].updateEdgeType();
                                            _this6.body.emitter.emit('_redraw');
                                            _this6.showManipulatorToolbar();
                                        } else {
                                            _this6.body.data.edges.getDataSet().update(finalizedData);
                                            _this6.selectionHandler.unselectAll();
                                            _this6.showManipulatorToolbar();
                                        }
                                    });
                                } else {
                                    throw new Error('The function for edit does not support two arguments (data, callback)');
                                }
                            } else {
                                this.body.data.edges.getDataSet().update(defaultData);
                                this.selectionHandler.unselectAll();
                                this.showManipulatorToolbar();
                            }
                        }
                    }]);
                    return ManipulationSystem;
                }();

                exports['default'] = ManipulationSystem;

                /***/
            }),
            /* 229 */
            /***/
            (function(module, exports) {

                'use strict';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                /**
                 * This object contains all possible options. It will check if the types are correct, if required if the option is one
                 * of the allowed values.
                 *
                 * __any__ means that the name of the property does not matter.
                 * __type__ is a required field for all objects and contains the allowed types of all objects
                 */
                var string = 'string';
                var bool = 'boolean';
                var number = 'number';
                var array = 'array';
                var object = 'object'; // should only be in a __type__ property
                var dom = 'dom';
                var any = 'any';

                var allOptions = {
                    configure: {
                        enabled: { boolean: bool },
                        filter: { boolean: bool, string: string, array: array, 'function': 'function' },
                        container: { dom: dom },
                        showButton: { boolean: bool },
                        __type__: { object: object, boolean: bool, string: string, array: array, 'function': 'function' }
                    },
                    edges: {
                        arrows: {
                            to: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: bool } },
                            middle: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: bool } },
                            from: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: bool } },
                            __type__: { string: ['from', 'to', 'middle'], object: object }
                        },
                        arrowStrikethrough: { boolean: bool },
                        chosen: {
                            label: { boolean: bool, 'function': 'function' },
                            edge: { boolean: bool, 'function': 'function' },
                            __type__: { object: object, boolean: bool }
                        },
                        color: {
                            color: { string: string },
                            highlight: { string: string },
                            hover: { string: string },
                            inherit: { string: ['from', 'to', 'both'], boolean: bool },
                            opacity: { number: number },
                            __type__: { object: object, string: string }
                        },
                        dashes: { boolean: bool, array: array },
                        font: {
                            color: { string: string },
                            size: { number: number }, // px
                            face: { string: string },
                            background: { string: string },
                            strokeWidth: { number: number }, // px
                            strokeColor: { string: string },
                            align: { string: ['horizontal', 'top', 'middle', 'bottom'] },
                            vadjust: { number: number },
                            multi: { boolean: bool, string: string },
                            bold: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            boldital: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            ital: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            mono: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            __type__: { object: object, string: string }
                        },
                        hidden: { boolean: bool },
                        hoverWidth: { 'function': 'function', number: number },
                        label: { string: string, 'undefined': 'undefined' },
                        labelHighlightBold: { boolean: bool },
                        length: { number: number, 'undefined': 'undefined' },
                        physics: { boolean: bool },
                        scaling: {
                            min: { number: number },
                            max: { number: number },
                            label: {
                                enabled: { boolean: bool },
                                min: { number: number },
                                max: { number: number },
                                maxVisible: { number: number },
                                drawThreshold: { number: number },
                                __type__: { object: object, boolean: bool }
                            },
                            customScalingFunction: { 'function': 'function' },
                            __type__: { object: object }
                        },
                        selectionWidth: { 'function': 'function', number: number },
                        selfReferenceSize: { number: number },
                        shadow: {
                            enabled: { boolean: bool },
                            color: { string: string },
                            size: { number: number },
                            x: { number: number },
                            y: { number: number },
                            __type__: { object: object, boolean: bool }
                        },
                        smooth: {
                            enabled: { boolean: bool },
                            type: { string: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'] },
                            roundness: { number: number },
                            forceDirection: { string: ['horizontal', 'vertical', 'none'], boolean: bool },
                            __type__: { object: object, boolean: bool }
                        },
                        title: { string: string, 'undefined': 'undefined' },
                        width: { number: number },
                        widthConstraint: {
                            maximum: { number: number },
                            __type__: { object: object, boolean: bool, number: number }
                        },
                        value: { number: number, 'undefined': 'undefined' },
                        __type__: { object: object }
                    },
                    groups: {
                        useDefaultGroups: { boolean: bool },
                        __any__: 'get from nodes, will be overwritten below',
                        __type__: { object: object }
                    },
                    interaction: {
                        dragNodes: { boolean: bool },
                        dragView: { boolean: bool },
                        hideEdgesOnDrag: { boolean: bool },
                        hideNodesOnDrag: { boolean: bool },
                        hover: { boolean: bool },
                        keyboard: {
                            enabled: { boolean: bool },
                            speed: { x: { number: number }, y: { number: number }, zoom: { number: number }, __type__: { object: object } },
                            bindToWindow: { boolean: bool },
                            __type__: { object: object, boolean: bool }
                        },
                        multiselect: { boolean: bool },
                        navigationButtons: { boolean: bool },
                        selectable: { boolean: bool },
                        selectConnectedEdges: { boolean: bool },
                        hoverConnectedEdges: { boolean: bool },
                        tooltipDelay: { number: number },
                        zoomView: { boolean: bool },
                        __type__: { object: object }
                    },
                    layout: {
                        randomSeed: { 'undefined': 'undefined', number: number },
                        improvedLayout: { boolean: bool },
                        hierarchical: {
                            enabled: { boolean: bool },
                            levelSeparation: { number: number },
                            nodeSpacing: { number: number },
                            treeSpacing: { number: number },
                            blockShifting: { boolean: bool },
                            edgeMinimization: { boolean: bool },
                            parentCentralization: { boolean: bool },
                            direction: { string: ['UD', 'DU', 'LR', 'RL'] }, // UD, DU, LR, RL
                            sortMethod: { string: ['hubsize', 'directed'] }, // hubsize, directed
                            __type__: { object: object, boolean: bool }
                        },
                        __type__: { object: object }
                    },
                    manipulation: {
                        enabled: { boolean: bool },
                        initiallyActive: { boolean: bool },
                        addNode: { boolean: bool, 'function': 'function' },
                        addEdge: { boolean: bool, 'function': 'function' },
                        editNode: { 'function': 'function' },
                        editEdge: {
                            editWithoutDrag: { 'function': 'function' },
                            __type__: { object: object, boolean: bool, 'function': 'function' }
                        },
                        deleteNode: { boolean: bool, 'function': 'function' },
                        deleteEdge: { boolean: bool, 'function': 'function' },
                        controlNodeStyle: 'get from nodes, will be overwritten below',
                        __type__: { object: object, boolean: bool }
                    },
                    nodes: {
                        borderWidth: { number: number },
                        borderWidthSelected: { number: number, 'undefined': 'undefined' },
                        brokenImage: { string: string, 'undefined': 'undefined' },
                        chosen: {
                            label: { boolean: bool, 'function': 'function' },
                            node: { boolean: bool, 'function': 'function' },
                            __type__: { object: object, boolean: bool }
                        },
                        color: {
                            border: { string: string },
                            background: { string: string },
                            highlight: {
                                border: { string: string },
                                background: { string: string },
                                __type__: { object: object, string: string }
                            },
                            hover: {
                                border: { string: string },
                                background: { string: string },
                                __type__: { object: object, string: string }
                            },
                            __type__: { object: object, string: string }
                        },
                        fixed: {
                            x: { boolean: bool },
                            y: { boolean: bool },
                            __type__: { object: object, boolean: bool }
                        },
                        font: {
                            align: { string: string },
                            color: { string: string },
                            size: { number: number }, // px
                            face: { string: string },
                            background: { string: string },
                            strokeWidth: { number: number }, // px
                            strokeColor: { string: string },
                            vadjust: { number: number },
                            multi: { boolean: bool, string: string },
                            bold: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            boldital: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            ital: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            mono: {
                                color: { string: string },
                                size: { number: number }, // px
                                face: { string: string },
                                mod: { string: string },
                                vadjust: { number: number },
                                __type__: { object: object, string: string }
                            },
                            __type__: { object: object, string: string }
                        },
                        group: { string: string, number: number, 'undefined': 'undefined' },
                        heightConstraint: {
                            minimum: { number: number },
                            valign: { string: string },
                            __type__: { object: object, boolean: bool, number: number }
                        },
                        hidden: { boolean: bool },
                        icon: {
                            face: { string: string },
                            code: { string: string }, //'\uf007',
                            size: { number: number }, //50,
                            color: { string: string },
                            __type__: { object: object }
                        },
                        id: { string: string, number: number },
                        image: {
                            selected: { string: string, 'undefined': 'undefined' }, // --> URL
                            unselected: { string: string, 'undefined': 'undefined' }, // --> URL
                            __type__: { object: object, string: string }
                        },
                        label: { string: string, 'undefined': 'undefined' },
                        labelHighlightBold: { boolean: bool },
                        level: { number: number, 'undefined': 'undefined' },
                        margin: {
                            top: { number: number },
                            right: { number: number },
                            bottom: { number: number },
                            left: { number: number },
                            __type__: { object: object, number: number }
                        },
                        mass: { number: number },
                        physics: { boolean: bool },
                        scaling: {
                            min: { number: number },
                            max: { number: number },
                            label: {
                                enabled: { boolean: bool },
                                min: { number: number },
                                max: { number: number },
                                maxVisible: { number: number },
                                drawThreshold: { number: number },
                                __type__: { object: object, boolean: bool }
                            },
                            customScalingFunction: { 'function': 'function' },
                            __type__: { object: object }
                        },
                        shadow: {
                            enabled: { boolean: bool },
                            color: { string: string },
                            size: { number: number },
                            x: { number: number },
                            y: { number: number },
                            __type__: { object: object, boolean: bool }
                        },
                        shape: { string: ['ellipse', 'circle', 'database', 'box', 'text', 'image', 'circularImage', 'diamond', 'dot', 'star', 'triangle', 'triangleDown', 'square', 'icon'] },
                        shapeProperties: {
                            borderDashes: { boolean: bool, array: array },
                            borderRadius: { number: number },
                            interpolation: { boolean: bool },
                            useImageSize: { boolean: bool },
                            useBorderWithImage: { boolean: bool },
                            __type__: { object: object }
                        },
                        size: { number: number },
                        title: { string: string, 'undefined': 'undefined' },
                        value: { number: number, 'undefined': 'undefined' },
                        widthConstraint: {
                            minimum: { number: number },
                            maximum: { number: number },
                            __type__: { object: object, boolean: bool, number: number }
                        },
                        x: { number: number },
                        y: { number: number },
                        __type__: { object: object }
                    },
                    physics: {
                        enabled: { boolean: bool },
                        barnesHut: {
                            gravitationalConstant: { number: number },
                            centralGravity: { number: number },
                            springLength: { number: number },
                            springConstant: { number: number },
                            damping: { number: number },
                            avoidOverlap: { number: number },
                            __type__: { object: object }
                        },
                        forceAtlas2Based: {
                            gravitationalConstant: { number: number },
                            centralGravity: { number: number },
                            springLength: { number: number },
                            springConstant: { number: number },
                            damping: { number: number },
                            avoidOverlap: { number: number },
                            __type__: { object: object }
                        },
                        repulsion: {
                            centralGravity: { number: number },
                            springLength: { number: number },
                            springConstant: { number: number },
                            nodeDistance: { number: number },
                            damping: { number: number },
                            __type__: { object: object }
                        },
                        hierarchicalRepulsion: {
                            centralGravity: { number: number },
                            springLength: { number: number },
                            springConstant: { number: number },
                            nodeDistance: { number: number },
                            damping: { number: number },
                            __type__: { object: object }
                        },
                        maxVelocity: { number: number },
                        minVelocity: { number: number }, // px/s
                        solver: { string: ['barnesHut', 'repulsion', 'hierarchicalRepulsion', 'forceAtlas2Based'] },
                        stabilization: {
                            enabled: { boolean: bool },
                            iterations: { number: number }, // maximum number of iteration to stabilize
                            updateInterval: { number: number },
                            onlyDynamicEdges: { boolean: bool },
                            fit: { boolean: bool },
                            __type__: { object: object, boolean: bool }
                        },
                        timestep: { number: number },
                        adaptiveTimestep: { boolean: bool },
                        __type__: { object: object, boolean: bool }
                    },

                    //globals :
                    autoResize: { boolean: bool },
                    clickToUse: { boolean: bool },
                    locale: { string: string },
                    locales: {
                        __any__: { any: any },
                        __type__: { object: object }
                    },
                    height: { string: string },
                    width: { string: string },
                    __type__: { object: object }
                };

                allOptions.groups.__any__ = allOptions.nodes;
                allOptions.manipulation.controlNodeStyle = allOptions.nodes;

                var configureOptions = {
                    nodes: {
                        borderWidth: [1, 0, 10, 1],
                        borderWidthSelected: [2, 0, 10, 1],
                        color: {
                            border: ['color', '#2B7CE9'],
                            background: ['color', '#97C2FC'],
                            highlight: {
                                border: ['color', '#2B7CE9'],
                                background: ['color', '#D2E5FF']
                            },
                            hover: {
                                border: ['color', '#2B7CE9'],
                                background: ['color', '#D2E5FF']
                            }
                        },
                        fixed: {
                            x: false,
                            y: false
                        },
                        font: {
                            color: ['color', '#343434'],
                            size: [14, 0, 100, 1], // px
                            face: ['arial', 'verdana', 'tahoma'],
                            background: ['color', 'none'],
                            strokeWidth: [0, 0, 50, 1], // px
                            strokeColor: ['color', '#ffffff']
                        },
                        //group: 'string',
                        hidden: false,
                        labelHighlightBold: true,
                        //icon: {
                        //  face: 'string',  //'FontAwesome',
                        //  code: 'string',  //'\uf007',
                        //  size: [50, 0, 200, 1],  //50,
                        //  color: ['color','#2B7CE9']   //'#aa00ff'
                        //},
                        //image: 'string', // --> URL
                        physics: true,
                        scaling: {
                            min: [10, 0, 200, 1],
                            max: [30, 0, 200, 1],
                            label: {
                                enabled: false,
                                min: [14, 0, 200, 1],
                                max: [30, 0, 200, 1],
                                maxVisible: [30, 0, 200, 1],
                                drawThreshold: [5, 0, 20, 1]
                            }
                        },
                        shadow: {
                            enabled: false,
                            color: 'rgba(0,0,0,0.5)',
                            size: [10, 0, 20, 1],
                            x: [5, -30, 30, 1],
                            y: [5, -30, 30, 1]
                        },
                        shape: ['ellipse', 'box', 'circle', 'database', 'diamond', 'dot', 'square', 'star', 'text', 'triangle', 'triangleDown'],
                        shapeProperties: {
                            borderDashes: false,
                            borderRadius: [6, 0, 20, 1],
                            interpolation: true,
                            useImageSize: false
                        },
                        size: [25, 0, 200, 1]
                    },
                    edges: {
                        arrows: {
                            to: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
                            middle: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
                            from: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' }
                        },
                        arrowStrikethrough: true,
                        color: {
                            color: ['color', '#848484'],
                            highlight: ['color', '#848484'],
                            hover: ['color', '#848484'],
                            inherit: ['from', 'to', 'both', true, false],
                            opacity: [1, 0, 1, 0.05]
                        },
                        dashes: false,
                        font: {
                            color: ['color', '#343434'],
                            size: [14, 0, 100, 1], // px
                            face: ['arial', 'verdana', 'tahoma'],
                            background: ['color', 'none'],
                            strokeWidth: [2, 0, 50, 1], // px
                            strokeColor: ['color', '#ffffff'],
                            align: ['horizontal', 'top', 'middle', 'bottom']
                        },
                        hidden: false,
                        hoverWidth: [1.5, 0, 5, 0.1],
                        labelHighlightBold: true,
                        physics: true,
                        scaling: {
                            min: [1, 0, 100, 1],
                            max: [15, 0, 100, 1],
                            label: {
                                enabled: true,
                                min: [14, 0, 200, 1],
                                max: [30, 0, 200, 1],
                                maxVisible: [30, 0, 200, 1],
                                drawThreshold: [5, 0, 20, 1]
                            }
                        },
                        selectionWidth: [1.5, 0, 5, 0.1],
                        selfReferenceSize: [20, 0, 200, 1],
                        shadow: {
                            enabled: false,
                            color: 'rgba(0,0,0,0.5)',
                            size: [10, 0, 20, 1],
                            x: [5, -30, 30, 1],
                            y: [5, -30, 30, 1]
                        },
                        smooth: {
                            enabled: true,
                            type: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'],
                            forceDirection: ['horizontal', 'vertical', 'none'],
                            roundness: [0.5, 0, 1, 0.05]
                        },
                        width: [1, 0, 30, 1]
                    },
                    layout: {
                        //randomSeed: [0, 0, 500, 1],
                        //improvedLayout: true,
                        hierarchical: {
                            enabled: false,
                            levelSeparation: [150, 20, 500, 5],
                            nodeSpacing: [100, 20, 500, 5],
                            treeSpacing: [200, 20, 500, 5],
                            // blockShifting: true,//hoge
                            // edgeMinimization: true,//hoge
                            // parentCentralization: true,//hoge
                            direction: ['UD', 'DU', 'LR', 'RL'], // UD, DU, LR, RL
                            // sortMethod: ['hubsize', 'directed'] // hubsize, directed//hoge
                        }
                    },
                    interaction: {
                        dragNodes: true,
                        dragView: true,
                        hideEdgesOnDrag: false,
                        hideNodesOnDrag: false,
                        hover: false,
                        keyboard: {
                            enabled: false,
                            speed: { x: [10, 0, 40, 1], y: [10, 0, 40, 1], zoom: [0.02, 0, 0.1, 0.005] },
                            bindToWindow: true
                        },
                        multiselect: false,
                        navigationButtons: false,
                        selectable: true,
                        selectConnectedEdges: true,
                        hoverConnectedEdges: true,
                        tooltipDelay: [300, 0, 1000, 25],
                        zoomView: true
                    },
                    manipulation: {
                        enabled: false,
                        initiallyActive: false
                    },
                    physics: {
                        enabled: true, //hoge
                        barnesHut: {
                            //theta: [0.5, 0.1, 1, 0.05],
                            // gravitationalConstant: [-2000, -30000, 0, 50], //hoge
                            centralGravity: [0.3, 0, 10, 0.05],
                            springLength: [95, 0, 500, 5],
                            springConstant: [0.04, 0, 1.2, 0.005],
                            // damping: [0.09, 0, 1, 0.01],//hoge
                            // avoidOverlap: [0, 0, 1, 0.01]//hoge
                        },
                        forceAtlas2Based: {
                            //theta: [0.5, 0.1, 1, 0.05],
                            gravitationalConstant: [-50, -500, 0, 1],
                            centralGravity: [0.01, 0, 1, 0.005],
                            springLength: [95, 0, 500, 5],
                            springConstant: [0.08, 0, 1.2, 0.005],
                            damping: [0.4, 0, 1, 0.01],
                            avoidOverlap: [0, 0, 1, 0.01]
                        },
                        repulsion: {
                            centralGravity: [0.2, 0, 10, 0.05],
                            springLength: [200, 0, 500, 5],
                            springConstant: [0.05, 0, 1.2, 0.005],
                            nodeDistance: [100, 0, 500, 5],
                            // damping: [0.09, 0, 1, 0.01]
                        },
                        hierarchicalRepulsion: {
                            centralGravity: [0.2, 0, 10, 0.05],
                            springLength: [100, 0, 500, 5],
                            springConstant: [0.01, 0, 1.2, 0.005],
                            nodeDistance: [120, 0, 500, 5],
                            // damping: [0.09, 0, 1, 0.01]//hoge
                        },
                        // maxVelocity: [50, 0, 150, 1], //hoge
                        // minVelocity: [0.1, 0.01, 0.5, 0.01],//hoge
                        // solver: ['barnesHut', 'forceAtlas2Based', 'repulsion', 'hierarchicalRepulsion'],//hoge
                        solver: ['barnesHut', 'repulsion', 'hierarchicalRepulsion'], //hoge
                        // timestep: [0.5, 0.01, 1, 0.01]//hoge
                    }
                };

                exports.allOptions = allOptions;
                exports.configureOptions = configureOptions;

                /***/
            }),
            /* 230 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _slicedToArray2 = __webpack_require__(170);

                var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                var _FloydWarshall = __webpack_require__(231);

                var _FloydWarshall2 = _interopRequireDefault(_FloydWarshall);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                /**
                 * KamadaKawai positions the nodes initially based on
                 *
                 * "AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS"
                 * -- Tomihisa KAMADA and Satoru KAWAI in 1989
                 *
                 * Possible optimizations in the distance calculation can be implemented.
                 */
                var KamadaKawai = function() {
                    function KamadaKawai(body, edgeLength, edgeStrength) {
                        (0, _classCallCheck3["default"])(this, KamadaKawai);

                        this.body = body;
                        this.springLength = edgeLength;
                        this.springConstant = edgeStrength;
                        this.distanceSolver = new _FloydWarshall2["default"]();
                    }

                    /**
                     * Not sure if needed but can be used to update the spring length and spring constant
                     * @param options
                     */


                    (0, _createClass3["default"])(KamadaKawai, [{
                        key: "setOptions",
                        value: function setOptions(options) {
                            if (options) {
                                if (options.springLength) {
                                    this.springLength = options.springLength;
                                }
                                if (options.springConstant) {
                                    this.springConstant = options.springConstant;
                                }
                            }
                        }

                        /**
                         * Position the system
                         * @param nodesArray
                         * @param edgesArray
                         */

                    }, {
                        key: "solve",
                        value: function solve(nodesArray, edgesArray) {
                            var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                            // get distance matrix
                            var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix

                            // get the L Matrix
                            this._createL_matrix(D_matrix);

                            // get the K Matrix
                            this._createK_matrix(D_matrix);

                            // initial E Matrix
                            this._createE_matrix();

                            // calculate positions
                            var threshold = 0.01;
                            var innerThreshold = 1;
                            var iterations = 0;
                            var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));
                            var maxInnerIterations = 5;

                            var maxEnergy = 1e9;
                            var highE_nodeId = 0,
                                dE_dx = 0,
                                dE_dy = 0,
                                delta_m = 0,
                                subIterations = 0;

                            while (maxEnergy > threshold && iterations < maxIterations) {
                                iterations += 1;

                                var _getHighestEnergyNode2 = this._getHighestEnergyNode(ignoreClusters);

                                var _getHighestEnergyNode3 = (0, _slicedToArray3["default"])(_getHighestEnergyNode2, 4);

                                highE_nodeId = _getHighestEnergyNode3[0];
                                maxEnergy = _getHighestEnergyNode3[1];
                                dE_dx = _getHighestEnergyNode3[2];
                                dE_dy = _getHighestEnergyNode3[3];

                                delta_m = maxEnergy;
                                subIterations = 0;
                                while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
                                    subIterations += 1;
                                    this._moveNode(highE_nodeId, dE_dx, dE_dy);

                                    var _getEnergy2 = this._getEnergy(highE_nodeId);

                                    var _getEnergy3 = (0, _slicedToArray3["default"])(_getEnergy2, 3);

                                    delta_m = _getEnergy3[0];
                                    dE_dx = _getEnergy3[1];
                                    dE_dy = _getEnergy3[2];
                                }
                            }
                        }

                        /**
                         * get the node with the highest energy
                         * @returns {*[]}
                         * @private
                         */

                    }, {
                        key: "_getHighestEnergyNode",
                        value: function _getHighestEnergyNode(ignoreClusters) {
                            var nodesArray = this.body.nodeIndices;
                            var nodes = this.body.nodes;
                            var maxEnergy = 0;
                            var maxEnergyNodeId = nodesArray[0];
                            var dE_dx_max = 0,
                                dE_dy_max = 0;

                            for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
                                var m = nodesArray[nodeIdx];
                                // by not evaluating nodes with predefined positions we should only move nodes that have no positions.
                                if (nodes[m].predefinedPosition === false || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x === true || nodes[m].options.fixed.y === true) {
                                    var _getEnergy4 = this._getEnergy(m),
                                        _getEnergy5 = (0, _slicedToArray3["default"])(_getEnergy4, 3),
                                        delta_m = _getEnergy5[0],
                                        dE_dx = _getEnergy5[1],
                                        dE_dy = _getEnergy5[2];

                                    if (maxEnergy < delta_m) {
                                        maxEnergy = delta_m;
                                        maxEnergyNodeId = m;
                                        dE_dx_max = dE_dx;
                                        dE_dy_max = dE_dy;
                                    }
                                }
                            }

                            return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
                        }

                        /**
                         * calculate the energy of a single node
                         * @param m
                         * @returns {*[]}
                         * @private
                         */

                    }, {
                        key: "_getEnergy",
                        value: function _getEnergy(m) {
                            var _E_sums$m = (0, _slicedToArray3["default"])(this.E_sums[m], 2),
                                dE_dx = _E_sums$m[0],
                                dE_dy = _E_sums$m[1];

                            var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
                            return [delta_m, dE_dx, dE_dy];
                        }

                        /**
                         * move the node based on it's energy
                         * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
                         * @param m
                         * @param dE_dx
                         * @param dE_dy
                         * @private
                         */

                    }, {
                        key: "_moveNode",
                        value: function _moveNode(m, dE_dx, dE_dy) {
                            var nodesArray = this.body.nodeIndices;
                            var nodes = this.body.nodes;
                            var d2E_dx2 = 0;
                            var d2E_dxdy = 0;
                            var d2E_dy2 = 0;

                            var x_m = nodes[m].x;
                            var y_m = nodes[m].y;
                            var km = this.K_matrix[m];
                            var lm = this.L_matrix[m];

                            for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
                                var i = nodesArray[iIdx];
                                if (i !== m) {
                                    var x_i = nodes[i].x;
                                    var y_i = nodes[i].y;
                                    var kmat = km[i];
                                    var lmat = lm[i];
                                    var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
                                    d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);
                                    d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
                                    d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);
                                }
                            }
                            // make the variable names easier to make the solving of the linear system easier to read
                            var A = d2E_dx2,
                                B = d2E_dxdy,
                                C = dE_dx,
                                D = d2E_dy2,
                                E = dE_dy;

                            // solve the linear system for dx and dy
                            var dy = (C / A + E / B) / (B / A - D / B);
                            var dx = -(B * dy + C) / A;

                            // move the node
                            nodes[m].x += dx;
                            nodes[m].y += dy;

                            // Recalculate E_matrix (should be incremental)
                            this._updateE_matrix(m);
                        }

                        /**
                         * Create the L matrix: edge length times shortest path
                         * @param D_matrix
                         * @private
                         */

                    }, {
                        key: "_createL_matrix",
                        value: function _createL_matrix(D_matrix) {
                            var nodesArray = this.body.nodeIndices;
                            var edgeLength = this.springLength;

                            this.L_matrix = [];
                            for (var i = 0; i < nodesArray.length; i++) {
                                this.L_matrix[nodesArray[i]] = {};
                                for (var j = 0; j < nodesArray.length; j++) {
                                    this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
                                }
                            }
                        }

                        /**
                         * Create the K matrix: spring constants times shortest path
                         * @param D_matrix
                         * @private
                         */

                    }, {
                        key: "_createK_matrix",
                        value: function _createK_matrix(D_matrix) {
                            var nodesArray = this.body.nodeIndices;
                            var edgeStrength = this.springConstant;

                            this.K_matrix = [];
                            for (var i = 0; i < nodesArray.length; i++) {
                                this.K_matrix[nodesArray[i]] = {};
                                for (var j = 0; j < nodesArray.length; j++) {
                                    this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);
                                }
                            }
                        }

                        /**
                         *  Create matrix with all energies between nodes
                         *  @private
                         */

                    }, {
                        key: "_createE_matrix",
                        value: function _createE_matrix() {
                            var nodesArray = this.body.nodeIndices;
                            var nodes = this.body.nodes;
                            this.E_matrix = {};
                            this.E_sums = {};
                            for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {
                                this.E_matrix[nodesArray[mIdx]] = [];
                            }
                            for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {
                                var m = nodesArray[_mIdx];
                                var x_m = nodes[m].x;
                                var y_m = nodes[m].y;
                                var dE_dx = 0;
                                var dE_dy = 0;
                                for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {
                                    var i = nodesArray[iIdx];
                                    if (i !== m) {
                                        var x_i = nodes[i].x;
                                        var y_i = nodes[i].y;
                                        var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
                                        this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];
                                        this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];
                                        dE_dx += this.E_matrix[m][iIdx][0];
                                        dE_dy += this.E_matrix[m][iIdx][1];
                                    }
                                }
                                //Store sum
                                this.E_sums[m] = [dE_dx, dE_dy];
                            }
                        }

                        //Update method, just doing single column (rows are auto-updated) (update all sums)

                    }, {
                        key: "_updateE_matrix",
                        value: function _updateE_matrix(m) {
                            var nodesArray = this.body.nodeIndices;
                            var nodes = this.body.nodes;
                            var colm = this.E_matrix[m];
                            var kcolm = this.K_matrix[m];
                            var lcolm = this.L_matrix[m];
                            var x_m = nodes[m].x;
                            var y_m = nodes[m].y;
                            var dE_dx = 0;
                            var dE_dy = 0;
                            for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
                                var i = nodesArray[iIdx];
                                if (i !== m) {
                                    //Keep old energy value for sum modification below
                                    var cell = colm[iIdx];
                                    var oldDx = cell[0];
                                    var oldDy = cell[1];

                                    //Calc new energy:
                                    var x_i = nodes[i].x;
                                    var y_i = nodes[i].y;
                                    var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
                                    var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);
                                    var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);
                                    colm[iIdx] = [dx, dy];
                                    dE_dx += dx;
                                    dE_dy += dy;

                                    //add new energy to sum of each column
                                    var sum = this.E_sums[i];
                                    sum[0] += dx - oldDx;
                                    sum[1] += dy - oldDy;
                                }
                            }
                            //Store sum at -1 index
                            this.E_sums[m] = [dE_dx, dE_dy];
                        }
                    }]);
                    return KamadaKawai;
                }(); // distance finding algorithm


                exports["default"] = KamadaKawai;

                /***/
            }),
            /* 231 */
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var _classCallCheck2 = __webpack_require__(134);

                var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

                var _createClass2 = __webpack_require__(135);

                var _createClass3 = _interopRequireDefault(_createClass2);

                function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

                /**
                 * Created by Alex on 10-Aug-15.
                 */

                var FloydWarshall = function() {
                    function FloydWarshall() {
                        (0, _classCallCheck3["default"])(this, FloydWarshall);
                    }

                    (0, _createClass3["default"])(FloydWarshall, [{
                        key: "getDistances",
                        value: function getDistances(body, nodesArray, edgesArray) {
                            var D_matrix = {};
                            var edges = body.edges;

                            // prepare matrix with large numbers
                            for (var i = 0; i < nodesArray.length; i++) {
                                var node = nodesArray[i];
                                var cell = {};
                                D_matrix[node] = cell;
                                for (var j = 0; j < nodesArray.length; j++) {
                                    cell[nodesArray[j]] = i == j ? 0 : 1e9;
                                }
                            }

                            // put the weights for the edges in. This assumes unidirectionality.
                            for (var _i = 0; _i < edgesArray.length; _i++) {
                                var edge = edges[edgesArray[_i]];
                                // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix
                                if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {
                                    D_matrix[edge.fromId][edge.toId] = 1;
                                    D_matrix[edge.toId][edge.fromId] = 1;
                                }
                            }

                            var nodeCount = nodesArray.length;

                            // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.
                            for (var k = 0; k < nodeCount; k++) {
                                var knode = nodesArray[k];
                                var kcolm = D_matrix[knode];
                                for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
                                    var inode = nodesArray[_i2];
                                    var icolm = D_matrix[inode];
                                    for (var _j = _i2 + 1; _j < nodeCount; _j++) {
                                        var jnode = nodesArray[_j];
                                        var jcolm = D_matrix[jnode];

                                        var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
                                        icolm[jnode] = val;
                                        jcolm[inode] = val;
                                    }
                                }
                            }

                            return D_matrix;
                        }
                    }]);
                    return FloydWarshall;
                }();

                exports["default"] = FloydWarshall;

                /***/
            })
            /******/
        ])
});

/***/ }),

/***/ 17:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global, process) {var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.

;(function (undefined) {

  var objectTypes = {
    'function': true,
    'object': true
  };

  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  var Rx = {
    internals: {},
    config: {
      Promise: root.Promise
    },
    helpers: { }
  };

  // Defaults
  var noop = Rx.helpers.noop = function () { },
    identity = Rx.helpers.identity = function (x) { return x; },
    defaultNow = Rx.helpers.defaultNow = Date.now,
    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.subscribe !== 'function' && typeof p.then === 'function'; },
    isFunction = Rx.helpers.isFunction = (function () {

      var isFn = function (value) {
        return typeof value == 'function' || false;
      };

      // fallback for older versions of Chrome and Safari
      if (isFn(/x/)) {
        isFn = function(value) {
          return typeof value == 'function' && toString.call(value) == '[object Function]';
        };
      }

      return isFn;
    }());

  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}

  var errorObj = {e: {}};
  
  function tryCatcherGen(tryCatchTarget) {
    return function tryCatcher() {
      try {
        return tryCatchTarget.apply(this, arguments);
      } catch (e) {
        errorObj.e = e;
        return errorObj;
      }
    };
  }

  var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {
    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
    return tryCatcherGen(fn);
  };

  function thrower(e) {
    throw e;
  }

  Rx.config.longStackSupport = false;
  var hasStacks = false, stacks = tryCatch(function () { throw new Error(); })();
  hasStacks = !!stacks.e && !!stacks.e.stack;

  // All code after this point will be filtered from stack traces reported by RxJS
  var rStartingLine = captureLine(), rFileName;

  var STACK_JUMP_SEPARATOR = 'From previous event:';

  function makeStackTraceLong(error, observable) {
    // If possible, transform the error stack trace by removing Node and RxJS
    // cruft, then concatenating with the stack trace of `observable`.
    if (hasStacks &&
        observable.stack &&
        typeof error === 'object' &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
      var stacks = [];
      for (var o = observable; !!o; o = o.source) {
        if (o.stack) {
          stacks.unshift(o.stack);
        }
      }
      stacks.unshift(error.stack);

      var concatedStacks = stacks.join('\n' + STACK_JUMP_SEPARATOR + '\n');
      error.stack = filterStackString(concatedStacks);
    }
  }

  function filterStackString(stackString) {
    var lines = stackString.split('\n'), desiredLines = [];
    for (var i = 0, len = lines.length; i < len; i++) {
      var line = lines[i];

      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
        desiredLines.push(line);
      }
    }
    return desiredLines.join('\n');
  }

  function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
    if (!fileNameAndLineNumber) {
      return false;
    }
    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];

    return fileName === rFileName &&
      lineNumber >= rStartingLine &&
      lineNumber <= rEndingLine;
  }

  function isNodeFrame(stackLine) {
    return stackLine.indexOf('(module.js:') !== -1 ||
      stackLine.indexOf('(node.js:') !== -1;
  }

  function captureLine() {
    if (!hasStacks) { return; }

    try {
      throw new Error();
    } catch (e) {
      var lines = e.stack.split('\n');
      var firstLine = lines[0].indexOf('@') > 0 ? lines[1] : lines[2];
      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
      if (!fileNameAndLineNumber) { return; }

      rFileName = fileNameAndLineNumber[0];
      return fileNameAndLineNumber[1];
    }
  }

  function getFileNameAndLineNumber(stackLine) {
    // Named functions: 'at functionName (filename:lineNumber:columnNumber)'
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }

    // Anonymous functions: 'at filename:lineNumber:columnNumber'
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }

    // Firefox style: 'function@filename:lineNumber or @filename:lineNumber'
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
  }

  var EmptyError = Rx.EmptyError = function() {
    this.message = 'Sequence contains no elements.';
    Error.call(this);
  };
  EmptyError.prototype = Object.create(Error.prototype);
  EmptyError.prototype.name = 'EmptyError';

  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
    this.message = 'Object has been disposed';
    Error.call(this);
  };
  ObjectDisposedError.prototype = Object.create(Error.prototype);
  ObjectDisposedError.prototype.name = 'ObjectDisposedError';

  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
    this.message = 'Argument out of range';
    Error.call(this);
  };
  ArgumentOutOfRangeError.prototype = Object.create(Error.prototype);
  ArgumentOutOfRangeError.prototype.name = 'ArgumentOutOfRangeError';

  var NotSupportedError = Rx.NotSupportedError = function (message) {
    this.message = message || 'This operation is not supported';
    Error.call(this);
  };
  NotSupportedError.prototype = Object.create(Error.prototype);
  NotSupportedError.prototype.name = 'NotSupportedError';

  var NotImplementedError = Rx.NotImplementedError = function (message) {
    this.message = message || 'This operation is not implemented';
    Error.call(this);
  };
  NotImplementedError.prototype = Object.create(Error.prototype);
  NotImplementedError.prototype.name = 'NotImplementedError';

  var notImplemented = Rx.helpers.notImplemented = function () {
    throw new NotImplementedError();
  };

  var notSupported = Rx.helpers.notSupported = function () {
    throw new NotSupportedError();
  };

  // Shim in iterator support
  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
    '_es6shim_iterator_';
  // Bug for mozilla version
  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
    $iterator$ = '@@iterator';
  }

  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };

  var isIterable = Rx.helpers.isIterable = function (o) {
    return o && o[$iterator$] !== undefined;
  };

  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
    return o && o.length !== undefined;
  };

  Rx.helpers.iterator = $iterator$;

  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
    if (typeof thisArg === 'undefined') { return func; }
    switch(argCount) {
      case 0:
        return function() {
          return func.call(thisArg)
        };
      case 1:
        return function(arg) {
          return func.call(thisArg, arg);
        };
      case 2:
        return function(value, index) {
          return func.call(thisArg, value, index);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
    }

    return function() {
      return func.apply(thisArg, arguments);
    };
  };

  /** Used to determine if values are of the language type Object */
  var dontEnums = ['toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'],
  dontEnumsLength = dontEnums.length;

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

var objectProto = Object.prototype,
    hasOwnProperty = objectProto.hasOwnProperty,
    objToString = objectProto.toString,
    MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

var keys = Object.keys || (function() {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
        dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ],
        dontEnumsLength = dontEnums.length;

    return function(obj) {
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }

      var result = [], prop, i;

      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }

      if (hasDontEnumBug) {
        for (i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  }());

function equalObjects(object, other, equalFunc, isLoose, stackA, stackB) {
  var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength !== othLength && !isLoose) {
    return false;
  }
  var index = objLength, key;
  while (index--) {
    key = objProps[index];
    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  var skipCtor = isLoose;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key],
        result;

    if (!(result === undefined ? equalFunc(objValue, othValue, isLoose, stackA, stackB) : result)) {
      return false;
    }
    skipCtor || (skipCtor = key === 'constructor');
  }
  if (!skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    if (objCtor !== othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor === 'function' && objCtor instanceof objCtor &&
          typeof othCtor === 'function' && othCtor instanceof othCtor)) {
      return false;
    }
  }
  return true;
}

function equalByTag(object, other, tag) {
  switch (tag) {
    case boolTag:
    case dateTag:
      return +object === +other;

    case errorTag:
      return object.name === other.name && object.message === other.message;

    case numberTag:
      return (object !== +object) ?
        other !== +other :
        object === +other;

    case regexpTag:
    case stringTag:
      return object === (other + '');
  }
  return false;
}

var isObject = Rx.internals.isObject = function(value) {
  var type = typeof value;
  return !!value && (type === 'object' || type === 'function');
};

function isObjectLike(value) {
  return !!value && typeof value === 'object';
}

function isLength(value) {
  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;
}

var isHostObject = (function() {
  try {
    Object({ 'toString': 0 } + '');
  } catch(e) {
    return function() { return false; };
  }
  return function(value) {
    return typeof value.toString !== 'function' && typeof (value + '') === 'string';
  };
}());

function isTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
}

var isArray = Array.isArray || function(value) {
  return isObjectLike(value) && isLength(value.length) && objToString.call(value) === arrayTag;
};

function arraySome (array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

function equalArrays(array, other, equalFunc, isLoose, stackA, stackB) {
  var index = -1,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength !== othLength && !(isLoose && othLength > arrLength)) {
    return false;
  }
  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index],
        result;

    if (result !== undefined) {
      if (result) {
        continue;
      }
      return false;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isLoose) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB);
          })) {
        return false;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB))) {
      return false;
    }
  }
  return true;
}

function baseIsEqualDeep(object, other, equalFunc, isLoose, stackA, stackB) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = objToString.call(object);
    if (objTag === argsTag) {
      objTag = objectTag;
    } else if (objTag !== objectTag) {
      objIsArr = isTypedArray(object);
    }
  }
  if (!othIsArr) {
    othTag = objToString.call(other);
    if (othTag === argsTag) {
      othTag = objectTag;
    }
  }
  var objIsObj = objTag === objectTag && !isHostObject(object),
      othIsObj = othTag === objectTag && !isHostObject(other),
      isSameTag = objTag === othTag;

  if (isSameTag && !(objIsArr || objIsObj)) {
    return equalByTag(object, other, objTag);
  }
  if (!isLoose) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, isLoose, stackA, stackB);
    }
  }
  if (!isSameTag) {
    return false;
  }
  // Assume cyclic values are equal.
  // For more information on detecting circular references see https://es5.github.io/#JO.
  stackA || (stackA = []);
  stackB || (stackB = []);

  var length = stackA.length;
  while (length--) {
    if (stackA[length] === object) {
      return stackB[length] === other;
    }
  }
  // Add `object` and `other` to the stack of traversed objects.
  stackA.push(object);
  stackB.push(other);

  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, isLoose, stackA, stackB);

  stackA.pop();
  stackB.pop();

  return result;
}

function baseIsEqual(value, other, isLoose, stackA, stackB) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, isLoose, stackA, stackB);
}

var isEqual = Rx.internals.isEqual = function (value, other) {
  return baseIsEqual(value, other);
};

  var hasProp = {}.hasOwnProperty,
      slice = Array.prototype.slice;

  var inherits = Rx.internals.inherits = function (child, parent) {
    function __() { this.constructor = child; }
    __.prototype = parent.prototype;
    child.prototype = new __();
  };

  var addProperties = Rx.internals.addProperties = function (obj) {
    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
      var source = sources[idx];
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    }
  };

  // Rx Utils
  var addRef = Rx.internals.addRef = function (xs, r) {
    return new AnonymousObservable(function (observer) {
      return new BinaryDisposable(r.getDisposable(), xs.subscribe(observer));
    });
  };

  function arrayInitialize(count, factory) {
    var a = new Array(count);
    for (var i = 0; i < count; i++) {
      a[i] = factory();
    }
    return a;
  }

  function IndexedItem(id, value) {
    this.id = id;
    this.value = value;
  }

  IndexedItem.prototype.compareTo = function (other) {
    var c = this.value.compareTo(other.value);
    c === 0 && (c = this.id - other.id);
    return c;
  };

  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
    this.items = new Array(capacity);
    this.length = 0;
  };

  var priorityProto = PriorityQueue.prototype;
  priorityProto.isHigherPriority = function (left, right) {
    return this.items[left].compareTo(this.items[right]) < 0;
  };

  priorityProto.percolate = function (index) {
    if (index >= this.length || index < 0) { return; }
    var parent = index - 1 >> 1;
    if (parent < 0 || parent === index) { return; }
    if (this.isHigherPriority(index, parent)) {
      var temp = this.items[index];
      this.items[index] = this.items[parent];
      this.items[parent] = temp;
      this.percolate(parent);
    }
  };

  priorityProto.heapify = function (index) {
    +index || (index = 0);
    if (index >= this.length || index < 0) { return; }
    var left = 2 * index + 1,
        right = 2 * index + 2,
        first = index;
    if (left < this.length && this.isHigherPriority(left, first)) {
      first = left;
    }
    if (right < this.length && this.isHigherPriority(right, first)) {
      first = right;
    }
    if (first !== index) {
      var temp = this.items[index];
      this.items[index] = this.items[first];
      this.items[first] = temp;
      this.heapify(first);
    }
  };

  priorityProto.peek = function () { return this.items[0].value; };

  priorityProto.removeAt = function (index) {
    this.items[index] = this.items[--this.length];
    this.items[this.length] = undefined;
    this.heapify();
  };

  priorityProto.dequeue = function () {
    var result = this.peek();
    this.removeAt(0);
    return result;
  };

  priorityProto.enqueue = function (item) {
    var index = this.length++;
    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
    this.percolate(index);
  };

  priorityProto.remove = function (item) {
    for (var i = 0; i < this.length; i++) {
      if (this.items[i].value === item) {
        this.removeAt(i);
        return true;
      }
    }
    return false;
  };
  PriorityQueue.count = 0;

  /**
   * Represents a group of disposable resources that are disposed together.
   * @constructor
   */
  var CompositeDisposable = Rx.CompositeDisposable = function () {
    var args = [], i, len;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      len = arguments.length;
      args = new Array(len);
      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    this.disposables = args;
    this.isDisposed = false;
    this.length = args.length;
  };

  var CompositeDisposablePrototype = CompositeDisposable.prototype;

  /**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Mixed} item Disposable to add.
   */
  CompositeDisposablePrototype.add = function (item) {
    if (this.isDisposed) {
      item.dispose();
    } else {
      this.disposables.push(item);
      this.length++;
    }
  };

  /**
   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
   * @param {Mixed} item Disposable to remove.
   * @returns {Boolean} true if found; false otherwise.
   */
  CompositeDisposablePrototype.remove = function (item) {
    var shouldDispose = false;
    if (!this.isDisposed) {
      var idx = this.disposables.indexOf(item);
      if (idx !== -1) {
        shouldDispose = true;
        this.disposables.splice(idx, 1);
        this.length--;
        item.dispose();
      }
    }
    return shouldDispose;
  };

  /**
   *  Disposes all disposables in the group and removes them from the group.
   */
  CompositeDisposablePrototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var len = this.disposables.length, currentDisposables = new Array(len);
      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
      this.disposables = [];
      this.length = 0;

      for (i = 0; i < len; i++) {
        currentDisposables[i].dispose();
      }
    }
  };

  /**
   * Provides a set of static methods for creating Disposables.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   */
  var Disposable = Rx.Disposable = function (action) {
    this.isDisposed = false;
    this.action = action || noop;
  };

  /** Performs the task of cleaning up resources. */
  Disposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.action();
      this.isDisposed = true;
    }
  };

  /**
   * Creates a disposable object that invokes the specified action when disposed.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   * @return {Disposable} The disposable object that runs the given action upon disposal.
   */
  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };

  /**
   * Gets the disposable that does nothing when disposed.
   */
  var disposableEmpty = Disposable.empty = { dispose: noop };

  /**
   * Validates whether the given object is a disposable
   * @param {Object} Object to test whether it has a dispose method
   * @returns {Boolean} true if a disposable object, else false.
   */
  var isDisposable = Disposable.isDisposable = function (d) {
    return d && isFunction(d.dispose);
  };

  var checkDisposed = Disposable.checkDisposed = function (disposable) {
    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
  };

  var disposableFixup = Disposable._fixup = function (result) {
    return isDisposable(result) ? result : disposableEmpty;
  };

  // Single assignment
  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SingleAssignmentDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SingleAssignmentDisposable.prototype.setDisposable = function (value) {
    if (this.current) { throw new Error('Disposable has already been assigned'); }
    var shouldDispose = this.isDisposed;
    !shouldDispose && (this.current = value);
    shouldDispose && value && value.dispose();
  };
  SingleAssignmentDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
      old && old.dispose();
    }
  };

  // Multiple assignment disposable
  var SerialDisposable = Rx.SerialDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SerialDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SerialDisposable.prototype.setDisposable = function (value) {
    var shouldDispose = this.isDisposed;
    if (!shouldDispose) {
      var old = this.current;
      this.current = value;
    }
    old && old.dispose();
    shouldDispose && value && value.dispose();
  };
  SerialDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
    }
    old && old.dispose();
  };

  var BinaryDisposable = Rx.BinaryDisposable = function (first, second) {
    this._first = first;
    this._second = second;
    this.isDisposed = false;
  };

  BinaryDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old1 = this._first;
      this._first = null;
      old1 && old1.dispose();
      var old2 = this._second;
      this._second = null;
      old2 && old2.dispose();
    }
  };

  var NAryDisposable = Rx.NAryDisposable = function (disposables) {
    this._disposables = disposables;
    this.isDisposed = false;
  };

  NAryDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      for (var i = 0, len = this._disposables.length; i < len; i++) {
        this._disposables[i].dispose();
      }
      this._disposables.length = 0;
    }
  };

  /**
   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
   */
  var RefCountDisposable = Rx.RefCountDisposable = (function () {

    function InnerDisposable(disposable) {
      this.disposable = disposable;
      this.disposable.count++;
      this.isInnerDisposed = false;
    }

    InnerDisposable.prototype.dispose = function () {
      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
        this.isInnerDisposed = true;
        this.disposable.count--;
        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
          this.disposable.isDisposed = true;
          this.disposable.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Initializes a new instance of the RefCountDisposable with the specified disposable.
     * @constructor
     * @param {Disposable} disposable Underlying disposable.
      */
    function RefCountDisposable(disposable) {
      this.underlyingDisposable = disposable;
      this.isDisposed = false;
      this.isPrimaryDisposed = false;
      this.count = 0;
    }

    /**
     * Disposes the underlying disposable only when all dependent disposables have been disposed
     */
    RefCountDisposable.prototype.dispose = function () {
      if (!this.isDisposed && !this.isPrimaryDisposed) {
        this.isPrimaryDisposed = true;
        if (this.count === 0) {
          this.isDisposed = true;
          this.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
     */
    RefCountDisposable.prototype.getDisposable = function () {
      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
    };

    return RefCountDisposable;
  })();

  function ScheduledDisposable(scheduler, disposable) {
    this.scheduler = scheduler;
    this.disposable = disposable;
    this.isDisposed = false;
  }

  function scheduleItem(s, self) {
    if (!self.isDisposed) {
      self.isDisposed = true;
      self.disposable.dispose();
    }
  }

  ScheduledDisposable.prototype.dispose = function () {
    this.scheduler.schedule(this, scheduleItem);
  };

  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
    this.scheduler = scheduler;
    this.state = state;
    this.action = action;
    this.dueTime = dueTime;
    this.comparer = comparer || defaultSubComparer;
    this.disposable = new SingleAssignmentDisposable();
  };

  ScheduledItem.prototype.invoke = function () {
    this.disposable.setDisposable(this.invokeCore());
  };

  ScheduledItem.prototype.compareTo = function (other) {
    return this.comparer(this.dueTime, other.dueTime);
  };

  ScheduledItem.prototype.isCancelled = function () {
    return this.disposable.isDisposed;
  };

  ScheduledItem.prototype.invokeCore = function () {
    return disposableFixup(this.action(this.scheduler, this.state));
  };

  /** Provides a set of static properties to access commonly used schedulers. */
  var Scheduler = Rx.Scheduler = (function () {

    function Scheduler() { }

    /** Determines whether the given object is a scheduler */
    Scheduler.isScheduler = function (s) {
      return s instanceof Scheduler;
    };

    var schedulerProto = Scheduler.prototype;

    /**
   * Schedules an action to be executed.
   * @param state State passed to the action to be executed.
   * @param {Function} action Action to be executed.
   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
   */
    schedulerProto.schedule = function (state, action) {
      throw new NotImplementedError();
    };

  /**
   * Schedules an action to be executed after dueTime.
   * @param state State passed to the action to be executed.
   * @param {Function} action Action to be executed.
   * @param {Number} dueTime Relative time after which to execute the action.
   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
   */
    schedulerProto.scheduleFuture = function (state, dueTime, action) {
      var dt = dueTime;
      dt instanceof Date && (dt = dt - this.now());
      dt = Scheduler.normalize(dt);

      if (dt === 0) { return this.schedule(state, action); }

      return this._scheduleFuture(state, dt, action);
    };

    schedulerProto._scheduleFuture = function (state, dueTime, action) {
      throw new NotImplementedError();
    };

    /** Gets the current time according to the local machine's system clock. */
    Scheduler.now = defaultNow;

    /** Gets the current time according to the local machine's system clock. */
    Scheduler.prototype.now = defaultNow;

    /**
     * Normalizes the specified TimeSpan value to a positive value.
     * @param {Number} timeSpan The time span value to normalize.
     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
     */
    Scheduler.normalize = function (timeSpan) {
      timeSpan < 0 && (timeSpan = 0);
      return timeSpan;
    };

    return Scheduler;
  }());

  var normalizeTime = Scheduler.normalize, isScheduler = Scheduler.isScheduler;

  (function (schedulerProto) {

    function invokeRecImmediate(scheduler, pair) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();
      action(state, innerAction);
      return group;

      function innerAction(state2) {
        var isAdded = false, isDone = false;

        var d = scheduler.schedule(state2, scheduleWork);
        if (!isDone) {
          group.add(d);
          isAdded = true;
        }

        function scheduleWork(_, state3) {
          if (isAdded) {
            group.remove(d);
          } else {
            isDone = true;
          }
          action(state3, innerAction);
          return disposableEmpty;
        }
      }
    }

    function invokeRecDate(scheduler, pair) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();
      action(state, innerAction);
      return group;

      function innerAction(state2, dueTime1) {
        var isAdded = false, isDone = false;

        var d = scheduler.scheduleFuture(state2, dueTime1, scheduleWork);
        if (!isDone) {
          group.add(d);
          isAdded = true;
        }

        function scheduleWork(_, state3) {
          if (isAdded) {
            group.remove(d);
          } else {
            isDone = true;
          }
          action(state3, innerAction);
          return disposableEmpty;
        }
      }
    }

    /**
     * Schedules an action to be executed recursively.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursive = function (state, action) {
      return this.schedule([state, action], invokeRecImmediate);
    };

    /**
     * Schedules an action to be executed recursively after a specified relative or absolute due time.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param {Number | Date} dueTime Relative or absolute time after which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveFuture = function (state, dueTime, action) {
      return this.scheduleFuture([state, action], dueTime, invokeRecDate);
    };

  }(Scheduler.prototype));

  (function (schedulerProto) {

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param {Mixed} state Initial state passed to the action upon the first iteration.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed, potentially updating the state.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    schedulerProto.schedulePeriodic = function(state, period, action) {
      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
      period = normalizeTime(period);
      var s = state, id = root.setInterval(function () { s = action(s); }, period);
      return disposableCreate(function () { root.clearInterval(id); });
    };

  }(Scheduler.prototype));

  (function (schedulerProto) {
    /**
     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
     */
    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
      return new CatchScheduler(this, handler);
    };
  }(Scheduler.prototype));

  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
    function createTick(self) {
      return function tick(command, recurse) {
        recurse(0, self._period);
        var state = tryCatch(self._action)(self._state);
        if (state === errorObj) {
          self._cancel.dispose();
          thrower(state.e);
        }
        self._state = state;
      };
    }

    function SchedulePeriodicRecursive(scheduler, state, period, action) {
      this._scheduler = scheduler;
      this._state = state;
      this._period = period;
      this._action = action;
    }

    SchedulePeriodicRecursive.prototype.start = function () {
      var d = new SingleAssignmentDisposable();
      this._cancel = d;
      d.setDisposable(this._scheduler.scheduleRecursiveFuture(0, this._period, createTick(this)));

      return d;
    };

    return SchedulePeriodicRecursive;
  }());

  /** Gets a scheduler that schedules work immediately on the current thread. */
   var ImmediateScheduler = (function (__super__) {
    inherits(ImmediateScheduler, __super__);
    function ImmediateScheduler() {
      __super__.call(this);
    }

    ImmediateScheduler.prototype.schedule = function (state, action) {
      return disposableFixup(action(this, state));
    };

    return ImmediateScheduler;
  }(Scheduler));

  var immediateScheduler = Scheduler.immediate = new ImmediateScheduler();

  /**
   * Gets a scheduler that schedules work as soon as possible on the current thread.
   */
  var CurrentThreadScheduler = (function (__super__) {
    var queue;

    function runTrampoline () {
      while (queue.length > 0) {
        var item = queue.dequeue();
        !item.isCancelled() && item.invoke();
      }
    }

    inherits(CurrentThreadScheduler, __super__);
    function CurrentThreadScheduler() {
      __super__.call(this);
    }

    CurrentThreadScheduler.prototype.schedule = function (state, action) {
      var si = new ScheduledItem(this, state, action, this.now());

      if (!queue) {
        queue = new PriorityQueue(4);
        queue.enqueue(si);

        var result = tryCatch(runTrampoline)();
        queue = null;
        if (result === errorObj) { thrower(result.e); }
      } else {
        queue.enqueue(si);
      }
      return si.disposable;
    };

    CurrentThreadScheduler.prototype.scheduleRequired = function () { return !queue; };

    return CurrentThreadScheduler;
  }(Scheduler));

  var currentThreadScheduler = Scheduler.currentThread = new CurrentThreadScheduler();

  var scheduleMethod, clearMethod;

  var localTimer = (function () {
    var localSetTimeout, localClearTimeout = noop;
    if (!!root.setTimeout) {
      localSetTimeout = root.setTimeout;
      localClearTimeout = root.clearTimeout;
    } else if (!!root.WScript) {
      localSetTimeout = function (fn, time) {
        root.WScript.Sleep(time);
        fn();
      };
    } else {
      throw new NotSupportedError();
    }

    return {
      setTimeout: localSetTimeout,
      clearTimeout: localClearTimeout
    };
  }());
  var localSetTimeout = localTimer.setTimeout,
    localClearTimeout = localTimer.clearTimeout;

  (function () {

    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;

    clearMethod = function (handle) {
      delete tasksByHandle[handle];
    };

    function runTask(handle) {
      if (currentlyRunning) {
        localSetTimeout(function () { runTask(handle); }, 0);
      } else {
        var task = tasksByHandle[handle];
        if (task) {
          currentlyRunning = true;
          var result = tryCatch(task)();
          clearMethod(handle);
          currentlyRunning = false;
          if (result === errorObj) { thrower(result.e); }
        }
      }
    }

    var reNative = new RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
      !reNative.test(setImmediate) && setImmediate;

    function postMessageSupported () {
      // Ensure not in a worker
      if (!root.postMessage || root.importScripts) { return false; }
      var isAsync = false, oldHandler = root.onmessage;
      // Test for async
      root.onmessage = function () { isAsync = true; };
      root.postMessage('', '*');
      root.onmessage = oldHandler;

      return isAsync;
    }

    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
    if (isFunction(setImmediate)) {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        setImmediate(function () { runTask(id); });

        return id;
      };
    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        process.nextTick(function () { runTask(id); });

        return id;
      };
    } else if (postMessageSupported()) {
      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

      var onGlobalPostMessage = function (event) {
        // Only if we're a match to avoid any other global events
        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
          runTask(event.data.substring(MSG_PREFIX.length));
        }
      };

      root.addEventListener('message', onGlobalPostMessage, false);

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.postMessage(MSG_PREFIX + id, '*');
        return id;
      };
    } else if (!!root.MessageChannel) {
      var channel = new root.MessageChannel();

      channel.port1.onmessage = function (e) { runTask(e.data); };

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        channel.port2.postMessage(id);
        return id;
      };
    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

      scheduleMethod = function (action) {
        var scriptElement = root.document.createElement('script');
        var id = nextHandle++;
        tasksByHandle[id] = action;

        scriptElement.onreadystatechange = function () {
          runTask(id);
          scriptElement.onreadystatechange = null;
          scriptElement.parentNode.removeChild(scriptElement);
          scriptElement = null;
        };
        root.document.documentElement.appendChild(scriptElement);
        return id;
      };

    } else {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        localSetTimeout(function () {
          runTask(id);
        }, 0);

        return id;
      };
    }
  }());

  /**
   * Gets a scheduler that schedules work via a timed callback based upon platform.
   */
   var DefaultScheduler = (function (__super__) {
     inherits(DefaultScheduler, __super__);
     function DefaultScheduler() {
       __super__.call(this);
     }

     function scheduleAction(disposable, action, scheduler, state) {
       return function schedule() {
         disposable.setDisposable(Disposable._fixup(action(scheduler, state)));
       };
     }

     function ClearDisposable(id) {
       this._id = id;
       this.isDisposed = false;
     }

     ClearDisposable.prototype.dispose = function () {
       if (!this.isDisposed) {
         this.isDisposed = true;
         clearMethod(this._id);
       }
     };

     function LocalClearDisposable(id) {
       this._id = id;
       this.isDisposed = false;
     }

     LocalClearDisposable.prototype.dispose = function () {
       if (!this.isDisposed) {
         this.isDisposed = true;
         localClearTimeout(this._id);
       }
     };

    DefaultScheduler.prototype.schedule = function (state, action) {
      var disposable = new SingleAssignmentDisposable(),
          id = scheduleMethod(scheduleAction(disposable, action, this, state));
      return new BinaryDisposable(disposable, new ClearDisposable(id));
    };

    DefaultScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
      if (dueTime === 0) { return this.schedule(state, action); }
      var disposable = new SingleAssignmentDisposable(),
          id = localSetTimeout(scheduleAction(disposable, action, this, state), dueTime);
      return new BinaryDisposable(disposable, new LocalClearDisposable(id));
    };

    function scheduleLongRunning(state, action, disposable) {
      return function () { action(state, disposable); };
    }

    DefaultScheduler.prototype.scheduleLongRunning = function (state, action) {
      var disposable = disposableCreate(noop);
      scheduleMethod(scheduleLongRunning(state, action, disposable));
      return disposable;
    };

    return DefaultScheduler;
  }(Scheduler));

  var defaultScheduler = Scheduler['default'] = Scheduler.async = new DefaultScheduler();

  var CatchScheduler = (function (__super__) {
    inherits(CatchScheduler, __super__);

    function CatchScheduler(scheduler, handler) {
      this._scheduler = scheduler;
      this._handler = handler;
      this._recursiveOriginal = null;
      this._recursiveWrapper = null;
      __super__.call(this);
    }

    CatchScheduler.prototype.schedule = function (state, action) {
      return this._scheduler.schedule(state, this._wrap(action));
    };

    CatchScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
      return this._scheduler.schedule(state, dueTime, this._wrap(action));
    };

    CatchScheduler.prototype.now = function () { return this._scheduler.now(); };

    CatchScheduler.prototype._clone = function (scheduler) {
        return new CatchScheduler(scheduler, this._handler);
    };

    CatchScheduler.prototype._wrap = function (action) {
      var parent = this;
      return function (self, state) {
        var res = tryCatch(action)(parent._getRecursiveWrapper(self), state);
        if (res === errorObj) {
          if (!parent._handler(res.e)) { thrower(res.e); }
          return disposableEmpty;
        }
        return disposableFixup(res);
      };
    };

    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
      if (this._recursiveOriginal !== scheduler) {
        this._recursiveOriginal = scheduler;
        var wrapper = this._clone(scheduler);
        wrapper._recursiveOriginal = scheduler;
        wrapper._recursiveWrapper = wrapper;
        this._recursiveWrapper = wrapper;
      }
      return this._recursiveWrapper;
    };

    CatchScheduler.prototype.schedulePeriodic = function (state, period, action) {
      var self = this, failed = false, d = new SingleAssignmentDisposable();

      d.setDisposable(this._scheduler.schedulePeriodic(state, period, function (state1) {
        if (failed) { return null; }
        var res = tryCatch(action)(state1);
        if (res === errorObj) {
          failed = true;
          if (!self._handler(res.e)) { thrower(res.e); }
          d.dispose();
          return null;
        }
        return res;
      }));

      return d;
    };

    return CatchScheduler;
  }(Scheduler));

  /**
   *  Represents a notification to an observer.
   */
  var Notification = Rx.Notification = (function () {
    function Notification() {

    }

    Notification.prototype._accept = function (onNext, onError, onCompleted) {
      throw new NotImplementedError();
    };

    Notification.prototype._acceptObserver = function (onNext, onError, onCompleted) {
      throw new NotImplementedError();
    };

    /**
     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
     * @param {Function | Observer} observerOrOnNext Function to invoke for an OnNext notification or Observer to invoke the notification on..
     * @param {Function} onError Function to invoke for an OnError notification.
     * @param {Function} onCompleted Function to invoke for an OnCompleted notification.
     * @returns {Any} Result produced by the observation.
     */
    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
        this._acceptObserver(observerOrOnNext) :
        this._accept(observerOrOnNext, onError, onCompleted);
    };

    /**
     * Returns an observable sequence with a single notification.
     *
     * @memberOf Notifications
     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
     */
    Notification.prototype.toObservable = function (scheduler) {
      var self = this;
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      return new AnonymousObservable(function (o) {
        return scheduler.schedule(self, function (_, notification) {
          notification._acceptObserver(o);
          notification.kind === 'N' && o.onCompleted();
        });
      });
    };

    return Notification;
  })();

  var OnNextNotification = (function (__super__) {
    inherits(OnNextNotification, __super__);
    function OnNextNotification(value) {
      this.value = value;
      this.kind = 'N';
    }

    OnNextNotification.prototype._accept = function (onNext) {
      return onNext(this.value);
    };

    OnNextNotification.prototype._acceptObserver = function (o) {
      return o.onNext(this.value);
    };

    OnNextNotification.prototype.toString = function () {
      return 'OnNext(' + this.value + ')';
    };

    return OnNextNotification;
  }(Notification));

  var OnErrorNotification = (function (__super__) {
    inherits(OnErrorNotification, __super__);
    function OnErrorNotification(error) {
      this.error = error;
      this.kind = 'E';
    }

    OnErrorNotification.prototype._accept = function (onNext, onError) {
      return onError(this.error);
    };

    OnErrorNotification.prototype._acceptObserver = function (o) {
      return o.onError(this.error);
    };

    OnErrorNotification.prototype.toString = function () {
      return 'OnError(' + this.error + ')';
    };

    return OnErrorNotification;
  }(Notification));

  var OnCompletedNotification = (function (__super__) {
    inherits(OnCompletedNotification, __super__);
    function OnCompletedNotification() {
      this.kind = 'C';
    }

    OnCompletedNotification.prototype._accept = function (onNext, onError, onCompleted) {
      return onCompleted();
    };

    OnCompletedNotification.prototype._acceptObserver = function (o) {
      return o.onCompleted();
    };

    OnCompletedNotification.prototype.toString = function () {
      return 'OnCompleted()';
    };

    return OnCompletedNotification;
  }(Notification));

  /**
   * Creates an object that represents an OnNext notification to an observer.
   * @param {Any} value The value contained in the notification.
   * @returns {Notification} The OnNext notification containing the value.
   */
  var notificationCreateOnNext = Notification.createOnNext = function (value) {
    return new OnNextNotification(value);
  };

  /**
   * Creates an object that represents an OnError notification to an observer.
   * @param {Any} error The exception contained in the notification.
   * @returns {Notification} The OnError notification containing the exception.
   */
  var notificationCreateOnError = Notification.createOnError = function (error) {
    return new OnErrorNotification(error);
  };

  /**
   * Creates an object that represents an OnCompleted notification to an observer.
   * @returns {Notification} The OnCompleted notification.
   */
  var notificationCreateOnCompleted = Notification.createOnCompleted = function () {
    return new OnCompletedNotification();
  };

  /**
   * Supports push-style iteration over an observable sequence.
   */
  var Observer = Rx.Observer = function () { };

  /**
   *  Creates a notification callback from an observer.
   * @returns The action that forwards its input notification to the underlying observer.
   */
  Observer.prototype.toNotifier = function () {
    var observer = this;
    return function (n) { return n.accept(observer); };
  };

  /**
   *  Hides the identity of an observer.
   * @returns An observer that hides the identity of the specified observer.
   */
  Observer.prototype.asObserver = function () {
    var self = this;
    return new AnonymousObserver(
      function (x) { self.onNext(x); },
      function (err) { self.onError(err); },
      function () { self.onCompleted(); });
  };

  /**
   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
   *  If a violation is detected, an Error is thrown from the offending observer method call.
   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
   */
  Observer.prototype.checked = function () { return new CheckedObserver(this); };

  /**
   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
   * @param {Function} [onNext] Observer's OnNext action implementation.
   * @param {Function} [onError] Observer's OnError action implementation.
   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
   * @returns {Observer} The observer object implemented using the given actions.
   */
  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
    onNext || (onNext = noop);
    onError || (onError = defaultError);
    onCompleted || (onCompleted = noop);
    return new AnonymousObserver(onNext, onError, onCompleted);
  };

  /**
   *  Creates an observer from a notification callback.
   * @param {Function} handler Action that handles a notification.
   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
   */
  Observer.fromNotifier = function (handler, thisArg) {
    var cb = bindCallback(handler, thisArg, 1);
    return new AnonymousObserver(function (x) {
      return cb(notificationCreateOnNext(x));
    }, function (e) {
      return cb(notificationCreateOnError(e));
    }, function () {
      return cb(notificationCreateOnCompleted());
    });
  };

  /**
   * Schedules the invocation of observer methods on the given scheduler.
   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
   */
  Observer.prototype.notifyOn = function (scheduler) {
    return new ObserveOnObserver(scheduler, this);
  };

  Observer.prototype.makeSafe = function(disposable) {
    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
  };

  /**
   * Abstract base class for implementations of the Observer class.
   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
   */
  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
    inherits(AbstractObserver, __super__);

    /**
     * Creates a new observer in a non-stopped state.
     */
    function AbstractObserver() {
      this.isStopped = false;
    }

    // Must be implemented by other observers
    AbstractObserver.prototype.next = notImplemented;
    AbstractObserver.prototype.error = notImplemented;
    AbstractObserver.prototype.completed = notImplemented;

    /**
     * Notifies the observer of a new element in the sequence.
     * @param {Any} value Next element in the sequence.
     */
    AbstractObserver.prototype.onNext = function (value) {
      !this.isStopped && this.next(value);
    };

    /**
     * Notifies the observer that an exception has occurred.
     * @param {Any} error The error that has occurred.
     */
    AbstractObserver.prototype.onError = function (error) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(error);
      }
    };

    /**
     * Notifies the observer of the end of the sequence.
     */
    AbstractObserver.prototype.onCompleted = function () {
      if (!this.isStopped) {
        this.isStopped = true;
        this.completed();
      }
    };

    /**
     * Disposes the observer, causing it to transition to the stopped state.
     */
    AbstractObserver.prototype.dispose = function () { this.isStopped = true; };

    AbstractObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(e);
        return true;
      }

      return false;
    };

    return AbstractObserver;
  }(Observer));

  /**
   * Class to create an Observer instance from delegate-based implementations of the on* methods.
   */
  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
    inherits(AnonymousObserver, __super__);

    /**
     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
     * @param {Any} onNext Observer's OnNext action implementation.
     * @param {Any} onError Observer's OnError action implementation.
     * @param {Any} onCompleted Observer's OnCompleted action implementation.
     */
    function AnonymousObserver(onNext, onError, onCompleted) {
      __super__.call(this);
      this._onNext = onNext;
      this._onError = onError;
      this._onCompleted = onCompleted;
    }

    /**
     * Calls the onNext action.
     * @param {Any} value Next element in the sequence.
     */
    AnonymousObserver.prototype.next = function (value) {
      this._onNext(value);
    };

    /**
     * Calls the onError action.
     * @param {Any} error The error that has occurred.
     */
    AnonymousObserver.prototype.error = function (error) {
      this._onError(error);
    };

    /**
     *  Calls the onCompleted action.
     */
    AnonymousObserver.prototype.completed = function () {
      this._onCompleted();
    };

    return AnonymousObserver;
  }(AbstractObserver));

  var CheckedObserver = (function (__super__) {
    inherits(CheckedObserver, __super__);

    function CheckedObserver(observer) {
      __super__.call(this);
      this._observer = observer;
      this._state = 0; // 0 - idle, 1 - busy, 2 - done
    }

    var CheckedObserverPrototype = CheckedObserver.prototype;

    CheckedObserverPrototype.onNext = function (value) {
      this.checkAccess();
      var res = tryCatch(this._observer.onNext).call(this._observer, value);
      this._state = 0;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.onError = function (err) {
      this.checkAccess();
      var res = tryCatch(this._observer.onError).call(this._observer, err);
      this._state = 2;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.onCompleted = function () {
      this.checkAccess();
      var res = tryCatch(this._observer.onCompleted).call(this._observer);
      this._state = 2;
      res === errorObj && thrower(res.e);
    };

    CheckedObserverPrototype.checkAccess = function () {
      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
      if (this._state === 2) { throw new Error('Observer completed'); }
      if (this._state === 0) { this._state = 1; }
    };

    return CheckedObserver;
  }(Observer));

  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
    inherits(ScheduledObserver, __super__);

    function ScheduledObserver(scheduler, observer) {
      __super__.call(this);
      this.scheduler = scheduler;
      this.observer = observer;
      this.isAcquired = false;
      this.hasFaulted = false;
      this.queue = [];
      this.disposable = new SerialDisposable();
    }

    function enqueueNext(observer, x) { return function () { observer.onNext(x); }; }
    function enqueueError(observer, e) { return function () { observer.onError(e); }; }
    function enqueueCompleted(observer) { return function () { observer.onCompleted(); }; }

    ScheduledObserver.prototype.next = function (x) {
      this.queue.push(enqueueNext(this.observer, x));
    };

    ScheduledObserver.prototype.error = function (e) {
      this.queue.push(enqueueError(this.observer, e));
    };

    ScheduledObserver.prototype.completed = function () {
      this.queue.push(enqueueCompleted(this.observer));
    };


    function scheduleMethod(state, recurse) {
      var work;
      if (state.queue.length > 0) {
        work = state.queue.shift();
      } else {
        state.isAcquired = false;
        return;
      }
      var res = tryCatch(work)();
      if (res === errorObj) {
        state.queue = [];
        state.hasFaulted = true;
        return thrower(res.e);
      }
      recurse(state);
    }

    ScheduledObserver.prototype.ensureActive = function () {
      var isOwner = false;
      if (!this.hasFaulted && this.queue.length > 0) {
        isOwner = !this.isAcquired;
        this.isAcquired = true;
      }
      isOwner &&
        this.disposable.setDisposable(this.scheduler.scheduleRecursive(this, scheduleMethod));
    };

    ScheduledObserver.prototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.disposable.dispose();
    };

    return ScheduledObserver;
  }(AbstractObserver));

  var ObserveOnObserver = (function (__super__) {
    inherits(ObserveOnObserver, __super__);

    function ObserveOnObserver(scheduler, observer, cancel) {
      __super__.call(this, scheduler, observer);
      this._cancel = cancel;
    }

    ObserveOnObserver.prototype.next = function (value) {
      __super__.prototype.next.call(this, value);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.error = function (e) {
      __super__.prototype.error.call(this, e);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.completed = function () {
      __super__.prototype.completed.call(this);
      this.ensureActive();
    };

    ObserveOnObserver.prototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this._cancel && this._cancel.dispose();
      this._cancel = null;
    };

    return ObserveOnObserver;
  })(ScheduledObserver);

  var observableProto;

  /**
   * Represents a push-style collection.
   */
  var Observable = Rx.Observable = (function () {

    function makeSubscribe(self, subscribe) {
      return function (o) {
        var oldOnError = o.onError;
        o.onError = function (e) {
          makeStackTraceLong(e, self);
          oldOnError.call(o, e);
        };

        return subscribe.call(self, o);
      };
    }

    function Observable() {
      if (Rx.config.longStackSupport && hasStacks) {
        var oldSubscribe = this._subscribe;
        var e = tryCatch(thrower)(new Error()).e;
        this.stack = e.stack.substring(e.stack.indexOf('\n') + 1);
        this._subscribe = makeSubscribe(this, oldSubscribe);
      }
    }

    observableProto = Observable.prototype;

    /**
    * Determines whether the given object is an Observable
    * @param {Any} An object to determine whether it is an Observable
    * @returns {Boolean} true if an Observable, else false.
    */
    Observable.isObservable = function (o) {
      return o && isFunction(o.subscribe);
    };

    /**
     *  Subscribes an o to the observable sequence.
     *  @param {Mixed} [oOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribe = observableProto.forEach = function (oOrOnNext, onError, onCompleted) {
      return this._subscribe(typeof oOrOnNext === 'object' ?
        oOrOnNext :
        observerCreate(oOrOnNext, onError, onCompleted));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onNext The function to invoke on each element in the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnNext = function (onNext, thisArg) {
      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
    };

    /**
     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnError = function (onError, thisArg) {
      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
    };

    return Observable;
  })();

  var ObservableBase = Rx.ObservableBase = (function (__super__) {
    inherits(ObservableBase, __super__);

    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], self = state[1];
      var sub = tryCatch(self.subscribeCore).call(self, ado);
      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
      ado.setDisposable(fixSubscriber(sub));
    }

    function ObservableBase() {
      __super__.call(this);
    }

    ObservableBase.prototype._subscribe = function (o) {
      var ado = new AutoDetachObserver(o), state = [ado, this];

      if (currentThreadScheduler.scheduleRequired()) {
        currentThreadScheduler.schedule(state, setDisposable);
      } else {
        setDisposable(null, state);
      }
      return ado;
    };

    ObservableBase.prototype.subscribeCore = notImplemented;

    return ObservableBase;
  }(Observable));

var FlatMapObservable = Rx.FlatMapObservable = (function(__super__) {

    inherits(FlatMapObservable, __super__);

    function FlatMapObservable(source, selector, resultSelector, thisArg) {
      this.resultSelector = isFunction(resultSelector) ? resultSelector : null;
      this.selector = bindCallback(isFunction(selector) ? selector : function() { return selector; }, thisArg, 3);
      this.source = source;
      __super__.call(this);
    }

    FlatMapObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o, this.selector, this.resultSelector, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(observer, selector, resultSelector, source) {
      this.i = 0;
      this.selector = selector;
      this.resultSelector = resultSelector;
      this.source = source;
      this.o = observer;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype._wrapResult = function(result, x, i) {
      return this.resultSelector ?
        result.map(function(y, i2) { return this.resultSelector(x, y, i, i2); }, this) :
        result;
    };

    InnerObserver.prototype.next = function(x) {
      var i = this.i++;
      var result = tryCatch(this.selector)(x, i, this.source);
      if (result === errorObj) { return this.o.onError(result.e); }

      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = Observable.from(result));
      this.o.onNext(this._wrapResult(result, x, i));
    };

    InnerObserver.prototype.error = function(e) { this.o.onError(e); };

    InnerObserver.prototype.completed = function() { this.o.onCompleted(); };

    return FlatMapObservable;

}(ObservableBase));

  var Enumerable = Rx.internals.Enumerable = function () { };

  function IsDisposedDisposable(state) {
    this._s = state;
    this.isDisposed = false;
  }

  IsDisposedDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      this._s.isDisposed = true;
    }
  };

  var ConcatEnumerableObservable = (function(__super__) {
    inherits(ConcatEnumerableObservable, __super__);
    function ConcatEnumerableObservable(sources) {
      this.sources = sources;
      __super__.call(this);
    }

    function scheduleMethod(state, recurse) {
      if (state.isDisposed) { return; }
      var currentItem = tryCatch(state.e.next).call(state.e);
      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
      if (currentItem.done) { return state.o.onCompleted(); }

      // Check if promise
      var currentValue = currentItem.value;
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
    }

    ConcatEnumerableObservable.prototype.subscribeCore = function (o) {
      var subscription = new SerialDisposable();
      var state = {
        isDisposed: false,
        o: o,
        subscription: subscription,
        e: this.sources[$iterator$]()
      };

      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
    };

    function InnerObserver(state, recurse) {
      this._state = state;
      this._recurse = recurse;
      AbstractObserver.call(this);
    }

    inherits(InnerObserver, AbstractObserver);

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this._state.o.onError(e); };
    InnerObserver.prototype.completed = function () { this._recurse(this._state); };

    return ConcatEnumerableObservable;
  }(ObservableBase));

  Enumerable.prototype.concat = function () {
    return new ConcatEnumerableObservable(this);
  };

  var CatchErrorObservable = (function(__super__) {
    function CatchErrorObservable(sources) {
      this.sources = sources;
      __super__.call(this);
    }

    inherits(CatchErrorObservable, __super__);

    function scheduleMethod(state, recurse) {
      if (state.isDisposed) { return; }
      var currentItem = tryCatch(state.e.next).call(state.e);
      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
      if (currentItem.done) { return state.lastError !== null ? state.o.onError(state.lastError) : state.o.onCompleted(); }

      var currentValue = currentItem.value;
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
    }

    CatchErrorObservable.prototype.subscribeCore = function (o) {
      var subscription = new SerialDisposable();
      var state = {
        isDisposed: false,
        e: this.sources[$iterator$](),
        subscription: subscription,
        lastError: null,
        o: o
      };

      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
    };

    function InnerObserver(state, recurse) {
      this._state = state;
      this._recurse = recurse;
      AbstractObserver.call(this);
    }

    inherits(InnerObserver, AbstractObserver);

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this._state.lastError = e; this._recurse(this._state); };
    InnerObserver.prototype.completed = function () { this._state.o.onCompleted(); };

    return CatchErrorObservable;
  }(ObservableBase));

  Enumerable.prototype.catchError = function () {
    return new CatchErrorObservable(this);
  };

  var RepeatEnumerable = (function (__super__) {
    inherits(RepeatEnumerable, __super__);
    function RepeatEnumerable(v, c) {
      this.v = v;
      this.c = c == null ? -1 : c;
    }

    RepeatEnumerable.prototype[$iterator$] = function () {
      return new RepeatEnumerator(this);
    };

    function RepeatEnumerator(p) {
      this.v = p.v;
      this.l = p.c;
    }

    RepeatEnumerator.prototype.next = function () {
      if (this.l === 0) { return doneEnumerator; }
      if (this.l > 0) { this.l--; }
      return { done: false, value: this.v };
    };

    return RepeatEnumerable;
  }(Enumerable));

  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
    return new RepeatEnumerable(value, repeatCount);
  };

  var OfEnumerable = (function(__super__) {
    inherits(OfEnumerable, __super__);
    function OfEnumerable(s, fn, thisArg) {
      this.s = s;
      this.fn = fn ? bindCallback(fn, thisArg, 3) : null;
    }
    OfEnumerable.prototype[$iterator$] = function () {
      return new OfEnumerator(this);
    };

    function OfEnumerator(p) {
      this.i = -1;
      this.s = p.s;
      this.l = this.s.length;
      this.fn = p.fn;
    }

    OfEnumerator.prototype.next = function () {
     return ++this.i < this.l ?
       { done: false, value: !this.fn ? this.s[this.i] : this.fn(this.s[this.i], this.i, this.s) } :
       doneEnumerator;
    };

    return OfEnumerable;
  }(Enumerable));

  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
    return new OfEnumerable(source, selector, thisArg);
  };

var ObserveOnObservable = (function (__super__) {
  inherits(ObserveOnObservable, __super__);
  function ObserveOnObservable(source, s) {
    this.source = source;
    this._s = s;
    __super__.call(this);
  }

  ObserveOnObservable.prototype.subscribeCore = function (o) {
    return this.source.subscribe(new ObserveOnObserver(this._s, o));
  };

  return ObserveOnObservable;
}(ObservableBase));

   /**
   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
   *
   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
   *  that require to be run on a scheduler, use subscribeOn.
   *
   *  @param {Scheduler} scheduler Scheduler to notify observers on.
   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
   */
  observableProto.observeOn = function (scheduler) {
    return new ObserveOnObservable(this, scheduler);
  };

  var SubscribeOnObservable = (function (__super__) {
    inherits(SubscribeOnObservable, __super__);
    function SubscribeOnObservable(source, s) {
      this.source = source;
      this._s = s;
      __super__.call(this);
    }

    function scheduleMethod(scheduler, state) {
      var source = state[0], d = state[1], o = state[2];
      d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(o)));
    }

    SubscribeOnObservable.prototype.subscribeCore = function (o) {
      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
      d.setDisposable(m);
      m.setDisposable(this._s.schedule([this.source, d, o], scheduleMethod));
      return d;
    };

    return SubscribeOnObservable;
  }(ObservableBase));

   /**
   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.

   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
   *  callbacks on a scheduler, use observeOn.

   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
   */
  observableProto.subscribeOn = function (scheduler) {
    return new SubscribeOnObservable(this, scheduler);
  };

  var FromPromiseObservable = (function(__super__) {
    inherits(FromPromiseObservable, __super__);
    function FromPromiseObservable(p, s) {
      this._p = p;
      this._s = s;
      __super__.call(this);
    }

    function scheduleNext(s, state) {
      var o = state[0], data = state[1];
      o.onNext(data);
      o.onCompleted();
    }

    function scheduleError(s, state) {
      var o = state[0], err = state[1];
      o.onError(err);
    }

    FromPromiseObservable.prototype.subscribeCore = function(o) {
      var sad = new SingleAssignmentDisposable(), self = this, p = this._p;

      if (isFunction(p)) {
        p = tryCatch(p)();
        if (p === errorObj) {
          o.onError(p.e);
          return sad;
        }
      }

      p
        .then(function (data) {
          sad.setDisposable(self._s.schedule([o, data], scheduleNext));
        }, function (err) {
          sad.setDisposable(self._s.schedule([o, err], scheduleError));
        });

      return sad;
    };

    return FromPromiseObservable;
  }(ObservableBase));

  /**
  * Converts a Promise to an Observable sequence
  * @param {Promise} An ES6 Compliant promise.
  * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
  */
  var observableFromPromise = Observable.fromPromise = function (promise, scheduler) {
    scheduler || (scheduler = defaultScheduler);
    return new FromPromiseObservable(promise, scheduler);
  };

  /*
   * Converts an existing observable sequence to an ES6 Compatible Promise
   * @example
   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
   *
   * // With config
   * Rx.config.Promise = RSVP.Promise;
   * var promise = Rx.Observable.return(42).toPromise();
   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
   */
  observableProto.toPromise = function (promiseCtor) {
    promiseCtor || (promiseCtor = Rx.config.Promise);
    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
    var source = this;
    return new promiseCtor(function (resolve, reject) {
      // No cancellation can be done
      var value;
      source.subscribe(function (v) {
        value = v;
      }, reject, function () {
        resolve(value);
      });
    });
  };

  var ToArrayObservable = (function(__super__) {
    inherits(ToArrayObservable, __super__);
    function ToArrayObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    ToArrayObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o) {
      this.o = o;
      this.a = [];
      AbstractObserver.call(this);
    }
    
    InnerObserver.prototype.next = function (x) { this.a.push(x); };
    InnerObserver.prototype.error = function (e) { this.o.onError(e);  };
    InnerObserver.prototype.completed = function () { this.o.onNext(this.a); this.o.onCompleted(); };

    return ToArrayObservable;
  }(ObservableBase));

  /**
  * Creates an array from an observable sequence.
  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
  */
  observableProto.toArray = function () {
    return new ToArrayObservable(this);
  };

  /**
   *  Creates an observable sequence from a specified subscribe method implementation.
   * @example
   *  var res = Rx.Observable.create(function (observer) { return function () { } );
   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
   *  var res = Rx.Observable.create(function (observer) { } );
   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
   */
  Observable.create = function (subscribe, parent) {
    return new AnonymousObservable(subscribe, parent);
  };

  var Defer = (function(__super__) {
    inherits(Defer, __super__);
    function Defer(factory) {
      this._f = factory;
      __super__.call(this);
    }

    Defer.prototype.subscribeCore = function (o) {
      var result = tryCatch(this._f)();
      if (result === errorObj) { return observableThrow(result.e).subscribe(o);}
      isPromise(result) && (result = observableFromPromise(result));
      return result.subscribe(o);
    };

    return Defer;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
   *
   * @example
   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
   */
  var observableDefer = Observable.defer = function (observableFactory) {
    return new Defer(observableFactory);
  };

  var EmptyObservable = (function(__super__) {
    inherits(EmptyObservable, __super__);
    function EmptyObservable(scheduler) {
      this.scheduler = scheduler;
      __super__.call(this);
    }

    EmptyObservable.prototype.subscribeCore = function (observer) {
      var sink = new EmptySink(observer, this.scheduler);
      return sink.run();
    };

    function EmptySink(observer, scheduler) {
      this.observer = observer;
      this.scheduler = scheduler;
    }

    function scheduleItem(s, state) {
      state.onCompleted();
      return disposableEmpty;
    }

    EmptySink.prototype.run = function () {
      var state = this.observer;
      return this.scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this.scheduler.schedule(state, scheduleItem);
    };

    return EmptyObservable;
  }(ObservableBase));

  var EMPTY_OBSERVABLE = new EmptyObservable(immediateScheduler);

  /**
   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
   *
   * @example
   *  var res = Rx.Observable.empty();
   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
   * @returns {Observable} An observable sequence with no elements.
   */
  var observableEmpty = Observable.empty = function (scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return scheduler === immediateScheduler ? EMPTY_OBSERVABLE : new EmptyObservable(scheduler);
  };

  var FromObservable = (function(__super__) {
    inherits(FromObservable, __super__);
    function FromObservable(iterable, fn, scheduler) {
      this._iterable = iterable;
      this._fn = fn;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function createScheduleMethod(o, it, fn) {
      return function loopRecursive(i, recurse) {
        var next = tryCatch(it.next).call(it);
        if (next === errorObj) { return o.onError(next.e); }
        if (next.done) { return o.onCompleted(); }

        var result = next.value;

        if (isFunction(fn)) {
          result = tryCatch(fn)(result, i);
          if (result === errorObj) { return o.onError(result.e); }
        }

        o.onNext(result);
        recurse(i + 1);
      };
    }

    FromObservable.prototype.subscribeCore = function (o) {
      var list = Object(this._iterable),
          it = getIterable(list);

      return this._scheduler.scheduleRecursive(0, createScheduleMethod(o, it, this._fn));
    };

    return FromObservable;
  }(ObservableBase));

  var maxSafeInteger = Math.pow(2, 53) - 1;

  function StringIterable(s) {
    this._s = s;
  }

  StringIterable.prototype[$iterator$] = function () {
    return new StringIterator(this._s);
  };

  function StringIterator(s) {
    this._s = s;
    this._l = s.length;
    this._i = 0;
  }

  StringIterator.prototype[$iterator$] = function () {
    return this;
  };

  StringIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
  };

  function ArrayIterable(a) {
    this._a = a;
  }

  ArrayIterable.prototype[$iterator$] = function () {
    return new ArrayIterator(this._a);
  };

  function ArrayIterator(a) {
    this._a = a;
    this._l = toLength(a);
    this._i = 0;
  }

  ArrayIterator.prototype[$iterator$] = function () {
    return this;
  };

  ArrayIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
  };

  function numberIsFinite(value) {
    return typeof value === 'number' && root.isFinite(value);
  }

  function isNan(n) {
    return n !== n;
  }

  function getIterable(o) {
    var i = o[$iterator$], it;
    if (!i && typeof o === 'string') {
      it = new StringIterable(o);
      return it[$iterator$]();
    }
    if (!i && o.length !== undefined) {
      it = new ArrayIterable(o);
      return it[$iterator$]();
    }
    if (!i) { throw new TypeError('Object is not iterable'); }
    return o[$iterator$]();
  }

  function sign(value) {
    var number = +value;
    if (number === 0) { return number; }
    if (isNaN(number)) { return number; }
    return number < 0 ? -1 : 1;
  }

  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) { return 0; }
    if (len === 0 || !numberIsFinite(len)) { return len; }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) { return 0; }
    if (len > maxSafeInteger) { return maxSafeInteger; }
    return len;
  }

  /**
  * This method creates a new Observable sequence from an array-like or iterable object.
  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
  * @param {Function} [mapFn] Map function to call on every element of the array.
  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
  */
  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
    if (iterable == null) {
      throw new Error('iterable cannot be null.')
    }
    if (mapFn && !isFunction(mapFn)) {
      throw new Error('mapFn when provided must be a function');
    }
    if (mapFn) {
      var mapper = bindCallback(mapFn, thisArg, 2);
    }
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromObservable(iterable, mapper, scheduler);
  }

  var FromArrayObservable = (function(__super__) {
    inherits(FromArrayObservable, __super__);
    function FromArrayObservable(args, scheduler) {
      this._args = args;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function scheduleMethod(o, args) {
      var len = args.length;
      return function loopRecursive (i, recurse) {
        if (i < len) {
          o.onNext(args[i]);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    FromArrayObservable.prototype.subscribeCore = function (o) {
      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._args));
    };

    return FromArrayObservable;
  }(ObservableBase));

  /**
  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
  * @deprecated use Observable.from or Observable.of
  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
  */
  var observableFromArray = Observable.fromArray = function (array, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler)
  };

  var GenerateObservable = (function (__super__) {
    inherits(GenerateObservable, __super__);
    function GenerateObservable(state, cndFn, itrFn, resFn, s) {
      this._initialState = state;
      this._cndFn = cndFn;
      this._itrFn = itrFn;
      this._resFn = resFn;
      this._s = s;
      __super__.call(this);
    }

    function scheduleRecursive(state, recurse) {
      if (state.first) {
        state.first = false;
      } else {
        state.newState = tryCatch(state.self._itrFn)(state.newState);
        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
      }
      var hasResult = tryCatch(state.self._cndFn)(state.newState);
      if (hasResult === errorObj) { return state.o.onError(hasResult.e); }
      if (hasResult) {
        var result = tryCatch(state.self._resFn)(state.newState);
        if (result === errorObj) { return state.o.onError(result.e); }
        state.o.onNext(result);
        recurse(state);
      } else {
        state.o.onCompleted();
      }
    }

    GenerateObservable.prototype.subscribeCore = function (o) {
      var state = {
        o: o,
        self: this,
        first: true,
        newState: this._initialState
      };
      return this._s.scheduleRecursive(state, scheduleRecursive);
    };

    return GenerateObservable;
  }(ObservableBase));

  /**
   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
   *
   * @example
   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
   * @returns {Observable} The generated sequence.
   */
  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new GenerateObservable(initialState, condition, iterate, resultSelector, scheduler);
  };

  function observableOf (scheduler, array) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler);
  }

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.of = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return new FromArrayObservable(args, currentThreadScheduler);
  };

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.ofWithScheduler = function (scheduler) {
    var len = arguments.length, args = new Array(len - 1);
    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
    return new FromArrayObservable(args, scheduler);
  };

  /**
   * Creates an Observable sequence from changes to an array using Array.observe.
   * @param {Array} array An array to observe changes.
   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
   */
  Observable.ofArrayChanges = function(array) {
    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
    return new AnonymousObservable(function(observer) {
      function observerFn(changes) {
        for(var i = 0, len = changes.length; i < len; i++) {
          observer.onNext(changes[i]);
        }
      }
      
      Array.observe(array, observerFn);

      return function () {
        Array.unobserve(array, observerFn);
      };
    });
  };

  /**
   * Creates an Observable sequence from changes to an object using Object.observe.
   * @param {Object} obj An object to observe changes.
   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
   */
  Observable.ofObjectChanges = function(obj) {
    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Object.observe is not supported on your platform') }
    return new AnonymousObservable(function(observer) {
      function observerFn(changes) {
        for(var i = 0, len = changes.length; i < len; i++) {
          observer.onNext(changes[i]);
        }
      }

      Object.observe(obj, observerFn);

      return function () {
        Object.unobserve(obj, observerFn);
      };
    });
  };

  var NeverObservable = (function(__super__) {
    inherits(NeverObservable, __super__);
    function NeverObservable() {
      __super__.call(this);
    }

    NeverObservable.prototype.subscribeCore = function (observer) {
      return disposableEmpty;
    };

    return NeverObservable;
  }(ObservableBase));

  var NEVER_OBSERVABLE = new NeverObservable();

  /**
   * Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
   * @returns {Observable} An observable sequence whose observers will never get called.
   */
  var observableNever = Observable.never = function () {
    return NEVER_OBSERVABLE;
  };

  var PairsObservable = (function(__super__) {
    inherits(PairsObservable, __super__);
    function PairsObservable(o, scheduler) {
      this._o = o;
      this._keys = Object.keys(o);
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function scheduleMethod(o, obj, keys) {
      return function loopRecursive(i, recurse) {
        if (i < keys.length) {
          var key = keys[i];
          o.onNext([key, obj[key]]);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    PairsObservable.prototype.subscribeCore = function (o) {
      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._o, this._keys));
    };

    return PairsObservable;
  }(ObservableBase));

  /**
   * Convert an object into an observable sequence of [key, value] pairs.
   * @param {Object} obj The object to inspect.
   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
   */
  Observable.pairs = function (obj, scheduler) {
    scheduler || (scheduler = currentThreadScheduler);
    return new PairsObservable(obj, scheduler);
  };

    var RangeObservable = (function(__super__) {
    inherits(RangeObservable, __super__);
    function RangeObservable(start, count, scheduler) {
      this.start = start;
      this.rangeCount = count;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    function loopRecursive(start, count, o) {
      return function loop (i, recurse) {
        if (i < count) {
          o.onNext(start + i);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    RangeObservable.prototype.subscribeCore = function (o) {
      return this.scheduler.scheduleRecursive(
        0,
        loopRecursive(this.start, this.rangeCount, o)
      );
    };

    return RangeObservable;
  }(ObservableBase));

  /**
  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
  * @param {Number} start The value of the first integer in the sequence.
  * @param {Number} count The number of sequential integers to generate.
  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
  */
  Observable.range = function (start, count, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RangeObservable(start, count, scheduler);
  };

  var RepeatObservable = (function(__super__) {
    inherits(RepeatObservable, __super__);
    function RepeatObservable(value, repeatCount, scheduler) {
      this.value = value;
      this.repeatCount = repeatCount == null ? -1 : repeatCount;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    RepeatObservable.prototype.subscribeCore = function (observer) {
      var sink = new RepeatSink(observer, this);
      return sink.run();
    };

    return RepeatObservable;
  }(ObservableBase));

  function RepeatSink(observer, parent) {
    this.observer = observer;
    this.parent = parent;
  }

  RepeatSink.prototype.run = function () {
    var observer = this.observer, value = this.parent.value;
    function loopRecursive(i, recurse) {
      if (i === -1 || i > 0) {
        observer.onNext(value);
        i > 0 && i--;
      }
      if (i === 0) { return observer.onCompleted(); }
      recurse(i);
    }

    return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount, loopRecursive);
  };

  /**
   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
   * @param {Mixed} value Element to repeat.
   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
   */
  Observable.repeat = function (value, repeatCount, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RepeatObservable(value, repeatCount, scheduler);
  };

  var JustObservable = (function(__super__) {
    inherits(JustObservable, __super__);
    function JustObservable(value, scheduler) {
      this._value = value;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    JustObservable.prototype.subscribeCore = function (o) {
      var state = [this._value, o];
      return this._scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this._scheduler.schedule(state, scheduleItem);
    };

    function scheduleItem(s, state) {
      var value = state[0], observer = state[1];
      observer.onNext(value);
      observer.onCompleted();
      return disposableEmpty;
    }

    return JustObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
   *  There is an alias called 'just' or browsers <IE9.
   * @param {Mixed} value Single element in the resulting observable sequence.
   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence containing the single specified element.
   */
  var observableReturn = Observable['return'] = Observable.just = function (value, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new JustObservable(value, scheduler);
  };

  var ThrowObservable = (function(__super__) {
    inherits(ThrowObservable, __super__);
    function ThrowObservable(error, scheduler) {
      this._error = error;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    ThrowObservable.prototype.subscribeCore = function (o) {
      var state = [this._error, o];
      return this._scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this._scheduler.schedule(state, scheduleItem);
    };

    function scheduleItem(s, state) {
      var e = state[0], o = state[1];
      o.onError(e);
      return disposableEmpty;
    }

    return ThrowObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
   *  There is an alias to this method called 'throwError' for browsers <IE9.
   * @param {Mixed} error An object used for the sequence's termination.
   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
   */
  var observableThrow = Observable['throw'] = function (error, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new ThrowObservable(error, scheduler);
  };

  var UsingObservable = (function (__super__) {
    inherits(UsingObservable, __super__);
    function UsingObservable(resFn, obsFn) {
      this._resFn = resFn;
      this._obsFn = obsFn;
      __super__.call(this);
    }

    UsingObservable.prototype.subscribeCore = function (o) {
      var disposable = disposableEmpty;
      var resource = tryCatch(this._resFn)();
      if (resource === errorObj) {
        return new BinaryDisposable(observableThrow(resource.e).subscribe(o), disposable);
      }
      resource && (disposable = resource);
      var source = tryCatch(this._obsFn)(resource);
      if (source === errorObj) {
        return new BinaryDisposable(observableThrow(source.e).subscribe(o), disposable);
      }
      return new BinaryDisposable(source.subscribe(o), disposable);
    };

    return UsingObservable;
  }(ObservableBase));

  /**
   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
   * @param {Function} resourceFactory Factory function to obtain a resource object.
   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
   */
  Observable.using = function (resourceFactory, observableFactory) {
    return new UsingObservable(resourceFactory, observableFactory);
  };

  /**
   * Propagates the observable sequence or Promise that reacts first.
   * @param {Observable} rightSource Second observable sequence or Promise.
   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
   */
  observableProto.amb = function (rightSource) {
    var leftSource = this;
    return new AnonymousObservable(function (observer) {
      var choice,
        leftChoice = 'L', rightChoice = 'R',
        leftSubscription = new SingleAssignmentDisposable(),
        rightSubscription = new SingleAssignmentDisposable();

      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));

      function choiceL() {
        if (!choice) {
          choice = leftChoice;
          rightSubscription.dispose();
        }
      }

      function choiceR() {
        if (!choice) {
          choice = rightChoice;
          leftSubscription.dispose();
        }
      }

      var leftSubscribe = observerCreate(
        function (left) {
          choiceL();
          choice === leftChoice && observer.onNext(left);
        },
        function (e) {
          choiceL();
          choice === leftChoice && observer.onError(e);
        },
        function () {
          choiceL();
          choice === leftChoice && observer.onCompleted();
        }
      );
      var rightSubscribe = observerCreate(
        function (right) {
          choiceR();
          choice === rightChoice && observer.onNext(right);
        },
        function (e) {
          choiceR();
          choice === rightChoice && observer.onError(e);
        },
        function () {
          choiceR();
          choice === rightChoice && observer.onCompleted();
        }
      );

      leftSubscription.setDisposable(leftSource.subscribe(leftSubscribe));
      rightSubscription.setDisposable(rightSource.subscribe(rightSubscribe));

      return new BinaryDisposable(leftSubscription, rightSubscription);
    });
  };

  function amb(p, c) { return p.amb(c); }

  /**
   * Propagates the observable sequence or Promise that reacts first.
   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
   */
  Observable.amb = function () {
    var acc = observableNever(), items;
    if (Array.isArray(arguments[0])) {
      items = arguments[0];
    } else {
      var len = arguments.length;
      items = new Array(items);
      for(var i = 0; i < len; i++) { items[i] = arguments[i]; }
    }
    for (var i = 0, len = items.length; i < len; i++) {
      acc = amb(acc, items[i]);
    }
    return acc;
  };

  var CatchObservable = (function (__super__) {
    inherits(CatchObservable, __super__);
    function CatchObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    CatchObservable.prototype.subscribeCore = function (o) {
      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
      subscription.setDisposable(d1);
      d1.setDisposable(this.source.subscribe(new CatchObserver(o, subscription, this._fn)));
      return subscription;
    };

    return CatchObservable;
  }(ObservableBase));

  var CatchObserver = (function(__super__) {
    inherits(CatchObserver, __super__);
    function CatchObserver(o, s, fn) {
      this._o = o;
      this._s = s;
      this._fn = fn;
      __super__.call(this);
    }

    CatchObserver.prototype.next = function (x) { this._o.onNext(x); };
    CatchObserver.prototype.completed = function () { return this._o.onCompleted(); };
    CatchObserver.prototype.error = function (e) {
      var result = tryCatch(this._fn)(e);
      if (result === errorObj) { return this._o.onError(result.e); }
      isPromise(result) && (result = observableFromPromise(result));

      var d = new SingleAssignmentDisposable();
      this._s.setDisposable(d);
      d.setDisposable(result.subscribe(this._o));
    };

    return CatchObserver;
  }(AbstractObserver));

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
   */
  observableProto['catch'] = function (handlerOrSecond) {
    return isFunction(handlerOrSecond) ? new CatchObservable(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
  };

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
   */
  var observableCatch = Observable['catch'] = function () {
    var items;
    if (Array.isArray(arguments[0])) {
      items = arguments[0];
    } else {
      var len = arguments.length;
      items = new Array(len);
      for(var i = 0; i < len; i++) { items[i] = arguments[i]; }
    }
    return enumerableOf(items).catchError();
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   * This can be in the form of an argument list of observables or an array.
   *
   * @example
   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args[0].unshift(this);
    } else {
      args.unshift(this);
    }
    return combineLatest.apply(this, args);
  };

  function falseFactory() { return false; }
  function argumentsToArray() {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return args;
  }

  var CombineLatestObservable = (function(__super__) {
    inherits(CombineLatestObservable, __super__);
    function CombineLatestObservable(params, cb) {
      this._params = params;
      this._cb = cb;
      __super__.call(this);
    }

    CombineLatestObservable.prototype.subscribeCore = function(observer) {
      var len = this._params.length,
          subscriptions = new Array(len);

      var state = {
        hasValue: arrayInitialize(len, falseFactory),
        hasValueAll: false,
        isDone: arrayInitialize(len, falseFactory),
        values: new Array(len)
      };

      for (var i = 0; i < len; i++) {
        var source = this._params[i], sad = new SingleAssignmentDisposable();
        subscriptions[i] = sad;
        isPromise(source) && (source = observableFromPromise(source));
        sad.setDisposable(source.subscribe(new CombineLatestObserver(observer, i, this._cb, state)));
      }

      return new NAryDisposable(subscriptions);
    };

    return CombineLatestObservable;
  }(ObservableBase));

  var CombineLatestObserver = (function (__super__) {
    inherits(CombineLatestObserver, __super__);
    function CombineLatestObserver(o, i, cb, state) {
      this._o = o;
      this._i = i;
      this._cb = cb;
      this._state = state;
      __super__.call(this);
    }

    function notTheSame(i) {
      return function (x, j) {
        return j !== i;
      };
    }

    CombineLatestObserver.prototype.next = function (x) {
      this._state.values[this._i] = x;
      this._state.hasValue[this._i] = true;
      if (this._state.hasValueAll || (this._state.hasValueAll = this._state.hasValue.every(identity))) {
        var res = tryCatch(this._cb).apply(null, this._state.values);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._o.onNext(res);
      } else if (this._state.isDone.filter(notTheSame(this._i)).every(identity)) {
        this._o.onCompleted();
      }
    };

    CombineLatestObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    CombineLatestObserver.prototype.completed = function () {
      this._state.isDone[this._i] = true;
      this._state.isDone.every(identity) && this._o.onCompleted();
    };

    return CombineLatestObserver;
  }(AbstractObserver));

  /**
  * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
  *
  * @example
  * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
  * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
  * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
  */
  var combineLatest = Observable.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);
    return new CombineLatestObservable(args, resultSelector);
  };

  /**
   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  observableProto.concat = function () {
    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    args.unshift(this);
    return observableConcat.apply(null, args);
  };

  var ConcatObserver = (function(__super__) {
    inherits(ConcatObserver, __super__);
    function ConcatObserver(s, fn) {
      this._s = s;
      this._fn = fn;
      __super__.call(this);
    }

    ConcatObserver.prototype.next = function (x) { this._s.o.onNext(x); };
    ConcatObserver.prototype.error = function (e) { this._s.o.onError(e); };
    ConcatObserver.prototype.completed = function () { this._s.i++; this._fn(this._s); };

    return ConcatObserver;
  }(AbstractObserver));

  var ConcatObservable = (function(__super__) {
    inherits(ConcatObservable, __super__);
    function ConcatObservable(sources) {
      this._sources = sources;
      __super__.call(this);
    }

    function scheduleRecursive (state, recurse) {
      if (state.disposable.isDisposed) { return; }
      if (state.i === state.sources.length) { return state.o.onCompleted(); }

      // Check if promise
      var currentValue = state.sources[state.i];
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new ConcatObserver(state, recurse)));
    }

    ConcatObservable.prototype.subscribeCore = function(o) {
      var subscription = new SerialDisposable();
      var disposable = disposableCreate(noop);
      var state = {
        o: o,
        i: 0,
        subscription: subscription,
        disposable: disposable,
        sources: this._sources
      };

      var cancelable = immediateScheduler.scheduleRecursive(state, scheduleRecursive);
      return new NAryDisposable([subscription, disposable, cancelable]);
    };

    return ConcatObservable;
  }(ObservableBase));

  /**
   * Concatenates all the observable sequences.
   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  var observableConcat = Observable.concat = function () {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      args = new Array(arguments.length);
      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
    }
    return new ConcatObservable(args);
  };

  /**
   * Concatenates an observable sequence of observable sequences.
   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
   */
  observableProto.concatAll = function () {
    return this.merge(1);
  };

  var MergeObservable = (function (__super__) {
    inherits(MergeObservable, __super__);

    function MergeObservable(source, maxConcurrent) {
      this.source = source;
      this.maxConcurrent = maxConcurrent;
      __super__.call(this);
    }

    MergeObservable.prototype.subscribeCore = function(observer) {
      var g = new CompositeDisposable();
      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
      return g;
    };

    return MergeObservable;

  }(ObservableBase));

  var MergeObserver = (function (__super__) {
    function MergeObserver(o, max, g) {
      this.o = o;
      this.max = max;
      this.g = g;
      this.done = false;
      this.q = [];
      this.activeCount = 0;
      __super__.call(this);
    }

    inherits(MergeObserver, __super__);

    MergeObserver.prototype.handleSubscribe = function (xs) {
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);
      isPromise(xs) && (xs = observableFromPromise(xs));
      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
    };

    MergeObserver.prototype.next = function (innerSource) {
      if(this.activeCount < this.max) {
        this.activeCount++;
        this.handleSubscribe(innerSource);
      } else {
        this.q.push(innerSource);
      }
    };
    MergeObserver.prototype.error = function (e) { this.o.onError(e); };
    MergeObserver.prototype.completed = function () { this.done = true; this.activeCount === 0 && this.o.onCompleted(); };

    function InnerObserver(parent, sad) {
      this.parent = parent;
      this.sad = sad;
      __super__.call(this);
    }

    inherits(InnerObserver, __super__);

    InnerObserver.prototype.next = function (x) { this.parent.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this.parent.o.onError(e); };
    InnerObserver.prototype.completed = function () {
      this.parent.g.remove(this.sad);
      if (this.parent.q.length > 0) {
        this.parent.handleSubscribe(this.parent.q.shift());
      } else {
        this.parent.activeCount--;
        this.parent.done && this.parent.activeCount === 0 && this.parent.o.onCompleted();
      }
    };

    return MergeObserver;
  }(AbstractObserver));

  /**
  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
  * Or merges two observable sequences into a single observable sequence.
  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.merge = function (maxConcurrentOrOther) {
    return typeof maxConcurrentOrOther !== 'number' ?
      observableMerge(this, maxConcurrentOrOther) :
      new MergeObservable(this, maxConcurrentOrOther);
  };

  /**
   * Merges all the observable sequences into a single observable sequence.
   * The scheduler is optional and if not specified, the immediate scheduler is used.
   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
   */
  var observableMerge = Observable.merge = function () {
    var scheduler, sources = [], i, len = arguments.length;
    if (!arguments[0]) {
      scheduler = immediateScheduler;
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else if (isScheduler(arguments[0])) {
      scheduler = arguments[0];
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else {
      scheduler = immediateScheduler;
      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
    }
    if (Array.isArray(sources[0])) {
      sources = sources[0];
    }
    return observableOf(scheduler, sources).mergeAll();
  };

  var MergeAllObservable = (function (__super__) {
    inherits(MergeAllObservable, __super__);

    function MergeAllObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    MergeAllObservable.prototype.subscribeCore = function (o) {
      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
      g.add(m);
      m.setDisposable(this.source.subscribe(new MergeAllObserver(o, g)));
      return g;
    };

    return MergeAllObservable;
  }(ObservableBase));

  var MergeAllObserver = (function (__super__) {
    function MergeAllObserver(o, g) {
      this.o = o;
      this.g = g;
      this.done = false;
      __super__.call(this);
    }

    inherits(MergeAllObserver, __super__);

    MergeAllObserver.prototype.next = function(innerSource) {
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);
      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, sad)));
    };

    MergeAllObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    MergeAllObserver.prototype.completed = function () {
      this.done = true;
      this.g.length === 1 && this.o.onCompleted();
    };

    function InnerObserver(parent, sad) {
      this.parent = parent;
      this.sad = sad;
      __super__.call(this);
    }

    inherits(InnerObserver, __super__);

    InnerObserver.prototype.next = function (x) {
      this.parent.o.onNext(x);
    };
    InnerObserver.prototype.error = function (e) {
      this.parent.o.onError(e);
    };
    InnerObserver.prototype.completed = function () {
      this.parent.g.remove(this.sad);
      this.parent.done && this.parent.g.length === 1 && this.parent.o.onCompleted();
    };

    return MergeAllObserver;
  }(AbstractObserver));

  /**
  * Merges an observable sequence of observable sequences into an observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.mergeAll = function () {
    return new MergeAllObservable(this);
  };

  var CompositeError = Rx.CompositeError = function(errors) {
    this.innerErrors = errors;
    this.message = 'This contains multiple errors. Check the innerErrors';
    Error.call(this);
  };
  CompositeError.prototype = Object.create(Error.prototype);
  CompositeError.prototype.name = 'CompositeError';

  var MergeDelayErrorObservable = (function(__super__) {
    inherits(MergeDelayErrorObservable, __super__);
    function MergeDelayErrorObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    MergeDelayErrorObservable.prototype.subscribeCore = function (o) {
      var group = new CompositeDisposable(),
        m = new SingleAssignmentDisposable(),
        state = { isStopped: false, errors: [], o: o };

      group.add(m);
      m.setDisposable(this.source.subscribe(new MergeDelayErrorObserver(group, state)));

      return group;
    };

    return MergeDelayErrorObservable;
  }(ObservableBase));

  var MergeDelayErrorObserver = (function(__super__) {
    inherits(MergeDelayErrorObserver, __super__);
    function MergeDelayErrorObserver(group, state) {
      this._group = group;
      this._state = state;
      __super__.call(this);
    }

    function setCompletion(o, errors) {
      if (errors.length === 0) {
        o.onCompleted();
      } else if (errors.length === 1) {
        o.onError(errors[0]);
      } else {
        o.onError(new CompositeError(errors));
      }
    }

    MergeDelayErrorObserver.prototype.next = function (x) {
      var inner = new SingleAssignmentDisposable();
      this._group.add(inner);

      // Check for promises support
      isPromise(x) && (x = observableFromPromise(x));
      inner.setDisposable(x.subscribe(new InnerObserver(inner, this._group, this._state)));
    };

    MergeDelayErrorObserver.prototype.error = function (e) {
      this._state.errors.push(e);
      this._state.isStopped = true;
      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    MergeDelayErrorObserver.prototype.completed = function () {
      this._state.isStopped = true;
      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    inherits(InnerObserver, __super__);
    function InnerObserver(inner, group, state) {
      this._inner = inner;
      this._group = group;
      this._state = state;
      __super__.call(this);
    }

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) {
      this._state.errors.push(e);
      this._group.remove(this._inner);
      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };
    InnerObserver.prototype.completed = function () {
      this._group.remove(this._inner);
      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    return MergeDelayErrorObserver;
  }(AbstractObserver));

  /**
  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
  * receive all successfully emitted items from all of the source Observables without being interrupted by
  * an error notification from one of them.
  *
  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
  * error via the Observer's onError, mergeDelayError will refrain from propagating that
  * error notification until all of the merged Observables have finished emitting items.
  * @param {Array | Arguments} args Arguments or an array to merge.
  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
  */
  Observable.mergeDelayError = function() {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      var len = arguments.length;
      args = new Array(len);
      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    var source = observableOf(null, args);
    return new MergeDelayErrorObservable(source);
  };

  /**
   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
   */
  observableProto.onErrorResumeNext = function (second) {
    if (!second) { throw new Error('Second observable is required'); }
    return onErrorResumeNext([this, second]);
  };

  var OnErrorResumeNextObservable = (function(__super__) {
    inherits(OnErrorResumeNextObservable, __super__);
    function OnErrorResumeNextObservable(sources) {
      this.sources = sources;
      __super__.call(this);
    }

    function scheduleMethod(state, recurse) {
      if (state.pos < state.sources.length) {
        var current = state.sources[state.pos++];
        isPromise(current) && (current = observableFromPromise(current));
        var d = new SingleAssignmentDisposable();
        state.subscription.setDisposable(d);
        d.setDisposable(current.subscribe(new OnErrorResumeNextObserver(state, recurse)));
      } else {
        state.o.onCompleted();
      }
    }

    OnErrorResumeNextObservable.prototype.subscribeCore = function (o) {
      var subscription = new SerialDisposable(),
          state = {pos: 0, subscription: subscription, o: o, sources: this.sources },
          cancellable = immediateScheduler.scheduleRecursive(state, scheduleMethod);

      return new BinaryDisposable(subscription, cancellable);
    };

    return OnErrorResumeNextObservable;
  }(ObservableBase));

  var OnErrorResumeNextObserver = (function(__super__) {
    inherits(OnErrorResumeNextObserver, __super__);
    function OnErrorResumeNextObserver(state, recurse) {
      this._state = state;
      this._recurse = recurse;
      __super__.call(this);
    }

    OnErrorResumeNextObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    OnErrorResumeNextObserver.prototype.error = function () { this._recurse(this._state); };
    OnErrorResumeNextObserver.prototype.completed = function () { this._recurse(this._state); };

    return OnErrorResumeNextObserver;
  }(AbstractObserver));

  /**
   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
   */
  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
    var sources = [];
    if (Array.isArray(arguments[0])) {
      sources = arguments[0];
    } else {
      var len = arguments.length;
      sources = new Array(len);
      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
    }
    return new OnErrorResumeNextObservable(sources);
  };

  var SkipUntilObservable = (function(__super__) {
    inherits(SkipUntilObservable, __super__);

    function SkipUntilObservable(source, other) {
      this._s = source;
      this._o = isPromise(other) ? observableFromPromise(other) : other;
      this._open = false;
      __super__.call(this);
    }

    SkipUntilObservable.prototype.subscribeCore = function(o) {
      var leftSubscription = new SingleAssignmentDisposable();
      leftSubscription.setDisposable(this._s.subscribe(new SkipUntilSourceObserver(o, this)));

      isPromise(this._o) && (this._o = observableFromPromise(this._o));

      var rightSubscription = new SingleAssignmentDisposable();
      rightSubscription.setDisposable(this._o.subscribe(new SkipUntilOtherObserver(o, this, rightSubscription)));

      return new BinaryDisposable(leftSubscription, rightSubscription);
    };

    return SkipUntilObservable;
  }(ObservableBase));

  var SkipUntilSourceObserver = (function(__super__) {
    inherits(SkipUntilSourceObserver, __super__);
    function SkipUntilSourceObserver(o, p) {
      this._o = o;
      this._p = p;
      __super__.call(this);
    }

    SkipUntilSourceObserver.prototype.next = function (x) {
      this._p._open && this._o.onNext(x);
    };

    SkipUntilSourceObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    SkipUntilSourceObserver.prototype.onCompleted = function () {
      this._p._open && this._o.onCompleted();
    };

    return SkipUntilSourceObserver;
  }(AbstractObserver));

  var SkipUntilOtherObserver = (function(__super__) {
    inherits(SkipUntilOtherObserver, __super__);
    function SkipUntilOtherObserver(o, p, r) {
      this._o = o;
      this._p = p;
      this._r = r;
      __super__.call(this);
    }

    SkipUntilOtherObserver.prototype.next = function () {
      this._p._open = true;
      this._r.dispose();
    };

    SkipUntilOtherObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    SkipUntilOtherObserver.prototype.onCompleted = function () {
      this._r.dispose();
    };

    return SkipUntilOtherObserver;
  }(AbstractObserver));

  /**
   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
   */
  observableProto.skipUntil = function (other) {
    return new SkipUntilObservable(this, other);
  };

  var SwitchObservable = (function(__super__) {
    inherits(SwitchObservable, __super__);
    function SwitchObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    SwitchObservable.prototype.subscribeCore = function (o) {
      var inner = new SerialDisposable(), s = this.source.subscribe(new SwitchObserver(o, inner));
      return new BinaryDisposable(s, inner);
    };

    inherits(SwitchObserver, AbstractObserver);
    function SwitchObserver(o, inner) {
      this.o = o;
      this.inner = inner;
      this.stopped = false;
      this.latest = 0;
      this.hasLatest = false;
      AbstractObserver.call(this);
    }

    SwitchObserver.prototype.next = function (innerSource) {
      var d = new SingleAssignmentDisposable(), id = ++this.latest;
      this.hasLatest = true;
      this.inner.setDisposable(d);
      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
      d.setDisposable(innerSource.subscribe(new InnerObserver(this, id)));
    };

    SwitchObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    SwitchObserver.prototype.completed = function () {
      this.stopped = true;
      !this.hasLatest && this.o.onCompleted();
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(parent, id) {
      this.parent = parent;
      this.id = id;
      AbstractObserver.call(this);
    }
    InnerObserver.prototype.next = function (x) {
      this.parent.latest === this.id && this.parent.o.onNext(x);
    };

    InnerObserver.prototype.error = function (e) {
      this.parent.latest === this.id && this.parent.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      if (this.parent.latest === this.id) {
        this.parent.hasLatest = false;
        this.parent.stopped && this.parent.o.onCompleted();
      }
    };

    return SwitchObservable;
  }(ObservableBase));

  /**
  * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
  * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
  */
  observableProto['switch'] = observableProto.switchLatest = function () {
    return new SwitchObservable(this);
  };

  var TakeUntilObservable = (function(__super__) {
    inherits(TakeUntilObservable, __super__);

    function TakeUntilObservable(source, other) {
      this.source = source;
      this.other = isPromise(other) ? observableFromPromise(other) : other;
      __super__.call(this);
    }

    TakeUntilObservable.prototype.subscribeCore = function(o) {
      return new BinaryDisposable(
        this.source.subscribe(o),
        this.other.subscribe(new TakeUntilObserver(o))
      );
    };

    return TakeUntilObservable;
  }(ObservableBase));

  var TakeUntilObserver = (function(__super__) {
    inherits(TakeUntilObserver, __super__);
    function TakeUntilObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    TakeUntilObserver.prototype.next = function () {
      this._o.onCompleted();
    };

    TakeUntilObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    TakeUntilObserver.prototype.onCompleted = noop;

    return TakeUntilObserver;
  }(AbstractObserver));

  /**
   * Returns the values from the source observable sequence until the other observable sequence produces a value.
   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
   */
  observableProto.takeUntil = function (other) {
    return new TakeUntilObservable(this, other);
  };

  function falseFactory() { return false; }
  function argumentsToArray() {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return args;
  }

  var WithLatestFromObservable = (function(__super__) {
    inherits(WithLatestFromObservable, __super__);
    function WithLatestFromObservable(source, sources, resultSelector) {
      this._s = source;
      this._ss = sources;
      this._cb = resultSelector;
      __super__.call(this);
    }

    WithLatestFromObservable.prototype.subscribeCore = function (o) {
      var len = this._ss.length;
      var state = {
        hasValue: arrayInitialize(len, falseFactory),
        hasValueAll: false,
        values: new Array(len)
      };

      var n = this._ss.length, subscriptions = new Array(n + 1);
      for (var i = 0; i < n; i++) {
        var other = this._ss[i], sad = new SingleAssignmentDisposable();
        isPromise(other) && (other = observableFromPromise(other));
        sad.setDisposable(other.subscribe(new WithLatestFromOtherObserver(o, i, state)));
        subscriptions[i] = sad;
      }

      var outerSad = new SingleAssignmentDisposable();
      outerSad.setDisposable(this._s.subscribe(new WithLatestFromSourceObserver(o, this._cb, state)));
      subscriptions[n] = outerSad;

      return new NAryDisposable(subscriptions);
    };

    return WithLatestFromObservable;
  }(ObservableBase));

  var WithLatestFromOtherObserver = (function (__super__) {
    inherits(WithLatestFromOtherObserver, __super__);
    function WithLatestFromOtherObserver(o, i, state) {
      this._o = o;
      this._i = i;
      this._state = state;
      __super__.call(this);
    }

    WithLatestFromOtherObserver.prototype.next = function (x) {
      this._state.values[this._i] = x;
      this._state.hasValue[this._i] = true;
      this._state.hasValueAll = this._state.hasValue.every(identity);
    };

    WithLatestFromOtherObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    WithLatestFromOtherObserver.prototype.completed = noop;

    return WithLatestFromOtherObserver;
  }(AbstractObserver));

  var WithLatestFromSourceObserver = (function (__super__) {
    inherits(WithLatestFromSourceObserver, __super__);
    function WithLatestFromSourceObserver(o, cb, state) {
      this._o = o;
      this._cb = cb;
      this._state = state;
      __super__.call(this);
    }

    WithLatestFromSourceObserver.prototype.next = function (x) {
      var allValues = [x].concat(this._state.values);
      if (!this._state.hasValueAll) { return; }
      var res = tryCatch(this._cb).apply(null, allValues);
      if (res === errorObj) { return this._o.onError(res.e); }
      this._o.onNext(res);
    };

    WithLatestFromSourceObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    WithLatestFromSourceObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return WithLatestFromSourceObserver;
  }(AbstractObserver));

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.withLatestFrom = function () {
    if (arguments.length === 0) { throw new Error('invalid arguments'); }

    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);

    return new WithLatestFromObservable(this, args, resultSelector);
  };

  function falseFactory() { return false; }
  function emptyArrayFactory() { return []; }

  var ZipObservable = (function(__super__) {
    inherits(ZipObservable, __super__);
    function ZipObservable(sources, resultSelector) {
      this._s = sources;
      this._cb = resultSelector;
      __super__.call(this);
    }

    ZipObservable.prototype.subscribeCore = function(observer) {
      var n = this._s.length,
          subscriptions = new Array(n),
          done = arrayInitialize(n, falseFactory),
          q = arrayInitialize(n, emptyArrayFactory);

      for (var i = 0; i < n; i++) {
        var source = this._s[i], sad = new SingleAssignmentDisposable();
        subscriptions[i] = sad;
        isPromise(source) && (source = observableFromPromise(source));
        sad.setDisposable(source.subscribe(new ZipObserver(observer, i, this, q, done)));
      }

      return new NAryDisposable(subscriptions);
    };

    return ZipObservable;
  }(ObservableBase));

  var ZipObserver = (function (__super__) {
    inherits(ZipObserver, __super__);
    function ZipObserver(o, i, p, q, d) {
      this._o = o;
      this._i = i;
      this._p = p;
      this._q = q;
      this._d = d;
      __super__.call(this);
    }

    function notEmpty(x) { return x.length > 0; }
    function shiftEach(x) { return x.shift(); }
    function notTheSame(i) {
      return function (x, j) {
        return j !== i;
      };
    }

    ZipObserver.prototype.next = function (x) {
      this._q[this._i].push(x);
      if (this._q.every(notEmpty)) {
        var queuedValues = this._q.map(shiftEach);
        var res = tryCatch(this._p._cb).apply(null, queuedValues);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._o.onNext(res);
      } else if (this._d.filter(notTheSame(this._i)).every(identity)) {
        this._o.onCompleted();
      }
    };

    ZipObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ZipObserver.prototype.completed = function () {
      this._d[this._i] = true;
      this._d.every(identity) && this._o.onCompleted();
    };

    return ZipObserver;
  }(AbstractObserver));

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
   */
  observableProto.zip = function () {
    if (arguments.length === 0) { throw new Error('invalid arguments'); }

    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);

    var parent = this;
    args.unshift(parent);

    return new ZipObservable(args, resultSelector);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
   * @param arguments Observable sources.
   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  Observable.zip = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args = isFunction(args[1]) ? args[0].concat(args[1]) : args[0];
    }
    var first = args.shift();
    return first.zip.apply(first, args);
  };

function falseFactory() { return false; }
function emptyArrayFactory() { return []; }
function argumentsToArray() {
  var len = arguments.length, args = new Array(len);
  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
  return args;
}

var ZipIterableObservable = (function(__super__) {
  inherits(ZipIterableObservable, __super__);
  function ZipIterableObservable(sources, cb) {
    this.sources = sources;
    this._cb = cb;
    __super__.call(this);
  }

  ZipIterableObservable.prototype.subscribeCore = function (o) {
    var sources = this.sources, len = sources.length, subscriptions = new Array(len);

    var state = {
      q: arrayInitialize(len, emptyArrayFactory),
      done: arrayInitialize(len, falseFactory),
      cb: this._cb,
      o: o
    };

    for (var i = 0; i < len; i++) {
      (function (i) {
        var source = sources[i], sad = new SingleAssignmentDisposable();
        (isArrayLike(source) || isIterable(source)) && (source = observableFrom(source));

        subscriptions[i] = sad;
        sad.setDisposable(source.subscribe(new ZipIterableObserver(state, i)));
      }(i));
    }

    return new NAryDisposable(subscriptions);
  };

  return ZipIterableObservable;
}(ObservableBase));

var ZipIterableObserver = (function (__super__) {
  inherits(ZipIterableObserver, __super__);
  function ZipIterableObserver(s, i) {
    this._s = s;
    this._i = i;
    __super__.call(this);
  }

  function notEmpty(x) { return x.length > 0; }
  function shiftEach(x) { return x.shift(); }
  function notTheSame(i) {
    return function (x, j) {
      return j !== i;
    };
  }

  ZipIterableObserver.prototype.next = function (x) {
    this._s.q[this._i].push(x);
    if (this._s.q.every(notEmpty)) {
      var queuedValues = this._s.q.map(shiftEach),
          res = tryCatch(this._s.cb).apply(null, queuedValues);
      if (res === errorObj) { return this._s.o.onError(res.e); }
      this._s.o.onNext(res);
    } else if (this._s.done.filter(notTheSame(this._i)).every(identity)) {
      this._s.o.onCompleted();
    }
  };

  ZipIterableObserver.prototype.error = function (e) { this._s.o.onError(e); };

  ZipIterableObserver.prototype.completed = function () {
    this._s.done[this._i] = true;
    this._s.done.every(identity) && this._s.o.onCompleted();
  };

  return ZipIterableObserver;
}(AbstractObserver));

/**
 * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
 * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
 * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
 */
observableProto.zipIterable = function () {
  if (arguments.length === 0) { throw new Error('invalid arguments'); }

  var len = arguments.length, args = new Array(len);
  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
  var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;

  var parent = this;
  args.unshift(parent);
  return new ZipIterableObservable(args, resultSelector);
};

  function asObservable(source) {
    return function subscribe(o) { return source.subscribe(o); };
  }

  /**
   *  Hides the identity of an observable sequence.
   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
   */
  observableProto.asObservable = function () {
    return new AnonymousObservable(asObservable(this), this);
  };

  function toArray(x) { return x.toArray(); }
  function notEmpty(x) { return x.length > 0; }

  /**
   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
   * @param {Number} count Length of each buffer.
   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
   * @returns {Observable} An observable sequence of buffers.
   */
  observableProto.bufferWithCount = observableProto.bufferCount = function (count, skip) {
    typeof skip !== 'number' && (skip = count);
    return this.windowWithCount(count, skip)
      .flatMap(toArray)
      .filter(notEmpty);
  };

  var DematerializeObservable = (function (__super__) {
    inherits(DematerializeObservable, __super__);
    function DematerializeObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    DematerializeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new DematerializeObserver(o));
    };

    return DematerializeObservable;
  }(ObservableBase));

  var DematerializeObserver = (function (__super__) {
    inherits(DematerializeObserver, __super__);

    function DematerializeObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    DematerializeObserver.prototype.next = function (x) { x.accept(this._o); };
    DematerializeObserver.prototype.error = function (e) { this._o.onError(e); };
    DematerializeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return DematerializeObserver;
  }(AbstractObserver));

  /**
   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
   */
  observableProto.dematerialize = function () {
    return new DematerializeObservable(this);
  };

  var DistinctUntilChangedObservable = (function(__super__) {
    inherits(DistinctUntilChangedObservable, __super__);
    function DistinctUntilChangedObservable(source, keyFn, comparer) {
      this.source = source;
      this.keyFn = keyFn;
      this.comparer = comparer;
      __super__.call(this);
    }

    DistinctUntilChangedObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new DistinctUntilChangedObserver(o, this.keyFn, this.comparer));
    };

    return DistinctUntilChangedObservable;
  }(ObservableBase));

  var DistinctUntilChangedObserver = (function(__super__) {
    inherits(DistinctUntilChangedObserver, __super__);
    function DistinctUntilChangedObserver(o, keyFn, comparer) {
      this.o = o;
      this.keyFn = keyFn;
      this.comparer = comparer;
      this.hasCurrentKey = false;
      this.currentKey = null;
      __super__.call(this);
    }

    DistinctUntilChangedObserver.prototype.next = function (x) {
      var key = x, comparerEquals;
      if (isFunction(this.keyFn)) {
        key = tryCatch(this.keyFn)(x);
        if (key === errorObj) { return this.o.onError(key.e); }
      }
      if (this.hasCurrentKey) {
        comparerEquals = tryCatch(this.comparer)(this.currentKey, key);
        if (comparerEquals === errorObj) { return this.o.onError(comparerEquals.e); }
      }
      if (!this.hasCurrentKey || !comparerEquals) {
        this.hasCurrentKey = true;
        this.currentKey = key;
        this.o.onNext(x);
      }
    };
    DistinctUntilChangedObserver.prototype.error = function(e) {
      this.o.onError(e);
    };
    DistinctUntilChangedObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return DistinctUntilChangedObserver;
  }(AbstractObserver));

  /**
  *  Returns an observable sequence that contains only distinct contiguous elements according to the keyFn and the comparer.
  * @param {Function} [keyFn] A function to compute the comparison key for each element. If not provided, it projects the value.
  * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
  * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
  */
  observableProto.distinctUntilChanged = function (keyFn, comparer) {
    comparer || (comparer = defaultComparer);
    return new DistinctUntilChangedObservable(this, keyFn, comparer);
  };

  var TapObservable = (function(__super__) {
    inherits(TapObservable,__super__);
    function TapObservable(source, observerOrOnNext, onError, onCompleted) {
      this.source = source;
      this._oN = observerOrOnNext;
      this._oE = onError;
      this._oC = onCompleted;
      __super__.call(this);
    }

    TapObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, p) {
      this.o = o;
      this.t = !p._oN || isFunction(p._oN) ?
        observerCreate(p._oN || noop, p._oE || noop, p._oC || noop) :
        p._oN;
      this.isStopped = false;
      AbstractObserver.call(this);
    }
    InnerObserver.prototype.next = function(x) {
      var res = tryCatch(this.t.onNext).call(this.t, x);
      if (res === errorObj) { this.o.onError(res.e); }
      this.o.onNext(x);
    };
    InnerObserver.prototype.error = function(err) {
      var res = tryCatch(this.t.onError).call(this.t, err);
      if (res === errorObj) { return this.o.onError(res.e); }
      this.o.onError(err);
    };
    InnerObserver.prototype.completed = function() {
      var res = tryCatch(this.t.onCompleted).call(this.t);
      if (res === errorObj) { return this.o.onError(res.e); }
      this.o.onCompleted();
    };

    return TapObservable;
  }(ObservableBase));

  /**
  *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an o.
  * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
  * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
    return new TapObservable(this, observerOrOnNext, onError, onCompleted);
  };

  /**
  *  Invokes an action for each element in the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onNext Action to invoke for each element in the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
  };

  /**
  *  Invokes an action upon exceptional termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
  };

  /**
  *  Invokes an action upon graceful termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
  };

  var FinallyObservable = (function (__super__) {
    inherits(FinallyObservable, __super__);
    function FinallyObservable(source, fn, thisArg) {
      this.source = source;
      this._fn = bindCallback(fn, thisArg, 0);
      __super__.call(this);
    }

    FinallyObservable.prototype.subscribeCore = function (o) {
      var d = tryCatch(this.source.subscribe).call(this.source, o);
      if (d === errorObj) {
        this._fn();
        thrower(d.e);
      }

      return new FinallyDisposable(d, this._fn);
    };

    function FinallyDisposable(s, fn) {
      this.isDisposed = false;
      this._s = s;
      this._fn = fn;
    }
    FinallyDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        var res = tryCatch(this._s.dispose).call(this._s);
        this._fn();
        res === errorObj && thrower(res.e);
      }
    };

    return FinallyObservable;

  }(ObservableBase));

  /**
   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
   */
  observableProto['finally'] = function (action, thisArg) {
    return new FinallyObservable(this, action, thisArg);
  };

  var IgnoreElementsObservable = (function(__super__) {
    inherits(IgnoreElementsObservable, __super__);

    function IgnoreElementsObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    IgnoreElementsObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o));
    };

    function InnerObserver(o) {
      this.o = o;
      this.isStopped = false;
    }
    InnerObserver.prototype.onNext = noop;
    InnerObserver.prototype.onError = function (err) {
      if(!this.isStopped) {
        this.isStopped = true;
        this.o.onError(err);
      }
    };
    InnerObserver.prototype.onCompleted = function () {
      if(!this.isStopped) {
        this.isStopped = true;
        this.o.onCompleted();
      }
    };
    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
    InnerObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.observer.onError(e);
        return true;
      }

      return false;
    };

    return IgnoreElementsObservable;
  }(ObservableBase));

  /**
   *  Ignores all elements in an observable sequence leaving only the termination messages.
   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
   */
  observableProto.ignoreElements = function () {
    return new IgnoreElementsObservable(this);
  };

  var MaterializeObservable = (function (__super__) {
    inherits(MaterializeObservable, __super__);
    function MaterializeObservable(source, fn) {
      this.source = source;
      __super__.call(this);
    }

    MaterializeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new MaterializeObserver(o));
    };

    return MaterializeObservable;
  }(ObservableBase));

  var MaterializeObserver = (function (__super__) {
    inherits(MaterializeObserver, __super__);

    function MaterializeObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    MaterializeObserver.prototype.next = function (x) { this._o.onNext(notificationCreateOnNext(x)) };
    MaterializeObserver.prototype.error = function (e) { this._o.onNext(notificationCreateOnError(e)); this._o.onCompleted(); };
    MaterializeObserver.prototype.completed = function () { this._o.onNext(notificationCreateOnCompleted()); this._o.onCompleted(); };

    return MaterializeObserver;
  }(AbstractObserver));

  /**
   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
   */
  observableProto.materialize = function () {
    return new MaterializeObservable(this);
  };

  /**
   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
   */
  observableProto.repeat = function (repeatCount) {
    return enumerableRepeat(this, repeatCount).concat();
  };

  /**
   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
   *
   * @example
   *  var res = retried = retry.repeat();
   *  var res = retried = retry.repeat(2);
   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
   */
  observableProto.retry = function (retryCount) {
    return enumerableRepeat(this, retryCount).catchError();
  };

  function repeat(value) {
    return {
      '@@iterator': function () {
        return {
          next: function () {
            return { done: false, value: value };
          }
        };
      }
    };
  }

  var RetryWhenObservable = (function(__super__) {
    function createDisposable(state) {
      return {
        isDisposed: false,
        dispose: function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            state.isDisposed = true;
          }
        }
      };
    }

    function RetryWhenObservable(source, notifier) {
      this.source = source;
      this._notifier = notifier;
      __super__.call(this);
    }

    inherits(RetryWhenObservable, __super__);

    RetryWhenObservable.prototype.subscribeCore = function (o) {
      var exceptions = new Subject(),
        notifier = new Subject(),
        handled = this._notifier(exceptions),
        notificationDisposable = handled.subscribe(notifier);

      var e = this.source['@@iterator']();

      var state = { isDisposed: false },
        lastError,
        subscription = new SerialDisposable();
      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
        if (state.isDisposed) { return; }
        var currentItem = e.next();

        if (currentItem.done) {
          if (lastError) {
            o.onError(lastError);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var outer = new SingleAssignmentDisposable();
        var inner = new SingleAssignmentDisposable();
        subscription.setDisposable(new BinaryDisposable(inner, outer));
        outer.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function (exn) {
            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
              o.onError(ex);
            }, function() {
              o.onCompleted();
            }));

            exceptions.onNext(exn);
            outer.dispose();
          },
          function() { o.onCompleted(); }));
      });

      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
    };

    return RetryWhenObservable;
  }(ObservableBase));

  observableProto.retryWhen = function (notifier) {
    return new RetryWhenObservable(repeat(this), notifier);
  };

  function repeat(value) {
    return {
      '@@iterator': function () {
        return {
          next: function () {
            return { done: false, value: value };
          }
        };
      }
    };
  }

  var RepeatWhenObservable = (function(__super__) {
    function createDisposable(state) {
      return {
        isDisposed: false,
        dispose: function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            state.isDisposed = true;
          }
        }
      };
    }

    function RepeatWhenObservable(source, notifier) {
      this.source = source;
      this._notifier = notifier;
      __super__.call(this);
    }

    inherits(RepeatWhenObservable, __super__);

    RepeatWhenObservable.prototype.subscribeCore = function (o) {
      var completions = new Subject(),
        notifier = new Subject(),
        handled = this._notifier(completions),
        notificationDisposable = handled.subscribe(notifier);

      var e = this.source['@@iterator']();

      var state = { isDisposed: false },
        lastError,
        subscription = new SerialDisposable();
      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
        if (state.isDisposed) { return; }
        var currentItem = e.next();

        if (currentItem.done) {
          if (lastError) {
            o.onError(lastError);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var outer = new SingleAssignmentDisposable();
        var inner = new SingleAssignmentDisposable();
        subscription.setDisposable(new BinaryDisposable(inner, outer));
        outer.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function (exn) { o.onError(exn); },
          function() {
            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
              o.onError(ex);
            }, function() {
              o.onCompleted();
            }));

            completions.onNext(null);
            outer.dispose();
          }));
      });

      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
    };

    return RepeatWhenObservable;
  }(ObservableBase));

  observableProto.repeatWhen = function (notifier) {
    return new RepeatWhenObservable(repeat(this), notifier);
  };

  var ScanObservable = (function(__super__) {
    inherits(ScanObservable, __super__);
    function ScanObservable(source, accumulator, hasSeed, seed) {
      this.source = source;
      this.accumulator = accumulator;
      this.hasSeed = hasSeed;
      this.seed = seed;
      __super__.call(this);
    }

    ScanObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new ScanObserver(o,this));
    };

    return ScanObservable;
  }(ObservableBase));

  var ScanObserver = (function (__super__) {
    inherits(ScanObserver, __super__);
    function ScanObserver(o, parent) {
      this._o = o;
      this._p = parent;
      this._fn = parent.accumulator;
      this._hs = parent.hasSeed;
      this._s = parent.seed;
      this._ha = false;
      this._a = null;
      this._hv = false;
      this._i = 0;
      __super__.call(this);
    }

    ScanObserver.prototype.next = function (x) {
      !this._hv && (this._hv = true);
      if (this._ha) {
        this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);
      } else {
        this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;
        this._ha = true;
      }
      if (this._a === errorObj) { return this._o.onError(this._a.e); }
      this._o.onNext(this._a);
      this._i++;
    };

    ScanObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ScanObserver.prototype.completed = function () {
      !this._hv && this._hs && this._o.onNext(this._s);
      this._o.onCompleted();
    };

    return ScanObserver;
  }(AbstractObserver));

  /**
  *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
  *  For aggregation behavior with no intermediate results, see Observable.aggregate.
  * @param {Mixed} [seed] The initial accumulator value.
  * @param {Function} accumulator An accumulator function to be invoked on each element.
  * @returns {Observable} An observable sequence containing the accumulated values.
  */
  observableProto.scan = function () {
    var hasSeed = false, seed, accumulator = arguments[0];
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[1];
    }
    return new ScanObservable(this, accumulator, hasSeed, seed);
  };

  var SkipLastObservable = (function (__super__) {
    inherits(SkipLastObservable, __super__);
    function SkipLastObservable(source, c) {
      this.source = source;
      this._c = c;
      __super__.call(this);
    }

    SkipLastObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipLastObserver(o, this._c));
    };

    return SkipLastObservable;
  }(ObservableBase));

  var SkipLastObserver = (function (__super__) {
    inherits(SkipLastObserver, __super__);
    function SkipLastObserver(o, c) {
      this._o = o;
      this._c = c;
      this._q = [];
      __super__.call(this);
    }

    SkipLastObserver.prototype.next = function (x) {
      this._q.push(x);
      this._q.length > this._c && this._o.onNext(this._q.shift());
    };

    SkipLastObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    SkipLastObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return SkipLastObserver;
  }(AbstractObserver));

  /**
   *  Bypasses a specified number of elements at the end of an observable sequence.
   * @description
   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
   * @param count Number of elements to bypass at the end of the source sequence.
   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
   */
  observableProto.skipLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    return new SkipLastObservable(this, count);
  };

  /**
   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
   *  @example
   *  var res = source.startWith(1, 2, 3);
   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
   * @param {Arguments} args The specified values to prepend to the observable sequence
   * @returns {Observable} The source sequence prepended with the specified values.
   */
  observableProto.startWith = function () {
    var values, scheduler, start = 0;
    if (!!arguments.length && isScheduler(arguments[0])) {
      scheduler = arguments[0];
      start = 1;
    } else {
      scheduler = immediateScheduler;
    }
    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    return observableConcat.apply(null, [observableFromArray(args, scheduler), this]);
  };

  var TakeLastObserver = (function (__super__) {
    inherits(TakeLastObserver, __super__);
    function TakeLastObserver(o, c) {
      this._o = o;
      this._c = c;
      this._q = [];
      __super__.call(this);
    }

    TakeLastObserver.prototype.next = function (x) {
      this._q.push(x);
      this._q.length > this._c && this._q.shift();
    };

    TakeLastObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    TakeLastObserver.prototype.completed = function () {
      while (this._q.length > 0) { this._o.onNext(this._q.shift()); }
      this._o.onCompleted();
    };

    return TakeLastObserver;
  }(AbstractObserver));

  /**
   *  Returns a specified number of contiguous elements from the end of an observable sequence.
   * @description
   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
   * @param {Number} count Number of elements to take from the end of the source sequence.
   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      return source.subscribe(new TakeLastObserver(o, count));
    }, source);
  };

  var TakeLastBufferObserver = (function (__super__) {
    inherits(TakeLastBufferObserver, __super__);
    function TakeLastBufferObserver(o, c) {
      this._o = o;
      this._c = c;
      this._q = [];
      __super__.call(this);
    }

    TakeLastBufferObserver.prototype.next = function (x) {
      this._q.push(x);
      this._q.length > this._c && this._q.shift();
    };

    TakeLastBufferObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    TakeLastBufferObserver.prototype.completed = function () {
      this._o.onNext(this._q);
      this._o.onCompleted();
    };

    return TakeLastBufferObserver;
  }(AbstractObserver));

  /**
   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
   *
   * @description
   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
   *  source sequence, this buffer is produced on the result sequence.
   * @param {Number} count Number of elements to take from the end of the source sequence.
   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLastBuffer = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      return source.subscribe(new TakeLastBufferObserver(o, count));
    }, source);
  };

  /**
   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
   * @param {Number} count Length of each window.
   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithCount = observableProto.windowCount = function (count, skip) {
    var source = this;
    +count || (count = 0);
    Math.abs(count) === Infinity && (count = 0);
    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
    skip == null && (skip = count);
    +skip || (skip = 0);
    Math.abs(skip) === Infinity && (skip = 0);

    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
    return new AnonymousObservable(function (observer) {
      var m = new SingleAssignmentDisposable(),
        refCountDisposable = new RefCountDisposable(m),
        n = 0,
        q = [];

      function createWindow () {
        var s = new Subject();
        q.push(s);
        observer.onNext(addRef(s, refCountDisposable));
      }

      createWindow();

      m.setDisposable(source.subscribe(
        function (x) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
          var c = n - count + 1;
          c >= 0 && c % skip === 0 && q.shift().onCompleted();
          ++n % skip === 0 && createWindow();
        },
        function (e) {
          while (q.length > 0) { q.shift().onError(e); }
          observer.onError(e);
        },
        function () {
          while (q.length > 0) { q.shift().onCompleted(); }
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

  function concatMap(source, selector, thisArg) {
    var selectorFunc = bindCallback(selector, thisArg, 3);
    return source.map(function (x, i) {
      var result = selectorFunc(x, i, source);
      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
      return result;
    }).concatAll();
  }

  /**
   *  One of the Following:
   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   * @example
   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
   *  Or:
   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
   *
   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
   *  Or:
   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
   *
   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
   * source sequence onto which could be either an observable or Promise.
   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
   */
  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
    if (isFunction(selector) && isFunction(resultSelector)) {
      return this.concatMap(function (x, i) {
        var selectorResult = selector(x, i);
        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

        return selectorResult.map(function (y, i2) {
          return resultSelector(x, y, i, i2);
        });
      });
    }
    return isFunction(selector) ?
      concatMap(this, selector, thisArg) :
      concatMap(this, function () { return selector; });
  };

  /**
   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
   */
  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
    var source = this,
        onNextFunc = bindCallback(onNext, thisArg, 2),
        onErrorFunc = bindCallback(onError, thisArg, 1),
        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
    return new AnonymousObservable(function (observer) {
      var index = 0;
      return source.subscribe(
        function (x) {
          var result;
          try {
            result = onNextFunc(x, index++);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
        },
        function (err) {
          var result;
          try {
            result = onErrorFunc(err);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        },
        function () {
          var result;
          try {
            result = onCompletedFunc();
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        });
    }, this).concatAll();
  };

  var DefaultIfEmptyObserver = (function (__super__) {
    inherits(DefaultIfEmptyObserver, __super__);
    function DefaultIfEmptyObserver(o, d) {
      this._o = o;
      this._d = d;
      this._f = false;
      __super__.call(this);
    }

    DefaultIfEmptyObserver.prototype.next = function (x) {
      this._f = true;
      this._o.onNext(x);
    };

    DefaultIfEmptyObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    DefaultIfEmptyObserver.prototype.completed = function () {
      !this._f && this._o.onNext(this._d);
      this._o.onCompleted();
    };

    return DefaultIfEmptyObserver;
  }(AbstractObserver));

  /**
   *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
   *
   *  var res = obs = xs.defaultIfEmpty();
   *  2 - obs = xs.defaultIfEmpty(false);
   *
   * @memberOf Observable#
   * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
   * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
   */
    observableProto.defaultIfEmpty = function (defaultValue) {
      var source = this;
      defaultValue === undefined && (defaultValue = null);
      return new AnonymousObservable(function (o) {
        return source.subscribe(new DefaultIfEmptyObserver(o, defaultValue));
      }, source);
    };

  // Swap out for Array.findIndex
  function arrayIndexOfComparer(array, item, comparer) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (comparer(array[i], item)) { return i; }
    }
    return -1;
  }

  function HashSet(comparer) {
    this.comparer = comparer;
    this.set = [];
  }
  HashSet.prototype.push = function(value) {
    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
    retValue && this.set.push(value);
    return retValue;
  };

  var DistinctObservable = (function (__super__) {
    inherits(DistinctObservable, __super__);
    function DistinctObservable(source, keyFn, cmpFn) {
      this.source = source;
      this._keyFn = keyFn;
      this._cmpFn = cmpFn;
      __super__.call(this);
    }

    DistinctObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new DistinctObserver(o, this._keyFn, this._cmpFn));
    };

    return DistinctObservable;
  }(ObservableBase));

  var DistinctObserver = (function (__super__) {
    inherits(DistinctObserver, __super__);
    function DistinctObserver(o, keyFn, cmpFn) {
      this._o = o;
      this._keyFn = keyFn;
      this._h = new HashSet(cmpFn);
      __super__.call(this);
    }

    DistinctObserver.prototype.next = function (x) {
      var key = x;
      if (isFunction(this._keyFn)) {
        key = tryCatch(this._keyFn)(x);
        if (key === errorObj) { return this._o.onError(key.e); }
      }
      this._h.push(key) && this._o.onNext(x);
    };

    DistinctObserver.prototype.error = function (e) { this._o.onError(e); };
    DistinctObserver.prototype.completed = function () { this._o.onCompleted(); };

    return DistinctObserver;
  }(AbstractObserver));

  /**
   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
   *
   * @example
   *  var res = obs = xs.distinct();
   *  2 - obs = xs.distinct(function (x) { return x.id; });
   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
   * @param {Function} [comparer]  Used to compare items in the collection.
   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
   */
  observableProto.distinct = function (keySelector, comparer) {
    comparer || (comparer = defaultComparer);
    return new DistinctObservable(this, keySelector, comparer);
  };

  /**
   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
   *
   * @example
   *  var res = observable.groupBy(function (x) { return x.id; });
   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
   * @param {Function} keySelector A function to extract the key for each element.
   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
   */
  observableProto.groupBy = function (keySelector, elementSelector) {
    return this.groupByUntil(keySelector, elementSelector, observableNever);
  };

    /**
     *  Groups the elements of an observable sequence according to a specified key selector function.
     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
     *
     * @example
     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
     * @param {Function} keySelector A function to extract the key for each element.
     * @param {Function} durationSelector A function to signal the expiration of a group.
     * @returns {Observable}
     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
     *
     */
    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector) {
      var source = this;
      return new AnonymousObservable(function (o) {
        var map = new Map(),
          groupDisposable = new CompositeDisposable(),
          refCountDisposable = new RefCountDisposable(groupDisposable),
          handleError = function (e) { return function (item) { item.onError(e); }; };

        groupDisposable.add(
          source.subscribe(function (x) {
            var key = tryCatch(keySelector)(x);
            if (key === errorObj) {
              map.forEach(handleError(key.e));
              return o.onError(key.e);
            }

            var fireNewMapEntry = false, writer = map.get(key);
            if (writer === undefined) {
              writer = new Subject();
              map.set(key, writer);
              fireNewMapEntry = true;
            }

            if (fireNewMapEntry) {
              var group = new GroupedObservable(key, writer, refCountDisposable),
                durationGroup = new GroupedObservable(key, writer);
              var duration = tryCatch(durationSelector)(durationGroup);
              if (duration === errorObj) {
                map.forEach(handleError(duration.e));
                return o.onError(duration.e);
              }

              o.onNext(group);

              var md = new SingleAssignmentDisposable();
              groupDisposable.add(md);

              md.setDisposable(duration.take(1).subscribe(
                noop,
                function (e) {
                  map.forEach(handleError(e));
                  o.onError(e);
                },
                function () {
                  if (map['delete'](key)) { writer.onCompleted(); }
                  groupDisposable.remove(md);
                }));
            }

            var element = x;
            if (isFunction(elementSelector)) {
              element = tryCatch(elementSelector)(x);
              if (element === errorObj) {
                map.forEach(handleError(element.e));
                return o.onError(element.e);
              }
            }

            writer.onNext(element);
        }, function (e) {
          map.forEach(handleError(e));
          o.onError(e);
        }, function () {
          map.forEach(function (item) { item.onCompleted(); });
          o.onCompleted();
        }));

      return refCountDisposable;
    }, source);
  };

  var MapObservable = (function (__super__) {
    inherits(MapObservable, __super__);

    function MapObservable(source, selector, thisArg) {
      this.source = source;
      this.selector = bindCallback(selector, thisArg, 3);
      __super__.call(this);
    }

    function innerMap(selector, self) {
      return function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); };
    }

    MapObservable.prototype.internalMap = function (selector, thisArg) {
      return new MapObservable(this.source, innerMap(selector, this), thisArg);
    };

    MapObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o, this.selector, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, selector, source) {
      this.o = o;
      this.selector = selector;
      this.source = source;
      this.i = 0;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype.next = function(x) {
      var result = tryCatch(this.selector)(x, this.i++, this.source);
      if (result === errorObj) { return this.o.onError(result.e); }
      this.o.onNext(result);
    };

    InnerObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return MapObservable;

  }(ObservableBase));

  /**
  * Projects each element of an observable sequence into a new form by incorporating the element's index.
  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
  */
  observableProto.map = observableProto.select = function (selector, thisArg) {
    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
    return this instanceof MapObservable ?
      this.internalMap(selectorFn, thisArg) :
      new MapObservable(this, selectorFn, thisArg);
  };

  function plucker(args, len) {
    return function mapper(x) {
      var currentProp = x;
      for (var i = 0; i < len; i++) {
        var p = currentProp[args[i]];
        if (typeof p !== 'undefined') {
          currentProp = p;
        } else {
          return undefined;
        }
      }
      return currentProp;
    };
  }

  /**
   * Retrieves the value of a specified nested property from all elements in
   * the Observable sequence.
   * @param {Arguments} arguments The nested properties to pluck.
   * @returns {Observable} Returns a new Observable sequence of property values.
   */
  observableProto.pluck = function () {
    var len = arguments.length, args = new Array(len);
    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return this.map(plucker(args, len));
  };

observableProto.flatMap = observableProto.selectMany = observableProto.mergeMap = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).mergeAll();
};

  /**
   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
   */
  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var index = 0;

      return source.subscribe(
        function (x) {
          var result;
          try {
            result = onNext.call(thisArg, x, index++);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
        },
        function (err) {
          var result;
          try {
            result = onError.call(thisArg, err);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        },
        function () {
          var result;
          try {
            result = onCompleted.call(thisArg);
          } catch (e) {
            observer.onError(e);
            return;
          }
          isPromise(result) && (result = observableFromPromise(result));
          observer.onNext(result);
          observer.onCompleted();
        });
    }, source).mergeAll();
  };

observableProto.flatMapLatest = observableProto.switchMap = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).switchLatest();
};

  var SkipObservable = (function(__super__) {
    inherits(SkipObservable, __super__);
    function SkipObservable(source, count) {
      this.source = source;
      this._count = count;
      __super__.call(this);
    }

    SkipObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipObserver(o, this._count));
    };

    function SkipObserver(o, c) {
      this._o = o;
      this._r = c;
      AbstractObserver.call(this);
    }

    inherits(SkipObserver, AbstractObserver);

    SkipObserver.prototype.next = function (x) {
      if (this._r <= 0) {
        this._o.onNext(x);
      } else {
        this._r--;
      }
    };
    SkipObserver.prototype.error = function(e) { this._o.onError(e); };
    SkipObserver.prototype.completed = function() { this._o.onCompleted(); };

    return SkipObservable;
  }(ObservableBase));

  /**
   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
   * @param {Number} count The number of elements to skip before returning the remaining elements.
   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
   */
  observableProto.skip = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    return new SkipObservable(this, count);
  };

  var SkipWhileObservable = (function (__super__) {
    inherits(SkipWhileObservable, __super__);
    function SkipWhileObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    SkipWhileObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipWhileObserver(o, this));
    };

    return SkipWhileObservable;
  }(ObservableBase));

  var SkipWhileObserver = (function (__super__) {
    inherits(SkipWhileObserver, __super__);

    function SkipWhileObserver(o, p) {
      this._o = o;
      this._p = p;
      this._i = 0;
      this._r = false;
      __super__.call(this);
    }

    SkipWhileObserver.prototype.next = function (x) {
      if (!this._r) {
        var res = tryCatch(this._p._fn)(x, this._i++, this._p);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._r = !res;
      }
      this._r && this._o.onNext(x);
    };
    SkipWhileObserver.prototype.error = function (e) { this._o.onError(e); };
    SkipWhileObserver.prototype.completed = function () { this._o.onCompleted(); };

    return SkipWhileObserver;
  }(AbstractObserver));

  /**
   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
   *  The element's index is used in the logic of the predicate function.
   *
   *  var res = source.skipWhile(function (value) { return value < 10; });
   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
   */
  observableProto.skipWhile = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new SkipWhileObservable(this, fn);
  };

  var TakeObservable = (function(__super__) {
    inherits(TakeObservable, __super__);
    function TakeObservable(source, count) {
      this.source = source;
      this._count = count;
      __super__.call(this);
    }

    TakeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TakeObserver(o, this._count));
    };

    function TakeObserver(o, c) {
      this._o = o;
      this._c = c;
      this._r = c;
      AbstractObserver.call(this);
    }

    inherits(TakeObserver, AbstractObserver);

    TakeObserver.prototype.next = function (x) {
      if (this._r-- > 0) {
        this._o.onNext(x);
        this._r <= 0 && this._o.onCompleted();
      }
    };

    TakeObserver.prototype.error = function (e) { this._o.onError(e); };
    TakeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return TakeObservable;
  }(ObservableBase));

  /**
   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
   * @param {Number} count The number of elements to return.
   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
   */
  observableProto.take = function (count, scheduler) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    if (count === 0) { return observableEmpty(scheduler); }
    return new TakeObservable(this, count);
  };

  var TakeWhileObservable = (function (__super__) {
    inherits(TakeWhileObservable, __super__);
    function TakeWhileObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    TakeWhileObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TakeWhileObserver(o, this));
    };

    return TakeWhileObservable;
  }(ObservableBase));

  var TakeWhileObserver = (function (__super__) {
    inherits(TakeWhileObserver, __super__);

    function TakeWhileObserver(o, p) {
      this._o = o;
      this._p = p;
      this._i = 0;
      this._r = true;
      __super__.call(this);
    }

    TakeWhileObserver.prototype.next = function (x) {
      if (this._r) {
        this._r = tryCatch(this._p._fn)(x, this._i++, this._p);
        if (this._r === errorObj) { return this._o.onError(this._r.e); }
      }
      if (this._r) {
        this._o.onNext(x);
      } else {
        this._o.onCompleted();
      }
    };
    TakeWhileObserver.prototype.error = function (e) { this._o.onError(e); };
    TakeWhileObserver.prototype.completed = function () { this._o.onCompleted(); };

    return TakeWhileObserver;
  }(AbstractObserver));

  /**
   *  Returns elements from an observable sequence as long as a specified condition is true.
   *  The element's index is used in the logic of the predicate function.
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
   */
  observableProto.takeWhile = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new TakeWhileObservable(this, fn);
  };

  var FilterObservable = (function (__super__) {
    inherits(FilterObservable, __super__);

    function FilterObservable(source, predicate, thisArg) {
      this.source = source;
      this.predicate = bindCallback(predicate, thisArg, 3);
      __super__.call(this);
    }

    FilterObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o, this.predicate, this));
    };

    function innerPredicate(predicate, self) {
      return function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }
    }

    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
      return new FilterObservable(this.source, innerPredicate(predicate, this), thisArg);
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, predicate, source) {
      this.o = o;
      this.predicate = predicate;
      this.source = source;
      this.i = 0;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype.next = function(x) {
      var shouldYield = tryCatch(this.predicate)(x, this.i++, this.source);
      if (shouldYield === errorObj) {
        return this.o.onError(shouldYield.e);
      }
      shouldYield && this.o.onNext(x);
    };

    InnerObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return FilterObservable;

  }(ObservableBase));

  /**
  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
  */
  observableProto.filter = observableProto.where = function (predicate, thisArg) {
    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
      new FilterObservable(this, predicate, thisArg);
  };

  var ExtremaByObservable = (function (__super__) {
    inherits(ExtremaByObservable, __super__);
    function ExtremaByObservable(source, k, c) {
      this.source = source;
      this._k = k;
      this._c = c;
      __super__.call(this);
    }

    ExtremaByObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new ExtremaByObserver(o, this._k, this._c));
    };

    return ExtremaByObservable;
  }(ObservableBase));

  var ExtremaByObserver = (function (__super__) {
    inherits(ExtremaByObserver, __super__);
    function ExtremaByObserver(o, k, c) {
      this._o = o;
      this._k = k;
      this._c = c;
      this._v = null;
      this._hv = false;
      this._l = [];
      __super__.call(this);
    }

    ExtremaByObserver.prototype.next = function (x) {
      var key = tryCatch(this._k)(x);
      if (key === errorObj) { return this._o.onError(key.e); }
      var comparison = 0;
      if (!this._hv) {
        this._hv = true;
        this._v = key;
      } else {
        comparison = tryCatch(this._c)(key, this._v);
        if (comparison === errorObj) { return this._o.onError(comparison.e); }
      }
      if (comparison > 0) {
        this._v = key;
        this._l = [];
      }
      if (comparison >= 0) { this._l.push(x); }
    };

    ExtremaByObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ExtremaByObserver.prototype.completed = function () {
      this._o.onNext(this._l);
      this._o.onCompleted();
    };

    return ExtremaByObserver;
  }(AbstractObserver));

  function firstOnly(x) {
    if (x.length === 0) { throw new EmptyError(); }
    return x[0];
  }

  var ReduceObservable = (function(__super__) {
    inherits(ReduceObservable, __super__);
    function ReduceObservable(source, accumulator, hasSeed, seed) {
      this.source = source;
      this.accumulator = accumulator;
      this.hasSeed = hasSeed;
      this.seed = seed;
      __super__.call(this);
    }

    ReduceObservable.prototype.subscribeCore = function(observer) {
      return this.source.subscribe(new ReduceObserver(observer,this));
    };

    return ReduceObservable;
  }(ObservableBase));

  var ReduceObserver = (function (__super__) {
    inherits(ReduceObserver, __super__);
    function ReduceObserver(o, parent) {
      this._o = o;
      this._p = parent;
      this._fn = parent.accumulator;
      this._hs = parent.hasSeed;
      this._s = parent.seed;
      this._ha = false;
      this._a = null;
      this._hv = false;
      this._i = 0;
      __super__.call(this);
    }

    ReduceObserver.prototype.next = function (x) {
      !this._hv && (this._hv = true);
      if (this._ha) {
        this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);
      } else {
        this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;
        this._ha = true;
      }
      if (this._a === errorObj) { return this._o.onError(this._a.e); }
      this._i++;
    };

    ReduceObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ReduceObserver.prototype.completed = function () {
      this._hv && this._o.onNext(this._a);
      !this._hv && this._hs && this._o.onNext(this._s);
      !this._hv && !this._hs && this._o.onError(new EmptyError());
      this._o.onCompleted();
    };

    return ReduceObserver;
  }(AbstractObserver));

  /**
  * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
  * For aggregation behavior with incremental intermediate results, see Observable.scan.
  * @param {Function} accumulator An accumulator function to be invoked on each element.
  * @param {Any} [seed] The initial accumulator value.
  * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
  */
  observableProto.reduce = function () {
    var hasSeed = false, seed, accumulator = arguments[0];
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[1];
    }
    return new ReduceObservable(this, accumulator, hasSeed, seed);
  };

  var SomeObservable = (function (__super__) {
    inherits(SomeObservable, __super__);
    function SomeObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    SomeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SomeObserver(o, this._fn, this.source));
    };

    return SomeObservable;
  }(ObservableBase));

  var SomeObserver = (function (__super__) {
    inherits(SomeObserver, __super__);

    function SomeObserver(o, fn, s) {
      this._o = o;
      this._fn = fn;
      this._s = s;
      this._i = 0;
      __super__.call(this);
    }

    SomeObserver.prototype.next = function (x) {
      var result = tryCatch(this._fn)(x, this._i++, this._s);
      if (result === errorObj) { return this._o.onError(result.e); }
      if (Boolean(result)) {
        this._o.onNext(true);
        this._o.onCompleted();
      }
    };
    SomeObserver.prototype.error = function (e) { this._o.onError(e); };
    SomeObserver.prototype.completed = function () {
      this._o.onNext(false);
      this._o.onCompleted();
    };

    return SomeObserver;
  }(AbstractObserver));

  /**
   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
   * @param {Function} [predicate] A function to test each element for a condition.
   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
   */
  observableProto.some = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new SomeObservable(this, fn);
  };

  var IsEmptyObservable = (function (__super__) {
    inherits(IsEmptyObservable, __super__);
    function IsEmptyObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    IsEmptyObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new IsEmptyObserver(o));
    };

    return IsEmptyObservable;
  }(ObservableBase));

  var IsEmptyObserver = (function(__super__) {
    inherits(IsEmptyObserver, __super__);
    function IsEmptyObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    IsEmptyObserver.prototype.next = function () {
      this._o.onNext(false);
      this._o.onCompleted();
    };
    IsEmptyObserver.prototype.error = function (e) { this._o.onError(e); };
    IsEmptyObserver.prototype.completed = function () {
      this._o.onNext(true);
      this._o.onCompleted();
    };

    return IsEmptyObserver;
  }(AbstractObserver));

  /**
   * Determines whether an observable sequence is empty.
   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
   */
  observableProto.isEmpty = function () {
    return new IsEmptyObservable(this);
  };

  var EveryObservable = (function (__super__) {
    inherits(EveryObservable, __super__);
    function EveryObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    EveryObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new EveryObserver(o, this._fn, this.source));
    };

    return EveryObservable;
  }(ObservableBase));

  var EveryObserver = (function (__super__) {
    inherits(EveryObserver, __super__);

    function EveryObserver(o, fn, s) {
      this._o = o;
      this._fn = fn;
      this._s = s;
      this._i = 0;
      __super__.call(this);
    }

    EveryObserver.prototype.next = function (x) {
      var result = tryCatch(this._fn)(x, this._i++, this._s);
      if (result === errorObj) { return this._o.onError(result.e); }
      if (!Boolean(result)) {
        this._o.onNext(false);
        this._o.onCompleted();
      }
    };
    EveryObserver.prototype.error = function (e) { this._o.onError(e); };
    EveryObserver.prototype.completed = function () {
      this._o.onNext(true);
      this._o.onCompleted();
    };

    return EveryObserver;
  }(AbstractObserver));

  /**
   * Determines whether all elements of an observable sequence satisfy a condition.
   * @param {Function} [predicate] A function to test each element for a condition.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
   */
  observableProto.every = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new EveryObservable(this, fn);
  };

  var IncludesObservable = (function (__super__) {
    inherits(IncludesObservable, __super__);
    function IncludesObservable(source, elem, idx) {
      var n = +idx || 0;
      Math.abs(n) === Infinity && (n = 0);

      this.source = source;
      this._elem = elem;
      this._n = n;
      __super__.call(this);
    }

    IncludesObservable.prototype.subscribeCore = function (o) {
      if (this._n < 0) {
        o.onNext(false);
        o.onCompleted();
        return disposableEmpty;
      }

      return this.source.subscribe(new IncludesObserver(o, this._elem, this._n));
    };

    return IncludesObservable;
  }(ObservableBase));

  var IncludesObserver = (function (__super__) {
    inherits(IncludesObserver, __super__);
    function IncludesObserver(o, elem, n) {
      this._o = o;
      this._elem = elem;
      this._n = n;
      this._i = 0;
      __super__.call(this);
    }

    function comparer(a, b) {
      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
    }

    IncludesObserver.prototype.next = function (x) {
      if (this._i++ >= this._n && comparer(x, this._elem)) {
        this._o.onNext(true);
        this._o.onCompleted();
      }
    };
    IncludesObserver.prototype.error = function (e) { this._o.onError(e); };
    IncludesObserver.prototype.completed = function () { this._o.onNext(false); this._o.onCompleted(); };

    return IncludesObserver;
  }(AbstractObserver));

  /**
   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
   * @param searchElement The value to locate in the source sequence.
   * @param {Number} [fromIndex] An equality comparer to compare elements.
   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
   */
  observableProto.includes = function (searchElement, fromIndex) {
    return new IncludesObservable(this, searchElement, fromIndex);
  };

  var CountObservable = (function (__super__) {
    inherits(CountObservable, __super__);
    function CountObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    CountObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new CountObserver(o, this._fn, this.source));
    };

    return CountObservable;
  }(ObservableBase));

  var CountObserver = (function (__super__) {
    inherits(CountObserver, __super__);

    function CountObserver(o, fn, s) {
      this._o = o;
      this._fn = fn;
      this._s = s;
      this._i = 0;
      this._c = 0;
      __super__.call(this);
    }

    CountObserver.prototype.next = function (x) {
      if (this._fn) {
        var result = tryCatch(this._fn)(x, this._i++, this._s);
        if (result === errorObj) { return this._o.onError(result.e); }
        Boolean(result) && (this._c++);
      } else {
        this._c++;
      }
    };
    CountObserver.prototype.error = function (e) { this._o.onError(e); };
    CountObserver.prototype.completed = function () {
      this._o.onNext(this._c);
      this._o.onCompleted();
    };

    return CountObserver;
  }(AbstractObserver));

  /**
   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
   * @example
   * res = source.count();
   * res = source.count(function (x) { return x > 3; });
   * @param {Function} [predicate]A function to test each element for a condition.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
   */
  observableProto.count = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new CountObservable(this, fn);
  };

  var IndexOfObservable = (function (__super__) {
    inherits(IndexOfObservable, __super__);
    function IndexOfObservable(source, e, n) {
      this.source = source;
      this._e = e;
      this._n = n;
      __super__.call(this);
    }

    IndexOfObservable.prototype.subscribeCore = function (o) {
      if (this._n < 0) {
        o.onNext(-1);
        o.onCompleted();
        return disposableEmpty;
      }

      return this.source.subscribe(new IndexOfObserver(o, this._e, this._n));
    };

    return IndexOfObservable;
  }(ObservableBase));

  var IndexOfObserver = (function (__super__) {
    inherits(IndexOfObserver, __super__);
    function IndexOfObserver(o, e, n) {
      this._o = o;
      this._e = e;
      this._n = n;
      this._i = 0;
      __super__.call(this);
    }

    IndexOfObserver.prototype.next = function (x) {
      if (this._i >= this._n && x === this._e) {
        this._o.onNext(this._i);
        this._o.onCompleted();
      }
      this._i++;
    };
    IndexOfObserver.prototype.error = function (e) { this._o.onError(e); };
    IndexOfObserver.prototype.completed = function () { this._o.onNext(-1); this._o.onCompleted(); };

    return IndexOfObserver;
  }(AbstractObserver));

  /**
   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
   * @param {Any} searchElement Element to locate in the array.
   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
   */
  observableProto.indexOf = function(searchElement, fromIndex) {
    var n = +fromIndex || 0;
    Math.abs(n) === Infinity && (n = 0);
    return new IndexOfObservable(this, searchElement, n);
  };

  var SumObservable = (function (__super__) {
    inherits(SumObservable, __super__);
    function SumObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    SumObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SumObserver(o, this._fn, this.source));
    };

    return SumObservable;
  }(ObservableBase));

  var SumObserver = (function (__super__) {
    inherits(SumObserver, __super__);

    function SumObserver(o, fn, s) {
      this._o = o;
      this._fn = fn;
      this._s = s;
      this._i = 0;
      this._c = 0;
      __super__.call(this);
    }

    SumObserver.prototype.next = function (x) {
      if (this._fn) {
        var result = tryCatch(this._fn)(x, this._i++, this._s);
        if (result === errorObj) { return this._o.onError(result.e); }
        this._c += result;
      } else {
        this._c += x;
      }
    };
    SumObserver.prototype.error = function (e) { this._o.onError(e); };
    SumObserver.prototype.completed = function () {
      this._o.onNext(this._c);
      this._o.onCompleted();
    };

    return SumObserver;
  }(AbstractObserver));

  /**
   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
   * @param {Function} [selector] A transform function to apply to each element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
   */
  observableProto.sum = function (keySelector, thisArg) {
    var fn = bindCallback(keySelector, thisArg, 3);
    return new SumObservable(this, fn);
  };

  /**
   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
   * @example
   * var res = source.minBy(function (x) { return x.value; });
   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
   * @param {Function} keySelector Key selector function.
   * @param {Function} [comparer] Comparer used to compare key values.
   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
   */
  observableProto.minBy = function (keySelector, comparer) {
    comparer || (comparer = defaultSubComparer);
    return new ExtremaByObservable(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
  };

  /**
   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
   * @example
   * var res = source.min();
   * var res = source.min(function (x, y) { return x.value - y.value; });
   * @param {Function} [comparer] Comparer used to compare elements.
   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
   */
  observableProto.min = function (comparer) {
    return this.minBy(identity, comparer).map(firstOnly);
  };

  /**
   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
   * @example
   * var res = source.maxBy(function (x) { return x.value; });
   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
   * @param {Function} keySelector Key selector function.
   * @param {Function} [comparer]  Comparer used to compare key values.
   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
   */
  observableProto.maxBy = function (keySelector, comparer) {
    comparer || (comparer = defaultSubComparer);
    return new ExtremaByObservable(this, keySelector, comparer);
  };

  /**
   * Returns the maximum value in an observable sequence according to the specified comparer.
   * @example
   * var res = source.max();
   * var res = source.max(function (x, y) { return x.value - y.value; });
   * @param {Function} [comparer] Comparer used to compare elements.
   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
   */
  observableProto.max = function (comparer) {
    return this.maxBy(identity, comparer).map(firstOnly);
  };

  var AverageObservable = (function (__super__) {
    inherits(AverageObservable, __super__);
    function AverageObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    AverageObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new AverageObserver(o, this._fn, this.source));
    };

    return AverageObservable;
  }(ObservableBase));

  var AverageObserver = (function(__super__) {
    inherits(AverageObserver, __super__);
    function AverageObserver(o, fn, s) {
      this._o = o;
      this._fn = fn;
      this._s = s;
      this._c = 0;
      this._t = 0;
      __super__.call(this);
    }

    AverageObserver.prototype.next = function (x) {
      if(this._fn) {
        var r = tryCatch(this._fn)(x, this._c++, this._s);
        if (r === errorObj) { return this._o.onError(r.e); }
        this._t += r;
      } else {
        this._c++;
        this._t += x;
      }
    };
    AverageObserver.prototype.error = function (e) { this._o.onError(e); };
    AverageObserver.prototype.completed = function () {
      if (this._c === 0) { return this._o.onError(new EmptyError()); }
      this._o.onNext(this._t / this._c);
      this._o.onCompleted();
    };

    return AverageObserver;
  }(AbstractObserver));

  /**
   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
   * @param {Function} [selector] A transform function to apply to each element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
   */
  observableProto.average = function (keySelector, thisArg) {
    var source = this, fn;
    if (isFunction(keySelector)) {
      fn = bindCallback(keySelector, thisArg, 3);
    }
    return new AverageObservable(source, fn);
  };

  /**
   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
   *
   * @example
   * var res = res = source.sequenceEqual([1,2,3]);
   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
   * @param {Observable} second Second observable sequence or array to compare.
   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
   */
  observableProto.sequenceEqual = function (second, comparer) {
    var first = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) {
      var donel = false, doner = false, ql = [], qr = [];
      var subscription1 = first.subscribe(function (x) {
        if (qr.length > 0) {
          var v = qr.shift();
          var equal = tryCatch(comparer)(v, x);
          if (equal === errorObj) { return o.onError(equal.e); }
          if (!equal) {
            o.onNext(false);
            o.onCompleted();
          }
        } else if (doner) {
          o.onNext(false);
          o.onCompleted();
        } else {
          ql.push(x);
        }
      }, function(e) { o.onError(e); }, function () {
        donel = true;
        if (ql.length === 0) {
          if (qr.length > 0) {
            o.onNext(false);
            o.onCompleted();
          } else if (doner) {
            o.onNext(true);
            o.onCompleted();
          }
        }
      });

      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
      isPromise(second) && (second = observableFromPromise(second));
      var subscription2 = second.subscribe(function (x) {
        if (ql.length > 0) {
          var v = ql.shift();
          var equal = tryCatch(comparer)(v, x);
          if (equal === errorObj) { return o.onError(equal.e); }
          if (!equal) {
            o.onNext(false);
            o.onCompleted();
          }
        } else if (donel) {
          o.onNext(false);
          o.onCompleted();
        } else {
          qr.push(x);
        }
      }, function(e) { o.onError(e); }, function () {
        doner = true;
        if (qr.length === 0) {
          if (ql.length > 0) {
            o.onNext(false);
            o.onCompleted();
          } else if (donel) {
            o.onNext(true);
            o.onCompleted();
          }
        }
      });
      return new BinaryDisposable(subscription1, subscription2);
    }, first);
  };

  var ElementAtObservable = (function (__super__) {
    inherits(ElementAtObservable, __super__);
    function ElementAtObservable(source, i, d) {
      this.source = source;
      this._i = i;
      this._d = d;
      __super__.call(this);
    }

    ElementAtObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new ElementAtObserver(o, this._i, this._d));
    };

    return ElementAtObservable;
  }(ObservableBase));

  var ElementAtObserver = (function (__super__) {
    inherits(ElementAtObserver, __super__);

    function ElementAtObserver(o, i, d) {
      this._o = o;
      this._i = i;
      this._d = d;
      __super__.call(this);
    }

    ElementAtObserver.prototype.next = function (x) {
      if (this._i-- === 0) {
        this._o.onNext(x);
        this._o.onCompleted();
      }
    };
    ElementAtObserver.prototype.error = function (e) { this._o.onError(e); };
    ElementAtObserver.prototype.completed = function () {
      if (this._d === undefined) {
        this._o.onError(new ArgumentOutOfRangeError());
      } else {
        this._o.onNext(this._d);
        this._o.onCompleted();
      }
    };

    return ElementAtObserver;
  }(AbstractObserver));

  /**
   * Returns the element at a specified index in a sequence or default value if not found.
   * @param {Number} index The zero-based index of the element to retrieve.
   * @param {Any} [defaultValue] The default value to use if elementAt does not find a value.
   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
   */
  observableProto.elementAt =  function (index, defaultValue) {
    if (index < 0) { throw new ArgumentOutOfRangeError(); }
    return new ElementAtObservable(this, index, defaultValue);
  };

  var SingleObserver = (function(__super__) {
    inherits(SingleObserver, __super__);
    function SingleObserver(o, obj, s) {
      this._o = o;
      this._obj = obj;
      this._s = s;
      this._i = 0;
      this._hv = false;
      this._v = null;
      __super__.call(this);
    }

    SingleObserver.prototype.next = function (x) {
      var shouldYield = false;
      if (this._obj.predicate) {
        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
        if (res === errorObj) { return this._o.onError(res.e); }
        Boolean(res) && (shouldYield = true);
      } else if (!this._obj.predicate) {
        shouldYield = true;
      }
      if (shouldYield) {
        if (this._hv) {
          return this._o.onError(new Error('Sequence contains more than one matching element'));
        }
        this._hv = true;
        this._v = x;
      }
    };
    SingleObserver.prototype.error = function (e) { this._o.onError(e); };
    SingleObserver.prototype.completed = function () {
      if (this._hv) {
        this._o.onNext(this._v);
        this._o.onCompleted();
      }
      else if (this._obj.defaultValue === undefined) {
        this._o.onError(new EmptyError());
      } else {
        this._o.onNext(this._obj.defaultValue);
        this._o.onCompleted();
      }
    };

    return SingleObserver;
  }(AbstractObserver));


    /**
     * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
     * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
     */
    observableProto.single = function (predicate, thisArg) {
      var obj = {}, source = this;
      if (typeof arguments[0] === 'object') {
        obj = arguments[0];
      } else {
        obj = {
          predicate: arguments[0],
          thisArg: arguments[1],
          defaultValue: arguments[2]
        };
      }
      if (isFunction (obj.predicate)) {
        var fn = obj.predicate;
        obj.predicate = bindCallback(fn, obj.thisArg, 3);
      }
      return new AnonymousObservable(function (o) {
        return source.subscribe(new SingleObserver(o, obj, source));
      }, source);
    };

  var FirstObservable = (function (__super__) {
    inherits(FirstObservable, __super__);
    function FirstObservable(source, obj) {
      this.source = source;
      this._obj = obj;
      __super__.call(this);
    }

    FirstObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new FirstObserver(o, this._obj, this.source));
    };

    return FirstObservable;
  }(ObservableBase));

  var FirstObserver = (function(__super__) {
    inherits(FirstObserver, __super__);
    function FirstObserver(o, obj, s) {
      this._o = o;
      this._obj = obj;
      this._s = s;
      this._i = 0;
      __super__.call(this);
    }

    FirstObserver.prototype.next = function (x) {
      if (this._obj.predicate) {
        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
        if (res === errorObj) { return this._o.onError(res.e); }
        if (Boolean(res)) {
          this._o.onNext(x);
          this._o.onCompleted();
        }
      } else if (!this._obj.predicate) {
        this._o.onNext(x);
        this._o.onCompleted();
      }
    };
    FirstObserver.prototype.error = function (e) { this._o.onError(e); };
    FirstObserver.prototype.completed = function () {
      if (this._obj.defaultValue === undefined) {
        this._o.onError(new EmptyError());
      } else {
        this._o.onNext(this._obj.defaultValue);
        this._o.onCompleted();
      }
    };

    return FirstObserver;
  }(AbstractObserver));

  /**
   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
   */
  observableProto.first = function () {
    var obj = {}, source = this;
    if (typeof arguments[0] === 'object') {
      obj = arguments[0];
    } else {
      obj = {
        predicate: arguments[0],
        thisArg: arguments[1],
        defaultValue: arguments[2]
      };
    }
    if (isFunction (obj.predicate)) {
      var fn = obj.predicate;
      obj.predicate = bindCallback(fn, obj.thisArg, 3);
    }
    return new FirstObservable(this, obj);
  };

  var LastObservable = (function (__super__) {
    inherits(LastObservable, __super__);
    function LastObservable(source, obj) {
      this.source = source;
      this._obj = obj;
      __super__.call(this);
    }

    LastObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new LastObserver(o, this._obj, this.source));
    };

    return LastObservable;
  }(ObservableBase));

  var LastObserver = (function(__super__) {
    inherits(LastObserver, __super__);
    function LastObserver(o, obj, s) {
      this._o = o;
      this._obj = obj;
      this._s = s;
      this._i = 0;
      this._hv = false;
      this._v = null;
      __super__.call(this);
    }

    LastObserver.prototype.next = function (x) {
      var shouldYield = false;
      if (this._obj.predicate) {
        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
        if (res === errorObj) { return this._o.onError(res.e); }
        Boolean(res) && (shouldYield = true);
      } else if (!this._obj.predicate) {
        shouldYield = true;
      }
      if (shouldYield) {
        this._hv = true;
        this._v = x;
      }
    };
    LastObserver.prototype.error = function (e) { this._o.onError(e); };
    LastObserver.prototype.completed = function () {
      if (this._hv) {
        this._o.onNext(this._v);
        this._o.onCompleted();
      }
      else if (this._obj.defaultValue === undefined) {
        this._o.onError(new EmptyError());
      } else {
        this._o.onNext(this._obj.defaultValue);
        this._o.onCompleted();
      }
    };

    return LastObserver;
  }(AbstractObserver));

  /**
   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
   */
  observableProto.last = function () {
    var obj = {}, source = this;
    if (typeof arguments[0] === 'object') {
      obj = arguments[0];
    } else {
      obj = {
        predicate: arguments[0],
        thisArg: arguments[1],
        defaultValue: arguments[2]
      };
    }
    if (isFunction (obj.predicate)) {
      var fn = obj.predicate;
      obj.predicate = bindCallback(fn, obj.thisArg, 3);
    }
    return new LastObservable(this, obj);
  };

  var FindValueObserver = (function(__super__) {
    inherits(FindValueObserver, __super__);
    function FindValueObserver(observer, source, callback, yieldIndex) {
      this._o = observer;
      this._s = source;
      this._cb = callback;
      this._y = yieldIndex;
      this._i = 0;
      __super__.call(this);
    }

    FindValueObserver.prototype.next = function (x) {
      var shouldRun = tryCatch(this._cb)(x, this._i, this._s);
      if (shouldRun === errorObj) { return this._o.onError(shouldRun.e); }
      if (shouldRun) {
        this._o.onNext(this._y ? this._i : x);
        this._o.onCompleted();
      } else {
        this._i++;
      }
    };

    FindValueObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    FindValueObserver.prototype.completed = function () {
      this._y && this._o.onNext(-1);
      this._o.onCompleted();
    };

    return FindValueObserver;
  }(AbstractObserver));

  function findValue (source, predicate, thisArg, yieldIndex) {
    var callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) {
      return source.subscribe(new FindValueObserver(o, source, callback, yieldIndex));
    }, source);
  }

  /**
   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
   */
  observableProto.find = function (predicate, thisArg) {
    return findValue(this, predicate, thisArg, false);
  };

  /**
   * Searches for an element that matches the conditions defined by the specified predicate, and returns
   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
  */
  observableProto.findIndex = function (predicate, thisArg) {
    return findValue(this, predicate, thisArg, true);
  };

  var ToSetObservable = (function (__super__) {
    inherits(ToSetObservable, __super__);
    function ToSetObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    ToSetObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new ToSetObserver(o));
    };

    return ToSetObservable;
  }(ObservableBase));

  var ToSetObserver = (function (__super__) {
    inherits(ToSetObserver, __super__);
    function ToSetObserver(o) {
      this._o = o;
      this._s = new root.Set();
      __super__.call(this);
    }

    ToSetObserver.prototype.next = function (x) {
      this._s.add(x);
    };

    ToSetObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ToSetObserver.prototype.completed = function () {
      this._o.onNext(this._s);
      this._o.onCompleted();
    };

    return ToSetObserver;
  }(AbstractObserver));

  /**
   * Converts the observable sequence to a Set if it exists.
   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
   */
  observableProto.toSet = function () {
    if (typeof root.Set === 'undefined') { throw new TypeError(); }
    return new ToSetObservable(this);
  };

  var ToMapObservable = (function (__super__) {
    inherits(ToMapObservable, __super__);
    function ToMapObservable(source, k, e) {
      this.source = source;
      this._k = k;
      this._e = e;
      __super__.call(this);
    }

    ToMapObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new ToMapObserver(o, this._k, this._e));
    };

    return ToMapObservable;
  }(ObservableBase));

  var ToMapObserver = (function (__super__) {
    inherits(ToMapObserver, __super__);
    function ToMapObserver(o, k, e) {
      this._o = o;
      this._k = k;
      this._e = e;
      this._m = new root.Map();
      __super__.call(this);
    }

    ToMapObserver.prototype.next = function (x) {
      var key = tryCatch(this._k)(x);
      if (key === errorObj) { return this._o.onError(key.e); }
      var elem = x;
      if (this._e) {
        elem = tryCatch(this._e)(x);
        if (elem === errorObj) { return this._o.onError(elem.e); }
      }

      this._m.set(key, elem);
    };

    ToMapObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ToMapObserver.prototype.completed = function () {
      this._o.onNext(this._m);
      this._o.onCompleted();
    };

    return ToMapObserver;
  }(AbstractObserver));

  /**
  * Converts the observable sequence to a Map if it exists.
  * @param {Function} keySelector A function which produces the key for the Map.
  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
  */
  observableProto.toMap = function (keySelector, elementSelector) {
    if (typeof root.Map === 'undefined') { throw new TypeError(); }
    return new ToMapObservable(this, keySelector, elementSelector);
  };

  var SliceObservable = (function (__super__) {
    inherits(SliceObservable, __super__);
    function SliceObservable(source, b, e) {
      this.source = source;
      this._b = b;
      this._e = e;
      __super__.call(this);
    }

    SliceObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SliceObserver(o, this._b, this._e));
    };

    return SliceObservable;
  }(ObservableBase));

  var SliceObserver = (function (__super__) {
    inherits(SliceObserver, __super__);

    function SliceObserver(o, b, e) {
      this._o = o;
      this._b = b;
      this._e = e;
      this._i = 0;
      __super__.call(this);
    }

    SliceObserver.prototype.next = function (x) {
      if (this._i >= this._b) {
        if (this._e === this._i) {
          this._o.onCompleted();
        } else {
          this._o.onNext(x);
        }
      }
      this._i++;
    };
    SliceObserver.prototype.error = function (e) { this._o.onError(e); };
    SliceObserver.prototype.completed = function () { this._o.onCompleted(); };

    return SliceObserver;
  }(AbstractObserver));

  /*
  * The slice() method returns a shallow copy of a portion of an Observable into a new Observable object.
  * Unlike the array version, this does not support negative numbers for being or end.
  * @param {Number} [begin] Zero-based index at which to begin extraction. If omitted, this will default to zero.
  * @param {Number} [end] Zero-based index at which to end extraction. slice extracts up to but not including end.
  * If omitted, this will emit the rest of the Observable object.
  * @returns {Observable} A shallow copy of a portion of an Observable into a new Observable object.
  */
  observableProto.slice = function (begin, end) {
    var start = begin || 0;
    if (start < 0) { throw new Rx.ArgumentOutOfRangeError(); }
    if (typeof end === 'number' && end < start) {
      throw new Rx.ArgumentOutOfRangeError();
    }
    return new SliceObservable(this, start, end);
  };

  var LastIndexOfObservable = (function (__super__) {
    inherits(LastIndexOfObservable, __super__);
    function LastIndexOfObservable(source, e, n) {
      this.source = source;
      this._e = e;
      this._n = n;
      __super__.call(this);
    }

    LastIndexOfObservable.prototype.subscribeCore = function (o) {
      if (this._n < 0) {
        o.onNext(-1);
        o.onCompleted();
        return disposableEmpty;
      }

      return this.source.subscribe(new LastIndexOfObserver(o, this._e, this._n));
    };

    return LastIndexOfObservable;
  }(ObservableBase));

  var LastIndexOfObserver = (function (__super__) {
    inherits(LastIndexOfObserver, __super__);
    function LastIndexOfObserver(o, e, n) {
      this._o = o;
      this._e = e;
      this._n = n;
      this._v = 0;
      this._hv = false;
      this._i = 0;
      __super__.call(this);
    }

    LastIndexOfObserver.prototype.next = function (x) {
      if (this._i >= this._n && x === this._e) {
        this._hv = true;
        this._v = this._i;
      }
      this._i++;
    };
    LastIndexOfObserver.prototype.error = function (e) { this._o.onError(e); };
    LastIndexOfObserver.prototype.completed = function () {
      if (this._hv) {
        this._o.onNext(this._v);
      } else {
        this._o.onNext(-1);
      }
      this._o.onCompleted();
    };

    return LastIndexOfObserver;
  }(AbstractObserver));

  /**
   * Returns the last index at which a given element can be found in the observable sequence, or -1 if it is not present.
   * @param {Any} searchElement Element to locate in the array.
   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
   * @returns {Observable} And observable sequence containing the last index at which a given element can be found in the observable sequence, or -1 if it is not present.
   */
  observableProto.lastIndexOf = function(searchElement, fromIndex) {
    var n = +fromIndex || 0;
    Math.abs(n) === Infinity && (n = 0);
    return new LastIndexOfObservable(this, searchElement, n);
  };

  Observable.wrap = function (fn) {
    function createObservable() {
      return Observable.spawn.call(this, fn.apply(this, arguments));
    }

    createObservable.__generatorFunction__ = fn;
    return createObservable;
  };

  var spawn = Observable.spawn = function () {
    var gen = arguments[0], self = this, args = [];
    for (var i = 1, len = arguments.length; i < len; i++) { args.push(arguments[i]); }

    return new AnonymousObservable(function (o) {
      var g = new CompositeDisposable();

      if (isFunction(gen)) { gen = gen.apply(self, args); }
      if (!gen || !isFunction(gen.next)) {
        o.onNext(gen);
        return o.onCompleted();
      }

      function processGenerator(res) {
        var ret = tryCatch(gen.next).call(gen, res);
        if (ret === errorObj) { return o.onError(ret.e); }
        next(ret);
      }

      processGenerator();

      function onError(err) {
        var ret = tryCatch(gen.next).call(gen, err);
        if (ret === errorObj) { return o.onError(ret.e); }
        next(ret);
      }

      function next(ret) {
        if (ret.done) {
          o.onNext(ret.value);
          o.onCompleted();
          return;
        }
        var obs = toObservable.call(self, ret.value);
        var value = null;
        var hasValue = false;
        if (Observable.isObservable(obs)) {
          g.add(obs.subscribe(function(val) {
            hasValue = true;
            value = val;
          }, onError, function() {
            hasValue && processGenerator(value);
          }));
        } else {
          onError(new TypeError('type not supported'));
        }
      }

      return g;
    });
  };

  function toObservable(obj) {
    if (!obj) { return obj; }
    if (Observable.isObservable(obj)) { return obj; }
    if (isPromise(obj)) { return Observable.fromPromise(obj); }
    if (isGeneratorFunction(obj) || isGenerator(obj)) { return spawn.call(this, obj); }
    if (isFunction(obj)) { return thunkToObservable.call(this, obj); }
    if (isArrayLike(obj) || isIterable(obj)) { return arrayToObservable.call(this, obj); }
    if (isObject(obj)) {return objectToObservable.call(this, obj);}
    return obj;
  }

  function arrayToObservable (obj) {
    return Observable.from(obj).concatMap(function(o) {
      if(Observable.isObservable(o) || isObject(o)) {
        return toObservable.call(null, o);
      } else {
        return Rx.Observable.just(o);
      }
    }).toArray();
  }

  function objectToObservable (obj) {
    var results = new obj.constructor(), keys = Object.keys(obj), observables = [];
    for (var i = 0, len = keys.length; i < len; i++) {
      var key = keys[i];
      var observable = toObservable.call(this, obj[key]);

      if(observable && Observable.isObservable(observable)) {
        defer(observable, key);
      } else {
        results[key] = obj[key];
      }
    }

    return Observable.forkJoin.apply(Observable, observables).map(function() {
      return results;
    });


    function defer (observable, key) {
      results[key] = undefined;
      observables.push(observable.map(function (next) {
        results[key] = next;
      }));
    }
  }

  function thunkToObservable(fn) {
    var self = this;
    return new AnonymousObservable(function (o) {
      fn.call(self, function () {
        var err = arguments[0], res = arguments[1];
        if (err) { return o.onError(err); }
        if (arguments.length > 2) {
          var args = [];
          for (var i = 1, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
          res = args;
        }
        o.onNext(res);
        o.onCompleted();
      });
    });
  }

  function isGenerator(obj) {
    return isFunction (obj.next) && isFunction (obj['throw']);
  }

  function isGeneratorFunction(obj) {
    var ctor = obj.constructor;
    if (!ctor) { return false; }
    if (ctor.name === 'GeneratorFunction' || ctor.displayName === 'GeneratorFunction') { return true; }
    return isGenerator(ctor.prototype);
  }

  function isObject(val) {
    return Object == val.constructor;
  }

  /**
   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
   *
   * @example
   * var res = Rx.Observable.start(function () { console.log('hello'); });
   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
   *
   * @param {Function} func Function to run asynchronously.
   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   *
   * Remarks
   * * The function is called immediately, not during the subscription of the resulting sequence.
   * * Multiple subscriptions to the resulting sequence can observe the function's result.
   */
  Observable.start = function (func, context, scheduler) {
    return observableToAsync(func, context, scheduler)();
  };

  /**
   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
   * @param {Function} function Function to convert to an asynchronous function.
   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @returns {Function} Asynchronous function.
   */
  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return function () {
      var args = arguments,
        subject = new AsyncSubject();

      scheduler.schedule(null, function () {
        var result;
        try {
          result = func.apply(context, args);
        } catch (e) {
          subject.onError(e);
          return;
        }
        subject.onNext(result);
        subject.onCompleted();
      });
      return subject.asObservable();
    };
  };

function createCbObservable(fn, ctx, selector, args) {
  var o = new AsyncSubject();

  args.push(createCbHandler(o, ctx, selector));
  fn.apply(ctx, args);

  return o.asObservable();
}

function createCbHandler(o, ctx, selector) {
  return function handler () {
    var len = arguments.length, results = new Array(len);
    for(var i = 0; i < len; i++) { results[i] = arguments[i]; }

    if (isFunction(selector)) {
      results = tryCatch(selector).apply(ctx, results);
      if (results === errorObj) { return o.onError(results.e); }
      o.onNext(results);
    } else {
      if (results.length <= 1) {
        o.onNext(results[0]);
      } else {
        o.onNext(results);
      }
    }

    o.onCompleted();
  };
}

/**
 * Converts a callback function to an observable sequence.
 *
 * @param {Function} fn Function with a callback as the last parameter to convert to an Observable sequence.
 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
 * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
 * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
 */
Observable.fromCallback = function (fn, ctx, selector) {
  return function () {
    typeof ctx === 'undefined' && (ctx = this); 

    var len = arguments.length, args = new Array(len)
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return createCbObservable(fn, ctx, selector, args);
  };
};

function createNodeObservable(fn, ctx, selector, args) {
  var o = new AsyncSubject();

  args.push(createNodeHandler(o, ctx, selector));
  fn.apply(ctx, args);

  return o.asObservable();
}

function createNodeHandler(o, ctx, selector) {
  return function handler () {
    var err = arguments[0];
    if (err) { return o.onError(err); }

    var len = arguments.length, results = [];
    for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }

    if (isFunction(selector)) {
      var results = tryCatch(selector).apply(ctx, results);
      if (results === errorObj) { return o.onError(results.e); }
      o.onNext(results);
    } else {
      if (results.length <= 1) {
        o.onNext(results[0]);
      } else {
        o.onNext(results);
      }
    }

    o.onCompleted();
  };
}

/**
 * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
 * @param {Function} fn The function to call
 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
 * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
 * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
 */
Observable.fromNodeCallback = function (fn, ctx, selector) {
  return function () {
    typeof ctx === 'undefined' && (ctx = this); 
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return createNodeObservable(fn, ctx, selector, args);
  };
};

  function isNodeList(el) {
    if (root.StaticNodeList) {
      // IE8 Specific
      // instanceof is slower than Object#toString, but Object#toString will not work as intended in IE8
      return el instanceof root.StaticNodeList || el instanceof root.NodeList;
    } else {
      return Object.prototype.toString.call(el) === '[object NodeList]';
    }
  }

  function ListenDisposable(e, n, fn) {
    this._e = e;
    this._n = n;
    this._fn = fn;
    this._e.addEventListener(this._n, this._fn, false);
    this.isDisposed = false;
  }
  ListenDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this._e.removeEventListener(this._n, this._fn, false);
      this.isDisposed = true;
    }
  };

  function createEventListener (el, eventName, handler) {
    var disposables = new CompositeDisposable();

    // Asume NodeList or HTMLCollection
    var elemToString = Object.prototype.toString.call(el);
    if (isNodeList(el) || elemToString === '[object HTMLCollection]') {
      for (var i = 0, len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(new ListenDisposable(el, eventName, handler));
    }

    return disposables;
  }

  /**
   * Configuration option to determine whether to use native events only
   */
  Rx.config.useNativeEvents = false;

  var EventObservable = (function(__super__) {
    inherits(EventObservable, __super__);
    function EventObservable(el, name, fn) {
      this._el = el;
      this._n = name;
      this._fn = fn;
      __super__.call(this);
    }

    function createHandler(o, fn) {
      return function handler () {
        var results = arguments[0];
        if (isFunction(fn)) {
          results = tryCatch(fn).apply(null, arguments);
          if (results === errorObj) { return o.onError(results.e); }
        }
        o.onNext(results);
      };
    }

    EventObservable.prototype.subscribeCore = function (o) {
      return createEventListener(
        this._el,
        this._n,
        createHandler(o, this._fn));
    };

    return EventObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
   * @param {Object} element The DOMElement or NodeList to attach a listener.
   * @param {String} eventName The event name to attach the observable sequence.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
   */
  Observable.fromEvent = function (element, eventName, selector) {
    // Node.js specific
    if (element.addListener) {
      return fromEventPattern(
        function (h) { element.addListener(eventName, h); },
        function (h) { element.removeListener(eventName, h); },
        selector);
    }

    // Use only if non-native events are allowed
    if (!Rx.config.useNativeEvents) {
      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
      if (typeof element.on === 'function' && typeof element.off === 'function') {
        return fromEventPattern(
          function (h) { element.on(eventName, h); },
          function (h) { element.off(eventName, h); },
          selector);
      }
    }

    return new EventObservable(element, eventName, selector).publish().refCount();
  };

  var EventPatternObservable = (function(__super__) {
    inherits(EventPatternObservable, __super__);
    function EventPatternObservable(add, del, fn) {
      this._add = add;
      this._del = del;
      this._fn = fn;
      __super__.call(this);
    }

    function createHandler(o, fn) {
      return function handler () {
        var results = arguments[0];
        if (isFunction(fn)) {
          results = tryCatch(fn).apply(null, arguments);
          if (results === errorObj) { return o.onError(results.e); }
        }
        o.onNext(results);
      };
    }

    EventPatternObservable.prototype.subscribeCore = function (o) {
      var fn = createHandler(o, this._fn);
      var returnValue = this._add(fn);
      return new EventPatternDisposable(this._del, fn, returnValue);
    };

    function EventPatternDisposable(del, fn, ret) {
      this._del = del;
      this._fn = fn;
      this._ret = ret;
      this.isDisposed = false;
    }

    EventPatternDisposable.prototype.dispose = function () {
      if(!this.isDisposed) {
        isFunction(this._del) && this._del(this._fn, this._ret);
        this.isDisposed = true;
      }
    };

    return EventPatternObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
   * @param {Function} addHandler The function to add a handler to the emitter.
   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence which wraps an event from an event emitter
   */
  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
    return new EventPatternObservable(addHandler, removeHandler, selector).publish().refCount();
  };

  /**
   * Invokes the asynchronous function, surfacing the result through an observable sequence.
   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   */
  Observable.startAsync = function (functionAsync) {
    var promise = tryCatch(functionAsync)();
    if (promise === errorObj) { return observableThrow(promise.e); }
    return observableFromPromise(promise);
  };

  var PausableObservable = (function (__super__) {
    inherits(PausableObservable, __super__);
    function PausableObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();
      this.paused = true;

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this);
    }

    PausableObservable.prototype._subscribe = function (o) {
      var conn = this.source.publish(),
        subscription = conn.subscribe(o),
        connection = disposableEmpty;

      var pausable = this.pauser.startWith(!this.paused).distinctUntilChanged().subscribe(function (b) {
        if (b) {
          connection = conn.connect();
        } else {
          connection.dispose();
          connection = disposableEmpty;
        }
      });

      return new NAryDisposable([subscription, connection, pausable]);
    };

    PausableObservable.prototype.pause = function () {
      this.paused = true;
      this.controller.onNext(false);
    };

    PausableObservable.prototype.resume = function () {
      this.paused = false;
      this.controller.onNext(true);
    };

    return PausableObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausable(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausable = function (pauser) {
    return new PausableObservable(this, pauser);
  };

  function combineLatestSource(source, subject, resultSelector) {
    return new AnonymousObservable(function (o) {
      var hasValue = [false, false],
        hasValueAll = false,
        isDone = false,
        values = new Array(2),
        err;

      function next(x, i) {
        values[i] = x;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          if (err) { return o.onError(err); }
          var res = tryCatch(resultSelector).apply(null, values);
          if (res === errorObj) { return o.onError(res.e); }
          o.onNext(res);
        }
        isDone && values[1] && o.onCompleted();
      }

      return new BinaryDisposable(
        source.subscribe(
          function (x) {
            next(x, 0);
          },
          function (e) {
            if (values[1]) {
              o.onError(e);
            } else {
              err = e;
            }
          },
          function () {
            isDone = true;
            values[1] && o.onCompleted();
          }),
        subject.subscribe(
          function (x) {
            next(x, 1);
          },
          function (e) { o.onError(e); },
          function () {
            isDone = true;
            next(true, 1);
          })
        );
    }, source);
  }

  var PausableBufferedObservable = (function (__super__) {
    inherits(PausableBufferedObservable, __super__);
    function PausableBufferedObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();
      this.paused = true;

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this);
    }

    PausableBufferedObservable.prototype._subscribe = function (o) {
      var q = [], previousShouldFire;

      function drainQueue() { while (q.length > 0) { o.onNext(q.shift()); } }

      var subscription =
        combineLatestSource(
          this.source,
          this.pauser.startWith(!this.paused).distinctUntilChanged(),
          function (data, shouldFire) {
            return { data: data, shouldFire: shouldFire };
          })
          .subscribe(
            function (results) {
              if (previousShouldFire !== undefined && results.shouldFire !== previousShouldFire) {
                previousShouldFire = results.shouldFire;
                // change in shouldFire
                if (results.shouldFire) { drainQueue(); }
              } else {
                previousShouldFire = results.shouldFire;
                // new data
                if (results.shouldFire) {
                  o.onNext(results.data);
                } else {
                  q.push(results.data);
                }
              }
            },
            function (err) {
              drainQueue();
              o.onError(err);
            },
            function () {
              drainQueue();
              o.onCompleted();
            }
          );
      return subscription;      
    };

    PausableBufferedObservable.prototype.pause = function () {
      this.paused = true;
      this.controller.onNext(false);
    };

    PausableBufferedObservable.prototype.resume = function () {
      this.paused = false;
      this.controller.onNext(true);
    };

    return PausableBufferedObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
   * and yields the values that were buffered while paused.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausableBuffered = function (pauser) {
    return new PausableBufferedObservable(this, pauser);
  };

  var ControlledObservable = (function (__super__) {
    inherits(ControlledObservable, __super__);
    function ControlledObservable (source, enableQueue, scheduler) {
      __super__.call(this);
      this.subject = new ControlledSubject(enableQueue, scheduler);
      this.source = source.multicast(this.subject).refCount();
    }

    ControlledObservable.prototype._subscribe = function (o) {
      return this.source.subscribe(o);
    };

    ControlledObservable.prototype.request = function (numberOfItems) {
      return this.subject.request(numberOfItems == null ? -1 : numberOfItems);
    };

    return ControlledObservable;

  }(Observable));

  var ControlledSubject = (function (__super__) {
    inherits(ControlledSubject, __super__);
    function ControlledSubject(enableQueue, scheduler) {
      enableQueue == null && (enableQueue = true);

      __super__.call(this);
      this.subject = new Subject();
      this.enableQueue = enableQueue;
      this.queue = enableQueue ? [] : null;
      this.requestedCount = 0;
      this.requestedDisposable = null;
      this.error = null;
      this.hasFailed = false;
      this.hasCompleted = false;
      this.scheduler = scheduler || currentThreadScheduler;
    }

    addProperties(ControlledSubject.prototype, Observer, {
      _subscribe: function (o) {
        return this.subject.subscribe(o);
      },
      onCompleted: function () {
        this.hasCompleted = true;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onCompleted();
          this.disposeCurrentRequest();
        } else {
          this.queue.push(Notification.createOnCompleted());
        }
      },
      onError: function (error) {
        this.hasFailed = true;
        this.error = error;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onError(error);
          this.disposeCurrentRequest();
        } else {
          this.queue.push(Notification.createOnError(error));
        }
      },
      onNext: function (value) {
        if (this.requestedCount <= 0) {
          this.enableQueue && this.queue.push(Notification.createOnNext(value));
        } else {
          (this.requestedCount-- === 0) && this.disposeCurrentRequest();
          this.subject.onNext(value);
        }
      },
      _processRequest: function (numberOfItems) {
        if (this.enableQueue) {
          while (this.queue.length > 0 && (numberOfItems > 0 || this.queue[0].kind !== 'N')) {
            var first = this.queue.shift();
            first.accept(this.subject);
            if (first.kind === 'N') {
              numberOfItems--;
            } else {
              this.disposeCurrentRequest();
              this.queue = [];
            }
          }
        }

        return numberOfItems;
      },
      request: function (number) {
        this.disposeCurrentRequest();
        var self = this;

        this.requestedDisposable = this.scheduler.schedule(number,
        function(s, i) {
          var remaining = self._processRequest(i);
          var stopped = self.hasCompleted || self.hasFailed;
          if (!stopped && remaining > 0) {
            self.requestedCount = remaining;

            return disposableCreate(function () {
              self.requestedCount = 0;
            });
              // Scheduled item is still in progress. Return a new
              // disposable to allow the request to be interrupted
              // via dispose.
          }
        });

        return this.requestedDisposable;
      },
      disposeCurrentRequest: function () {
        if (this.requestedDisposable) {
          this.requestedDisposable.dispose();
          this.requestedDisposable = null;
        }
      }
    });

    return ControlledSubject;
  }(Observable));

  /**
   * Attaches a controller to the observable sequence with the ability to queue.
   * @example
   * var source = Rx.Observable.interval(100).controlled();
   * source.request(3); // Reads 3 values
   * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request
   * @param {Scheduler} scheduler determines how the requests will be scheduled
   * @returns {Observable} The observable sequence which only propagates values on request.
   */
  observableProto.controlled = function (enableQueue, scheduler) {

    if (enableQueue && isScheduler(enableQueue)) {
      scheduler = enableQueue;
      enableQueue = true;
    }

    if (enableQueue == null) {  enableQueue = true; }
    return new ControlledObservable(this, enableQueue, scheduler);
  };

  var StopAndWaitObservable = (function (__super__) {
    inherits(StopAndWaitObservable, __super__);
    function StopAndWaitObservable (source) {
      __super__.call(this);
      this.source = source;
    }

    function scheduleMethod(s, self) {
      return self.source.request(1);
    }

    StopAndWaitObservable.prototype._subscribe = function (o) {
      this.subscription = this.source.subscribe(new StopAndWaitObserver(o, this, this.subscription));
      return new BinaryDisposable(
        this.subscription,
        defaultScheduler.schedule(this, scheduleMethod)
      );
    };

    var StopAndWaitObserver = (function (__sub__) {
      inherits(StopAndWaitObserver, __sub__);
      function StopAndWaitObserver (observer, observable, cancel) {
        __sub__.call(this);
        this.observer = observer;
        this.observable = observable;
        this.cancel = cancel;
        this.scheduleDisposable = null;
      }

      StopAndWaitObserver.prototype.completed = function () {
        this.observer.onCompleted();
        this.dispose();
      };

      StopAndWaitObserver.prototype.error = function (error) {
        this.observer.onError(error);
        this.dispose();
      };

      function innerScheduleMethod(s, self) {
        return self.observable.source.request(1);
      }

      StopAndWaitObserver.prototype.next = function (value) {
        this.observer.onNext(value);
        this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod);
      };

      StopAndWaitObserver.dispose = function () {
        this.observer = null;
        if (this.cancel) {
          this.cancel.dispose();
          this.cancel = null;
        }
        if (this.scheduleDisposable) {
          this.scheduleDisposable.dispose();
          this.scheduleDisposable = null;
        }
        __sub__.prototype.dispose.call(this);
      };

      return StopAndWaitObserver;
    }(AbstractObserver));

    return StopAndWaitObservable;
  }(Observable));


  /**
   * Attaches a stop and wait observable to the current observable.
   * @returns {Observable} A stop and wait observable.
   */
  ControlledObservable.prototype.stopAndWait = function () {
    return new StopAndWaitObservable(this);
  };

  var WindowedObservable = (function (__super__) {
    inherits(WindowedObservable, __super__);
    function WindowedObservable(source, windowSize) {
      __super__.call(this);
      this.source = source;
      this.windowSize = windowSize;
    }

    function scheduleMethod(s, self) {
      return self.source.request(self.windowSize);
    }

    WindowedObservable.prototype._subscribe = function (o) {
      this.subscription = this.source.subscribe(new WindowedObserver(o, this, this.subscription));
      return new BinaryDisposable(
        this.subscription,
        defaultScheduler.schedule(this, scheduleMethod)
      );
    };

    var WindowedObserver = (function (__sub__) {
      inherits(WindowedObserver, __sub__);
      function WindowedObserver(observer, observable, cancel) {
        this.observer = observer;
        this.observable = observable;
        this.cancel = cancel;
        this.received = 0;
        this.scheduleDisposable = null;
        __sub__.call(this);
      }

      WindowedObserver.prototype.completed = function () {
        this.observer.onCompleted();
        this.dispose();
      };

      WindowedObserver.prototype.error = function (error) {
        this.observer.onError(error);
        this.dispose();
      };

      function innerScheduleMethod(s, self) {
        return self.observable.source.request(self.observable.windowSize);
      }

      WindowedObserver.prototype.next = function (value) {
        this.observer.onNext(value);
        this.received = ++this.received % this.observable.windowSize;
        this.received === 0 && (this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod));
      };

      WindowedObserver.prototype.dispose = function () {
        this.observer = null;
        if (this.cancel) {
          this.cancel.dispose();
          this.cancel = null;
        }
        if (this.scheduleDisposable) {
          this.scheduleDisposable.dispose();
          this.scheduleDisposable = null;
        }
        __sub__.prototype.dispose.call(this);
      };

      return WindowedObserver;
    }(AbstractObserver));

    return WindowedObservable;
  }(Observable));

  /**
   * Creates a sliding windowed observable based upon the window size.
   * @param {Number} windowSize The number of items in the window
   * @returns {Observable} A windowed observable based upon the window size.
   */
  ControlledObservable.prototype.windowed = function (windowSize) {
    return new WindowedObservable(this, windowSize);
  };

  /**
   * Pipes the existing Observable sequence into a Node.js Stream.
   * @param {Stream} dest The destination Node.js stream.
   * @returns {Stream} The destination stream.
   */
  observableProto.pipe = function (dest) {
    var source = this.pausableBuffered();

    function onDrain() {
      source.resume();
    }

    dest.addListener('drain', onDrain);

    source.subscribe(
      function (x) {
        !dest.write(x) && source.pause();
      },
      function (err) {
        dest.emit('error', err);
      },
      function () {
        // Hack check because STDIO is not closable
        !dest._isStdio && dest.end();
        dest.removeListener('drain', onDrain);
      });

    source.resume();

    return dest;
  };

  var MulticastObservable = (function (__super__) {
    inherits(MulticastObservable, __super__);
    function MulticastObservable(source, fn1, fn2) {
      this.source = source;
      this._fn1 = fn1;
      this._fn2 = fn2;
      __super__.call(this);
    }

    MulticastObservable.prototype.subscribeCore = function (o) {
      var connectable = this.source.multicast(this._fn1());
      return new BinaryDisposable(this._fn2(connectable).subscribe(o), connectable.connect());
    };

    return MulticastObservable;
  }(ObservableBase));

  /**
   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
   *
   * @example
   * 1 - res = source.multicast(observable);
   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
   *
   * @param {Function|Subject} subjectOrSubjectSelector
   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
   * Or:
   * Subject to push source elements into.
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
    return isFunction(subjectOrSubjectSelector) ?
      new MulticastObservable(this, subjectOrSubjectSelector, selector) :
      new ConnectableObservable(this, subjectOrSubjectSelector);
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of Multicast using a regular Subject.
   *
   * @example
   * var resres = source.publish();
   * var res = source.publish(function (x) { return x; });
   *
   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publish = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new Subject(); }, selector) :
      this.multicast(new Subject());
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.share = function () {
    return this.publish().refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
   * This operator is a specialization of Multicast using a AsyncSubject.
   *
   * @example
   * var res = source.publishLast();
   * var res = source.publishLast(function (x) { return x; });
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishLast = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new AsyncSubject(); }, selector) :
      this.multicast(new AsyncSubject());
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
   * This operator is a specialization of Multicast using a BehaviorSubject.
   *
   * @example
   * var res = source.publishValue(42);
   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
    return arguments.length === 2 ?
      this.multicast(function () {
        return new BehaviorSubject(initialValue);
      }, initialValueOrSelector) :
      this.multicast(new BehaviorSubject(initialValueOrSelector));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareValue = function (initialValue) {
    return this.publishValue(initialValue).refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of Multicast using a ReplaySubject.
   *
   * @example
   * var res = source.replay(null, 3);
   * var res = source.replay(null, 3, 500);
   * var res = source.replay(null, 3, 500, scheduler);
   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param windowSize [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   *
   * @example
   * var res = source.shareReplay(3);
   * var res = source.shareReplay(3, 500);
   * var res = source.shareReplay(3, 500, scheduler);
   *

   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param window [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
  };

  var InnerSubscription = function (s, o) {
    this._s = s;
    this._o = o;
  };

  InnerSubscription.prototype.dispose = function () {
    if (!this._s.isDisposed && this._o !== null) {
      var idx = this._s.observers.indexOf(this._o);
      this._s.observers.splice(idx, 1);
      this._o = null;
    }
  };

  var RefCountObservable = (function (__super__) {
    inherits(RefCountObservable, __super__);
    function RefCountObservable(source) {
      this.source = source;
      this._count = 0;
      this._connectableSubscription = null;
      __super__.call(this);
    }

    RefCountObservable.prototype.subscribeCore = function (o) {
      var subscription = this.source.subscribe(o);
      ++this._count === 1 && (this._connectableSubscription = this.source.connect());
      return new RefCountDisposable(this, subscription);
    };

    function RefCountDisposable(p, s) {
      this._p = p;
      this._s = s;
      this.isDisposed = false;
    }

    RefCountDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._s.dispose();
        --this._p._count === 0 && this._p._connectableSubscription.dispose();
      }
    };

    return RefCountObservable;
  }(ObservableBase));

  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
    inherits(ConnectableObservable, __super__);
    function ConnectableObservable(source, subject) {
      this.source = source;
      this._connection = null;
      this._source = source.asObservable();
      this._subject = subject;
      __super__.call(this);
    }

    function ConnectDisposable(parent, subscription) {
      this._p = parent;
      this._s = subscription;
    }

    ConnectDisposable.prototype.dispose = function () {
      if (this._s) {
        this._s.dispose();
        this._s = null;
        this._p._connection = null;
      }
    };

    ConnectableObservable.prototype.connect = function () {
      if (!this._connection) {
        if (this._subject.isStopped) {
          return disposableEmpty;
        }
        var subscription = this._source.subscribe(this._subject);
        this._connection = new ConnectDisposable(this, subscription);
      }
      return this._connection;
    };

    ConnectableObservable.prototype._subscribe = function (o) {
      return this._subject.subscribe(o);
    };

    ConnectableObservable.prototype.refCount = function () {
      return new RefCountObservable(this);
    };

    return ConnectableObservable;
  }(Observable));

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence. This observable sequence
   * can be resubscribed to, even if all prior subscriptions have ended. (unlike `.publish().refCount()`)
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source.
   */
  observableProto.singleInstance = function() {
    var source = this, hasObservable = false, observable;

    function getObservable() {
      if (!hasObservable) {
        hasObservable = true;
        observable = source['finally'](function() { hasObservable = false; }).publish().refCount();
      }
      return observable;
    }

    return new AnonymousObservable(function(o) {
      return getObservable().subscribe(o);
    });
  };

  /**
   *  Correlates the elements of two sequences based on overlapping durations.
   *
   *  @param {Observable} right The right observable sequence to join elements for.
   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
   */
  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function (o) {
      var group = new CompositeDisposable();
      var leftDone = false, rightDone = false;
      var leftId = 0, rightId = 0;
      var leftMap = new Map(), rightMap = new Map();
      var handleError = function (e) { o.onError(e); };

      group.add(left.subscribe(
        function (value) {
          var id = leftId++, md = new SingleAssignmentDisposable();

          leftMap.set(id, value);
          group.add(md);

          var duration = tryCatch(leftDurationSelector)(value);
          if (duration === errorObj) { return o.onError(duration.e); }

          md.setDisposable(duration.take(1).subscribe(
            noop,
            handleError,
            function () {
              leftMap['delete'](id) && leftMap.size === 0 && leftDone && o.onCompleted();
              group.remove(md);
            }));

          rightMap.forEach(function (v) {
            var result = tryCatch(resultSelector)(value, v);
            if (result === errorObj) { return o.onError(result.e); }
            o.onNext(result);
          });
        },
        handleError,
        function () {
          leftDone = true;
          (rightDone || leftMap.size === 0) && o.onCompleted();
        })
      );

      group.add(right.subscribe(
        function (value) {
          var id = rightId++, md = new SingleAssignmentDisposable();

          rightMap.set(id, value);
          group.add(md);

          var duration = tryCatch(rightDurationSelector)(value);
          if (duration === errorObj) { return o.onError(duration.e); }

          md.setDisposable(duration.take(1).subscribe(
            noop,
            handleError,
            function () {
              rightMap['delete'](id) && rightMap.size === 0 && rightDone && o.onCompleted();
              group.remove(md);
            }));

          leftMap.forEach(function (v) {
            var result = tryCatch(resultSelector)(v, value);
            if (result === errorObj) { return o.onError(result.e); }
            o.onNext(result);
          });
        },
        handleError,
        function () {
          rightDone = true;
          (leftDone || rightMap.size === 0) && o.onCompleted();
        })
      );
      return group;
    }, left);
  };

  /**
   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
   *
   *  @param {Observable} right The right observable sequence to join elements for.
   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
   */
  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function (o) {
      var group = new CompositeDisposable();
      var r = new RefCountDisposable(group);
      var leftMap = new Map(), rightMap = new Map();
      var leftId = 0, rightId = 0;
      var handleError = function (e) { return function (v) { v.onError(e); }; };

      function handleError(e) { };

      group.add(left.subscribe(
        function (value) {
          var s = new Subject();
          var id = leftId++;
          leftMap.set(id, s);

          var result = tryCatch(resultSelector)(value, addRef(s, r));
          if (result === errorObj) {
            leftMap.forEach(handleError(result.e));
            return o.onError(result.e);
          }
          o.onNext(result);

          rightMap.forEach(function (v) { s.onNext(v); });

          var md = new SingleAssignmentDisposable();
          group.add(md);

          var duration = tryCatch(leftDurationSelector)(value);
          if (duration === errorObj) {
            leftMap.forEach(handleError(duration.e));
            return o.onError(duration.e);
          }

          md.setDisposable(duration.take(1).subscribe(
            noop,
            function (e) {
              leftMap.forEach(handleError(e));
              o.onError(e);
            },
            function () {
              leftMap['delete'](id) && s.onCompleted();
              group.remove(md);
            }));
        },
        function (e) {
          leftMap.forEach(handleError(e));
          o.onError(e);
        },
        function () { o.onCompleted(); })
      );

      group.add(right.subscribe(
        function (value) {
          var id = rightId++;
          rightMap.set(id, value);

          var md = new SingleAssignmentDisposable();
          group.add(md);

          var duration = tryCatch(rightDurationSelector)(value);
          if (duration === errorObj) {
            leftMap.forEach(handleError(duration.e));
            return o.onError(duration.e);
          }

          md.setDisposable(duration.take(1).subscribe(
            noop,
            function (e) {
              leftMap.forEach(handleError(e));
              o.onError(e);
            },
            function () {
              rightMap['delete'](id);
              group.remove(md);
            }));

          leftMap.forEach(function (v) { v.onNext(value); });
        },
        function (e) {
          leftMap.forEach(handleError(e));
          o.onError(e);
        })
      );

      return r;
    }, left);
  };

  function toArray(x) { return x.toArray(); }

  /**
   *  Projects each element of an observable sequence into zero or more buffers.
   *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
   *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
   *  @returns {Observable} An observable sequence of windows.
   */
  observableProto.buffer = function () {
    return this.window.apply(this, arguments)
      .flatMap(toArray);
  };

  /**
   *  Projects each element of an observable sequence into zero or more windows.
   *
   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
   *  @returns {Observable} An observable sequence of windows.
   */
  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
    }
    return typeof windowOpeningsOrClosingSelector === 'function' ?
      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
  };

  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
      return win;
    });
  }

  function observableWindowWithBoundaries(windowBoundaries) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var win = new Subject(),
        d = new CompositeDisposable(),
        r = new RefCountDisposable(d);

      observer.onNext(addRef(win, r));

      d.add(source.subscribe(function (x) {
        win.onNext(x);
      }, function (err) {
        win.onError(err);
        observer.onError(err);
      }, function () {
        win.onCompleted();
        observer.onCompleted();
      }));

      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));

      d.add(windowBoundaries.subscribe(function (w) {
        win.onCompleted();
        win = new Subject();
        observer.onNext(addRef(win, r));
      }, function (err) {
        win.onError(err);
        observer.onError(err);
      }, function () {
        win.onCompleted();
        observer.onCompleted();
      }));

      return r;
    }, source);
  }

  function observableWindowWithClosingSelector(windowClosingSelector) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var m = new SerialDisposable(),
        d = new CompositeDisposable(m),
        r = new RefCountDisposable(d),
        win = new Subject();
      observer.onNext(addRef(win, r));
      d.add(source.subscribe(function (x) {
          win.onNext(x);
      }, function (err) {
          win.onError(err);
          observer.onError(err);
      }, function () {
          win.onCompleted();
          observer.onCompleted();
      }));

      function createWindowClose () {
        var windowClose;
        try {
          windowClose = windowClosingSelector();
        } catch (e) {
          observer.onError(e);
          return;
        }

        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));

        var m1 = new SingleAssignmentDisposable();
        m.setDisposable(m1);
        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
          win.onError(err);
          observer.onError(err);
        }, function () {
          win.onCompleted();
          win = new Subject();
          observer.onNext(addRef(win, r));
          createWindowClose();
        }));
      }

      createWindowClose();
      return r;
    }, source);
  }

  var PairwiseObservable = (function (__super__) {
    inherits(PairwiseObservable, __super__);
    function PairwiseObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    PairwiseObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new PairwiseObserver(o));
    };

    return PairwiseObservable;
  }(ObservableBase));

  var PairwiseObserver = (function(__super__) {
    inherits(PairwiseObserver, __super__);
    function PairwiseObserver(o) {
      this._o = o;
      this._p = null;
      this._hp = false;
      __super__.call(this);
    }

    PairwiseObserver.prototype.next = function (x) {
      if (this._hp) {
        this._o.onNext([this._p, x]);
      } else {
        this._hp = true;
      }
      this._p = x;
    };
    PairwiseObserver.prototype.error = function (err) { this._o.onError(err); };
    PairwiseObserver.prototype.completed = function () { this._o.onCompleted(); };

    return PairwiseObserver;
  }(AbstractObserver));

  /**
   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
   */
  observableProto.pairwise = function () {
    return new PairwiseObservable(this);
  };

  /**
   * Returns two observables which partition the observations of the source by the given function.
   * The first will trigger observations for those values for which the predicate returns true.
   * The second will trigger observations for those values where the predicate returns false.
   * The predicate is executed once for each subscribed observer.
   * Both also propagate all error observations arising from the source and each completes
   * when the source completes.
   * @param {Function} predicate
   *    The function to determine which output Observable will trigger a particular observation.
   * @returns {Array}
   *    An array of observables. The first triggers when the predicate returns true,
   *    and the second triggers when the predicate returns false.
  */
  observableProto.partition = function(predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return [
      this.filter(predicate, thisArg),
      this.filter(function (x, i, o) { return !fn(x, i, o); })
    ];
  };

  var WhileEnumerable = (function(__super__) {
    inherits(WhileEnumerable, __super__);
    function WhileEnumerable(c, s) {
      this.c = c;
      this.s = s;
    }
    WhileEnumerable.prototype[$iterator$] = function () {
      var self = this;
      return {
        next: function () {
          return self.c() ?
           { done: false, value: self.s } :
           { done: true, value: void 0 };
        }
      };
    };
    return WhileEnumerable;
  }(Enumerable));
  
  function enumerableWhile(condition, source) {
    return new WhileEnumerable(condition, source);
  }  

   /**
   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
   *
   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.letBind = observableProto['let'] = function (func) {
    return func(this);
  };

   /**
   *  Determines whether an observable collection contains values. 
   *
   * @example
   *  1 - res = Rx.Observable.if(condition, obs1);
   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
   */
  Observable['if'] = function (condition, thenSource, elseSourceOrScheduler) {
    return observableDefer(function () {
      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());

      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));

      // Assume a scheduler for empty only
      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
      return condition() ? thenSource : elseSourceOrScheduler;
    });
  };

   /**
   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
   * There is an alias for this method called 'forIn' for browsers <IE9
   * @param {Array} sources An array of values to turn into an observable sequence.
   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
   * @returns {Observable} An observable sequence from the concatenated observable sequences.
   */
  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
    return enumerableOf(sources, resultSelector, thisArg).concat();
  };

   /**
   *  Repeats source as long as condition holds emulating a while loop.
   * There is an alias for this method called 'whileDo' for browsers <IE9
   *
   * @param {Function} condition The condition which determines if the source will be repeated.
   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
   */
  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
    isPromise(source) && (source = observableFromPromise(source));
    return enumerableWhile(condition, source).concat();
  };

   /**
   *  Repeats source as long as condition holds emulating a do while loop.
   *
   * @param {Function} condition The condition which determines if the source will be repeated.
   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
   */
  observableProto.doWhile = function (condition) {
    return observableConcat([this, observableWhileDo(condition, this)]);
  };

   /**
   *  Uses selector to determine which source in sources to use.
   * @param {Function} selector The function which extracts the value for to test in a case statement.
   * @param {Array} sources A object which has keys which correspond to the case statement labels.
   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
   *
   * @returns {Observable} An observable sequence which is determined by a case statement.
   */
  Observable['case'] = function (selector, sources, defaultSourceOrScheduler) {
    return observableDefer(function () {
      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());

      isScheduler(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));

      var result = sources[selector()];
      isPromise(result) && (result = observableFromPromise(result));

      return result || defaultSourceOrScheduler;
    });
  };

  var ExpandObservable = (function(__super__) {
    inherits(ExpandObservable, __super__);
    function ExpandObservable(source, fn, scheduler) {
      this.source = source;
      this._fn = fn;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function scheduleRecursive(args, recurse) {
      var state = args[0], self = args[1];
      var work;
      if (state.q.length > 0) {
        work = state.q.shift();
      } else {
        state.isAcquired = false;
        return;
      }
      var m1 = new SingleAssignmentDisposable();
      state.d.add(m1);
      m1.setDisposable(work.subscribe(new ExpandObserver(state, self, m1)));
      recurse([state, self]);
    }

    ExpandObservable.prototype._ensureActive = function (state) {
      var isOwner = false;
      if (state.q.length > 0) {
        isOwner = !state.isAcquired;
        state.isAcquired = true;
      }
      isOwner && state.m.setDisposable(this._scheduler.scheduleRecursive([state, this], scheduleRecursive));
    };

    ExpandObservable.prototype.subscribeCore = function (o) {
      var m = new SerialDisposable(),
        d = new CompositeDisposable(m),
        state = {
          q: [],
          m: m,
          d: d,
          activeCount: 0,
          isAcquired: false,
          o: o
        };

      state.q.push(this.source);
      state.activeCount++;
      this._ensureActive(state);
      return d;
    };

    return ExpandObservable;
  }(ObservableBase));

  var ExpandObserver = (function(__super__) {
    inherits(ExpandObserver, __super__);
    function ExpandObserver(state, parent, m1) {
      this._s = state;
      this._p = parent;
      this._m1 = m1;
      __super__.call(this);
    }

    ExpandObserver.prototype.next = function (x) {
      this._s.o.onNext(x);
      var result = tryCatch(this._p._fn)(x);
      if (result === errorObj) { return this._s.o.onError(result.e); }
      this._s.q.push(result);
      this._s.activeCount++;
      this._p._ensureActive(this._s);
    };

    ExpandObserver.prototype.error = function (e) {
      this._s.o.onError(e);
    };

    ExpandObserver.prototype.completed = function () {
      this._s.d.remove(this._m1);
      this._s.activeCount--;
      this._s.activeCount === 0 && this._s.o.onCompleted();
    };

    return ExpandObserver;
  }(AbstractObserver));

   /**
   *  Expands an observable sequence by recursively invoking selector.
   *
   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
   */
  observableProto.expand = function (selector, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new ExpandObservable(this, selector, scheduler);
  };

  function argumentsToArray() {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return args;
  }

  var ForkJoinObservable = (function (__super__) {
    inherits(ForkJoinObservable, __super__);
    function ForkJoinObservable(sources, cb) {
      this._sources = sources;
      this._cb = cb;
      __super__.call(this);
    }

    ForkJoinObservable.prototype.subscribeCore = function (o) {
      if (this._sources.length === 0) {
        o.onCompleted();
        return disposableEmpty;
      }

      var count = this._sources.length;
      var state = {
        finished: false,
        hasResults: new Array(count),
        hasCompleted: new Array(count),
        results: new Array(count)
      };

      var subscriptions = new CompositeDisposable();
      for (var i = 0, len = this._sources.length; i < len; i++) {
        var source = this._sources[i];
        isPromise(source) && (source = observableFromPromise(source));
        subscriptions.add(source.subscribe(new ForkJoinObserver(o, state, i, this._cb, subscriptions)));
      }

      return subscriptions;
    };

    return ForkJoinObservable;
  }(ObservableBase));

  var ForkJoinObserver = (function(__super__) {
    inherits(ForkJoinObserver, __super__);
    function ForkJoinObserver(o, s, i, cb, subs) {
      this._o = o;
      this._s = s;
      this._i = i;
      this._cb = cb;
      this._subs = subs;
      __super__.call(this);
    }

    ForkJoinObserver.prototype.next = function (x) {
      if (!this._s.finished) {
        this._s.hasResults[this._i] = true;
        this._s.results[this._i] = x;
      }
    };

    ForkJoinObserver.prototype.error = function (e) {
      this._s.finished = true;
      this._o.onError(e);
      this._subs.dispose();
    };

    ForkJoinObserver.prototype.completed = function () {
      if (!this._s.finished) {
        if (!this._s.hasResults[this._i]) {
          return this._o.onCompleted();
        }
        this._s.hasCompleted[this._i] = true;
        for (var i = 0; i < this._s.results.length; i++) {
          if (!this._s.hasCompleted[i]) { return; }
        }
        this._s.finished = true;

        var res = tryCatch(this._cb).apply(null, this._s.results);
        if (res === errorObj) { return this._o.onError(res.e); }

        this._o.onNext(res);
        this._o.onCompleted();
      }
    };

    return ForkJoinObserver;
  }(AbstractObserver));

   /**
   *  Runs all observable sequences in parallel and collect their last elements.
   *
   * @example
   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
   */
  Observable.forkJoin = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);
    return new ForkJoinObservable(args, resultSelector);
  };

   /**
   *  Runs two observable sequences in parallel and combines their last elemenets.
   * @param {Observable} second Second observable sequence.
   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
   */
  observableProto.forkJoin = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args[0].unshift(this);
    } else {
      args.unshift(this);
    }
    return Observable.forkJoin.apply(null, args);
  };

  /**
   * Comonadic bind operator.
   * @param {Function} selector A transform function to apply to each element.
   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
   */
  observableProto.manySelect = observableProto.extend = function (selector, scheduler) {
    isScheduler(scheduler) || (scheduler = Rx.Scheduler.immediate);
    var source = this;
    return observableDefer(function () {
      var chain;

      return source
        .map(function (x) {
          var curr = new ChainObservable(x);

          chain && chain.onNext(x);
          chain = curr;

          return curr;
        })
        .tap(
          noop,
          function (e) { chain && chain.onError(e); },
          function () { chain && chain.onCompleted(); }
        )
        .observeOn(scheduler)
        .map(selector);
    }, source);
  };

  var ChainObservable = (function (__super__) {
    inherits(ChainObservable, __super__);
    function ChainObservable(head) {
      __super__.call(this);
      this.head = head;
      this.tail = new AsyncSubject();
    }

    addProperties(ChainObservable.prototype, Observer, {
      _subscribe: function (o) {
        var g = new CompositeDisposable();
        g.add(currentThreadScheduler.schedule(this, function (_, self) {
          o.onNext(self.head);
          g.add(self.tail.mergeAll().subscribe(o));
        }));

        return g;
      },
      onCompleted: function () {
        this.onNext(Observable.empty());
      },
      onError: function (e) {
        this.onNext(Observable['throw'](e));
      },
      onNext: function (v) {
        this.tail.onNext(v);
        this.tail.onCompleted();
      }
    });

    return ChainObservable;

  }(Observable));

  var Map = root.Map || (function () {
    function Map() {
      this.size = 0;
      this._values = [];
      this._keys = [];
    }

    Map.prototype['delete'] = function (key) {
      var i = this._keys.indexOf(key);
      if (i === -1) { return false; }
      this._values.splice(i, 1);
      this._keys.splice(i, 1);
      this.size--;
      return true;
    };

    Map.prototype.get = function (key) {
      var i = this._keys.indexOf(key);
      return i === -1 ? undefined : this._values[i];
    };

    Map.prototype.set = function (key, value) {
      var i = this._keys.indexOf(key);
      if (i === -1) {
        this._keys.push(key);
        this._values.push(value);
        this.size++;
      } else {
        this._values[i] = value;
      }
      return this;
    };

    Map.prototype.forEach = function (cb, thisArg) {
      for (var i = 0; i < this.size; i++) {
        cb.call(thisArg, this._values[i], this._keys[i]);
      }
    };

    return Map;
  }());

  /**
   * @constructor
   * Represents a join pattern over observable sequences.
   */
  function Pattern(patterns) {
    this.patterns = patterns;
  }

  /**
   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
   *  @param other Observable sequence to match in addition to the current pattern.
   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
   */
  Pattern.prototype.and = function (other) {
    return new Pattern(this.patterns.concat(other));
  };

  /**
   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
   */
  Pattern.prototype.thenDo = function (selector) {
    return new Plan(this, selector);
  };

  function Plan(expression, selector) {
    this.expression = expression;
    this.selector = selector;
  }

  function handleOnError(o) { return function (e) { o.onError(e); }; }
  function handleOnNext(self, observer) {
    return function onNext () {
      var result = tryCatch(self.selector).apply(self, arguments);
      if (result === errorObj) { return observer.onError(result.e); }
      observer.onNext(result);
    };
  }

  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
    var joinObservers = [], errHandler = handleOnError(observer);
    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], errHandler));
    }
    var activePlan = new ActivePlan(joinObservers, handleOnNext(this, observer), function () {
      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
        joinObservers[j].removeActivePlan(activePlan);
      }
      deactivate(activePlan);
    });
    for (i = 0, len = joinObservers.length; i < len; i++) {
      joinObservers[i].addActivePlan(activePlan);
    }
    return activePlan;
  };

  function planCreateObserver(externalSubscriptions, observable, onError) {
    var entry = externalSubscriptions.get(observable);
    if (!entry) {
      var observer = new JoinObserver(observable, onError);
      externalSubscriptions.set(observable, observer);
      return observer;
    }
    return entry;
  }

  function ActivePlan(joinObserverArray, onNext, onCompleted) {
    this.joinObserverArray = joinObserverArray;
    this.onNext = onNext;
    this.onCompleted = onCompleted;
    this.joinObservers = new Map();
    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
      var joinObserver = this.joinObserverArray[i];
      this.joinObservers.set(joinObserver, joinObserver);
    }
  }

  ActivePlan.prototype.dequeue = function () {
    this.joinObservers.forEach(function (v) { v.queue.shift(); });
  };

  ActivePlan.prototype.match = function () {
    var i, len, hasValues = true;
    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
      if (this.joinObserverArray[i].queue.length === 0) {
        hasValues = false;
        break;
      }
    }
    if (hasValues) {
      var firstValues = [],
          isCompleted = false;
      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
        firstValues.push(this.joinObserverArray[i].queue[0]);
        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
      }
      if (isCompleted) {
        this.onCompleted();
      } else {
        this.dequeue();
        var values = [];
        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
          values.push(firstValues[i].value);
        }
        this.onNext.apply(this, values);
      }
    }
  };

  var JoinObserver = (function (__super__) {
    inherits(JoinObserver, __super__);

    function JoinObserver(source, onError) {
      __super__.call(this);
      this.source = source;
      this.onError = onError;
      this.queue = [];
      this.activePlans = [];
      this.subscription = new SingleAssignmentDisposable();
      this.isDisposed = false;
    }

    var JoinObserverPrototype = JoinObserver.prototype;

    JoinObserverPrototype.next = function (notification) {
      if (!this.isDisposed) {
        if (notification.kind === 'E') {
          return this.onError(notification.error);
        }
        this.queue.push(notification);
        var activePlans = this.activePlans.slice(0);
        for (var i = 0, len = activePlans.length; i < len; i++) {
          activePlans[i].match();
        }
      }
    };

    JoinObserverPrototype.error = noop;
    JoinObserverPrototype.completed = noop;

    JoinObserverPrototype.addActivePlan = function (activePlan) {
      this.activePlans.push(activePlan);
    };

    JoinObserverPrototype.subscribe = function () {
      this.subscription.setDisposable(this.source.materialize().subscribe(this));
    };

    JoinObserverPrototype.removeActivePlan = function (activePlan) {
      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
      this.activePlans.length === 0 && this.dispose();
    };

    JoinObserverPrototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      if (!this.isDisposed) {
        this.isDisposed = true;
        this.subscription.dispose();
      }
    };

    return JoinObserver;
  } (AbstractObserver));

  /**
   *  Creates a pattern that matches when both observable sequences have an available value.
   *
   *  @param right Observable sequence to match with the current sequence.
   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
   */
  observableProto.and = function (right) {
    return new Pattern([this, right]);
  };

  /**
   *  Matches when the observable sequence has an available value and projects the value.
   *
   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
   */
  observableProto.thenDo = function (selector) {
    return new Pattern([this]).thenDo(selector);
  };

  /**
   *  Joins together the results from several patterns.
   *
   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
   *  @returns {Observable} Observable sequence with the results form matching several patterns.
   */
  Observable.when = function () {
    var len = arguments.length, plans;
    if (Array.isArray(arguments[0])) {
      plans = arguments[0];
    } else {
      plans = new Array(len);
      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
    }
    return new AnonymousObservable(function (o) {
      var activePlans = [],
          externalSubscriptions = new Map();
      var outObserver = observerCreate(
        function (x) { o.onNext(x); },
        function (err) {
          externalSubscriptions.forEach(function (v) { v.onError(err); });
          o.onError(err);
        },
        function (x) { o.onCompleted(); }
      );
      try {
        for (var i = 0, len = plans.length; i < len; i++) {
          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
            var idx = activePlans.indexOf(activePlan);
            activePlans.splice(idx, 1);
            activePlans.length === 0 && o.onCompleted();
          }));
        }
      } catch (e) {
        return observableThrow(e).subscribe(o);
      }
      var group = new CompositeDisposable();
      externalSubscriptions.forEach(function (joinObserver) {
        joinObserver.subscribe();
        group.add(joinObserver);
      });

      return group;
    });
  };

  var TimerObservable = (function(__super__) {
    inherits(TimerObservable, __super__);
    function TimerObservable(dt, s) {
      this._dt = dt;
      this._s = s;
      __super__.call(this);
    }

    TimerObservable.prototype.subscribeCore = function (o) {
      return this._s.scheduleFuture(o, this._dt, scheduleMethod);
    };

    function scheduleMethod(s, o) {
      o.onNext(0);
      o.onCompleted();
    }

    return TimerObservable;
  }(ObservableBase));

  function _observableTimer(dueTime, scheduler) {
    return new TimerObservable(dueTime, scheduler);
  }

  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
    return new AnonymousObservable(function (observer) {
      var d = dueTime, p = normalizeTime(period);
      return scheduler.scheduleRecursiveFuture(0, d, function (count, self) {
        if (p > 0) {
          var now = scheduler.now();
          d = new Date(d.getTime() + p);
          d.getTime() <= now && (d = new Date(now + p));
        }
        observer.onNext(count);
        self(count + 1, new Date(d));
      });
    });
  }

  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
    return dueTime === period ?
      new AnonymousObservable(function (observer) {
        return scheduler.schedulePeriodic(0, period, function (count) {
          observer.onNext(count);
          return count + 1;
        });
      }) :
      observableDefer(function () {
        return observableTimerDateAndPeriod(new Date(scheduler.now() + dueTime), period, scheduler);
      });
  }

  /**
   *  Returns an observable sequence that produces a value after each period.
   *
   * @example
   *  1 - res = Rx.Observable.interval(1000);
   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
   *
   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
   * @returns {Observable} An observable sequence that produces a value after each period.
   */
  var observableinterval = Observable.interval = function (period, scheduler) {
    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : defaultScheduler);
  };

  /**
   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
   */
  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
    var period;
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    if (periodOrScheduler != null && typeof periodOrScheduler === 'number') {
      period = periodOrScheduler;
    } else if (isScheduler(periodOrScheduler)) {
      scheduler = periodOrScheduler;
    }
    if ((dueTime instanceof Date || typeof dueTime === 'number') && period === undefined) {
      return _observableTimer(dueTime, scheduler);
    }
    if (dueTime instanceof Date && period !== undefined) {
      return observableTimerDateAndPeriod(dueTime, periodOrScheduler, scheduler);
    }
    return observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
  };

  function observableDelayRelative(source, dueTime, scheduler) {
    return new AnonymousObservable(function (o) {
      var active = false,
        cancelable = new SerialDisposable(),
        exception = null,
        q = [],
        running = false,
        subscription;
      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
        var d, shouldRun;
        if (notification.value.kind === 'E') {
          q = [];
          q.push(notification);
          exception = notification.value.error;
          shouldRun = !running;
        } else {
          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
          shouldRun = !active;
          active = true;
        }
        if (shouldRun) {
          if (exception !== null) {
            o.onError(exception);
          } else {
            d = new SingleAssignmentDisposable();
            cancelable.setDisposable(d);
            d.setDisposable(scheduler.scheduleRecursiveFuture(null, dueTime, function (_, self) {
              var e, recurseDueTime, result, shouldRecurse;
              if (exception !== null) {
                return;
              }
              running = true;
              do {
                result = null;
                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                  result = q.shift().value;
                }
                if (result !== null) {
                  result.accept(o);
                }
              } while (result !== null);
              shouldRecurse = false;
              recurseDueTime = 0;
              if (q.length > 0) {
                shouldRecurse = true;
                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
              } else {
                active = false;
              }
              e = exception;
              running = false;
              if (e !== null) {
                o.onError(e);
              } else if (shouldRecurse) {
                self(null, recurseDueTime);
              }
            }));
          }
        }
      });
      return new BinaryDisposable(subscription, cancelable);
    }, source);
  }

  function observableDelayAbsolute(source, dueTime, scheduler) {
    return observableDefer(function () {
      return observableDelayRelative(source, dueTime - scheduler.now(), scheduler);
    });
  }

  function delayWithSelector(source, subscriptionDelay, delayDurationSelector) {
    var subDelay, selector;
    if (isFunction(subscriptionDelay)) {
      selector = subscriptionDelay;
    } else {
      subDelay = subscriptionDelay;
      selector = delayDurationSelector;
    }
    return new AnonymousObservable(function (o) {
      var delays = new CompositeDisposable(), atEnd = false, subscription = new SerialDisposable();

      function start() {
        subscription.setDisposable(source.subscribe(
          function (x) {
            var delay = tryCatch(selector)(x);
            if (delay === errorObj) { return o.onError(delay.e); }
            var d = new SingleAssignmentDisposable();
            delays.add(d);
            d.setDisposable(delay.subscribe(
              function () {
                o.onNext(x);
                delays.remove(d);
                done();
              },
              function (e) { o.onError(e); },
              function () {
                o.onNext(x);
                delays.remove(d);
                done();
              }
            ));
          },
          function (e) { o.onError(e); },
          function () {
            atEnd = true;
            subscription.dispose();
            done();
          }
        ));
      }

      function done () {
        atEnd && delays.length === 0 && o.onCompleted();
      }

      if (!subDelay) {
        start();
      } else {
        subscription.setDisposable(subDelay.subscribe(start, function (e) { o.onError(e); }, start));
      }

      return new BinaryDisposable(subscription, delays);
    }, source);
  }

  /**
   *  Time shifts the observable sequence by dueTime.
   *  The relative time intervals between the values are preserved.
   *
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delay = function () {
    var firstArg = arguments[0];
    if (typeof firstArg === 'number' || firstArg instanceof Date) {
      var dueTime = firstArg, scheduler = arguments[1];
      isScheduler(scheduler) || (scheduler = defaultScheduler);
      return dueTime instanceof Date ?
        observableDelayAbsolute(this, dueTime, scheduler) :
        observableDelayRelative(this, dueTime, scheduler);
    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
      return delayWithSelector(this, firstArg, arguments[1]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  var DebounceObservable = (function (__super__) {
    inherits(DebounceObservable, __super__);
    function DebounceObservable(source, dt, s) {
      isScheduler(s) || (s = defaultScheduler);
      this.source = source;
      this._dt = dt;
      this._s = s;
      __super__.call(this);
    }

    DebounceObservable.prototype.subscribeCore = function (o) {
      var cancelable = new SerialDisposable();
      return new BinaryDisposable(
        this.source.subscribe(new DebounceObserver(o, this._dt, this._s, cancelable)),
        cancelable);
    };

    return DebounceObservable;
  }(ObservableBase));

  var DebounceObserver = (function (__super__) {
    inherits(DebounceObserver, __super__);
    function DebounceObserver(observer, dueTime, scheduler, cancelable) {
      this._o = observer;
      this._d = dueTime;
      this._scheduler = scheduler;
      this._c = cancelable;
      this._v = null;
      this._hv = false;
      this._id = 0;
      __super__.call(this);
    }

    function scheduleFuture(s, state) {
      state.self._hv && state.self._id === state.currentId && state.self._o.onNext(state.x);
      state.self._hv = false;
    }

    DebounceObserver.prototype.next = function (x) {
      this._hv = true;
      this._v = x;
      var currentId = ++this._id, d = new SingleAssignmentDisposable();
      this._c.setDisposable(d);
      d.setDisposable(this._scheduler.scheduleFuture(this, this._d, function (_, self) {
        self._hv && self._id === currentId && self._o.onNext(x);
        self._hv = false;
      }));
    };

    DebounceObserver.prototype.error = function (e) {
      this._c.dispose();
      this._o.onError(e);
      this._hv = false;
      this._id++;
    };

    DebounceObserver.prototype.completed = function () {
      this._c.dispose();
      this._hv && this._o.onNext(this._v);
      this._o.onCompleted();
      this._hv = false;
      this._id++;
    };

    return DebounceObserver;
  }(AbstractObserver));

  function debounceWithSelector(source, durationSelector) {
    return new AnonymousObservable(function (o) {
      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
      var subscription = source.subscribe(
        function (x) {
          var throttle = tryCatch(durationSelector)(x);
          if (throttle === errorObj) { return o.onError(throttle.e); }

          isPromise(throttle) && (throttle = observableFromPromise(throttle));

          hasValue = true;
          value = x;
          id++;
          var currentid = id, d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(throttle.subscribe(
            function () {
              hasValue && id === currentid && o.onNext(value);
              hasValue = false;
              d.dispose();
            },
            function (e) { o.onError(e); },
            function () {
              hasValue && id === currentid && o.onNext(value);
              hasValue = false;
              d.dispose();
            }
          ));
        },
        function (e) {
          cancelable.dispose();
          o.onError(e);
          hasValue = false;
          id++;
        },
        function () {
          cancelable.dispose();
          hasValue && o.onNext(value);
          o.onCompleted();
          hasValue = false;
          id++;
        }
      );
      return new BinaryDisposable(subscription, cancelable);
    }, source);
  }

  observableProto.debounce = function () {
    if (isFunction (arguments[0])) {
      return debounceWithSelector(this, arguments[0]);
    } else if (typeof arguments[0] === 'number') {
      return new DebounceObservable(this, arguments[0], arguments[1]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  /**
   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithTime = observableProto.windowTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
    var source = this, timeShift;
    timeShiftOrScheduler == null && (timeShift = timeSpan);
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    if (typeof timeShiftOrScheduler === 'number') {
      timeShift = timeShiftOrScheduler;
    } else if (isScheduler(timeShiftOrScheduler)) {
      timeShift = timeSpan;
      scheduler = timeShiftOrScheduler;
    }
    return new AnonymousObservable(function (observer) {
      var groupDisposable,
        nextShift = timeShift,
        nextSpan = timeSpan,
        q = [],
        refCountDisposable,
        timerD = new SerialDisposable(),
        totalTime = 0;
        groupDisposable = new CompositeDisposable(timerD),
        refCountDisposable = new RefCountDisposable(groupDisposable);

       function createTimer () {
        var m = new SingleAssignmentDisposable(),
          isSpan = false,
          isShift = false;
        timerD.setDisposable(m);
        if (nextSpan === nextShift) {
          isSpan = true;
          isShift = true;
        } else if (nextSpan < nextShift) {
            isSpan = true;
        } else {
          isShift = true;
        }
        var newTotalTime = isSpan ? nextSpan : nextShift,
          ts = newTotalTime - totalTime;
        totalTime = newTotalTime;
        if (isSpan) {
          nextSpan += timeShift;
        }
        if (isShift) {
          nextShift += timeShift;
        }
        m.setDisposable(scheduler.scheduleFuture(null, ts, function () {
          if (isShift) {
            var s = new Subject();
            q.push(s);
            observer.onNext(addRef(s, refCountDisposable));
          }
          isSpan && q.shift().onCompleted();
          createTimer();
        }));
      };
      q.push(new Subject());
      observer.onNext(addRef(q[0], refCountDisposable));
      createTimer();
      groupDisposable.add(source.subscribe(
        function (x) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
        },
        function (e) {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
          observer.onError(e);
        },
        function () {
          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

  /**
   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
   * @param {Number} timeSpan Maximum time length of a window.
   * @param {Number} count Maximum element count of a window.
   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of windows.
   */
  observableProto.windowWithTimeOrCount = observableProto.windowTimeOrCount = function (timeSpan, count, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new AnonymousObservable(function (observer) {
      var timerD = new SerialDisposable(),
          groupDisposable = new CompositeDisposable(timerD),
          refCountDisposable = new RefCountDisposable(groupDisposable),
          n = 0,
          windowId = 0,
          s = new Subject();

      function createTimer(id) {
        var m = new SingleAssignmentDisposable();
        timerD.setDisposable(m);
        m.setDisposable(scheduler.scheduleFuture(null, timeSpan, function () {
          if (id !== windowId) { return; }
          n = 0;
          var newId = ++windowId;
          s.onCompleted();
          s = new Subject();
          observer.onNext(addRef(s, refCountDisposable));
          createTimer(newId);
        }));
      }

      observer.onNext(addRef(s, refCountDisposable));
      createTimer(0);

      groupDisposable.add(source.subscribe(
        function (x) {
          var newId = 0, newWindow = false;
          s.onNext(x);
          if (++n === count) {
            newWindow = true;
            n = 0;
            newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
          }
          newWindow && createTimer(newId);
        },
        function (e) {
          s.onError(e);
          observer.onError(e);
        }, function () {
          s.onCompleted();
          observer.onCompleted();
        }
      ));
      return refCountDisposable;
    }, source);
  };

  function toArray(x) { return x.toArray(); }

  /**
   *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
   * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
   * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of buffers.
   */
  observableProto.bufferWithTime = observableProto.bufferTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
    return this.windowWithTime(timeSpan, timeShiftOrScheduler, scheduler).flatMap(toArray);
  };

  function toArray(x) { return x.toArray(); }

  /**
   *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
   * @param {Number} timeSpan Maximum time length of a buffer.
   * @param {Number} count Maximum element count of a buffer.
   * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence of buffers.
   */
  observableProto.bufferWithTimeOrCount = observableProto.bufferTimeOrCount = function (timeSpan, count, scheduler) {
    return this.windowWithTimeOrCount(timeSpan, count, scheduler).flatMap(toArray);
  };

  var TimeIntervalObservable = (function (__super__) {
    inherits(TimeIntervalObservable, __super__);
    function TimeIntervalObservable(source, s) {
      this.source = source;
      this._s = s;
      __super__.call(this);
    }

    TimeIntervalObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TimeIntervalObserver(o, this._s));
    };

    return TimeIntervalObservable;
  }(ObservableBase));

  var TimeIntervalObserver = (function (__super__) {
    inherits(TimeIntervalObserver, __super__);

    function TimeIntervalObserver(o, s) {
      this._o = o;
      this._s = s;
      this._l = s.now();
      __super__.call(this);
    }

    TimeIntervalObserver.prototype.next = function (x) {
      var now = this._s.now(), span = now - this._l;
      this._l = now;
      this._o.onNext({ value: x, interval: span });
    };
    TimeIntervalObserver.prototype.error = function (e) { this._o.onError(e); };
    TimeIntervalObserver.prototype.completed = function () { this._o.onCompleted(); };

    return TimeIntervalObserver;
  }(AbstractObserver));

  /**
   *  Records the time interval between consecutive values in an observable sequence.
   *
   * @example
   *  1 - res = source.timeInterval();
   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
   *
   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence with time interval information on values.
   */
  observableProto.timeInterval = function (scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new TimeIntervalObservable(this, scheduler);
  };

  var TimestampObservable = (function (__super__) {
    inherits(TimestampObservable, __super__);
    function TimestampObservable(source, s) {
      this.source = source;
      this._s = s;
      __super__.call(this);
    }

    TimestampObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TimestampObserver(o, this._s));
    };

    return TimestampObservable;
  }(ObservableBase));

  var TimestampObserver = (function (__super__) {
    inherits(TimestampObserver, __super__);
    function TimestampObserver(o, s) {
      this._o = o;
      this._s = s;
      __super__.call(this);
    }

    TimestampObserver.prototype.next = function (x) {
      this._o.onNext({ value: x, timestamp: this._s.now() });
    };

    TimestampObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    TimestampObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return TimestampObserver;
  }(AbstractObserver));

  /**
   *  Records the timestamp for each value in an observable sequence.
   *
   * @example
   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
   *  2 - res = source.timestamp(Rx.Scheduler.default);
   *
   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.
   * @returns {Observable} An observable sequence with timestamp information on values.
   */
  observableProto.timestamp = function (scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new TimestampObservable(this, scheduler);
  };

  var SampleObservable = (function(__super__) {
    inherits(SampleObservable, __super__);
    function SampleObservable(source, sampler) {
      this.source = source;
      this._sampler = sampler;
      __super__.call(this);
    }

    SampleObservable.prototype.subscribeCore = function (o) {
      var state = {
        o: o,
        atEnd: false,
        value: null,
        hasValue: false,
        sourceSubscription: new SingleAssignmentDisposable()
      };

      state.sourceSubscription.setDisposable(this.source.subscribe(new SampleSourceObserver(state)));
      return new BinaryDisposable(
        state.sourceSubscription,
        this._sampler.subscribe(new SamplerObserver(state))
      );
    };

    return SampleObservable;
  }(ObservableBase));

  var SamplerObserver = (function(__super__) {
    inherits(SamplerObserver, __super__);
    function SamplerObserver(s) {
      this._s = s;
      __super__.call(this);
    }

    SamplerObserver.prototype._handleMessage = function () {
      if (this._s.hasValue) {
        this._s.hasValue = false;
        this._s.o.onNext(this._s.value);
      }
      this._s.atEnd && this._s.o.onCompleted();
    };

    SamplerObserver.prototype.next = function () { this._handleMessage(); };
    SamplerObserver.prototype.error = function (e) { this._s.onError(e); };
    SamplerObserver.prototype.completed = function () { this._handleMessage(); };

    return SamplerObserver;
  }(AbstractObserver));

  var SampleSourceObserver = (function(__super__) {
    inherits(SampleSourceObserver, __super__);
    function SampleSourceObserver(s) {
      this._s = s;
      __super__.call(this);
    }

    SampleSourceObserver.prototype.next = function (x) {
      this._s.hasValue = true;
      this._s.value = x;
    };
    SampleSourceObserver.prototype.error = function (e) { this._s.o.onError(e); };
    SampleSourceObserver.prototype.completed = function () {
      this._s.atEnd = true;
      this._s.sourceSubscription.dispose();
    };

    return SampleSourceObserver;
  }(AbstractObserver));

  /**
   *  Samples the observable sequence at each interval.
   *
   * @example
   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
   *  2 - res = source.sample(5000); // 5 seconds
   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
   *
   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Sampled observable sequence.
   */
  observableProto.sample = function (intervalOrSampler, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return typeof intervalOrSampler === 'number' ?
      new SampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
      new SampleObservable(this, intervalOrSampler);
  };

  var TimeoutError = Rx.TimeoutError = function(message) {
    this.message = message || 'Timeout has occurred';
    this.name = 'TimeoutError';
    Error.call(this);
  };
  TimeoutError.prototype = Object.create(Error.prototype);

  function timeoutWithSelector(source, firstTimeout, timeoutDurationSelector, other) {
    if (isFunction(firstTimeout)) {
      other = timeoutDurationSelector;
      timeoutDurationSelector = firstTimeout;
      firstTimeout = observableNever();
    }
    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
    return new AnonymousObservable(function (o) {
      var subscription = new SerialDisposable(),
        timer = new SerialDisposable(),
        original = new SingleAssignmentDisposable();

      subscription.setDisposable(original);

      var id = 0, switched = false;

      function setTimer(timeout) {
        var myId = id, d = new SingleAssignmentDisposable();

        function timerWins() {
          switched = (myId === id);
          return switched;
        }

        timer.setDisposable(d);
        d.setDisposable(timeout.subscribe(function () {
          timerWins() && subscription.setDisposable(other.subscribe(o));
          d.dispose();
        }, function (e) {
          timerWins() && o.onError(e);
        }, function () {
          timerWins() && subscription.setDisposable(other.subscribe(o));
        }));
      };

      setTimer(firstTimeout);

      function oWins() {
        var res = !switched;
        if (res) { id++; }
        return res;
      }

      original.setDisposable(source.subscribe(function (x) {
        if (oWins()) {
          o.onNext(x);
          var timeout = tryCatch(timeoutDurationSelector)(x);
          if (timeout === errorObj) { return o.onError(timeout.e); }
          setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
        }
      }, function (e) {
        oWins() && o.onError(e);
      }, function () {
        oWins() && o.onCompleted();
      }));
      return new BinaryDisposable(subscription, timer);
    }, source);
  }

  function timeout(source, dueTime, other, scheduler) {
    if (isScheduler(other)) {
      scheduler = other;
      other = observableThrow(new TimeoutError());
    }
    if (other instanceof Error) { other = observableThrow(other); }
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
    return new AnonymousObservable(function (o) {
      var id = 0,
        original = new SingleAssignmentDisposable(),
        subscription = new SerialDisposable(),
        switched = false,
        timer = new SerialDisposable();

      subscription.setDisposable(original);

      function createTimer() {
        var myId = id;
        timer.setDisposable(scheduler.scheduleFuture(null, dueTime, function () {
          switched = id === myId;
          if (switched) {
            isPromise(other) && (other = observableFromPromise(other));
            subscription.setDisposable(other.subscribe(o));
          }
        }));
      }

      createTimer();

      original.setDisposable(source.subscribe(function (x) {
        if (!switched) {
          id++;
          o.onNext(x);
          createTimer();
        }
      }, function (e) {
        if (!switched) {
          id++;
          o.onError(e);
        }
      }, function () {
        if (!switched) {
          id++;
          o.onCompleted();
        }
      }));
      return new BinaryDisposable(subscription, timer);
    }, source);
  }

  observableProto.timeout = function () {
    var firstArg = arguments[0];
    if (firstArg instanceof Date || typeof firstArg === 'number') {
      return timeout(this, firstArg, arguments[1], arguments[2]);
    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
      return timeoutWithSelector(this, firstArg, arguments[1], arguments[2]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  var GenerateAbsoluteObservable = (function (__super__) {
    inherits(GenerateAbsoluteObservable, __super__);
    function GenerateAbsoluteObservable(state, cndFn, itrFn, resFn, timeFn, s) {
      this._state = state;
      this._cndFn = cndFn;
      this._itrFn = itrFn;
      this._resFn = resFn;
      this._timeFn = timeFn;
      this._s = s;
      __super__.call(this);
    }

    function scheduleRecursive(state, recurse) {
      state.hasResult && state.o.onNext(state.result);

      if (state.first) {
        state.first = false;
      } else {
        state.newState = tryCatch(state.self._itrFn)(state.newState);
        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
      }
      state.hasResult = tryCatch(state.self._cndFn)(state.newState);
      if (state.hasResult === errorObj) { return state.o.onError(state.hasResult.e); }
      if (state.hasResult) {
        state.result = tryCatch(state.self._resFn)(state.newState);
        if (state.result === errorObj) { return state.o.onError(state.result.e); }
        var time = tryCatch(state.self._timeFn)(state.newState);
        if (time === errorObj) { return state.o.onError(time.e); }
        recurse(state, time);
      } else {
        state.o.onCompleted();
      }
    }

    GenerateAbsoluteObservable.prototype.subscribeCore = function (o) {
      var state = {
        o: o,
        self: this,
        newState: this._state,
        first: true,
        hasResult: false
      };
      return this._s.scheduleRecursiveFuture(state, new Date(this._s.now()), scheduleRecursive);
    };

    return GenerateAbsoluteObservable;
  }(ObservableBase));

  /**
   *  GenerateAbsolutes an observable sequence by iterating a state from an initial state until the condition fails.
   *
   * @example
   *  res = source.generateWithAbsoluteTime(0,
   *      function (x) { return return true; },
   *      function (x) { return x + 1; },
   *      function (x) { return x; },
   *      function (x) { return new Date(); }
   *  });
   *
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
   * @returns {Observable} The generated sequence.
   */
  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new GenerateAbsoluteObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);
  };

  var GenerateRelativeObservable = (function (__super__) {
    inherits(GenerateRelativeObservable, __super__);
    function GenerateRelativeObservable(state, cndFn, itrFn, resFn, timeFn, s) {
      this._state = state;
      this._cndFn = cndFn;
      this._itrFn = itrFn;
      this._resFn = resFn;
      this._timeFn = timeFn;
      this._s = s;
      __super__.call(this);
    }

    function scheduleRecursive(state, recurse) {
      state.hasResult && state.o.onNext(state.result);

      if (state.first) {
        state.first = false;
      } else {
        state.newState = tryCatch(state.self._itrFn)(state.newState);
        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
      }

      state.hasResult = tryCatch(state.self._cndFn)(state.newState);
      if (state.hasResult === errorObj) { return state.o.onError(state.hasResult.e); }
      if (state.hasResult) {
        state.result = tryCatch(state.self._resFn)(state.newState);
        if (state.result === errorObj) { return state.o.onError(state.result.e); }
        var time = tryCatch(state.self._timeFn)(state.newState);
        if (time === errorObj) { return state.o.onError(time.e); }
        recurse(state, time);
      } else {
        state.o.onCompleted();
      }
    }

    GenerateRelativeObservable.prototype.subscribeCore = function (o) {
      var state = {
        o: o,
        self: this,
        newState: this._state,
        first: true,
        hasResult: false
      };
      return this._s.scheduleRecursiveFuture(state, 0, scheduleRecursive);
    };

    return GenerateRelativeObservable;
  }(ObservableBase));

  /**
   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
   *
   * @example
   *  res = source.generateWithRelativeTime(0,
   *      function (x) { return return true; },
   *      function (x) { return x + 1; },
   *      function (x) { return x; },
   *      function (x) { return 500; }
   *  );
   *
   * @param {Mixed} initialState Initial state.
   * @param {Function} condition Condition to terminate generation (upon returning false).
   * @param {Function} iterate Iteration step function.
   * @param {Function} resultSelector Selector function for results produced in the sequence.
   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
   * @returns {Observable} The generated sequence.
   */
  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new GenerateRelativeObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);
  };

  var DelaySubscription = (function(__super__) {
    inherits(DelaySubscription, __super__);
    function DelaySubscription(source, dt, s) {
      this.source = source;
      this._dt = dt;
      this._s = s;
      __super__.call(this);
    }

    DelaySubscription.prototype.subscribeCore = function (o) {
      var d = new SerialDisposable();

      d.setDisposable(this._s.scheduleFuture([this.source, o, d], this._dt, scheduleMethod));

      return d;
    };

    function scheduleMethod(s, state) {
      var source = state[0], o = state[1], d = state[2];
      d.setDisposable(source.subscribe(o));
    }

    return DelaySubscription;
  }(ObservableBase));

  /**
   *  Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.
   *
   * @example
   *  1 - res = source.delaySubscription(5000); // 5s
   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.default); // 5 seconds
   *
   * @param {Number} dueTime Relative or absolute time shift of the subscription.
   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delaySubscription = function (dueTime, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new DelaySubscription(this, dueTime, scheduler);
  };

  var SkipLastWithTimeObservable = (function (__super__) {
    inherits(SkipLastWithTimeObservable, __super__);
    function SkipLastWithTimeObservable(source, d, s) {
      this.source = source;
      this._d = d;
      this._s = s;
      __super__.call(this);
    }

    SkipLastWithTimeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipLastWithTimeObserver(o, this));
    };

    return SkipLastWithTimeObservable;
  }(ObservableBase));

  var SkipLastWithTimeObserver = (function (__super__) {
    inherits(SkipLastWithTimeObserver, __super__);

    function SkipLastWithTimeObserver(o, p) {
      this._o = o;
      this._s = p._s;
      this._d = p._d;
      this._q = [];
      __super__.call(this);
    }

    SkipLastWithTimeObserver.prototype.next = function (x) {
      var now = this._s.now();
      this._q.push({ interval: now, value: x });
      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
        this._o.onNext(this._q.shift().value);
      }
    };
    SkipLastWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
    SkipLastWithTimeObserver.prototype.completed = function () {
      var now = this._s.now();
      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
        this._o.onNext(this._q.shift().value);
      }
      this._o.onCompleted();
    };

    return SkipLastWithTimeObserver;
  }(AbstractObserver));

  /**
   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for skipping elements from the end of the sequence.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
   */
  observableProto.skipLastWithTime = function (duration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new SkipLastWithTimeObservable(this, duration, scheduler);
  };

  var TakeLastWithTimeObservable = (function (__super__) {
    inherits(TakeLastWithTimeObservable, __super__);
    function TakeLastWithTimeObservable(source, d, s) {
      this.source = source;
      this._d = d;
      this._s = s;
      __super__.call(this);
    }

    TakeLastWithTimeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TakeLastWithTimeObserver(o, this._d, this._s));
    };

    return TakeLastWithTimeObservable;
  }(ObservableBase));

  var TakeLastWithTimeObserver = (function (__super__) {
    inherits(TakeLastWithTimeObserver, __super__);

    function TakeLastWithTimeObserver(o, d, s) {
      this._o = o;
      this._d = d;
      this._s = s;
      this._q = [];
      __super__.call(this);
    }

    TakeLastWithTimeObserver.prototype.next = function (x) {
      var now = this._s.now();
      this._q.push({ interval: now, value: x });
      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
        this._q.shift();
      }
    };
    TakeLastWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
    TakeLastWithTimeObserver.prototype.completed = function () {
      var now = this._s.now();
      while (this._q.length > 0) {
        var next = this._q.shift();
        if (now - next.interval <= this._d) { this._o.onNext(next.value); }
      }
      this._o.onCompleted();
    };

    return TakeLastWithTimeObserver;
  }(AbstractObserver));

  /**
   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the end of the sequence.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
   */
  observableProto.takeLastWithTime = function (duration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new TakeLastWithTimeObservable(this, duration, scheduler);
  };

  /**
   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the end of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
   */
  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
    var source = this;
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new AnonymousObservable(function (o) {
      var q = [];
      return source.subscribe(function (x) {
        var now = scheduler.now();
        q.push({ interval: now, value: x });
        while (q.length > 0 && now - q[0].interval >= duration) {
          q.shift();
        }
      }, function (e) { o.onError(e); }, function () {
        var now = scheduler.now(), res = [];
        while (q.length > 0) {
          var next = q.shift();
          now - next.interval <= duration && res.push(next.value);
        }
        o.onNext(res);
        o.onCompleted();
      });
    }, source);
  };

  var TakeWithTimeObservable = (function (__super__) {
    inherits(TakeWithTimeObservable, __super__);
    function TakeWithTimeObservable(source, d, s) {
      this.source = source;
      this._d = d;
      this._s = s;
      __super__.call(this);
    }

    function scheduleMethod(s, o) {
      o.onCompleted();
    }

    TakeWithTimeObservable.prototype.subscribeCore = function (o) {
      return new BinaryDisposable(
        this._s.scheduleFuture(o, this._d, scheduleMethod),
        this.source.subscribe(o)
      );
    };

    return TakeWithTimeObservable;
  }(ObservableBase));

  /**
   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
   *
   * @example
   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
   * @description
   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
   *  result sequence. This causes elements to be delayed with duration.
   * @param {Number} duration Duration for taking elements from the start of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
   */
  observableProto.takeWithTime = function (duration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new TakeWithTimeObservable(this, duration, scheduler);
  };

  var SkipWithTimeObservable = (function (__super__) {
    inherits(SkipWithTimeObservable, __super__);
    function SkipWithTimeObservable(source, d, s) {
      this.source = source;
      this._d = d;
      this._s = s;
      this._open = false;
      __super__.call(this);
    }

    function scheduleMethod(s, self) {
      self._open = true;
    }

    SkipWithTimeObservable.prototype.subscribeCore = function (o) {
      return new BinaryDisposable(
        this._s.scheduleFuture(this, this._d, scheduleMethod),
        this.source.subscribe(new SkipWithTimeObserver(o, this))
      );
    };

    return SkipWithTimeObservable;
  }(ObservableBase));

  var SkipWithTimeObserver = (function (__super__) {
    inherits(SkipWithTimeObserver, __super__);

    function SkipWithTimeObserver(o, p) {
      this._o = o;
      this._p = p;
      __super__.call(this);
    }

    SkipWithTimeObserver.prototype.next = function (x) { this._p._open && this._o.onNext(x); };
    SkipWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
    SkipWithTimeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return SkipWithTimeObserver;
  }(AbstractObserver));

  /**
   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
   * @description
   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
   *  may not execute immediately, despite the zero due time.
   *
   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
   * @param {Number} duration Duration for skipping elements from the start of the sequence.
   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
   */
  observableProto.skipWithTime = function (duration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new SkipWithTimeObservable(this, duration, scheduler);
  };

  var SkipUntilWithTimeObservable = (function (__super__) {
    inherits(SkipUntilWithTimeObservable, __super__);
    function SkipUntilWithTimeObservable(source, startTime, scheduler) {
      this.source = source;
      this._st = startTime;
      this._s = scheduler;
      __super__.call(this);
    }

    function scheduleMethod(s, state) {
      state._open = true;
    }

    SkipUntilWithTimeObservable.prototype.subscribeCore = function (o) {
      this._open = false;
      return new BinaryDisposable(
        this._s.scheduleFuture(this, this._st, scheduleMethod),
        this.source.subscribe(new SkipUntilWithTimeObserver(o, this))
      );
    };

    return SkipUntilWithTimeObservable;
  }(ObservableBase));

  var SkipUntilWithTimeObserver = (function (__super__) {
    inherits(SkipUntilWithTimeObserver, __super__);

    function SkipUntilWithTimeObserver(o, p) {
      this._o = o;
      this._p = p;
      __super__.call(this);
    }

    SkipUntilWithTimeObserver.prototype.next = function (x) { this._p._open && this._o.onNext(x); };
    SkipUntilWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
    SkipUntilWithTimeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return SkipUntilWithTimeObserver;
  }(AbstractObserver));


  /**
   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
   *
   * @examples
   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
   */
  observableProto.skipUntilWithTime = function (startTime, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new SkipUntilWithTimeObservable(this, startTime, scheduler);
  };

  /**
   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
   */
  observableProto.takeUntilWithTime = function (endTime, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    var source = this;
    return new AnonymousObservable(function (o) {
      return new BinaryDisposable(
        scheduler.scheduleFuture(o, endTime, function (_, o) { o.onCompleted(); }),
        source.subscribe(o));
    }, source);
  };

  /**
   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
   * @returns {Observable} An Observable that performs the throttle operation.
   */
  observableProto.throttle = function (windowDuration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    var duration = +windowDuration || 0;
    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var lastOnNext = 0;
      return source.subscribe(
        function (x) {
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) {
            lastOnNext = now;
            o.onNext(x);
          }
        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
      );
    }, source);
  };

  var TransduceObserver = (function (__super__) {
    inherits(TransduceObserver, __super__);
    function TransduceObserver(o, xform) {
      this._o = o;
      this._xform = xform;
      __super__.call(this);
    }

    TransduceObserver.prototype.next = function (x) {
      var res = tryCatch(this._xform['@@transducer/step']).call(this._xform, this._o, x);
      if (res === errorObj) { this._o.onError(res.e); }
    };

    TransduceObserver.prototype.error = function (e) { this._o.onError(e); };

    TransduceObserver.prototype.completed = function () {
      this._xform['@@transducer/result'](this._o);
    };

    return TransduceObserver;
  }(AbstractObserver));

  function transformForObserver(o) {
    return {
      '@@transducer/init': function() {
        return o;
      },
      '@@transducer/step': function(obs, input) {
        return obs.onNext(input);
      },
      '@@transducer/result': function(obs) {
        return obs.onCompleted();
      }
    };
  }

  /**
   * Executes a transducer to transform the observable sequence
   * @param {Transducer} transducer A transducer to execute
   * @returns {Observable} An Observable sequence containing the results from the transducer.
   */
  observableProto.transduce = function(transducer) {
    var source = this;
    return new AnonymousObservable(function(o) {
      var xform = transducer(transformForObserver(o));
      return source.subscribe(new TransduceObserver(o, xform));
    }, source);
  };

  var SwitchFirstObservable = (function (__super__) {
    inherits(SwitchFirstObservable, __super__);
    function SwitchFirstObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    SwitchFirstObservable.prototype.subscribeCore = function (o) {
      var m = new SingleAssignmentDisposable(),
        g = new CompositeDisposable(),
        state = {
          hasCurrent: false,
          isStopped: false,
          o: o,
          g: g
        };

      g.add(m);
      m.setDisposable(this.source.subscribe(new SwitchFirstObserver(state)));
      return g;
    };

    return SwitchFirstObservable;
  }(ObservableBase));

  var SwitchFirstObserver = (function(__super__) {
    inherits(SwitchFirstObserver, __super__);
    function SwitchFirstObserver(state) {
      this._s = state;
      __super__.call(this);
    }

    SwitchFirstObserver.prototype.next = function (x) {
      if (!this._s.hasCurrent) {
        this._s.hasCurrent = true;
        isPromise(x) && (x = observableFromPromise(x));
        var inner = new SingleAssignmentDisposable();
        this._s.g.add(inner);
        inner.setDisposable(x.subscribe(new InnerObserver(this._s, inner)));
      }
    };

    SwitchFirstObserver.prototype.error = function (e) {
      this._s.o.onError(e);
    };

    SwitchFirstObserver.prototype.completed = function () {
      this._s.isStopped = true;
      !this._s.hasCurrent && this._s.g.length === 1 && this._s.o.onCompleted();
    };

    inherits(InnerObserver, __super__);
    function InnerObserver(state, inner) {
      this._s = state;
      this._i = inner;
      __super__.call(this);
    }

    InnerObserver.prototype.next = function (x) { this._s.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this._s.o.onError(e); };
    InnerObserver.prototype.completed = function () {
      this._s.g.remove(this._i);
      this._s.hasCurrent = false;
      this._s.isStopped && this._s.g.length === 1 && this._s.o.onCompleted();
    };

    return SwitchFirstObserver;
  }(AbstractObserver));

  /**
   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
   * Observables that come in between subscriptions will be dropped on the floor.
   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
   */
  observableProto.switchFirst = function () {
    return new SwitchFirstObservable(this);
  };

observableProto.flatMapFirst = observableProto.exhaustMap = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).switchFirst();
};

observableProto.flatMapWithMaxConcurrent = observableProto.flatMapMaxConcurrent = function(limit, selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).merge(limit);
};

  /** Provides a set of extension methods for virtual time scheduling. */
  var VirtualTimeScheduler = Rx.VirtualTimeScheduler = (function (__super__) {
    inherits(VirtualTimeScheduler, __super__);

    /**
     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
     *
     * @constructor
     * @param {Number} initialClock Initial value for the clock.
     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
     */
    function VirtualTimeScheduler(initialClock, comparer) {
      this.clock = initialClock;
      this.comparer = comparer;
      this.isEnabled = false;
      this.queue = new PriorityQueue(1024);
      __super__.call(this);
    }

    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;

    VirtualTimeSchedulerPrototype.now = function () {
      return this.toAbsoluteTime(this.clock);
    };

    VirtualTimeSchedulerPrototype.schedule = function (state, action) {
      return this.scheduleAbsolute(state, this.clock, action);
    };

    VirtualTimeSchedulerPrototype.scheduleFuture = function (state, dueTime, action) {
      var dt = dueTime instanceof Date ?
        this.toRelativeTime(dueTime - this.now()) :
        this.toRelativeTime(dueTime);

      return this.scheduleRelative(state, dt, action);
    };

    /**
     * Adds a relative time value to an absolute time value.
     * @param {Number} absolute Absolute virtual time value.
     * @param {Number} relative Relative virtual time value to add.
     * @return {Number} Resulting absolute virtual time sum value.
     */
    VirtualTimeSchedulerPrototype.add = notImplemented;

    /**
     * Converts an absolute time to a number
     * @param {Any} The absolute time.
     * @returns {Number} The absolute time in ms
     */
    VirtualTimeSchedulerPrototype.toAbsoluteTime = notImplemented;

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @param {Number} timeSpan TimeSpan value to convert.
     * @return {Number} Corresponding relative virtual time value.
     */
    VirtualTimeSchedulerPrototype.toRelativeTime = notImplemented;

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
     * @param {Mixed} state Initial state passed to the action upon the first iteration.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed, potentially updating the state.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    VirtualTimeSchedulerPrototype.schedulePeriodic = function (state, period, action) {
      var s = new SchedulePeriodicRecursive(this, state, period, action);
      return s.start();
    };

    /**
     * Schedules an action to be executed after dueTime.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Number} dueTime Relative time after which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleRelative = function (state, dueTime, action) {
      var runAt = this.add(this.clock, dueTime);
      return this.scheduleAbsolute(state, runAt, action);
    };

    /**
     * Starts the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.start = function () {
      if (!this.isEnabled) {
        this.isEnabled = true;
        do {
          var next = this.getNext();
          if (next !== null) {
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          } else {
            this.isEnabled = false;
          }
        } while (this.isEnabled);
      }
    };

    /**
     * Stops the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.stop = function () {
      this.isEnabled = false;
    };

    /**
     * Advances the scheduler's clock to the specified time, running all work till that point.
     * @param {Number} time Absolute time to advance the scheduler's clock to.
     */
    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
      var dueToClock = this.comparer(this.clock, time);
      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
      if (dueToClock === 0) { return; }
      if (!this.isEnabled) {
        this.isEnabled = true;
        do {
          var next = this.getNext();
          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          } else {
            this.isEnabled = false;
          }
        } while (this.isEnabled);
        this.clock = time;
      }
    };

    /**
     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
     * @param {Number} time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
      var dt = this.add(this.clock, time),
          dueToClock = this.comparer(this.clock, dt);
      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
      if (dueToClock === 0) {  return; }

      this.advanceTo(dt);
    };

    /**
     * Advances the scheduler's clock by the specified relative time.
     * @param {Number} time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.sleep = function (time) {
      var dt = this.add(this.clock, time);
      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }

      this.clock = dt;
    };

    /**
     * Gets the next scheduled item to be executed.
     * @returns {ScheduledItem} The next scheduled item.
     */
    VirtualTimeSchedulerPrototype.getNext = function () {
      while (this.queue.length > 0) {
        var next = this.queue.peek();
        if (next.isCancelled()) {
          this.queue.dequeue();
        } else {
          return next;
        }
      }
      return null;
    };

    /**
     * Schedules an action to be executed at dueTime.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Number} dueTime Absolute time at which to execute the action.
     * @param {Function} action Action to be executed.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (state, dueTime, action) {
      var self = this;

      function run(scheduler, state1) {
        self.queue.remove(si);
        return action(scheduler, state1);
      }

      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
      this.queue.enqueue(si);

      return si.disposable;
    };

    return VirtualTimeScheduler;
  }(Scheduler));

  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
  Rx.HistoricalScheduler = (function (__super__) {
    inherits(HistoricalScheduler, __super__);

    /**
     * Creates a new historical scheduler with the specified initial clock value.
     * @constructor
     * @param {Number} initialClock Initial value for the clock.
     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
     */
    function HistoricalScheduler(initialClock, comparer) {
      var clock = initialClock == null ? 0 : initialClock;
      var cmp = comparer || defaultSubComparer;
      __super__.call(this, clock, cmp);
    }

    var HistoricalSchedulerProto = HistoricalScheduler.prototype;

    /**
     * Adds a relative time value to an absolute time value.
     * @param {Number} absolute Absolute virtual time value.
     * @param {Number} relative Relative virtual time value to add.
     * @return {Number} Resulting absolute virtual time sum value.
     */
    HistoricalSchedulerProto.add = function (absolute, relative) {
      return absolute + relative;
    };

    HistoricalSchedulerProto.toAbsoluteTime = function (absolute) {
      return new Date(absolute).getTime();
    };

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @memberOf HistoricalScheduler
     * @param {Number} timeSpan TimeSpan value to convert.
     * @return {Number} Corresponding relative virtual time value.
     */
    HistoricalSchedulerProto.toRelativeTime = function (timeSpan) {
      return timeSpan;
    };

    return HistoricalScheduler;
  }(Rx.VirtualTimeScheduler));

function OnNextPredicate(predicate) {
    this.predicate = predicate;
}

OnNextPredicate.prototype.equals = function (other) {
  if (other === this) { return true; }
  if (other == null) { return false; }
  if (other.kind !== 'N') { return false; }
  return this.predicate(other.value);
};

function OnErrorPredicate(predicate) {
  this.predicate = predicate;
}

OnErrorPredicate.prototype.equals = function (other) {
  if (other === this) { return true; }
  if (other == null) { return false; }
  if (other.kind !== 'E') { return false; }
  return this.predicate(other.error);
};

var ReactiveTest = Rx.ReactiveTest = {
  /** Default virtual time used for creation of observable sequences in unit tests. */
  created: 100,
  /** Default virtual time used to subscribe to observable sequences in unit tests. */
  subscribed: 200,
  /** Default virtual time used to dispose subscriptions in unit tests. */
  disposed: 1000,

  /**
   * Factory method for an OnNext notification record at a given time with a given value or a predicate function.
   *
   * 1 - ReactiveTest.onNext(200, 42);
   * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });
   *
   * @param ticks Recorded virtual time the OnNext notification occurs.
   * @param value Recorded value stored in the OnNext notification or a predicate.
   * @return Recorded OnNext notification.
   */
  onNext: function (ticks, value) {
    return typeof value === 'function' ?
      new Recorded(ticks, new OnNextPredicate(value)) :
      new Recorded(ticks, Notification.createOnNext(value));
  },
  /**
   * Factory method for an OnError notification record at a given time with a given error.
   *
   * 1 - ReactiveTest.onNext(200, new Error('error'));
   * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });
   *
   * @param ticks Recorded virtual time the OnError notification occurs.
   * @param exception Recorded exception stored in the OnError notification.
   * @return Recorded OnError notification.
   */
  onError: function (ticks, error) {
    return typeof error === 'function' ?
      new Recorded(ticks, new OnErrorPredicate(error)) :
      new Recorded(ticks, Notification.createOnError(error));
  },
  /**
   * Factory method for an OnCompleted notification record at a given time.
   *
   * @param ticks Recorded virtual time the OnCompleted notification occurs.
   * @return Recorded OnCompleted notification.
   */
  onCompleted: function (ticks) {
    return new Recorded(ticks, Notification.createOnCompleted());
  },
  /**
   * Factory method for a subscription record based on a given subscription and disposal time.
   *
   * @param start Virtual time indicating when the subscription was created.
   * @param end Virtual time indicating when the subscription was disposed.
   * @return Subscription object.
   */
  subscribe: function (start, end) {
    return new Subscription(start, end);
  }
};

  /**
   * Creates a new object recording the production of the specified value at the given virtual time.
   *
   * @constructor
   * @param {Number} time Virtual time the value was produced on.
   * @param {Mixed} value Value that was produced.
   * @param {Function} comparer An optional comparer.
   */
  var Recorded = Rx.Recorded = function (time, value, comparer) {
    this.time = time;
    this.value = value;
    this.comparer = comparer || defaultComparer;
  };

  /**
   * Checks whether the given recorded object is equal to the current instance.
   *
   * @param {Recorded} other Recorded object to check for equality.
   * @returns {Boolean} true if both objects are equal; false otherwise.
   */
  Recorded.prototype.equals = function (other) {
    return this.time === other.time && this.comparer(this.value, other.value);
  };

  /**
   * Returns a string representation of the current Recorded value.
   *
   * @returns {String} String representation of the current Recorded value.
   */
  Recorded.prototype.toString = function () {
    return this.value.toString() + '@' + this.time;
  };

  /**
   * Creates a new subscription object with the given virtual subscription and unsubscription time.
   *
   * @constructor
   * @param {Number} subscribe Virtual time at which the subscription occurred.
   * @param {Number} unsubscribe Virtual time at which the unsubscription occurred.
   */
  var Subscription = Rx.Subscription = function (start, end) {
    this.subscribe = start;
    this.unsubscribe = end || Number.MAX_VALUE;
  };

  /**
   * Checks whether the given subscription is equal to the current instance.
   * @param other Subscription object to check for equality.
   * @returns {Boolean} true if both objects are equal; false otherwise.
   */
  Subscription.prototype.equals = function (other) {
    return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;
  };

  /**
   * Returns a string representation of the current Subscription value.
   * @returns {String} String representation of the current Subscription value.
   */
  Subscription.prototype.toString = function () {
    return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';
  };

  var MockDisposable = Rx.MockDisposable = function (scheduler) {
    this.scheduler = scheduler;
    this.disposes = [];
    this.disposes.push(this.scheduler.clock);
  };

  MockDisposable.prototype.dispose = function () {
    this.disposes.push(this.scheduler.clock);
  };

  var MockObserver = (function (__super__) {
    inherits(MockObserver, __super__);

    function MockObserver(scheduler) {
      __super__.call(this);
      this.scheduler = scheduler;
      this.messages = [];
    }

    var MockObserverPrototype = MockObserver.prototype;

    MockObserverPrototype.onNext = function (value) {
      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));
    };

    MockObserverPrototype.onError = function (e) {
      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(e)));
    };

    MockObserverPrototype.onCompleted = function () {
      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));
    };

    return MockObserver;
  })(Observer);

  function MockPromise(scheduler, messages) {
    var self = this;
    this.scheduler = scheduler;
    this.messages = messages;
    this.subscriptions = [];
    this.observers = [];
    for (var i = 0, len = this.messages.length; i < len; i++) {
      var message = this.messages[i],
          notification = message.value;
      (function (innerNotification) {
        scheduler.scheduleAbsolute(null, message.time, function () {
          var obs = self.observers.slice(0);

          for (var j = 0, jLen = obs.length; j < jLen; j++) {
            innerNotification.accept(obs[j]);
          }
          return disposableEmpty;
        });
      })(notification);
    }
  }

  MockPromise.prototype.then = function (onResolved, onRejected) {
    var self = this;

    this.subscriptions.push(new Subscription(this.scheduler.clock));
    var index = this.subscriptions.length - 1;

    var newPromise;

    var observer = Rx.Observer.create(
      function (x) {
        var retValue = onResolved(x);
        if (retValue && typeof retValue.then === 'function') {
          newPromise = retValue;
        } else {
          var ticks = self.scheduler.clock;
          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);
        }
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      },
      function (err) {
        onRejected(err);
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      }
    );
    this.observers.push(observer);

    return newPromise || new MockPromise(this.scheduler, this.messages);
  };

  var HotObservable = (function (__super__) {
    inherits(HotObservable, __super__);

    function HotObservable(scheduler, messages) {
      __super__.call(this);
      var message, notification, observable = this;
      this.scheduler = scheduler;
      this.messages = messages;
      this.subscriptions = [];
      this.observers = [];
      for (var i = 0, len = this.messages.length; i < len; i++) {
        message = this.messages[i];
        notification = message.value;
        (function (innerNotification) {
          scheduler.scheduleAbsolute(null, message.time, function () {
            var obs = observable.observers.slice(0);

            for (var j = 0, jLen = obs.length; j < jLen; j++) {
              innerNotification.accept(obs[j]);
            }
            return disposableEmpty;
          });
        })(notification);
      }
    }

    HotObservable.prototype._subscribe = function (o) {
      var observable = this;
      this.observers.push(o);
      this.subscriptions.push(new Subscription(this.scheduler.clock));
      var index = this.subscriptions.length - 1;
      return disposableCreate(function () {
        var idx = observable.observers.indexOf(o);
        observable.observers.splice(idx, 1);
        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
      });
    };

    return HotObservable;
  })(Observable);

  var ColdObservable = (function (__super__) {
    inherits(ColdObservable, __super__);

    function ColdObservable(scheduler, messages) {
      __super__.call(this);
      this.scheduler = scheduler;
      this.messages = messages;
      this.subscriptions = [];
    }

    ColdObservable.prototype._subscribe = function (o) {
      var message, notification, observable = this;
      this.subscriptions.push(new Subscription(this.scheduler.clock));
      var index = this.subscriptions.length - 1;
      var d = new CompositeDisposable();
      for (var i = 0, len = this.messages.length; i < len; i++) {
        message = this.messages[i];
        notification = message.value;
        (function (innerNotification) {
          d.add(observable.scheduler.scheduleRelative(null, message.time, function () {
            innerNotification.accept(o);
            return disposableEmpty;
          }));
        })(notification);
      }
      return disposableCreate(function () {
        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
        d.dispose();
      });
    };

    return ColdObservable;
  })(Observable);

  /** Virtual time scheduler used for testing applications and libraries built using Reactive Extensions. */
  Rx.TestScheduler = (function (__super__) {
    inherits(TestScheduler, __super__);

    function baseComparer(x, y) {
      return x > y ? 1 : (x < y ? -1 : 0);
    }

    function TestScheduler() {
      __super__.call(this, 0, baseComparer);
    }

    /**
     * Schedules an action to be executed at the specified virtual time.
     *
     * @param state State passed to the action to be executed.
     * @param dueTime Absolute virtual time at which to execute the action.
     * @param action Action to be executed.
     * @return Disposable object used to cancel the scheduled action (best effort).
     */
    TestScheduler.prototype.scheduleAbsolute = function (state, dueTime, action) {
      dueTime <= this.clock && (dueTime = this.clock + 1);
      return __super__.prototype.scheduleAbsolute.call(this, state, dueTime, action);
    };
    /**
     * Adds a relative virtual time to an absolute virtual time value.
     *
     * @param absolute Absolute virtual time value.
     * @param relative Relative virtual time value to add.
     * @return Resulting absolute virtual time sum value.
     */
    TestScheduler.prototype.add = function (absolute, relative) {
      return absolute + relative;
    };
    /**
     * Converts the absolute virtual time value to a DateTimeOffset value.
     *
     * @param absolute Absolute virtual time value to convert.
     * @return Corresponding DateTimeOffset value.
     */
    TestScheduler.prototype.toAbsoluteTime = function (absolute) {
      return new Date(absolute).getTime();
    };
    /**
     * Converts the TimeSpan value to a relative virtual time value.
     *
     * @param timeSpan TimeSpan value to convert.
     * @return Corresponding relative virtual time value.
     */
    TestScheduler.prototype.toRelativeTime = function (timeSpan) {
      return timeSpan;
    };
    /**
     * Starts the test scheduler and uses the specified virtual times to invoke the factory function, subscribe to the resulting sequence, and dispose the subscription.
     *
     * @param create Factory method to create an observable sequence.
     * @param created Virtual time at which to invoke the factory to create an observable sequence.
     * @param subscribed Virtual time at which to subscribe to the created observable sequence.
     * @param disposed Virtual time at which to dispose the subscription.
     * @return Observer with timestamped recordings of notification messages that were received during the virtual time window when the subscription to the source sequence was active.
     */
    TestScheduler.prototype.startScheduler = function (createFn, settings) {
      settings || (settings = {});
      settings.created == null && (settings.created = ReactiveTest.created);
      settings.subscribed == null && (settings.subscribed = ReactiveTest.subscribed);
      settings.disposed == null && (settings.disposed = ReactiveTest.disposed);

      var observer = this.createObserver(), source, subscription;

      this.scheduleAbsolute(null, settings.created, function () {
        source = createFn();
        return disposableEmpty;
      });

      this.scheduleAbsolute(null, settings.subscribed, function () {
        subscription = source.subscribe(observer);
        return disposableEmpty;
      });

      this.scheduleAbsolute(null, settings.disposed, function () {
        subscription.dispose();
        return disposableEmpty;
      });

      this.start();

      return observer;
    };

    /**
     * Creates a hot observable using the specified timestamped notification messages either as an array or arguments.
     * @param messages Notifications to surface through the created sequence at their specified absolute virtual times.
     * @return Hot observable sequence that can be used to assert the timing of subscriptions and notifications.
     */
    TestScheduler.prototype.createHotObservable = function () {
      var len = arguments.length, args;
      if (Array.isArray(arguments[0])) {
        args = arguments[0];
      } else {
        args = new Array(len);
        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }
      }
      return new HotObservable(this, args);
    };

    /**
     * Creates a cold observable using the specified timestamped notification messages either as an array or arguments.
     * @param messages Notifications to surface through the created sequence at their specified virtual time offsets from the sequence subscription time.
     * @return Cold observable sequence that can be used to assert the timing of subscriptions and notifications.
     */
    TestScheduler.prototype.createColdObservable = function () {
      var len = arguments.length, args;
      if (Array.isArray(arguments[0])) {
        args = arguments[0];
      } else {
        args = new Array(len);
        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }
      }
      return new ColdObservable(this, args);
    };

    /**
     * Creates a resolved promise with the given value and ticks
     * @param {Number} ticks The absolute time of the resolution.
     * @param {Any} value The value to yield at the given tick.
     * @returns {MockPromise} A mock Promise which fulfills with the given value.
     */
    TestScheduler.prototype.createResolvedPromise = function (ticks, value) {
      return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);
    };

    /**
     * Creates a rejected promise with the given reason and ticks
     * @param {Number} ticks The absolute time of the resolution.
     * @param {Any} reason The reason for rejection to yield at the given tick.
     * @returns {MockPromise} A mock Promise which rejects with the given reason.
     */
    TestScheduler.prototype.createRejectedPromise = function (ticks, reason) {
      return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);
    };

    /**
     * Creates an observer that records received notification messages and timestamps those.
     * @return Observer that can be used to assert the timing of received notifications.
     */
    TestScheduler.prototype.createObserver = function () {
      return new MockObserver(this);
    };

    return TestScheduler;
  })(VirtualTimeScheduler);

  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
    inherits(AnonymousObservable, __super__);

    // Fix subscriber to check for undefined or function returned to decorate as Disposable
    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], self = state[1];
      var sub = tryCatch(self.__subscribe).call(self, ado);
      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
      ado.setDisposable(fixSubscriber(sub));
    }

    function AnonymousObservable(subscribe, parent) {
      this.source = parent;
      this.__subscribe = subscribe;
      __super__.call(this);
    }

    AnonymousObservable.prototype._subscribe = function (o) {
      var ado = new AutoDetachObserver(o), state = [ado, this];

      if (currentThreadScheduler.scheduleRequired()) {
        currentThreadScheduler.schedule(state, setDisposable);
      } else {
        setDisposable(null, state);
      }
      return ado;
    };

    return AnonymousObservable;

  }(Observable));

  var AutoDetachObserver = (function (__super__) {
    inherits(AutoDetachObserver, __super__);

    function AutoDetachObserver(observer) {
      __super__.call(this);
      this.observer = observer;
      this.m = new SingleAssignmentDisposable();
    }

    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

    AutoDetachObserverPrototype.next = function (value) {
      var result = tryCatch(this.observer.onNext).call(this.observer, value);
      if (result === errorObj) {
        this.dispose();
        thrower(result.e);
      }
    };

    AutoDetachObserverPrototype.error = function (err) {
      var result = tryCatch(this.observer.onError).call(this.observer, err);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.completed = function () {
      var result = tryCatch(this.observer.onCompleted).call(this.observer);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };

    AutoDetachObserverPrototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.m.dispose();
    };

    return AutoDetachObserver;
  }(AbstractObserver));

  var UnderlyingObservable = (function (__super__) {
    inherits(UnderlyingObservable, __super__);
    function UnderlyingObservable(m, u) {
      this._m = m;
      this._u = u;
      __super__.call(this);
    }

    UnderlyingObservable.prototype.subscribeCore = function (o) {
      return new BinaryDisposable(this._m.getDisposable(), this._u.subscribe(o));
    };

    return UnderlyingObservable;
  }(ObservableBase));

  var GroupedObservable = (function (__super__) {
    inherits(GroupedObservable, __super__);
    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
      __super__.call(this);
      this.key = key;
      this.underlyingObservable = !mergedDisposable ?
        underlyingObservable :
        new UnderlyingObservable(mergedDisposable, underlyingObservable);
    }

    GroupedObservable.prototype._subscribe = function (o) {
      return this.underlyingObservable.subscribe(o);
    };

    return GroupedObservable;
  }(Observable));

  /**
   *  Represents an object that is both an observable sequence as well as an observer.
   *  Each notification is broadcasted to all subscribed observers.
   */
  var Subject = Rx.Subject = (function (__super__) {
    inherits(Subject, __super__);
    function Subject() {
      __super__.call(this);
      this.isDisposed = false;
      this.isStopped = false;
      this.observers = [];
      this.hasError = false;
    }

    addProperties(Subject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(o);
          return new InnerSubscription(this, o);
        }
        if (this.hasError) {
          o.onError(this.error);
          return disposableEmpty;
        }
        o.onCompleted();
        return disposableEmpty;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onCompleted();
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (!this.isStopped) {
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    /**
     * Creates a subject from the specified observer and observable.
     * @param {Observer} observer The observer used to send messages to the subject.
     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
     * @returns {Subject} Subject implemented using the given observer and observable.
     */
    Subject.create = function (observer, observable) {
      return new AnonymousSubject(observer, observable);
    };

    return Subject;
  }(Observable));

  /**
   *  Represents the result of an asynchronous operation.
   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
   */
  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {
    inherits(AsyncSubject, __super__);

    /**
     * Creates a subject that can only receive one value and that value is cached for all future observations.
     * @constructor
     */
    function AsyncSubject() {
      __super__.call(this);
      this.isDisposed = false;
      this.isStopped = false;
      this.hasValue = false;
      this.observers = [];
      this.hasError = false;
    }

    addProperties(AsyncSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);

        if (!this.isStopped) {
          this.observers.push(o);
          return new InnerSubscription(this, o);
        }

        if (this.hasError) {
          o.onError(this.error);
        } else if (this.hasValue) {
          o.onNext(this.value);
          o.onCompleted();
        } else {
          o.onCompleted();
        }

        return disposableEmpty;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
       */
      onCompleted: function () {
        var i, len;
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          var os = cloneArray(this.observers), len = os.length;

          if (this.hasValue) {
            for (i = 0; i < len; i++) {
              var o = os[i];
              o.onNext(this.value);
              o.onCompleted();
            }
          } else {
            for (i = 0; i < len; i++) {
              os[i].onCompleted();
            }
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the error.
       * @param {Mixed} error The Error to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.hasError = true;
          this.error = error;

          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
       * @param {Mixed} value The value to store in the subject.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        this.hasValue = true;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.error = null;
        this.value = null;
      }
    });

    return AsyncSubject;
  }(Observable));

  /**
   *  Represents a value that changes over time.
   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
   */
  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
    inherits(BehaviorSubject, __super__);
    function BehaviorSubject(value) {
      __super__.call(this);
      this.value = value;
      this.observers = [];
      this.isDisposed = false;
      this.isStopped = false;
      this.hasError = false;
    }

    addProperties(BehaviorSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(o);
          o.onNext(this.value);
          return new InnerSubscription(this, o);
        }
        if (this.hasError) {
          o.onError(this.error);
        } else {
          o.onCompleted();
        }
        return disposableEmpty;
      },
      /**
       * Gets the current value or throws an exception.
       * Value is frozen after onCompleted is called.
       * After onError is called always throws the specified exception.
       * An exception is always thrown after dispose is called.
       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
       */
      getValue: function () {
        checkDisposed(this);
        if (this.hasError) { thrower(this.error); }
        return this.value;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onCompleted();
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.hasError = true;
        this.error = error;

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onError(error);
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onNext(value);
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.value = null;
        this.error = null;
      }
    });

    return BehaviorSubject;
  }(Observable));

  /**
   * Represents an object that is both an observable sequence as well as an observer.
   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
   */
  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {

    var maxSafeInteger = Math.pow(2, 53) - 1;

    function createRemovableDisposable(subject, observer) {
      return disposableCreate(function () {
        observer.dispose();
        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
      });
    }

    inherits(ReplaySubject, __super__);

    /**
     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
     */
    function ReplaySubject(bufferSize, windowSize, scheduler) {
      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
      this.scheduler = scheduler || currentThreadScheduler;
      this.q = [];
      this.observers = [];
      this.isStopped = false;
      this.isDisposed = false;
      this.hasError = false;
      this.error = null;
      __super__.call(this);
    }

    addProperties(ReplaySubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        var so = new ScheduledObserver(this.scheduler, o), subscription = createRemovableDisposable(this, so);

        this._trim(this.scheduler.now());
        this.observers.push(so);

        for (var i = 0, len = this.q.length; i < len; i++) {
          so.onNext(this.q[i].value);
        }

        if (this.hasError) {
          so.onError(this.error);
        } else if (this.isStopped) {
          so.onCompleted();
        }

        so.ensureActive();
        return subscription;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      _trim: function (now) {
        while (this.q.length > this.bufferSize) {
          this.q.shift();
        }
        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
          this.q.shift();
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        var now = this.scheduler.now();
        this.q.push({ interval: now, value: value });
        this._trim(now);

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onNext(value);
          observer.ensureActive();
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.error = error;
        this.hasError = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onError(error);
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onCompleted();
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    return ReplaySubject;
  }(Observable));

  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
    inherits(AnonymousSubject, __super__);
    function AnonymousSubject(observer, observable) {
      this.observer = observer;
      this.observable = observable;
      __super__.call(this);
    }

    addProperties(AnonymousSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        return this.observable.subscribe(o);
      },
      onCompleted: function () {
        this.observer.onCompleted();
      },
      onError: function (error) {
        this.observer.onError(error);
      },
      onNext: function (value) {
        this.observer.onNext(value);
      }
    });

    return AnonymousSubject;
  }(Observable));

  /**
  * Used to pause and resume streams.
  */
  Rx.Pauser = (function (__super__) {
    inherits(Pauser, __super__);
    function Pauser() {
      __super__.call(this);
    }

    /**
     * Pauses the underlying sequence.
     */
    Pauser.prototype.pause = function () { this.onNext(false); };

    /**
    * Resumes the underlying sequence.
    */
    Pauser.prototype.resume = function () { this.onNext(true); };

    return Pauser;
  }(Subject));

  if (true) {
    root.Rx = Rx;

    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return Rx;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = Rx).Rx = Rx;
    } else {
      freeExports.Rx = Rx;
    }
  } else {
    // in a browser or Rhino
    root.Rx = Rx;
  }

  // All code before this point will be filtered from stack traces.
  var rEndingLine = captureLine();

}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)(module), __webpack_require__(22), __webpack_require__(29)))

/***/ }),

/***/ 23:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(18);
var Util = __webpack_require__(10);
var Vis = __webpack_require__(16);
var tsmonad_1 = __webpack_require__(37);
var util_1 = __webpack_require__(10);
var $$NODES_COLOR = "mediumturquoise";
exports.$$BACKGROUND_COLOR = "whitesmoke";
exports.$A1 = document.getElementById('node-label_action');
exports.$A2 = document.getElementById('saveButton_action');
exports.$A3 = document.getElementById('cancelButton_action');
exports.$A4 = document.getElementById('network-popUp_node');
exports.$AGENT_LABEL = document.getElementById('id_of_input_for_arrow_backup').value;
exports.$CONFIG_ACTION = document.getElementById('config_action');
exports.$CONTAINER_ACTION = document.getElementById('network_action');
function makeRefl($agt, $listWorld) {
    return _.chain(Util.cartesianProduct([$agt, $listWorld]))
        .map(function (pair) { return { "agent": _.nth(pair, 0), "from": _.nth(pair, 1), "to": _.nth(pair, 1) }; })
        .value();
}
exports.AGENT_COLOR = [{ agent: "a", color: "orangered" }, { agent: "b", color: "royalblue" }];
exports.NODES = new Vis.DataSet();
exports.EDGES = new Vis.DataSet();
var ActionModel_Skip = {
    "name": "Skip",
    "domain": ["e1"],
    "relation": [
        { "agent": "a", "from": "e1", "to": "e1" }
    ],
    "precondition": [
        { "from": "e1", "to": "top" }
    ],
    "comment": "top"
};
var ActionModel_Crash = {
    "name": "Crash",
    "domain": ["e0"],
    "relation": [
        { "agent": "a", "from": "e0", "to": "e0" }
    ],
    "precondition": [
        { "from": "e0", "to": "bot" }
    ],
    "comment": "bot"
};
var ActionModel_Reada = {
    "name": "Reada",
    "domain": ["e0", "e1"],
    "relation": [
        { "agent": "a", "from": "e0", "to": "e0" },
        { "agent": "a", "from": "e1", "to": "e1" },
        { "agent": "b", "from": "e0", "to": "e0" },
        { "agent": "b", "from": "e1", "to": "e1" },
        { "agent": "b", "from": "e0", "to": "e1" },
        { "agent": "b", "from": "e1", "to": "e0" }
    ],
    "precondition": [
        { "from": "e0", "to": "~p" },
        { "from": "e1", "to": "p" }
    ],
    "comment": "Ann (agent a) reads the letter containing information of p in the presence of Bill (agent b). [Dit, p142]"
};
var ActionModel_MayReada = function () {
    var domOfmayRead = ["e0", "e1", "e9"];
    var reflOfmayRead = makeRefl(["a", "b"], domOfmayRead);
    return {
        "name": "MayReada",
        "domain": domOfmayRead,
        "relation": reflOfmayRead.concat([
            { "agent": "b", "from": "e0", "to": "e1" },
            { "agent": "b", "from": "e1", "to": "e0" },
            { "agent": "b", "from": "e0", "to": "e9" },
            { "agent": "b", "from": "e9", "to": "e0" },
            { "agent": "b", "from": "e9", "to": "e1" },
            { "agent": "b", "from": "e1", "to": "e9" },
        ]),
        "precondition": [
            { "from": "e0", "to": "~p" },
            { "from": "e1", "to": "p" },
            { "from": "e9", "to": "top" },
        ],
        "comment": "Ann (agent a) reads the letter containing information of p in the presence of Bill (agent b). [Dit, p142]"
    };
}();
var ActionModel_MayReadb = function () {
    var domOfmayRead = ["e0", "e1", "e9"];
    var reflOfmayRead = makeRefl(["a", "b"], domOfmayRead);
    return {
        "name": "MayReadb",
        "domain": domOfmayRead,
        "relation": reflOfmayRead.concat([
            { "agent": "a", "from": "e0", "to": "e1" },
            { "agent": "a", "from": "e1", "to": "e0" },
            { "agent": "a", "from": "e0", "to": "e9" },
            { "agent": "a", "from": "e9", "to": "e0" },
            { "agent": "a", "from": "e9", "to": "e1" },
            { "agent": "a", "from": "e1", "to": "e9" },
        ]),
        "precondition": [
            { "from": "e0", "to": "~p" },
            { "from": "e1", "to": "p" },
            { "from": "e9", "to": "top" },
        ],
        "comment": "agent b may read the letter."
    };
}();
exports.ACTION_DATA = [
    ActionModel_Skip,
    ActionModel_Crash,
    ActionModel_Reada,
];
function publicAnnouncement($agts, $f) {
    var pubName = "pub(" + $f + ")";
    var pubDomain = ["pub"];
    var pubRel = _.map($agts, function (x) { return { "agent": x, "from": "pub", "to": "pub" }; });
    var pubPre = [{ "from": "pub", "to": $f }];
    return {
        "name": pubName,
        "domain": pubDomain,
        "relation": pubRel,
        "precondition": pubPre,
        "comment": "public announcement of " + $f
    };
}
exports.OPTION_ACTION = {
    physics: {
        barnesHut: {
            gravitationalConstant: -2000,
            centralGravity: 0.2,
            springLength: 100,
            springConstant: 0.05,
        }
    },
    locales: {
        en: {
            edit: 'Edit',
            del: 'Delete selected',
            back: 'Back',
            addNode: 'Add State',
            addEdge: 'Add Arrow of&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; ',
            editNode: 'Edit State',
            editEdge: 'Edit Arrow',
            addDescription: 'Click in an empty space to place a new state.',
            edgeDescription: 'Click on a state and drag the arrow to another state to connect them.',
            editEdgeDescription: 'Click on the control points and drag them to a state to connect to it.',
            createEdgeError: 'Cannot link arrows to a cluster.',
            deleteClusterError: 'Clusters cannot be deleted.',
            editClusterError: 'Clusters cannot be edited.'
        }
    },
    nodes: {
        shape: 'ellipse',
        size: 15,
        color: $$NODES_COLOR,
        font: {
            face: 'Comic Sans MS',
        },
    },
    edges: {
        arrows: 'to',
        smooth: false
    },
    layout: {
        hierarchical: false
    },
};
function agColor($ag, $AGENT_COLOR) {
    var gg = function () { return _.map(exports.AGENT_COLOR, function (x) { return x.agent; }); };
    if (!_.includes(gg(), $ag)) {
        $AGENT_COLOR.push({ agent: $ag, color: Util.colorGen() });
    }
    var ff = function (x) { if (x.agent === $ag) {
        return x.color;
    } };
    return _($AGENT_COLOR)
        .map(ff)
        .compact()
        .head();
}
exports.agColor = agColor;
function change_global_NODES_EDGES_update($nodes, $edges) {
    exports.EDGES.remove(exports.EDGES.getIds());
    exports.NODES.remove(exports.NODES.getIds());
    exports.NODES.update($nodes);
    exports.EDGES.update($edges);
}
function $id_of_input_for_arrow_backup() {
    var _a = document.getElementById('id_of_input_for_arrow_backup');
    return _a.value;
}
exports.$id_of_input_for_arrow_backup = $id_of_input_for_arrow_backup;
function watchRemoveNodefunction($data, $callback, $nodes, $edges) {
    var _arrayEdges = $edges.get();
    var _selectednode = _.head($data.nodes);
    var _ff = function (x) {
        var _a = x.from === _selectednode;
        var _b = x.to === _selectednode;
        var _c = x.id;
        _a || _b ? $edges.remove(_c) : undefined;
    };
    $nodes.remove(_selectednode);
    _.forEach(_arrayEdges, _ff);
    nodeEdge2writeTopPanel($nodes, $edges);
}
exports.watchRemoveNodefunction = watchRemoveNodefunction;
function watchRemoveEdgeFunction($data, $callback, $nodes, $edges) {
    var _selectedEdge = _.head($data.edges);
    $edges.remove(_selectedEdge);
    nodeEdge2writeTopPanel($nodes, $edges);
}
exports.watchRemoveEdgeFunction = watchRemoveEdgeFunction;
function watchAddNodefunction($nod, $func, $nodes, $edges, $label_action, $saveButton_action, $cancelButton_action, $popUp_node) {
    var clearPopUp_action = function () {
        $saveButton_action.onclick = null;
        $cancelButton_action.onclick = null;
        $popUp_node.style.display = 'none';
    };
    var saveData_action = function ($data, $callback) {
        $data.label = document.getElementById('node-label_action').value;
        var _domain2 = _.map($nodes.get(), function (x) { return x.label; });
        $data.id = $data.label;
        if (_domain2.indexOf($data.label) === -1) {
            $nodes.add($data);
            nodeEdge2writeTopPanel($nodes, $edges);
            clearPopUp_action();
            $callback($data);
        }
        else {
            alert("The state '" + $data.label + "' already exists. Change the name.");
        }
    };
    Util.writeDOM_value('#node-label_action')($nod.label);
    $saveButton_action.onclick = saveData_action.bind(this, $nod, $func);
    $cancelButton_action.onclick = clearPopUp_action.bind(null);
    $popUp_node.style.display = 'block';
}
exports.watchAddNodefunction = watchAddNodefunction;
function watchAddEdgefunction($rel, $func, $nodes, $edges, $agent) {
    var agtInput = $agent;
    var addingArrow = $rel.from + "_" + $rel.to + "_" + agtInput;
    var addEdge_checked = function () {
        $edges.add({
            from: $rel.from,
            to: $rel.to,
            label: agtInput,
            color: agColor(agtInput, exports.AGENT_COLOR),
            id: addingArrow
        });
    };
    if (!_.includes($edges.getIds(), addingArrow)) {
        addEdge_checked();
        nodeEdge2writeTopPanel($nodes, $edges);
        $func($rel);
    }
    else {
        alert("The arrow of 'agent " + agtInput + " from " + $rel.from + " to " + $rel.to + "' already exists. Change the name.");
    }
}
exports.watchAddEdgefunction = watchAddEdgefunction;
function overlay4action($ACTION_LIST_NAME) {
    $('#input_formula').overlay([
        {
            match: $ACTION_LIST_NAME,
            css: {
                'background-color': '#91fdfc'
            }
        }
    ]);
}
exports.overlay4action = overlay4action;
function rel2anotherRel($rel) {
    var customizer = function (x, y) {
        if (_.isArray(x)) {
            return _.uniq(x.concat(y));
        }
        else {
            return undefined;
        }
    };
    var ff = function (r) {
        return {
            agent: r.agent,
            relation: ["(" + r.from + "," + r.to + ")"]
        };
    };
    var bundleRel = function (x) {
        var gg = function (z, w) { return _.mergeWith(z, w, customizer); };
        return _.reduce(x, gg, {});
    };
    return _.chain($rel)
        .map(ff)
        .groupBy('agent')
        .sortBy('agent')
        .map(bundleRel)
        .value();
}
exports.rel2anotherRel = rel2anotherRel;
function actionObject2string($actionModel) {
    var _name = $actionModel.name;
    var _domain = $actionModel.domain;
    var _relation = $actionModel.relation;
    var _precondition = $actionModel.precondition;
    var _comment = $actionModel.comment;
    var _relation2 = rel2anotherRel(_relation);
    var _amname = util_1.string2number(_name);
    var h = "<li>" +
        "<div class=\"btn-group model-title\" data-toggle=\"buttons\">" +
        ("<input value=\"" + _name + "\" type=\"button\" class=\"panel_in_panel3 btn btn-danger btn-danger-overwrite btn-xs\">") +
        ("<input value=\"show graph\" type=\"button\" class=\"btn btn-info btn-info-overwrite btn-xs see_graph_" + _amname + "111\">") +
        "</div>" +
        "<div class=\"close_panel action_list_panel\" style=\"display:none\">" +
        "<ul class=\"css_border_left\">" +
        "<li class='class_name_of_action'>Name of Action Model " +
        ("<p>" + _name + "</p>") +
        "</li>" +
        "<li>Domain" +
        ("<p>{" + _domain + "}</p>") +
        "</li>";
    h += _.map(_relation2, function (x) {
        return "<li><span style=\"color:" + agColor(x.agent, exports.AGENT_COLOR) + "\">Relation of " + x.agent + " </span><p style=\"margin-left:1em;\"> { " + x.relation.join(" , ") + " }</p></li>";
    }).join(" ");
    h += "<li>Precondition:<ul>" +
        _.map(_precondition, function (x) { return "<li>pre( <span>" + x.from + "</span> ) = <p style=\"margin-left:1em;\">" + x.to + "</p></li>"; }).join(" ") +
        "</ul></li>";
    h += "<li>Comment <p>" + _comment + "</p></li>" +
        "</ul>" +
        "</div>" +
        "</li>";
    return h;
}
exports.actionObject2string = actionObject2string;
function edges2html($edge) {
    var _arrayEdges = $edge.get();
    var _arrayEdges2 = _.map(_arrayEdges, function (x) {
        return { agent: x.label, from: x.from, to: x.to };
    });
    return (_arrayEdges2);
}
exports.edges2html = edges2html;
function edges2relation($edge) {
    var _arrayEdges = $edge.get();
    var _arrayEdges2 = _.map(_arrayEdges, function (x) {
        return { agent: x.label, from: x.from, to: x.to };
    });
    return _arrayEdges2;
}
exports.edges2relation = edges2relation;
function amRelation2html($edge) {
    var _ff = function (k) {
        return "<li>Relation of <span class='textarea4agents'>" + k.agent + "</span>: <br>" +
            "{" +
            "<span class='textarea4relations' id='id_text_textarea4relations_for_" + k.agent + "_action'  cols='35' rows='3'>" +
            _.join((k.relation), ", ") +
            "</span>" +
            "}" +
            "</li>";
    };
    var _html = _.chain(rel2anotherRel($edge))
        .map(_ff)
        .uniq()
        .join(' ')
        .value();
    return _html;
}
exports.amRelation2html = amRelation2html;
function nodes2htmlPrecondition($dom) {
    var _arrayNodes = $dom.get().map(function (x) { return x.label; });
    return amDomain2htmlPrecondition(_arrayNodes);
}
exports.nodes2htmlPrecondition = nodes2htmlPrecondition;
function amDomain2htmlPrecondition(dom) {
    $('#action_precondition').empty();
    var _ff = function (x) {
        return "<li class='classOfPrecondition'>pre(<span class='color_text_panel'>" + x + "</span>) = " +
            "<input type='text' value='top' class='precondition4state input_width'>" +
            "</input>" +
            "</li>";
    };
    var _html = _(dom).map(_ff).join(" ");
    return _html;
}
exports.amDomain2htmlPrecondition = amDomain2htmlPrecondition;
function nodeEdge2writeTopPanel($nodes, $edges) {
    Util.writeDOM_html("#number_of_domain")(nodes2string($nodes));
    Util.writeDOM_html('#action_relation')(amRelation2html(edges2html($edges)));
    $("#action_precondition").append(nodes2htmlPrecondition($nodes));
}
exports.nodeEdge2writeTopPanel = nodeEdge2writeTopPanel;
function actionObject2writeTopPanel($act) {
    Util.writeDOM_value('#form2_action')($act.name);
    Util.writeDOM_html('#actionNameOnGraph')($act.name);
    $('#number_of_domain').empty();
    Util.writeDOM_html("#number_of_domain")($act.domain.join(" , "));
    Util.writeDOM_html("#action_relation")(amRelation2html($act.relation));
    $("#action_precondition").append(amDomain2htmlPrecondition($act.domain));
    $('#textarea_comment').val($act.comment);
}
exports.actionObject2writeTopPanel = actionObject2writeTopPanel;
function actionObject2writeComposePanel(act) {
    $('#composedAction').css('display', 'block');
    Util.writeDOM_value('#comp_form2_action')(act.name);
    $('#comp_number_of_domain').empty();
    Util.writeDOM_html("#comp_number_of_domain")(act.domain.join(" , "));
    Util.writeDOM_html("#comp_action_relation")(amRelation2html(act.relation));
    $('#comp_action_precondition').empty();
    _.map(act.precondition, function (x) {
        return $('#comp_action_precondition').append("<li> pre(" + x.from + ")=" + x.to + "</li>");
    });
    $('#comp_textarea_comment').val(act.comment);
}
exports.actionObject2writeComposePanel = actionObject2writeComposePanel;
function addAction2compositionSelect(name, $ready) {
    $("#select_composition_action1").append($('<option>').html(name).val(name));
    $("#select_composition_action2").append($('<option>').html(name).val(name));
    $("#select_composition_action1_DEL").append($('<option>').html(name).val(name));
    $("#select_composition_kripke_action2").append($('<option>').html(name).val(name));
    if ($ready) {
        $(".multiSelect_action").multilineSelectmenu_action();
    }
    else {
        $(".multiSelect_action").multilineSelectmenu_action('destroy');
        $(".multiSelect_action").multilineSelectmenu_action();
    }
}
exports.addAction2compositionSelect = addAction2compositionSelect;
function graph2actionObject($name, $nodes, $edges) {
    return {
        name: $name,
        domain: _.map($nodes.get(), function (x) { return x.label; }),
        relation: _.map($edges.get(), function (x) { return { agent: x.label, from: String(x.from), to: String(x.to) }; }),
        precondition: _.map($nodes.get(), function (x) { return { from: x.label, to: "top" }; }),
        comment: ""
    };
}
exports.graph2actionObject = graph2actionObject;
function addEvent2actionList($am, $nodes, $edges) {
    var modifyName = function (str) { return Util.string2number(str); };
    var _amname = modifyName($am.name);
    $(".see_graph_" + _amname + "111").on('click', function () {
        var _am = function () {
            var aa = _.find(exports.ACTION_DATA, function (x) { return modifyName(x.name) === _amname; });
            if (aa !== undefined) {
                return aa;
            }
            else {
                alert("undefined in addEvent2actionList");
            }
        };
        var _newNodes = _.map(_am().domain, function (x) { return { label: x, id: x }; });
        var _newEdges = _.map(_am().relation, function (x) {
            return {
                from: x.from,
                to: x.to,
                label: x.agent,
                color: agColor(x.agent, exports.AGENT_COLOR),
                id: x.from + "_" + x.to + "_" + x.agent
            };
        });
        actionObject2writeTopPanel(_am());
        change_global_NODES_EDGES_update(_newNodes, _newEdges);
    });
}
exports.addEvent2actionList = addEvent2actionList;
function acName2ac(name, acs) {
    var ff = function (x) {
        return {
            name: x.name,
            domain: x.domain,
            relation: x.relation,
            precondition: x.precondition,
            comment: "",
        };
    };
    return ff(_.find(acs, function (x) { return x.name === name; }));
}
exports.acName2ac = acName2ac;
function nodes2string($nodes) {
    $('#number_of_domain').empty();
    return _($nodes.get())
        .map(function (x) { return x.label; })
        .join(" , ");
}
exports.nodes2string = nodes2string;
function button2actionObject($nameInfo, $commentInfo, $fromInfo, $toInfo, $nodes, $edges, $action_data) {
    var _domain4output = _.map($nodes.get(), function (x) { return x.label; });
    var _arrayEdges = $edges.get();
    var relMake = function (x) {
        var z = _.nth(x, 0);
        if (z.label === _.nth(x, 1)) {
            return { agent: z.label, from: z.from, to: z.to };
        }
        else {
            return undefined;
        }
    };
    var _rel4output = _.chain(_arrayEdges)
        .map(function (x) { return x.label; })
        .uniq()
        .thru(function (x) { return Util.cartesianProduct([_arrayEdges, x]); })
        .map(relMake)
        .uniqWith(_.isEqual)
        .compact()
        .value();
    var _fromTo = (_.zip($fromInfo, $toInfo));
    var _cart = Util.cartesianProduct([_domain4output, _fromTo]);
    var preMake = function (x) {
        var _dom = _.nth(x, 0);
        var _fromTo = _.nth(x, 1);
        var _from = _.nth(_fromTo, 0);
        var _to = _.nth(_fromTo, 1);
        if (_dom === _from.innerHTML) {
            return {
                from: _dom,
                to: _to.value
            };
        }
        else {
            return undefined;
        }
    };
    var _pre4output = _.chain(_cart)
        .map(preMake)
        .compact()
        .value();
    var action_object = {
        name: $nameInfo,
        domain: _domain4output,
        relation: _rel4output,
        precondition: _pre4output,
        comment: $commentInfo
    };
    if (_.every($action_data, function (x) { return x.name !== action_object.name; })) {
        return tsmonad_1.Either.right(action_object);
    }
    else {
        return tsmonad_1.Either.left(alert('The name "' + action_object.name + '" already exists in the list. Change the name.'));
    }
}
exports.button2actionObject = button2actionObject;
function ajax_output($e) {
    $.ajax({
        url: $e,
        dataType: 'html',
        success: function ($data) {
            json2actionData($.parseJSON($data));
        },
        error: function () {
            $('#sample-result').html('<font color="red">This is a browser error. Please try using a different browser.</font>');
        }
    });
}
exports.ajax_output = ajax_output;
;
function json2actionData($json) {
    var namelist = _.map(exports.ACTION_DATA, function (x) { return x.name; });
    var ff = function (name) {
        return !_.includes(namelist, name);
    };
    var AMsFromJSON = $json.filter(function (y) { return ff(y.name); });
    exports.ACTION_DATA = _.concat(exports.ACTION_DATA, AMsFromJSON);
    $("#action_list").empty();
    _.chain(exports.ACTION_DATA)
        .uniqBy('name')
        .forEach(function (x) {
        addAction2compositionSelect(x.name, false);
        $("#action_list").append(actionObject2string(x));
        addEvent2actionList(x, exports.NODES, exports.EDGES);
    })
        .value();
    $('.close_panel').hide();
}
exports.json2actionData = json2actionData;


/***/ }),

/***/ 28:
/***/ (function(module, exports, __webpack_require__) {

var Rx = __webpack_require__(17);
__webpack_require__(30);
module.exports = Rx;

/***/ }),

/***/ 29:
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ 30:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, Inc. All rights reserved. See License.txt in the project root for license information.

;(function (factory) {
  var objectTypes = {
    'function': true,
    'object': true
  };

  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  // Because of build optimizers
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Rx, exports) {
      return factory(root, exports, Rx);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof module === 'object' && module && module.exports === freeExports) {
    module.exports = factory(root, module.exports, require('rx'));
  } else {
    root.Rx = factory(root, {}, root.Rx);
  }
}.call(this, function (root, exp, Rx, undefined) {

  var Observable = Rx.Observable,
    ObservableBase = Rx.ObservableBase,
    AbstractObserver = Rx.internals.AbstractObserver,
    observerCreate = Rx.Observer.create,
    observableCreate = Rx.Observable.create,
    disposableCreate = Rx.Disposable.create,
    Disposable = Rx.Disposable,
    CompositeDisposable = Rx.CompositeDisposable,
    BinaryDisposable = Rx.BinaryDisposable,
    SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
    Subject = Rx.Subject,
    Scheduler = Rx.Scheduler,
    dom = Rx.DOM = {},
    hasOwnProperty = {}.hasOwnProperty,
    noop = Rx.helpers.noop,
    isFunction = Rx.helpers.isFunction,
    inherits = Rx.internals.inherits;

  var errorObj = {e: {}};

  function tryCatcherGen(tryCatchTarget) {
    return function tryCatcher() {
      try {
        return tryCatchTarget.apply(this, arguments);
      } catch (e) {
        errorObj.e = e;
        return errorObj;
      }
    };
  }

  function tryCatch(fn) {
    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
    return tryCatcherGen(fn);
  }

  function thrower(e) {
    throw e;
  }

  function CreateListenerDisposable(element, name, handler, useCapture) {
    this._e = element;
    this._n = name;
    this._fn = handler;
    this._u = useCapture;
    this._e.addEventListener(this._n, this._fn, this._u);
    this.isDisposed = false;
  }

  CreateListenerDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      this._e.removeEventListener(this._n, this._fn, this._u);
    }
  };

  function createListener (element, name, handler, useCapture) {
    if (element.addEventListener) {
      return new CreateListenerDisposable(element, name, handler, useCapture);
    }
    throw new Error('No listener found');
  }

  function createEventListener (el, eventName, handler, useCapture) {
    var disposables = new CompositeDisposable();

    // Asume NodeList or HTMLCollection
    var toStr = Object.prototype.toString;
    if (toStr.call(el) === '[object NodeList]' || toStr.call(el) === '[object HTMLCollection]') {
      for (var i = 0, len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler, useCapture));
      }
    } else if (el) {
      disposables.add(createListener(el, eventName, handler, useCapture));
    }
    return disposables;
  }

  var FromEventObservable = (function(__super__) {
    inherits(FromEventObservable, __super__);
    function FromEventObservable(element, eventName, selector, useCapture) {
      this._e = element;
      this._n = eventName;
      this._fn = selector;
      this._uc = useCapture;
      __super__.call(this);
    }

    function createHandler(o, fn) {
      return function handler() {
        var results = arguments[0];
        if (fn) {
          results = tryCatch(fn).apply(null, arguments);
          if (results === errorObj) { return o.onError(results.e); }
        }
        o.onNext(results);
      };
    }

    FromEventObservable.prototype.subscribeCore = function (o) {
      return createEventListener(
        this._e,
        this._n,
        createHandler(o, this._fn),
        this._uc);
    };

    return FromEventObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
   * @param {Object} element The DOMElement or NodeList to attach a listener.
   * @param {String} eventName The event name to attach the observable sequence.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @param {Boolean} [useCapture] If true, useCapture indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events which are bubbling upward through the tree will not trigger a listener designated to use capture
   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
   */
  var fromEvent = dom.fromEvent = function (element, eventName, selector, useCapture) {
    var selectorFn = isFunction(selector) ? selector : null;
    typeof selector === 'boolean' && (useCapture = selector);
    typeof useCapture === 'undefined' && (useCapture = false);
    return new FromEventObservable(element, eventName, selectorFn, useCapture).publish().refCount();
  };

  (function () {
    var events = 'blur focus focusin focusout load resize scroll unload click dblclick ' +
      'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
      'change select submit keydown keypress keyup error contextmenu input';

    if (root.PointerEvent) {
      events += ' pointerdown pointerup pointermove pointerover pointerout pointerenter pointerleave';
    }

    if (root.TouchEvent) {
      events += ' touchstart touchend touchmove touchcancel';
    }

    events = events.split(' ');

    for(var i = 0, len = events.length; i < len; i++) {
      (function (e) {
        dom[e] = function (element, selector, useCapture) {
          return fromEvent(element, e, selector, useCapture);
        };
      }(events[i]))
    }
  }());

  var ReadyObservable = (function (__super__) {
    inherits(ReadyObservable, __super__);
    function ReadyObservable() {
      __super__.call(this);
    }

    function createHandler(o) {
      return function handler() {
        o.onNext();
        o.onCompleted();
      };
    }

    ReadyObservable.prototype.subscribeCore = function (o) {
      return new ReadyDisposable(o, createHandler(o));
    };

    function ReadyDisposable(o, fn) {
      this._o = o;
      this._fn = fn;
      this._addedHandlers = false;
      this.isDisposed = false;

      if (root.document.readyState === 'complete') {
        setTimeout(this._fn, 0);
      } else {
        this._addedHandlers = true;
        root.document.addEventListener( 'DOMContentLoaded', this._fn, false );
      }
    }

    ReadyDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        root.document.removeEventListener( 'DOMContentLoaded', this._fn, false );
      }
    };

    return ReadyObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence when the DOM is loaded
   * @returns {Observable} An observable sequence fired when the DOM is loaded
   */
  dom.ready = function () {
    return new ReadyObservable();
  };


  // Gets the proper XMLHttpRequest for support for older IE
  function getXMLHttpRequest() {
    if (root.XMLHttpRequest) {
      return new root.XMLHttpRequest();
    } else {
      var progId;
      try {
        var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
        for(var i = 0; i < 3; i++) {
          try {
            progId = progIds[i];
            if (new root.ActiveXObject(progId)) {
              break;
            }
          } catch(e) { }
        }
        return new root.ActiveXObject(progId);
      } catch (e) {
        throw new Error('XMLHttpRequest is not supported by your browser');
      }
    }
  }

  // Get CORS support even for older IE
  function getCORSRequest() {
    var xhr = new root.XMLHttpRequest();
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
      return xhr;
    } else if (!!root.XDomainRequest) {
      return new XDomainRequest();
    } else {
      throw new Error('CORS is not supported by your browser');
    }
  }

  function normalizeAjaxSuccessEvent(e, xhr, settings) {
    var response = ('response' in xhr) ? xhr.response : xhr.responseText;
    response = settings.responseType === 'json' ? JSON.parse(response) : response;
    return {
      response: response,
      status: xhr.status,
      responseType: xhr.responseType,
      xhr: xhr,
      originalEvent: e
    };
  }

  function normalizeAjaxErrorEvent(e, xhr, type) {
    return {
      type: type,
      status: xhr.status,
      xhr: xhr,
      originalEvent: e
    };
  }

  var AjaxObservable = (function(__super__) {
    inherits(AjaxObservable, __super__);
    function AjaxObservable(settings) {
      this._settings = settings;
      __super__.call(this);
    }

    AjaxObservable.prototype.subscribeCore = function (o) {
      var state = { isDone: false };
      var xhr;

      var settings = this._settings;
      var normalizeError = settings.normalizeError;
      var normalizeSuccess = settings.normalizeSuccess;

      var processResponse = function(xhr, e){
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if ((status >= 200 && status <= 300) || status === 0 || status === '') {
          o.onNext(normalizeSuccess(e, xhr, settings));
          o.onCompleted();
        } else {
          o.onError(settings.normalizeError(e, xhr, 'error'));
        }
        state.isDone = true;
      };

      try {
        xhr = settings.createXHR();
      } catch (err) {
        return o.onError(err);
      }

      try {
        if (settings.user) {
          xhr.open(settings.method, settings.url, settings.async, settings.user, settings.password);
        } else {
          xhr.open(settings.method, settings.url, settings.async);
        }

        var headers = settings.headers;
        for (var header in headers) {
          if (hasOwnProperty.call(headers, header)) {
            xhr.setRequestHeader(header, headers[header]);
          }
        }

        xhr.timeout = settings.timeout;
        xhr.ontimeout = function (e) {
          settings.progressObserver && settings.progressObserver.onError(e);
          o.onError(normalizeError(e, xhr, 'timeout'));
        };

        if(!!xhr.upload || (!('withCredentials' in xhr) && !!root.XDomainRequest)) {
          xhr.onload = function(e) {
            if(settings.progressObserver) {
              settings.progressObserver.onNext(e);
              settings.progressObserver.onCompleted();
            }
            processResponse(xhr, e);
          };

          if(settings.progressObserver) {
            xhr.onprogress = function(e) {
              settings.progressObserver.onNext(e);
            };
          }

          xhr.onerror = function(e) {
            settings.progressObserver && settings.progressObserver.onError(e);
            o.onError(normalizeError(e, xhr, 'error'));
            state.isDone = true;
          };

          xhr.onabort = function(e) {
            settings.progressObserver && settings.progressObserver.onError(e);
            o.onError(normalizeError(e, xhr, 'abort'));
            state.isDone = true;
          };
        } else {
          xhr.onreadystatechange = function (e) {
            xhr.readyState === 4 && processResponse(xhr, e);
          };
        }

        var contentType = settings.headers['Content-Type'] ||
            settings.headers['Content-type'] ||
            settings.headers['content-type'];
        if (settings.hasContent && contentType === 'application/x-www-form-urlencoded' && typeof settings.body !== 'string') {
          var newBody = [];
          for (var prop in settings.body) {
            if (hasOwnProperty.call(settings.body, prop)) {
              newBody.push(prop + '=' + settings.body[prop]);
            }
          }
          settings.body = newBody.join('&');
        }

        xhr.send(settings.hasContent && settings.body || null);
      } catch (e) {
        o.onError(e);
      }

      return new AjaxDisposable(state, xhr);
    };

    function AjaxDisposable(state, xhr) {
      this._state = state;
      this._xhr = xhr;
      this.isDisposed = false;
    }

    AjaxDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        if (!this._state.isDone && this._xhr.readyState !== 4) { this._xhr.abort(); }
      }
    };

    return AjaxObservable;
  }(ObservableBase));

  /**
   * Creates an observable for an Ajax request with either a settings object with url, headers, etc or a string for a URL.
   *
   * @example
   *   source = Rx.DOM.ajax('/products');
   *   source = Rx.DOM.ajax( url: 'products', method: 'GET' });
   *
   * @param {Object} settings Can be one of the following:
   *
   *  A string of the URL to make the Ajax call.
   *  An object with the following properties
   *   - url: URL of the request
   *   - body: The body of the request
   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
   *   - async: Whether the request is async
   *   - headers: Optional headers
   *   - crossDomain: true if a cross domain request, else false
   *
   * @returns {Observable} An observable sequence containing the XMLHttpRequest.
  */
  var ajaxRequest = dom.ajax = function (options) {
    var settings = {
      method: 'GET',
      crossDomain: false,
      async: true,
      headers: {},
      responseType: 'text',
      timeout: 0,
      createXHR: function(){
        return this.crossDomain ? getCORSRequest() : getXMLHttpRequest()
      },
      normalizeError: normalizeAjaxErrorEvent,
      normalizeSuccess: normalizeAjaxSuccessEvent
    };

    if(typeof options === 'string') {
      settings.url = options;
    } else {
      for(var prop in options) {
        if(hasOwnProperty.call(options, prop)) {
          settings[prop] = options[prop];
        }
      }
    }

    if (!settings.crossDomain && !settings.headers['X-Requested-With']) {
      settings.headers['X-Requested-With'] = 'XMLHttpRequest';
    }
    settings.hasContent = settings.body !== undefined;

    return new AjaxObservable(settings);
  };

  /**
   * Creates an observable sequence from an Ajax POST Request with the body.
   *
   * @param {String} url The URL to POST
   * @param {Object} body The body to POST
   * @returns {Observable} The observable sequence which contains the response from the Ajax POST.
   */
  dom.post = function (url, body) {
    var settings;
    if (typeof url === 'string') {
      settings = {url: url, body: body, method: 'POST' };
    } else if (typeof url === 'object') {
      settings = url;
      settings.method = 'POST';
    }
    return ajaxRequest(settings);
  };

  /**
   * Creates an observable sequence from an Ajax GET Request with the body.
   *
   * @param {String} url The URL to GET
   * @returns {Observable} The observable sequence which contains the response from the Ajax GET.
   */
  dom.get = function (url) {
    var settings;
    if (typeof url === 'string') {
      settings = {url: url };
    } else if (typeof url === 'object') {
      settings = url;
    }
    return ajaxRequest(settings);
  };

  /**
   * Creates an observable sequence from JSON from an Ajax request
   *
   * @param {String} url The URL to GET
   * @returns {Observable} The observable sequence which contains the parsed JSON.
   */
  dom.getJSON = function (url) {
    if (!root.JSON && typeof root.JSON.parse !== 'function') { throw new TypeError('JSON is not supported in your runtime.'); }
    return ajaxRequest({url: url, responseType: 'json'}).map(function (x) {
      return x.response;
    });
  };

  var destroy = (function () {
    var trash = 'document' in root && root.document.createElement('div');
    return function (element) {
      trash.appendChild(element);
      trash.innerHTML = '';
    };
  })();

  var ScriptObservable = (function(__super__) {
    inherits(ScriptObservable, __super__);
    function ScriptObservable(settings) {
      this._settings = settings;
      __super__.call(this);
    }

    ScriptObservable.id = 0;

    ScriptObservable.prototype.subscribeCore = function (o) {
      var settings = {
        jsonp: 'JSONPCallback',
        async: true,
        jsonpCallback: 'rxjsjsonpCallbacks' + 'callback_' + (ScriptObservable.id++).toString(36)
      };

      if(typeof this._settings === 'string') {
        settings.url = this._settings;
      } else {
        for(var prop in this._settings) {
          if(hasOwnProperty.call(this._settings, prop)) {
            settings[prop] = this._settings[prop];
          }
        }
      }

      var script = root.document.createElement('script');
      script.type = 'text/javascript';
      script.async = settings.async;
      script.src = settings.url.replace(settings.jsonp, settings.jsonpCallback);

      root[settings.jsonpCallback] = function(data) {
        root[settings.jsonpCallback].called = true;
        root[settings.jsonpCallback].data = data;
      };

      var handler = function(e) {
        if(e.type === 'load' && !root[settings.jsonpCallback].called) {
          e = { type: 'error' };
        }
        var status = e.type === 'error' ? 400 : 200;
        var data = root[settings.jsonpCallback].data;

        if(status === 200) {
          o.onNext({
            status: status,
            responseType: 'jsonp',
            response: data,
            originalEvent: e
          });

          o.onCompleted();
        }
        else {
          o.onError({
            type: 'error',
            status: status,
            originalEvent: e
          });
        }
      };

      script.onload = script.onreadystatechanged = script.onerror = handler;

      var head = root.document.getElementsByTagName('head')[0] || root.document.documentElement;
      head.insertBefore(script, head.firstChild);

      return new ScriptDisposable(script);
    };

    function ScriptDisposable(script) {
      this._script = script;
      this.isDisposed = false;
    }

    ScriptDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._script.onload = this._script.onreadystatechanged = this._script.onerror = null;
        destroy(this._script);
        this._script = null;
      }
    };

    return ScriptObservable;
  }(ObservableBase));

  /**
   * Creates an observable JSONP Request with the specified settings.
   * @param {Object} settings Can be one of the following:
   *
   *  A string of the URL to make the JSONP call with the JSONPCallback=? in the url.
   *  An object with the following properties
   *   - url: URL of the request
   *   - jsonp: The named callback parameter for the JSONP call
   *   - jsonpCallback: Callback to execute. For when the JSONP callback can't be changed
   *
   * @returns {Observable} A cold observable containing the results from the JSONP call.
   */
   dom.jsonpRequest = function (settings) {
     return new ScriptObservable(settings);
   };

  function socketClose(socket, closingObserver, code, reason) {
    if (socket) {
      if (closingObserver) {
        closingObserver.onNext();
        closingObserver.onCompleted();
      }
      if (!code) {
        socket.close();
      } else {
        socket.close(code, reason);
      }
    }
  }

  var SocketObservable = (function (__super__) {
    inherits(SocketObservable, __super__);
    function SocketObservable(state, url, protocol, open, close) {
      this._state = state;
      this._url = url;
      this._protocol = protocol;
      this._open = open;
      this._close = close;
      __super__.call(this);
    }

    function createOpenHandler(open, socket) {
      return function openHandler(e) {
        open.onNext(e);
        open.onCompleted();
        socket.removeEventListener('open', openHandler, false);
      };
    }
    function createMsgHandler(o) { return function msgHandler(e) { o.onNext(e); }; }
    function createErrHandler(o) { return function errHandler(e) { o.onError(e); }; }
    function createCloseHandler(o) {
      return function closeHandler(e) {
        if (e.code !== 1000 || !e.wasClean) { return o.onError(e); }
        o.onCompleted();
      };
    }

    function SocketDisposable(socket, msgFn, errFn, closeFn, close) {
      this._socket = socket;
      this._msgFn = msgFn;
      this._errFn = errFn;
      this._closeFn = closeFn;
      this._close = close;
      this.isDisposed = false;
    }

    SocketDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        socketClose(this._socket, this._close);

        this._socket.removeEventListener('message', this._msgFn, false);
        this._socket.removeEventListener('error', this._errFn, false);
        this._socket.removeEventListener('close', this._closeFn, false);
      }
    };

    SocketObservable.prototype.subscribeCore = function (o) {
      this._state.socket = this._protocol ? new WebSocket(this._url, this._protocol) : new WebSocket(this._url);

      var openHandler = createOpenHandler(this._open, this._state.socket);
      var msgHandler = createMsgHandler(o);
      var errHandler = createErrHandler(o);
      var closeHandler = createCloseHandler(o);

      this._open && this._state.socket.addEventListener('open', openHandler, false);
      this._state.socket.addEventListener('message', msgHandler, false);
      this._state.socket.addEventListener('error', errHandler, false);
      this._state.socket.addEventListener('close', closeHandler, false);

      return new SocketDisposable(this._state.socket, msgHandler, errHandler, closeHandler, this._close);
    };

    return SocketObservable;
  }(ObservableBase));

  var SocketObserver = (function (__super__) {
    inherits(SocketObserver, __super__);
    function SocketObserver(state, close) {
      this._state = state;
      this._close = close;
      __super__.call(this);
    }

    SocketObserver.prototype.next = function (x) {
      this._state.socket && this._state.socket.readyState === WebSocket.OPEN && this._state.socket.send(x);
    };

    SocketObserver.prototype.error = function (e) {
      if (!e.code) {
        throw new Error('no code specified. be sure to pass { code: ###, reason: "" } to onError()');
      }
      socketClose(this._state.socket, this._close, e.code, e.reason || '');
    };

    SocketObserver.prototype.completed = function () {
      socketClose(this._state.socket, this._close, 1000, '');
    };

    return SocketObserver;
  }(AbstractObserver));

   /**
   * Creates a WebSocket Subject with a given URL, protocol and an optional observer for the open event.
   *
   * @example
   *  var socket = Rx.DOM.fromWebSocket('http://localhost:8080', 'stock-protocol', openObserver, closingObserver);
   *
   * @param {String} url The URL of the WebSocket.
   * @param {String} protocol The protocol of the WebSocket.
   * @param {Observer} [openObserver] An optional Observer to capture the open event.
   * @param {Observer} [closingObserver] An optional Observer to capture the moment before the underlying socket is closed.
   * @returns {Subject} An observable sequence wrapping a WebSocket.
   */
  dom.fromWebSocket = function (url, protocol, openObserver, closingObserver) {
    if (!WebSocket) { throw new TypeError('WebSocket not implemented in your runtime.'); }
    var state = { socket: null };
    return Subject.create(
      new SocketObserver(state, closingObserver),
      new SocketObservable(state, url, protocol, openObserver, closingObserver)
    );
  };

  var WorkerObserver = (function (__super__) {
    inherits(WorkerObserver, __super__);
    function WorkerObserver(state) {
      this._state = state;
      __super__.call(this);
    }

    WorkerObserver.prototype.next = function (x) { this._state.worker && this._state.worker.postMessage(x); };
    WorkerObserver.prototype.error = function (e) { throw e; };
    WorkerObserver.prototype.completed = function () { };

    return WorkerObserver;
  }(AbstractObserver));

  var WorkerObservable = (function (__super__) {
    inherits(WorkerObservable, __super__);
    function WorkerObservable(state, url) {
      this._state = state;
      this._url = url;
      __super__.call(this);
    }

    function createMessageHandler(o) { return function messageHandler (e) { o.onNext(e); }; }
    function createErrHandler(o) { return function errHandler(e) { o.onError(e); }; }

    function WorkerDisposable(w, msgFn, errFn) {
      this._w = w;
      this._msgFn = msgFn;
      this._errFn = errFn;
      this.isDisposed = false;
    }

    WorkerDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._w.terminate();
        this._w.removeEventListener('message', this._msgFn, false);
        this._w.removeEventListener('error', this._errFn, false);
      }
    };

    WorkerObservable.prototype.subscribeCore = function (o) {
      this._state.worker = new root.Worker(this._url);

      var messageHandler = createMessageHandler(o);
      var errHandler = createErrHandler(o);

      this._state.worker.addEventListener('message', messageHandler, false);
      this._state.worker.addEventListener('error', errHandler, false);

      return new WorkerDisposable(this._state.worker, messageHandler, errHandler);
    };

    return WorkerObservable;
  }(ObservableBase));

  /**
   * Creates a Web Worker with a given URL as a Subject.
   *
   * @example
   * var worker = Rx.DOM.fromWebWorker('worker.js');
   *
   * @param {String} url The URL of the Web Worker.
   * @returns {Subject} A Subject wrapping the Web Worker.
   */
  dom.fromWorker = function (url) {
    if (!root.Worker) { throw new TypeError('Worker not implemented in your runtime.'); }
    var state = { worker: null };
    return Subject.create(new WorkerObserver(state), new WorkerObservable(state, url));
  };

  function getMutationObserver(next) {
    var M = root.MutationObserver || root.WebKitMutationObserver;
    return new M(next);
  }

  var MutationObserverObservable = (function (__super__) {
    inherits(MutationObserverObservable, __super__);
    function MutationObserverObservable(target, options) {
      this._target = target;
      this._options = options;
      __super__.call(this);
    }

    function InnerDisposable(mutationObserver) {
      this._m = mutationObserver;
      this.isDisposed = false;
    }

    InnerDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._m.disconnect();
      }
    };

    MutationObserverObservable.prototype.subscribeCore = function (o) {
      var mutationObserver = getMutationObserver(function (e) { o.onNext(e); });
      mutationObserver.observe(this._target, this._options);
      return new InnerDisposable(mutationObserver);
    };

    return MutationObserverObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence from a Mutation Observer.
   * MutationObserver provides developers a way to react to changes in a DOM.
   * @example
   *  Rx.DOM.fromMutationObserver(document.getElementById('foo'), { attributes: true, childList: true, characterData: true });
   *
   * @param {Object} target The Node on which to obserave DOM mutations.
   * @param {Object} options A MutationObserverInit object, specifies which DOM mutations should be reported.
   * @returns {Observable} An observable sequence which contains mutations on the given DOM target.
   */
  dom.fromMutationObserver = function (target, options) {
    if (!(root.MutationObserver || root.WebKitMutationObserver)) { throw new TypeError('MutationObserver not implemented in your runtime.'); }
    return new MutationObserverObservable(target, options);
  };

  var CurrentPositionObservable = (function (__super__) {
    inherits(CurrentPositionObservable, __super__);
    function CurrentPositionObservable(opts) {
      this._opts = opts;
      __super__.call(this);
    }

    CurrentPositionObservable.prototype.subscribeCore = function (o) {
      root.navigator.geolocation.getCurrentPosition(
        function (data) {
          o.onNext(data);
          o.onCompleted();
        },
        function (e) { o.onError(e); },
        this._opts);
    };

    return CurrentPositionObservable;
  }(ObservableBase));

  var WatchPositionObservable = (function (__super__) {
    inherits(WatchPositionObservable, __super__);
    function WatchPositionObservable(opts) {
      this._opts = opts;
      __super__.call(this);
    }

    function WatchPositionDisposable(id) {
      this._id = id;
      this.isDisposed = false;
    }

    WatchPositionDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        root.navigator.geolocation.clearWatch(this._id);
      }
    };

    WatchPositionObservable.prototype.subscribeCore = function (o) {
      var watchId = root.navigator.geolocation.watchPosition(
        function (x) { o.onNext(x); },
        function (e) { o.onError(e); },
        this._opts);

      return new WatchPositionDisposable(watchId);
    };

    return WatchPositionObservable;
  }(ObservableBase));

  Rx.DOM.geolocation = {
    /**
    * Obtains the geographic position, in terms of latitude and longitude coordinates, of the device.
    * @param {Object} [geolocationOptions] An object literal to specify one or more of the following attributes and desired values:
    *   - enableHighAccuracy: Specify true to obtain the most accurate position possible, or false to optimize in favor of performance and power consumption.
    *   - timeout: An Integer value that indicates the time, in milliseconds, allowed for obtaining the position.
    *              If timeout is Infinity, (the default value) the location request will not time out.
    *              If timeout is zero (0) or negative, the results depend on the behavior of the location provider.
    *   - maximumAge: An Integer value indicating the maximum age, in milliseconds, of cached position information.
    *                 If maximumAge is non-zero, and a cached position that is no older than maximumAge is available, the cached position is used instead of obtaining an updated location.
    *                 If maximumAge is zero (0), watchPosition always tries to obtain an updated position, even if a cached position is already available.
    *                 If maximumAge is Infinity, any cached position is used, regardless of its age, and watchPosition only tries to obtain an updated position if no cached position data exists.
    * @returns {Observable} An observable sequence with the geographical location of the device running the client.
    */
    getCurrentPosition: function (geolocationOptions) {
      if (!root.navigator && !root.navigation.geolocation) { throw new TypeError('geolocation not available'); }
      return new CurrentPositionObservable(geolocationOptions);
    },

    /**
    * Begins listening for updates to the current geographical location of the device running the client.
    * @param {Object} [geolocationOptions] An object literal to specify one or more of the following attributes and desired values:
    *   - enableHighAccuracy: Specify true to obtain the most accurate position possible, or false to optimize in favor of performance and power consumption.
    *   - timeout: An Integer value that indicates the time, in milliseconds, allowed for obtaining the position.
    *              If timeout is Infinity, (the default value) the location request will not time out.
    *              If timeout is zero (0) or negative, the results depend on the behavior of the location provider.
    *   - maximumAge: An Integer value indicating the maximum age, in milliseconds, of cached position information.
    *                 If maximumAge is non-zero, and a cached position that is no older than maximumAge is available, the cached position is used instead of obtaining an updated location.
    *                 If maximumAge is zero (0), watchPosition always tries to obtain an updated position, even if a cached position is already available.
    *                 If maximumAge is Infinity, any cached position is used, regardless of its age, and watchPosition only tries to obtain an updated position if no cached position data exists.
    * @returns {Observable} An observable sequence with the current geographical location of the device running the client.
    */
    watchPosition: function (geolocationOptions) {
      if (!root.navigator && !root.navigation.geolocation) { throw new TypeError('geolocation not available'); }
      return new WatchPositionObservable(geolocationOptions).publish().refCount();
    }
  };

  var FromReaderObservable = (function (__super__) {
    inherits(FromReaderObservable, __super__);
    function FromReaderObservable(readerFn, file, progressObserver, encoding) {
      this._readerFn  = readerFn;
      this._file = file;
      this._progressObserver = progressObserver;
      this._encoding = encoding;
      __super__.call(this);
    }

    function createLoadHandler(o, p) {
      return function loadHandler(e) {
        p && p.onCompleted();
        o.onNext(e.target.result);
        o.onCompleted();
      };
    }

    function createErrorHandler(o) { return function errorHandler (e) { o.onError(e.target.error); }; }
    function createProgressHandler(o) { return function progressHandler (e) { o.onNext(e); }; }

    function FromReaderDisposable(reader, progressObserver, loadHandler, errorHandler, progressHandler) {
      this._r = reader;
      this._po = progressObserver;
      this._lFn = loadHandler;
      this._eFn = errorHandler;
      this._pFn = progressHandler;
      this.isDisposed = false;
    }

    FromReaderDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._r.readyState === root.FileReader.LOADING && this._r.abort();
        this._r.removeEventListener('load', this._lFn, false);
        this._r.removeEventListener('error', this._eFn, false);
        this._po && this._r.removeEventListener('progress', this._pFn, false);
      }
    };

    FromReaderObservable.prototype.subscribeCore = function (o) {
      var reader = new root.FileReader();

      var loadHandler = createLoadHandler(o, this._progressObserver);
      var errorHandler = createErrorHandler(o);
      var progressHandler = createProgressHandler(this._progressObserver);

      reader.addEventListener('load', loadHandler, false);
      reader.addEventListener('error', errorHandler, false);
      this._progressObserver && reader.addEventListener('progress', progressHandler, false);

      reader[this._readerFn](this._file, this._encoding);

      return new FromReaderDisposable(reader, this._progressObserver, loadHandler, errorHandler, progressHandler);
    };

    return FromReaderObservable;
  }(ObservableBase));

  /**
   * The FileReader object lets web applications asynchronously read the contents of
   * files (or raw data buffers) stored on the user's computer, using File or Blob objects
   * to specify the file or data to read as an observable sequence.
   * @param {String} file The file to read.
   * @param {Observer} An observer to watch for progress.
   * @returns {Object} An object which contains methods for reading the data.
   */
  dom.fromReader = function(file, progressObserver) {
    if (!root.FileReader) { throw new TypeError('FileReader not implemented in your runtime.'); }

    return {
      /**
       * This method is used to read the file as an ArrayBuffer as an Observable stream.
       * @returns {Observable} An observable stream of an ArrayBuffer
       */
      asArrayBuffer : function() {
        return new FromReaderObservable('readAsArrayBuffer', file, progressObserver);
      },
      /**
       * This method is used to read the file as a binary data string as an Observable stream.
       * @returns {Observable} An observable stream of a binary data string.
       */
      asBinaryString : function() {
        return new FromReaderObservable('readAsBinaryString', file, progressObserver);
      },
      /**
       * This method is used to read the file as a URL of the file's data as an Observable stream.
       * @returns {Observable} An observable stream of a URL representing the file's data.
       */
      asDataURL : function() {
        return new FromReaderObservable('readAsDataURL', file, progressObserver);
      },
      /**
       * This method is used to read the file as a string as an Observable stream.
       * @returns {Observable} An observable stream of the string contents of the file.
       */
      asText : function(encoding) {
        return new FromReaderObservable('readAsText', file, progressObserver, encoding);
      }
    };
  };

  var EventSourceObservable = (function(__super__) {
    inherits(EventSourceObservable, __super__);
    function EventSourceObservable(url, open) {
      this._url = url;
      this._open = open;
      __super__.call(this);
    }

    function createOnOpen(o, source) {
      return function onOpen(e) {
        o.onNext(e);
        o.onCompleted();
        source.removeEventListener('open', onOpen, false);
      };
    }

    function createOnError(o) {
      return function onError(e) {
        if (e.readyState === EventSource.CLOSED) {
          o.onCompleted();
        } else {
          o.onError(e);
        }
      };
    }

    function createOnMessage(o) { return function onMessage(e) { o.onNext(e.data); }; }

    function EventSourceDisposable(s, errFn, msgFn) {
      this._s = s;
      this._errFn = errFn;
      this._msgFn = msgFn;
      this.isDisposed = false;
    }

    EventSourceDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this._s.removeEventListener('error', this._errFn, false);
        this._s.removeEventListener('message', this._msgFn, false);
        this._s.close();
      }
    };

    EventSourceObservable.prototype.subscribeCore = function (o) {
      var source = new EventSource(this._url);
      var onOpen = createOnOpen(this._open, source);
      var onError = createOnError(o);
      var onMessage = createOnMessage(o);

      this._open && source.addEventListener('open', onOpen, false);
      source.addEventListener('error', onError, false);
      source.addEventListener('message', onMessage, false);

      return new EventSourceDisposable(source, onError, onMessage);
    };

    return EventSourceObservable;
  }(ObservableBase));

  /**
   * This method wraps an EventSource as an observable sequence.
   * @param {String} url The url of the server-side script.
   * @param {Observer} [openObserver] An optional observer for the 'open' event for the server side event.
   * @returns {Observable} An observable sequence which represents the data from a server-side event.
   */
  dom.fromEventSource = function (url, openObserver) {
    if (!root.EventSource) { throw new TypeError('EventSource not implemented in your runtime.'); }
    return new EventSourceObservable(url, openObserver);
  };

  var requestAnimFrame, cancelAnimFrame;
  if (root.requestAnimationFrame) {
    requestAnimFrame = root.requestAnimationFrame;
    cancelAnimFrame = root.cancelAnimationFrame;
  } else if (root.mozRequestAnimationFrame) {
    requestAnimFrame = root.mozRequestAnimationFrame;
    cancelAnimFrame = root.mozCancelAnimationFrame;
  } else if (root.webkitRequestAnimationFrame) {
    requestAnimFrame = root.webkitRequestAnimationFrame;
    cancelAnimFrame = root.webkitCancelAnimationFrame;
  } else if (root.msRequestAnimationFrame) {
    requestAnimFrame = root.msRequestAnimationFrame;
    cancelAnimFrame = root.msCancelAnimationFrame;
  } else if (root.oRequestAnimationFrame) {
    requestAnimFrame = root.oRequestAnimationFrame;
    cancelAnimFrame = root.oCancelAnimationFrame;
  } else {
    requestAnimFrame = function(cb) { root.setTimeout(cb, 1000 / 60); };
    cancelAnimFrame = root.clearTimeout;
  }

  /**
   * Gets a scheduler that schedules schedules work on the requestAnimationFrame for immediate actions.
   */
  Scheduler.requestAnimationFrame = (function () {
    var RequestAnimationFrameScheduler = (function (__super__) {
      inherits(RequestAnimationFrameScheduler, __super__);
      function RequestAnimationFrameScheduler() {
        __super__.call(this);
      }

      function scheduleAction(disposable, action, scheduler, state) {
        return function schedule() {
          !disposable.isDisposed && disposable.setDisposable(Disposable._fixup(action(scheduler, state)));
        };
      }

      function ClearDisposable(method, id) {
        this._id = id;
        this._method = method;
        this.isDisposed = false;
      }

      ClearDisposable.prototype.dispose = function () {
        if (!this.isDisposed) {
          this.isDisposed = true;
          this._method.call(null, this._id);
        }
      };

      RequestAnimationFrameScheduler.prototype.schedule = function (state, action) {
        var disposable = new SingleAssignmentDisposable(),
            id = requestAnimFrame(scheduleAction(disposable, action, this, state));
        return new BinaryDisposable(disposable, new ClearDisposable(cancelAnimFrame, id));
      };

      RequestAnimationFrameScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
        if (dueTime === 0) { return this.schedule(state, action); }
        var disposable = new SingleAssignmentDisposable(),
            id = root.setTimeout(scheduleAction(disposable, action, this, state), dueTime);
        return new BinaryDisposable(disposable, new ClearDisposable(root.clearTimeout, id));
      };

      return RequestAnimationFrameScheduler;
    }(Scheduler));

    return new RequestAnimationFrameScheduler();
  }());

  /**
   * Scheduler that uses a MutationObserver changes as the scheduling mechanism
   */
  Scheduler.microtask = (function () {

    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false, scheduleMethod;

    function clearMethod(handle) {
      delete tasksByHandle[handle];
    }

    function runTask(handle) {
      if (currentlyRunning) {
        root.setTimeout(function () { runTask(handle) }, 0);
      } else {
        var task = tasksByHandle[handle];
        if (task) {
          currentlyRunning = true;
          try {
            task();
          } catch (e) {
            throw e;
          } finally {
            clearMethod(handle);
            currentlyRunning = false;
          }
        }
      }
    }

    function postMessageSupported () {
      // Ensure not in a worker
      if (!root.postMessage || root.importScripts) { return false; }
      var isAsync = false, oldHandler = root.onmessage;
      // Test for async
      root.onmessage = function () { isAsync = true; };
      root.postMessage('', '*');
      root.onmessage = oldHandler;

      return isAsync;
    }

    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
    var BrowserMutationObserver = root.MutationObserver || root.WebKitMutationObserver;
    if (!!BrowserMutationObserver) {

      var PREFIX = 'drainqueue_';

      var observer = new BrowserMutationObserver(function(mutations) {
        mutations.forEach(function (mutation) {
          runTask(mutation.attributeName.substring(PREFIX.length));
        })
      });

      var element = root.document.createElement('div');
      observer.observe(element, { attributes: true });

      // Prevent leaks
      root.addEventListener('unload', function () {
        observer.disconnect();
        observer = null;
      }, false);

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        element.setAttribute(PREFIX + id, 'drainQueue');
        return id;
      };
    } else if (typeof root.setImmediate === 'function') {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.setImmediate(function () { runTask(id); });

        return id;
      };
    } else if (postMessageSupported()) {
      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

      function onGlobalPostMessage(event) {
        // Only if we're a match to avoid any other global events
        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
          runTask(event.data.substring(MSG_PREFIX.length));
        }
      }

      if (root.addEventListener) {
        root.addEventListener('message', onGlobalPostMessage, false);
      } else if (root.attachEvent){
        root.attachEvent('onmessage', onGlobalPostMessage);
      }

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.postMessage(MSG_PREFIX + id, '*');
        return id;
      };
    } else if (!!root.MessageChannel) {
      var channel = new root.MessageChannel();

      channel.port1.onmessage = function (event) {
        runTask(event.data);
      };

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        channel.port2.postMessage(id);
        return id;
      };
    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

      scheduleMethod = function (action) {
        var scriptElement = root.document.createElement('script');
        var id = nextHandle++;
        tasksByHandle[id] = action;

        scriptElement.onreadystatechange = function () {
          runTask(id);
          scriptElement.onreadystatechange = null;
          scriptElement.parentNode.removeChild(scriptElement);
          scriptElement = null;
        };
        root.document.documentElement.appendChild(scriptElement);

        return id;
      };

    } else {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.setTimeout(function () {
          runTask(id);
        }, 0);

        return id;
      };
    }

    var MicroTaskScheduler = (function (__super__) {
      inherits(MicroTaskScheduler, __super__);
      function MicroTaskScheduler() {
        __super__.call(this);
      }

      function scheduleAction(disposable, action, scheduler, state) {
        return function schedule() {
          !disposable.isDisposed && disposable.setDisposable(Disposable._fixup(action(scheduler, state)));
        };
      }

      function ClearDisposable(method, id) {
        this._id = id;
        this._method = method;
        this.isDisposed = false;
      }

      ClearDisposable.prototype.dispose = function () {
        if (!this.isDisposed) {
          this.isDisposed = true;
          this._method.call(null, this._id);
        }
      };

      MicroTaskScheduler.prototype.schedule = function (state, action) {
        var disposable = new SingleAssignmentDisposable(),
            id = scheduleMethod(scheduleAction(disposable, action, this, state));
        return new BinaryDisposable(disposable, new ClearDisposable(clearMethod, id));
      };

      MicroTaskScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
        if (dueTime === 0) { return this.schedule(state, action); }
        var disposable = new SingleAssignmentDisposable(),
            id = root.setTimeout(scheduleAction(disposable, action, this, state), dueTime);
        return new BinaryDisposable(disposable, new ClearDisposable(root.clearTimeout, id));
      };

      return MicroTaskScheduler;
    }(Scheduler));

    return new MicroTaskScheduler();
  }());

  return Rx;
}));
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)(module), __webpack_require__(22)))

/***/ }),

/***/ 339:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PS = __webpack_require__(340);
var Rx = __webpack_require__(28);
var Vis = __webpack_require__(16);
var Checker = __webpack_require__(76);
exports.$CONTAINER = document.getElementById('network_sequent');
$(document).ready(function () {
    PS.EL_system_string();
    PS.Modal_system_string();
    PS.NODES_SEQ.add([]);
    PS.EDGES_SEQ.add([]);
    exports.NETWORK_SEQUENT = new Vis.Network(exports.$CONTAINER, { nodes: PS.NODES_SEQ, edges: PS.EDGES_SEQ }, PS.OPTIONS);
    PS.send_info2elm_proof_draw();
});
for (var i = 0; i < $('.example_formula').length; i++) {
    $('.example_formula')[i].addEventListener("click", function (x) {
        PS.funcInput(x);
        Checker.syntaxCheck(PS.replace_string(x));
    }, false);
}
$("input[class='modal_system']").on("click", function () {
    PS.Modal_system_string();
});
$("#levelSeparation").change(function () {
    var range_value = Number($(this).val());
    PS.OPTIONS.layout.hierarchical.levelSeparation = range_value;
    exports.NETWORK_SEQUENT.setOptions(PS.OPTIONS);
    PS.send_info2elm_proof_draw();
});
$("#nodeSpacing").change(function () {
    var range_value = Number($(this).val());
    PS.OPTIONS.layout.hierarchical.nodeSpacing = range_value;
    exports.NETWORK_SEQUENT.setOptions(PS.OPTIONS);
    PS.send_info2elm_proof_draw();
});
$("input[name='seqent_config_direction']").on("click", function () {
    var value = $("input[name='seqent_config_direction']:checked").val();
    var _direction = "UD";
    switch (value) {
        case "Up-Down":
            _direction = "UD";
            break;
        case "Down-Up":
            _direction = "DU";
            break;
        case "Left-Right":
            _direction = "LR";
            break;
        case "Right-Left":
            _direction = "RL";
            break;
    }
    PS.OPTIONS.layout.hierarchical.direction = _direction;
    exports.NETWORK_SEQUENT.setOptions(PS.OPTIONS);
    PS.send_info2elm_proof_draw();
});
$("input[name='seqent_config_sortMethod']").on("click", function () {
    var value = $("input[name='seqent_config_sortMethod']:checked").val();
    var _sortMethod = "directed";
    switch (value) {
        case "directed":
            _sortMethod = "directed";
            break;
        case "hubsize":
            _sortMethod = "hubsize";
            break;
    }
    PS.OPTIONS.layout.hierarchical.sortMethod = _sortMethod;
    exports.NETWORK_SEQUENT.setOptions(PS.OPTIONS);
    PS.send_info2elm_proof_draw();
});
$('#button_create_random_formula').on('click', function () {
    PS.create_random_formula();
});
$('#button_create_random_formula_provable').on('click', function () {
    PS.create_random_formula_provable();
});
Rx.Observable.fromEvent($('#prove_sequent'), 'click')
    .subscribe(function () {
    PS.send_info2elm_proof_draw();
}, function (error) { return console.log(error); }, function () { return console.log('draw and write new graph'); });


/***/ }),

/***/ 340:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var vis_action_1 = __webpack_require__(23);
var Vis = __webpack_require__(16);
var _ = __webpack_require__(18);
var Elm_sequent = __webpack_require__(341);
var elm_main_sequent = Elm_sequent.ElmFunctions_sequent.embed(document.getElementById('elm_sequent'));
exports.NODES_SEQ = new Vis.DataSet();
exports.EDGES_SEQ = new Vis.DataSet();
function EL_system_string() {
    var value = document.getElementsByClassName("select_logic_for_labelled")[0].innerHTML;
    switch (value) {
        case "EL":
            $(".radio_el_system").html("EL");
            $(".radio_el_sysem2").html("knowledge operator #");
            break;
        case "PAL":
            $(".radio_el_system").html("PAL");
            $(".radio_el_system2").html("announcement operator [.]");
            break;
        case "IntPAL":
            $(".radio_el_system").html("IntPAL");
            $(".radio_el_system2").html("announcement operator [.]");
            break;
        case "DEL":
            $(".radio_el_system").html("DEL");
            $(".radio_el_system2").html("action operator [.]");
            break;
        default:
            $(".radio_el_system").html(".radio_el_system");
            $(".radio_el_system2").html(".radio_el_system2");
            break;
    }
}
exports.EL_system_string = EL_system_string;
function Modal_system_string() {
    var ff = function () {
        return $(this).val();
    };
    var list_modal_system = $('[class="modal_system"]:checked').map(ff).get().join('');
    $(".select_modal_system").html(list_modal_system);
}
exports.Modal_system_string = Modal_system_string;
function replace_string($event) {
    return _.chain($event)
        .thru(function (x) { return x.target.innerHTML.replace(/&gt;/g, '>'); })
        .replace(/&lt;/g, '<')
        .replace(/&amp;/g, '&')
        .value();
}
exports.replace_string = replace_string;
;
var $LEVEL_SEPARATION_INPUT = document.getElementById("levelSeparation");
var $NODE_SPACING_INPUT = document.getElementById("nodeSpacing");
var $DIRECTION_INPUT = "DU";
var $SORT_METHOD_INPUT = "directed";
exports.OPTIONS = {
    physics: {
        enabled: false,
        repulsion: {
            springLength: 2000
        }
    },
    layout: {
        hierarchical: {
            levelSeparation: Number($LEVEL_SEPARATION_INPUT.value),
            nodeSpacing: Number($NODE_SPACING_INPUT.value),
            direction: $DIRECTION_INPUT,
            sortMethod: $SORT_METHOD_INPUT
        }
    },
    edges: {
        smooth: false,
        arrows: {
            to: false,
            from: false,
        }
    },
    nodes: {
        shape: 'box',
        font: {
            boldital: { color: '#CD2F77' },
            ital: { color: '#656ABD' },
            mono: { color: '#26978D' },
            bold: { color: '#1A85FF' }
        }
    }
};
function funcInput($event) {
    var id_input_formula = document.getElementById("input_formula");
    id_input_formula.value = replace_string($event);
    send_info2elm_proof_draw();
}
exports.funcInput = funcInput;
function makeEdgesFromElm($vismodel) {
    var listOfEdges = [];
    for (var i = 0; i < $vismodel.edges.length; i++) {
        listOfEdges[i] = {
            from: $vismodel.edges[i].from,
            to: $vismodel.edges[i].to,
            label: $vismodel.edges[i].label
        };
    }
    return listOfEdges;
}
exports.makeEdgesFromElm = makeEdgesFromElm;
function makeNodesFromElm($vismodel) {
    var listOfNodes = [];
    for (var i = 0; i < $vismodel.nodes.length; i++) {
        listOfNodes[i] = {
            id: $vismodel.nodes[i].id,
            label: $vismodel.nodes[i].label,
            title: $vismodel.nodes[i].label,
            font: { multi: true }
        };
        if ($vismodel.nodes[i].color === 0) {
            listOfNodes[i].color = '#f0d9d9';
        }
        else if ($vismodel.nodes[i].color === 1) {
            listOfNodes[i].color = '#c1f0c1';
        }
        else if ($vismodel.nodes[i].color === 2) {
            listOfNodes[i].color = '#DDDA62';
        }
        else if ($vismodel.nodes[i].color === 3) {
            listOfNodes[i].color = '#FDF4DF';
        }
        else if ($vismodel.nodes[i].color === 9) {
            listOfNodes[i].color = '#FFA85A';
        }
    }
    return listOfNodes;
}
exports.makeNodesFromElm = makeNodesFromElm;
function send_info2elm_proof_draw() {
    var _input_formula = $('#input_formula').val();
    var _list_modal_system = $('[class="modal_system"]:checked').map(function () { return $(this).val(); }).get().join('');
    var _list_el_system = document.querySelector(".select_logic_for_labelled").innerHTML;
    var _num_expression = Number(document['form4number_of_expressions'].number_of_expressions.value);
    var _json_data = {
        formula: _input_formula,
        action: vis_action_1.ACTION_DATA,
        modalSystem: _list_modal_system,
        elSystem: _list_el_system,
        maxNumberOfExpressionsAppearingInANode: _num_expression,
        randomSeed: {
            randomNumber: 0,
            maxLengthOfRandomFormula: 0,
            maxNumberOfAgents: 0,
            maxNumberOfActions: 0
        }
    };
    elm_main_sequent.ports.input4prove.send(_json_data);
}
exports.send_info2elm_proof_draw = send_info2elm_proof_draw;
elm_main_sequent.ports.output4prove.subscribe(function (model) {
    if (model.formula === "") {
        console.log("comment: error in port_sequent.ts");
    }
    var hh = function () {
        if (model.provable === 0) {
            return "<li><span style=\"color:#A44644\">&#10008;</span><span class='colorOfError'> " + model.formula + " </span> " + model.system + "</li>";
        }
        else if (model.provable === 1) {
            return "<li><span style=\"color:#346B36\">&#10004;</span> <span class='colorOfSuccess'> " + model.formula + " </span> " + model.system + "</li>";
        }
        else if (model.provable === 2) {
            return "<li><span class='colorOfWarning'>" + model.formula + "</span>" + model.system + "</li>";
        }
        else if (model.provable === 9) {
            return "<li><span class='colorOfOrange'>" + model.formula + "</span>" + model.system + "</li>";
        }
    };
    $('#history').append(hh());
    var newNode = makeNodesFromElm(model);
    var newEdge = makeEdgesFromElm(model);
    change_global_NODES_EDGES_update(newNode, newEdge);
});
function change_global_NODES_EDGES_update($nodes, $edges) {
    exports.EDGES_SEQ.remove(exports.EDGES_SEQ.getIds());
    exports.NODES_SEQ.remove(exports.NODES_SEQ.getIds());
    exports.NODES_SEQ.update($nodes);
    exports.EDGES_SEQ.update($edges);
}
exports.change_global_NODES_EDGES_update = change_global_NODES_EDGES_update;
function create_random_formula() {
    elm_main_sequent.ports.input4randomFormula.send(json4elm());
}
exports.create_random_formula = create_random_formula;
elm_main_sequent.ports.output4randomFormula.subscribe(function ($model) {
    var _input_formula = document.getElementById("input_formula");
    var _element_b = document.createElement('li');
    _element_b.className = 'random_formula';
    _element_b.innerHTML = '<a href=#Randoms>' + $model.formula + '</a>';
    document.getElementById('random_test').appendChild(_element_b);
    _element_b.addEventListener("click", function ($event) {
        var _str = replace_string($event);
        _input_formula.value = _str;
        send_info2elm_proof_draw();
    }, false);
});
function create_random_formula_provable() {
    elm_main_sequent.ports.input4randomFormula_provable.send(json4elm());
}
exports.create_random_formula_provable = create_random_formula_provable;
elm_main_sequent.ports.output4randomFormula_provable.subscribe(function ($model) {
    var _id_input_formula = document.getElementById("input_formula");
    var _element_c = document.createElement('li');
    _element_c.className = 'random_formula2';
    _element_c.innerHTML = '<a href=#Randoms>' + $model.formula + '</a>';
    document.getElementById('random_test2').appendChild(_element_c);
    _element_c.addEventListener("click", function ($event) {
        var _str = replace_string($event);
        _id_input_formula.value = _str;
        if (_str === $model.formula) {
            send_info2elm_proof_draw();
        }
    }, false);
});
function json4elm() {
    var _random_number = Date.now();
    var _num_connect = Number(document['form4connective'].number_of_connectives.value);
    var _num_agent = Number(document['form4agent'].number_of_agent.value);
    var _num_action = Number(document['form4action'].number_of_action.value);
    var _list_modal_system = $('[class="modal_system"]:checked').map(function () {
        return $(this).val();
    }).get().join('');
    var _list_el_system = document.querySelector(".select_logic_for_labelled").innerHTML;
    var _randomSeed = {
        formula: "",
        action: [],
        modalSystem: _list_modal_system,
        elSystem: _list_el_system,
        maxNumberOfExpressionsAppearingInANode: 0,
        randomSeed: {
            randomNumber: _random_number,
            maxLengthOfRandomFormula: _num_connect,
            maxNumberOfAgents: _num_agent,
            maxNumberOfActions: _num_action
        }
    };
    return _randomSeed;
}


/***/ }),

/***/ 341:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _toastal$either$Either$unwrap = F3(
	function (d, f, e) {
		var _p0 = e;
		if (_p0.ctor === 'Right') {
			return f(_p0._0);
		} else {
			return d;
		}
	});
var _toastal$either$Either$unpack = F3(
	function (f, g, e) {
		var _p1 = e;
		if (_p1.ctor === 'Left') {
			return f(_p1._0);
		} else {
			return g(_p1._0);
		}
	});
var _toastal$either$Either$fromRight = F2(
	function (d, e) {
		var _p2 = e;
		if (_p2.ctor === 'Right') {
			return _p2._0;
		} else {
			return d;
		}
	});
var _toastal$either$Either$withDefault = _toastal$either$Either$fromRight;
var _toastal$either$Either$fromLeft = F2(
	function (d, e) {
		var _p3 = e;
		if (_p3.ctor === 'Left') {
			return _p3._0;
		} else {
			return d;
		}
	});
var _toastal$either$Either$isRight = function (e) {
	var _p4 = e;
	if (_p4.ctor === 'Right') {
		return true;
	} else {
		return false;
	}
};
var _toastal$either$Either$isLeft = function (e) {
	var _p5 = e;
	if (_p5.ctor === 'Left') {
		return true;
	} else {
		return false;
	}
};
var _toastal$either$Either$toResult = function (e) {
	var _p6 = e;
	if (_p6.ctor === 'Left') {
		return _elm_lang$core$Result$Err(_p6._0);
	} else {
		return _elm_lang$core$Result$Ok(_p6._0);
	}
};
var _toastal$either$Either$leftToMaybe = function (e) {
	var _p7 = e;
	if (_p7.ctor === 'Left') {
		return _elm_lang$core$Maybe$Just(_p7._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _toastal$either$Either$toMaybe = function (e) {
	var _p8 = e;
	if (_p8.ctor === 'Right') {
		return _elm_lang$core$Maybe$Just(_p8._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _toastal$either$Either$rightToMaybe = _toastal$either$Either$toMaybe;
var _toastal$either$Either$biList = A2(_toastal$either$Either$unpack, _elm_lang$core$List$singleton, _elm_lang$core$List$singleton);
var _toastal$either$Either$partition = function () {
	var fun = F2(
		function (e, _p9) {
			var _p10 = _p9;
			var _p13 = _p10._1;
			var _p12 = _p10._0;
			var _p11 = e;
			if (_p11.ctor === 'Left') {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p11._0, _1: _p12},
					_1: _p13
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _p12,
					_1: {ctor: '::', _0: _p11._0, _1: _p13}
				};
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		fun,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		});
}();
var _toastal$either$Either$rights = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			var _p14 = e;
			if (_p14.ctor === 'Right') {
				return {ctor: '::', _0: _p14._0, _1: acc};
			} else {
				return acc;
			}
		}),
	{ctor: '[]'});
var _toastal$either$Either$lefts = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			var _p15 = e;
			if (_p15.ctor === 'Left') {
				return {ctor: '::', _0: _p15._0, _1: acc};
			} else {
				return acc;
			}
		}),
	{ctor: '[]'});
var _toastal$either$Either$foldr = F3(
	function (f, acc, e) {
		var _p16 = e;
		if (_p16.ctor === 'Left') {
			return acc;
		} else {
			return A2(f, _p16._0, acc);
		}
	});
var _toastal$either$Either$foldl = F3(
	function (f, acc, e) {
		var _p17 = e;
		if (_p17.ctor === 'Right') {
			return acc;
		} else {
			return A2(f, _p17._0, acc);
		}
	});
var _toastal$either$Either$length = function (e) {
	var _p18 = e;
	if (_p18.ctor === 'Left') {
		return 0;
	} else {
		return 1;
	}
};
var _toastal$either$Either$Right = function (a) {
	return {ctor: 'Right', _0: a};
};
var _toastal$either$Either$singleton = _toastal$either$Either$Right;
var _toastal$either$Either$andThenLeft = F2(
	function (f, e) {
		var _p19 = e;
		if (_p19.ctor === 'Left') {
			return f(_p19._0);
		} else {
			return _toastal$either$Either$Right(_p19._0);
		}
	});
var _toastal$either$Either$Left = function (a) {
	return {ctor: 'Left', _0: a};
};
var _toastal$either$Either$map = F2(
	function (f, e) {
		var _p20 = e;
		if (_p20.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p20._0));
		} else {
			return _toastal$either$Either$Left(_p20._0);
		}
	});
var _toastal$either$Either$mapRight = _toastal$either$Either$map;
var _toastal$either$Either$voidRight = function (f) {
	return _toastal$either$Either$map(
		_elm_lang$core$Basics$always(f));
};
var _toastal$either$Either$mapLeft = F2(
	function (f, e) {
		var _p21 = e;
		if (_p21.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p21._0));
		} else {
			return _toastal$either$Either$Right(_p21._0);
		}
	});
var _toastal$either$Either$voidLeft = function (f) {
	return _toastal$either$Either$mapLeft(
		_elm_lang$core$Basics$always(f));
};
var _toastal$either$Either$andMapLeft = F2(
	function (e, e1) {
		var _p22 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p22._1.ctor === 'Right') {
			return _toastal$either$Either$Right(_p22._1._0);
		} else {
			return A2(_toastal$either$Either$mapLeft, _p22._1._0, _p22._0);
		}
	});
var _toastal$either$Either$mapBoth = F3(
	function (f, g, e) {
		var _p23 = e;
		if (_p23.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p23._0));
		} else {
			return _toastal$either$Either$Right(
				g(_p23._0));
		}
	});
var _toastal$either$Either$mapEach = F2(
	function (f, e) {
		var _p24 = e;
		if (_p24.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p24._0));
		} else {
			return _toastal$either$Either$Right(
				f(_p24._0));
		}
	});
var _toastal$either$Either$andMap = F2(
	function (e, e1) {
		var _p25 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p25._1.ctor === 'Left') {
			return _toastal$either$Either$Left(_p25._1._0);
		} else {
			return A2(_toastal$either$Either$map, _p25._1._0, _p25._0);
		}
	});
var _toastal$either$Either$andMapRight = _toastal$either$Either$andMap;
var _toastal$either$Either$map2 = F3(
	function (f, e, e1) {
		var _p26 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p26._0.ctor === 'Right') {
			if (_p26._1.ctor === 'Right') {
				return _toastal$either$Either$Right(
					A2(f, _p26._0._0, _p26._1._0));
			} else {
				return _toastal$either$Either$Left(_p26._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p26._0._0);
		}
	});
var _toastal$either$Either$map3 = F4(
	function (f, e, e1, e2) {
		var _p27 = {ctor: '_Tuple3', _0: e, _1: e1, _2: e2};
		if (_p27._0.ctor === 'Right') {
			if (_p27._1.ctor === 'Right') {
				if (_p27._2.ctor === 'Right') {
					return _toastal$either$Either$Right(
						A3(f, _p27._0._0, _p27._1._0, _p27._2._0));
				} else {
					return _toastal$either$Either$Left(_p27._2._0);
				}
			} else {
				return _toastal$either$Either$Left(_p27._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p27._0._0);
		}
	});
var _toastal$either$Either$map4 = F5(
	function (f, e, e1, e2, e3) {
		var _p28 = {ctor: '_Tuple4', _0: e, _1: e1, _2: e2, _3: e3};
		if (_p28._0.ctor === 'Right') {
			if (_p28._1.ctor === 'Right') {
				if (_p28._2.ctor === 'Right') {
					if (_p28._3.ctor === 'Right') {
						return _toastal$either$Either$Right(
							A4(f, _p28._0._0, _p28._1._0, _p28._2._0, _p28._3._0));
					} else {
						return _toastal$either$Either$Left(_p28._3._0);
					}
				} else {
					return _toastal$either$Either$Left(_p28._2._0);
				}
			} else {
				return _toastal$either$Either$Left(_p28._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p28._0._0);
		}
	});
var _toastal$either$Either$andThen = F2(
	function (f, e) {
		var _p29 = e;
		if (_p29.ctor === 'Right') {
			return f(_p29._0);
		} else {
			return _toastal$either$Either$Left(_p29._0);
		}
	});
var _toastal$either$Either$andThenRight = _toastal$either$Either$andThen;
var _toastal$either$Either$fromMaybe = F2(
	function (d, m) {
		var _p30 = m;
		if (_p30.ctor === 'Just') {
			return _toastal$either$Either$Right(_p30._0);
		} else {
			return _toastal$either$Either$Left(d);
		}
	});
var _toastal$either$Either$rightFromMaybe = _toastal$either$Either$fromMaybe;
var _toastal$either$Either$leftFromMaybe = F2(
	function (d, m) {
		var _p31 = m;
		if (_p31.ctor === 'Just') {
			return _toastal$either$Either$Left(_p31._0);
		} else {
			return _toastal$either$Either$Right(d);
		}
	});
var _toastal$either$Either$fromResult = function (r) {
	var _p32 = r;
	if (_p32.ctor === 'Err') {
		return _toastal$either$Either$Left(_p32._0);
	} else {
		return _toastal$either$Either$Right(_p32._0);
	}
};
var _toastal$either$Either$swap = function (e) {
	var _p33 = e;
	if (_p33.ctor === 'Left') {
		return _toastal$either$Either$Right(_p33._0);
	} else {
		return _toastal$either$Either$Left(_p33._0);
	}
};

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _Skinney$fnv$FNV$fnvPrime = (Math.pow(2, 24) + Math.pow(2, 8)) + 147;
var _Skinney$fnv$FNV$hashHelp = F2(
	function (c, hash) {
		return ((hash ^ _elm_lang$core$Char$toCode(c)) * _Skinney$fnv$FNV$fnvPrime) >>> 0;
	});
var _Skinney$fnv$FNV$hashString = function (str) {
	return A3(_elm_lang$core$String$foldl, _Skinney$fnv$FNV$hashHelp, 0, str);
};

var _TSFoster$elm_compare$Compare$comp = F3(
	function (fn, x, y) {
		return A2(
			_elm_lang$core$Basics$compare,
			fn(x),
			fn(y));
	});
var _TSFoster$elm_compare$Compare$descending = F3(
	function (fn, a, b) {
		return A2(fn, b, a);
	});
var _TSFoster$elm_compare$Compare$ascending = F3(
	function (fn, a, b) {
		return A2(fn, a, b);
	});
var _TSFoster$elm_compare$Compare$thenWithReverse = F3(
	function (ord, fn, next) {
		return next(
			F2(
				function (x, y) {
					var _p0 = A2(ord, x, y);
					if (_p0.ctor === 'EQ') {
						return A2(fn, y, x);
					} else {
						return _p0;
					}
				}));
	});
var _TSFoster$elm_compare$Compare$thenByReverse = F2(
	function (ord, fn) {
		return A2(
			_TSFoster$elm_compare$Compare$thenWithReverse,
			ord,
			_TSFoster$elm_compare$Compare$comp(fn));
	});
var _TSFoster$elm_compare$Compare$thenWith = F3(
	function (ord, fn, next) {
		return next(
			F2(
				function (x, y) {
					var _p1 = A2(ord, x, y);
					if (_p1.ctor === 'EQ') {
						return A2(fn, x, y);
					} else {
						return _p1;
					}
				}));
	});
var _TSFoster$elm_compare$Compare$thenBy = F2(
	function (ord, fn) {
		return A2(
			_TSFoster$elm_compare$Compare$thenWith,
			ord,
			_TSFoster$elm_compare$Compare$comp(fn));
	});
var _TSFoster$elm_compare$Compare$with = F2(
	function (fn, next) {
		return next(fn);
	});
var _TSFoster$elm_compare$Compare$by = function (fn) {
	return _TSFoster$elm_compare$Compare$with(
		_TSFoster$elm_compare$Compare$comp(fn));
};

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Random$onSelfMsg = F3(
	function (_p1, _p0, seed) {
		return _elm_lang$core$Task$succeed(seed);
	});
var _elm_lang$core$Random$magicNum8 = 2147483562;
var _elm_lang$core$Random$range = function (_p2) {
	return {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Random$magicNum8};
};
var _elm_lang$core$Random$magicNum7 = 2147483399;
var _elm_lang$core$Random$magicNum6 = 2147483563;
var _elm_lang$core$Random$magicNum5 = 3791;
var _elm_lang$core$Random$magicNum4 = 40692;
var _elm_lang$core$Random$magicNum3 = 52774;
var _elm_lang$core$Random$magicNum2 = 12211;
var _elm_lang$core$Random$magicNum1 = 53668;
var _elm_lang$core$Random$magicNum0 = 40014;
var _elm_lang$core$Random$step = F2(
	function (_p3, seed) {
		var _p4 = _p3;
		return _p4._0(seed);
	});
var _elm_lang$core$Random$onEffects = F3(
	function (router, commands, seed) {
		var _p5 = commands;
		if (_p5.ctor === '[]') {
			return _elm_lang$core$Task$succeed(seed);
		} else {
			var _p6 = A2(_elm_lang$core$Random$step, _p5._0._0, seed);
			var value = _p6._0;
			var newSeed = _p6._1;
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p7) {
					return A3(_elm_lang$core$Random$onEffects, router, _p5._1, newSeed);
				},
				A2(_elm_lang$core$Platform$sendToApp, router, value));
		}
	});
var _elm_lang$core$Random$listHelp = F4(
	function (list, n, generate, seed) {
		listHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$reverse(list),
					_1: seed
				};
			} else {
				var _p8 = generate(seed);
				var value = _p8._0;
				var newSeed = _p8._1;
				var _v2 = {ctor: '::', _0: value, _1: list},
					_v3 = n - 1,
					_v4 = generate,
					_v5 = newSeed;
				list = _v2;
				n = _v3;
				generate = _v4;
				seed = _v5;
				continue listHelp;
			}
		}
	});
var _elm_lang$core$Random$minInt = -2147483648;
var _elm_lang$core$Random$maxInt = 2147483647;
var _elm_lang$core$Random$iLogBase = F2(
	function (b, i) {
		return (_elm_lang$core$Native_Utils.cmp(i, b) < 0) ? 1 : (1 + A2(_elm_lang$core$Random$iLogBase, b, (i / b) | 0));
	});
var _elm_lang$core$Random$command = _elm_lang$core$Native_Platform.leaf('Random');
var _elm_lang$core$Random$Generator = function (a) {
	return {ctor: 'Generator', _0: a};
};
var _elm_lang$core$Random$list = F2(
	function (n, _p9) {
		var _p10 = _p9;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				return A4(
					_elm_lang$core$Random$listHelp,
					{ctor: '[]'},
					n,
					_p10._0,
					seed);
			});
	});
var _elm_lang$core$Random$map = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p13 = _p12._0(seed0);
				var a = _p13._0;
				var seed1 = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: func(a),
					_1: seed1
				};
			});
	});
var _elm_lang$core$Random$map2 = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p18 = _p16._0(seed0);
				var a = _p18._0;
				var seed1 = _p18._1;
				var _p19 = _p17._0(seed1);
				var b = _p19._0;
				var seed2 = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: A2(func, a, b),
					_1: seed2
				};
			});
	});
var _elm_lang$core$Random$pair = F2(
	function (genA, genB) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			genA,
			genB);
	});
var _elm_lang$core$Random$map3 = F4(
	function (func, _p22, _p21, _p20) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p26 = _p23._0(seed0);
				var a = _p26._0;
				var seed1 = _p26._1;
				var _p27 = _p24._0(seed1);
				var b = _p27._0;
				var seed2 = _p27._1;
				var _p28 = _p25._0(seed2);
				var c = _p28._0;
				var seed3 = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: A3(func, a, b, c),
					_1: seed3
				};
			});
	});
var _elm_lang$core$Random$map4 = F5(
	function (func, _p32, _p31, _p30, _p29) {
		var _p33 = _p32;
		var _p34 = _p31;
		var _p35 = _p30;
		var _p36 = _p29;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p37 = _p33._0(seed0);
				var a = _p37._0;
				var seed1 = _p37._1;
				var _p38 = _p34._0(seed1);
				var b = _p38._0;
				var seed2 = _p38._1;
				var _p39 = _p35._0(seed2);
				var c = _p39._0;
				var seed3 = _p39._1;
				var _p40 = _p36._0(seed3);
				var d = _p40._0;
				var seed4 = _p40._1;
				return {
					ctor: '_Tuple2',
					_0: A4(func, a, b, c, d),
					_1: seed4
				};
			});
	});
var _elm_lang$core$Random$map5 = F6(
	function (func, _p45, _p44, _p43, _p42, _p41) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p43;
		var _p49 = _p42;
		var _p50 = _p41;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p51 = _p46._0(seed0);
				var a = _p51._0;
				var seed1 = _p51._1;
				var _p52 = _p47._0(seed1);
				var b = _p52._0;
				var seed2 = _p52._1;
				var _p53 = _p48._0(seed2);
				var c = _p53._0;
				var seed3 = _p53._1;
				var _p54 = _p49._0(seed3);
				var d = _p54._0;
				var seed4 = _p54._1;
				var _p55 = _p50._0(seed4);
				var e = _p55._0;
				var seed5 = _p55._1;
				return {
					ctor: '_Tuple2',
					_0: A5(func, a, b, c, d, e),
					_1: seed5
				};
			});
	});
var _elm_lang$core$Random$andThen = F2(
	function (callback, _p56) {
		var _p57 = _p56;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p58 = _p57._0(seed);
				var result = _p58._0;
				var newSeed = _p58._1;
				var _p59 = callback(result);
				var genB = _p59._0;
				return genB(newSeed);
			});
	});
var _elm_lang$core$Random$State = F2(
	function (a, b) {
		return {ctor: 'State', _0: a, _1: b};
	});
var _elm_lang$core$Random$initState = function (seed) {
	var s = A2(_elm_lang$core$Basics$max, seed, 0 - seed);
	var q = (s / (_elm_lang$core$Random$magicNum6 - 1)) | 0;
	var s2 = A2(_elm_lang$core$Basics_ops['%'], q, _elm_lang$core$Random$magicNum7 - 1);
	var s1 = A2(_elm_lang$core$Basics_ops['%'], s, _elm_lang$core$Random$magicNum6 - 1);
	return A2(_elm_lang$core$Random$State, s1 + 1, s2 + 1);
};
var _elm_lang$core$Random$next = function (_p60) {
	var _p61 = _p60;
	var _p63 = _p61._1;
	var _p62 = _p61._0;
	var k2 = (_p63 / _elm_lang$core$Random$magicNum3) | 0;
	var rawState2 = (_elm_lang$core$Random$magicNum4 * (_p63 - (k2 * _elm_lang$core$Random$magicNum3))) - (k2 * _elm_lang$core$Random$magicNum5);
	var newState2 = (_elm_lang$core$Native_Utils.cmp(rawState2, 0) < 0) ? (rawState2 + _elm_lang$core$Random$magicNum7) : rawState2;
	var k1 = (_p62 / _elm_lang$core$Random$magicNum1) | 0;
	var rawState1 = (_elm_lang$core$Random$magicNum0 * (_p62 - (k1 * _elm_lang$core$Random$magicNum1))) - (k1 * _elm_lang$core$Random$magicNum2);
	var newState1 = (_elm_lang$core$Native_Utils.cmp(rawState1, 0) < 0) ? (rawState1 + _elm_lang$core$Random$magicNum6) : rawState1;
	var z = newState1 - newState2;
	var newZ = (_elm_lang$core$Native_Utils.cmp(z, 1) < 0) ? (z + _elm_lang$core$Random$magicNum8) : z;
	return {
		ctor: '_Tuple2',
		_0: newZ,
		_1: A2(_elm_lang$core$Random$State, newState1, newState2)
	};
};
var _elm_lang$core$Random$split = function (_p64) {
	var _p65 = _p64;
	var _p68 = _p65._1;
	var _p67 = _p65._0;
	var _p66 = _elm_lang$core$Tuple$second(
		_elm_lang$core$Random$next(_p65));
	var t1 = _p66._0;
	var t2 = _p66._1;
	var new_s2 = _elm_lang$core$Native_Utils.eq(_p68, 1) ? (_elm_lang$core$Random$magicNum7 - 1) : (_p68 - 1);
	var new_s1 = _elm_lang$core$Native_Utils.eq(_p67, _elm_lang$core$Random$magicNum6 - 1) ? 1 : (_p67 + 1);
	return {
		ctor: '_Tuple2',
		_0: A2(_elm_lang$core$Random$State, new_s1, t2),
		_1: A2(_elm_lang$core$Random$State, t1, new_s2)
	};
};
var _elm_lang$core$Random$Seed = function (a) {
	return {ctor: 'Seed', _0: a};
};
var _elm_lang$core$Random$int = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (_p69) {
				var _p70 = _p69;
				var _p75 = _p70._0;
				var base = 2147483561;
				var f = F3(
					function (n, acc, state) {
						f:
						while (true) {
							var _p71 = n;
							if (_p71 === 0) {
								return {ctor: '_Tuple2', _0: acc, _1: state};
							} else {
								var _p72 = _p75.next(state);
								var x = _p72._0;
								var nextState = _p72._1;
								var _v27 = n - 1,
									_v28 = x + (acc * base),
									_v29 = nextState;
								n = _v27;
								acc = _v28;
								state = _v29;
								continue f;
							}
						}
					});
				var _p73 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p73._0;
				var hi = _p73._1;
				var k = (hi - lo) + 1;
				var n = A2(_elm_lang$core$Random$iLogBase, base, k);
				var _p74 = A3(f, n, 1, _p75.state);
				var v = _p74._0;
				var nextState = _p74._1;
				return {
					ctor: '_Tuple2',
					_0: lo + A2(_elm_lang$core$Basics_ops['%'], v, k),
					_1: _elm_lang$core$Random$Seed(
						_elm_lang$core$Native_Utils.update(
							_p75,
							{state: nextState}))
				};
			});
	});
var _elm_lang$core$Random$bool = A2(
	_elm_lang$core$Random$map,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(1),
	A2(_elm_lang$core$Random$int, 0, 1));
var _elm_lang$core$Random$float = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p76 = A2(
					_elm_lang$core$Random$step,
					A2(_elm_lang$core$Random$int, _elm_lang$core$Random$minInt, _elm_lang$core$Random$maxInt),
					seed);
				var number = _p76._0;
				var newSeed = _p76._1;
				var negativeOneToOne = _elm_lang$core$Basics$toFloat(number) / _elm_lang$core$Basics$toFloat(_elm_lang$core$Random$maxInt - _elm_lang$core$Random$minInt);
				var _p77 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p77._0;
				var hi = _p77._1;
				var scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne);
				return {ctor: '_Tuple2', _0: scaled, _1: newSeed};
			});
	});
var _elm_lang$core$Random$initialSeed = function (n) {
	return _elm_lang$core$Random$Seed(
		{
			state: _elm_lang$core$Random$initState(n),
			next: _elm_lang$core$Random$next,
			split: _elm_lang$core$Random$split,
			range: _elm_lang$core$Random$range
		});
};
var _elm_lang$core$Random$init = A2(
	_elm_lang$core$Task$andThen,
	function (t) {
		return _elm_lang$core$Task$succeed(
			_elm_lang$core$Random$initialSeed(
				_elm_lang$core$Basics$round(t)));
	},
	_elm_lang$core$Time$now);
var _elm_lang$core$Random$Generate = function (a) {
	return {ctor: 'Generate', _0: a};
};
var _elm_lang$core$Random$generate = F2(
	function (tagger, generator) {
		return _elm_lang$core$Random$command(
			_elm_lang$core$Random$Generate(
				A2(_elm_lang$core$Random$map, tagger, generator)));
	});
var _elm_lang$core$Random$cmdMap = F2(
	function (func, _p78) {
		var _p79 = _p78;
		return _elm_lang$core$Random$Generate(
			A2(_elm_lang$core$Random$map, func, _p79._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Random'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Random$init, onEffects: _elm_lang$core$Random$onEffects, onSelfMsg: _elm_lang$core$Random$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Random$cmdMap};

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p0 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p0._0.ctor === '[]') {
			return true;
		} else {
			if (_p0._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p0._0._1, _p0._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p1 = xs;
	if (_p1.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p5 = _p1._1;
		var _p4 = _p1._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p4,
				_2: _p5
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p4, _1: _p3._0},
						_1: _p3._1,
						_2: _p3._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p5))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p9, _1: _p10},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: {ctor: '::', _0: _p9, _1: _p8._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p11 = list;
		if (_p11.ctor === '::') {
			var _p12 = _p11._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p12},
				_1: {ctor: '::', _0: _p12, _1: _p11._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infix, xs) {
		return A2(
			_elm_lang$core$List$any,
			_elm_community$list_extra$List_Extra$isPrefixOf(infix),
			_elm_community$list_extra$List_Extra$tails(xs));
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (cmp, xs_) {
		var _p13 = xs_;
		if (_p13.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p13._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _p13._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p15 = _p13._0;
				var _p14 = A2(_elm_community$list_extra$List_Extra$groupWhileTransitively, cmp, _p13._1);
				if (_p14.ctor === '::') {
					return A2(cmp, _p15, _p13._1._0) ? {
						ctor: '::',
						_0: {ctor: '::', _0: _p15, _1: _p14._0},
						_1: _p14._1
					} : {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _p15,
							_1: {ctor: '[]'}
						},
						_1: _p14
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p16 = m;
				if (_p16.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p16._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p16._0._0) ? _elm_lang$core$Maybe$Just(_p16._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p17) {
			var _p18 = _p17;
			var _p19 = _p18._0;
			return (p(x) && _p18._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p19},
				_1: true
			} : {ctor: '_Tuple2', _0: _p19, _1: false};
		});
	return function (_p20) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p20));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p21 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === '::')) && (_p21._1.ctor === '::')) {
				var _p22 = A2(_elm_community$list_extra$List_Extra$splitAt, _p21._0._0, list);
				var head = _p22._0;
				var tail = _p22._1;
				var _v11 = _p21._0._1,
					_v12 = tail,
					_v13 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v11;
				list = _v12;
				accu = _v13;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p23 = f(seed);
		if (_p23.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p23._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p23._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p24 = xs_;
		if (_p24.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p24._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p25 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p24._1);
				if (_p25.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p24._0, _p25._0),
						_1: _p25
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p26 = xs_;
		if (_p26.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p27 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p26._1);
			if (_p27.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p26._0, _p27._0),
					_1: _p27
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p28 = xs_;
		if (_p28.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p28._0, _p28._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				return {
					ctor: '_Tuple2',
					_0: _p31 - 1,
					_1: A3(func, _p31, x, _p30._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p32) {
				var _p33 = _p32;
				var _p34 = _p33._0;
				return {
					ctor: '_Tuple2',
					_0: _p34 + 1,
					_1: A3(func, _p34, x, _p33._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p35 = m;
						if (_p35.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p35._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p36 = m;
						if (_p36.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p36._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (l1, l2, acc) {
		interweaveHelp:
		while (true) {
			var _p37 = {ctor: '_Tuple2', _0: l1, _1: l2};
			_v24_1:
			do {
				if (_p37._0.ctor === '::') {
					if (_p37._1.ctor === '::') {
						var _v25 = _p37._0._1,
							_v26 = _p37._1._1,
							_v27 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							{
								ctor: '::',
								_0: _p37._0._0,
								_1: {
									ctor: '::',
									_0: _p37._1._0,
									_1: {ctor: '[]'}
								}
							});
						l1 = _v25;
						l2 = _v26;
						acc = _v27;
						continue interweaveHelp;
					} else {
						break _v24_1;
					}
				} else {
					if (_p37._1.ctor === '[]') {
						break _v24_1;
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._1);
					}
				}
			} while(false);
			return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._0);
		}
	});
var _elm_community$list_extra$List_Extra$interweave = F2(
	function (l1, l2) {
		return A3(
			_elm_community$list_extra$List_Extra$interweaveHelp,
			l1,
			l2,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p38 = xs_;
	if (_p38.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p39) {
			var _p40 = _p39;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p40._0),
				_elm_community$list_extra$List_Extra$permutations(_p40._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p38));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p41 = xs;
	if (_p41.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p42 = _p41._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p42, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p42,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p41._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, xs) {
		return A2(
			_elm_lang$core$List$member,
			subseq,
			_elm_community$list_extra$List_Extra$subsequences(xs));
	});
var _elm_community$list_extra$List_Extra$transpose = function (ll) {
	transpose:
	while (true) {
		var _p43 = ll;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p43._0.ctor === '[]') {
				var _v32 = _p43._1;
				ll = _v32;
				continue transpose;
			} else {
				var _p44 = _p43._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p44);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p44);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p43._0._0, _1: heads},
					_1: _elm_community$list_extra$List_Extra$transpose(
						{ctor: '::', _0: _p43._0._1, _1: tails})
				};
			}
		}
	}
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p45) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p45));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p46) {
				return !pred(_p46);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p47 = tail;
			if (_p47.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p47._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p49, _p48) {
				var _p50 = _p49;
				var _p51 = _p48;
				var result = A2(pred, _p50._0, _p51._0);
				var _p52 = result;
				if (_p52.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p50._1, _p51._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$setAt = F3(
	function (index, value, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p53 = tail;
			if (_p53.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$List$append,
						head,
						{ctor: '::', _0: value, _1: _p53._0}));
			}
		}
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p54 = xs;
		if (_p54.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p56 = _p54._1;
			var _p55 = _p54._0;
			return _elm_lang$core$Native_Utils.eq(x, _p55) ? _p56 : {
				ctor: '::',
				_0: _p55,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p56)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, update, list) {
		return ((_elm_lang$core$Native_Utils.cmp(index, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$List$length(list)) > -1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A3(
				_elm_community$list_extra$List_Extra$updateIfIndex,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(index),
				update,
				list));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$findIndices = function (p) {
	return function (_p57) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p58) {
					var _p59 = _p58;
					return p(_p59._1);
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p57)));
	};
};
var _elm_community$list_extra$List_Extra$findIndex = function (p) {
	return function (_p60) {
		return _elm_lang$core$List$head(
			A2(_elm_community$list_extra$List_Extra$findIndices, p, _p60));
	};
};
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p61 = list;
			if (_p61.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p62 = _p61._0;
				if (predicate(_p62)) {
					return _elm_lang$core$Maybe$Just(_p62);
				} else {
					var _v41 = predicate,
						_v42 = _p61._1;
					predicate = _v41;
					list = _v42;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p63) {
		return !A2(_elm_lang$core$List$member, x, _p63);
	};
};
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p64 = remaining;
			if (_p64.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p66 = _p64._1;
				var _p65 = _p64._0;
				var computedFirst = f(_p65);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v44 = f,
						_v45 = existing,
						_v46 = _p66;
					f = _v44;
					existing = _v45;
					remaining = _v46;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p65,
						_1: A3(
							_elm_community$list_extra$List_Extra$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p66)
					};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A3(_elm_community$list_extra$List_Extra$uniqueHelp, f, _elm_lang$core$Set$empty, list);
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A3(_elm_community$list_extra$List_Extra$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p67 = list;
			if (_p67.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p67._0)) {
					var _v48 = predicate,
						_v49 = _p67._1;
					predicate = _v48;
					list = _v49;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p68 = list;
				if (_p68.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p69 = _p68._0;
					if (predicate(_p69)) {
						var _v51 = {ctor: '::', _0: _p69, _1: memo},
							_v52 = _p68._1;
						memo = _v51;
						list = _v52;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p70) {
			return !p(_p70);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p71 = xs_;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p73 = _p71._0;
			var _p72 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p73),
				_p71._1);
			var ys = _p72._0;
			var zs = _p72._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p73, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p74) {
				var _p75 = _p74;
				var _p76 = _p75._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p76) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p75._0, _1: _p76};
			});
		var _p77 = ls;
		if (_p77.ctor === '::') {
			if (_p77._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p77._0);
			} else {
				var _p78 = _p77._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p78,
								_1: f(_p78)
							},
							_p77._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p79) {
				var _p80 = _p79;
				var _p81 = _p80._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p81) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p80._0, _1: _p81};
			});
		var _p82 = ls;
		if (_p82.ctor === '::') {
			if (_p82._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p82._0);
			} else {
				var _p83 = _p82._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p83,
								_1: f(_p83)
							},
							_p82._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p84 = xs;
	if (_p84.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p84._0, _1: _p84._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2)) {
				return _elm_lang$core$Maybe$Just(l);
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v59 = index2,
						_v60 = index1,
						_v61 = l;
					index1 = _v59;
					index2 = _v60;
					l = _v61;
					continue swapAt;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p85 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
						var part1 = _p85._0;
						var tail1 = _p85._1;
						var _p86 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
						var head2 = _p86._0;
						var tail2 = _p86._1;
						return A3(
							_elm_lang$core$Maybe$map2,
							F2(
								function (_p88, _p87) {
									var _p89 = _p88;
									var _p90 = _p87;
									return _elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: part1,
											_1: {
												ctor: '::',
												_0: {ctor: '::', _0: _p90._0, _1: _p89._1},
												_1: {
													ctor: '::',
													_0: {ctor: '::', _0: _p89._0, _1: _p90._1},
													_1: {ctor: '[]'}
												}
											}
										});
								}),
							_elm_community$list_extra$List_Extra$uncons(head2),
							_elm_community$list_extra$List_Extra$uncons(tail2));
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p91 = f(x);
		if (_p91.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p91._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function () {
	var maybe = F2(
		function (d, f) {
			return function (_p92) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					d,
					A2(_elm_lang$core$Maybe$map, f, _p92));
			};
		});
	return A2(
		_elm_lang$core$List$foldr,
		function (x) {
			return function (_p93) {
				return _elm_lang$core$Maybe$Just(
					A3(
						maybe,
						{ctor: '[]'},
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(x),
						_p93));
			};
		},
		_elm_lang$core$Maybe$Nothing);
}();
var _elm_community$list_extra$List_Extra$last = _elm_community$list_extra$List_Extra$foldl1(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$toArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$toList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _elm_community$parser_combinators$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _elm_community$parser_combinators$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _elm_community$parser_combinators$Combine$initStream = function (s) {
	return A3(_elm_community$parser_combinators$Combine$InputStream, s, s, 0);
};
var _elm_community$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_elm_community$parser_combinators$Combine$app,
			p,
			st,
			_elm_community$parser_combinators$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _elm_community$parser_combinators$Combine$parse = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _elm_community$parser_combinators$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _elm_community$parser_combinators$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_elm_community$parser_combinators$Combine$ParseLocation, '', 1, position);
				} else {
					if (_p2._1.ctor === '[]') {
						return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p2._0, currentLine + 1, position);
					} else {
						var _p3 = _p2._0;
						var length = _elm_lang$core$String$length(_p3);
						if (_elm_lang$core$Native_Utils.cmp(position, length) > -1) {
							var _v3 = (position - length) - 1,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							if (_elm_lang$core$Native_Utils.eq(currentLine, 0)) {
								return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, 1, position);
							} else {
								return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, currentLine, position - 1);
							}
						}
					}
				}
			}
		});
	return A3(
		find,
		stream.position,
		0,
		A2(_elm_lang$core$String$split, '\n', stream.data));
};
var _elm_community$parser_combinators$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p4));
};
var _elm_community$parser_combinators$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p5));
};
var _elm_community$parser_combinators$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p6));
};
var _elm_community$parser_combinators$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _elm_community$parser_combinators$Combine$lazy = function (t) {
	return _elm_community$parser_combinators$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _elm_community$parser_combinators$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _elm_community$parser_combinators$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_community$parser_combinators$Combine$primitive = _elm_community$parser_combinators$Combine$Parser;
var _elm_community$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3(_elm_community$parser_combinators$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$>'] = _elm_community$parser_combinators$Combine$map;
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$'] = function (res) {
	return _elm_community$parser_combinators$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _elm_community$parser_combinators$Combine$skip = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_elm_community$parser_combinators$Combine_ops['<$'], x, y);
		}));
var _elm_community$parser_combinators$Combine$mapError = _elm_community$parser_combinators$Combine$bimap(_elm_lang$core$Basics$identity);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_elm_community$parser_combinators$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _elm_community$parser_combinators$Combine$withState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLocation = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLine = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withColumn = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_elm_community$parser_combinators$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andThen);
var _elm_community$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _elm_community$parser_combinators$Combine$map, rp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andMap);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(_elm_community$parser_combinators$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(
				_elm_community$parser_combinators$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _elm_community$parser_combinators$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine_ops['*>'], lp, p),
			rp);
	});
var _elm_community$parser_combinators$Combine$sequence = function (parsers) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_elm_community$parser_combinators$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					parsers,
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$fail = function (m) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _elm_community$parser_combinators$Combine$emptyErr = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _elm_community$parser_combinators$Combine$succeed = function (res) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$putState = function (state) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$modifyState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _elm_community$parser_combinators$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _elm_community$parser_combinators$Combine$string = function (s) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$parens = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('('),
	_elm_community$parser_combinators$Combine$string(')'));
var _elm_community$parser_combinators$Combine$braces = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('{'),
	_elm_community$parser_combinators$Combine$string('}'));
var _elm_community$parser_combinators$Combine$brackets = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('['),
	_elm_community$parser_combinators$Combine$string(']'));
var _elm_community$parser_combinators$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$whitespace = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _elm_community$parser_combinators$Combine$whitespace1 = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]+'),
	'whitespace');
var _elm_community$parser_combinators$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$end = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _elm_community$parser_combinators$Combine$lookAhead = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _elm_community$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_elm_community$parser_combinators$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_elm_community$parser_combinators$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _elm_community$parser_combinators$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _elm_community$parser_combinators$Combine$or, _elm_community$parser_combinators$Combine$emptyErr, xs);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<|>'] = _elm_community$parser_combinators$Combine$or;
var _elm_community$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			p,
			_elm_community$parser_combinators$Combine$succeed(res));
	});
var _elm_community$parser_combinators$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return _elm_community$parser_combinators$Combine$succeed(
									A2(f, x, y));
							},
							A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p));
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$maybe = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$many1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_elm_community$parser_combinators$Combine$many(p));
};
var _elm_community$parser_combinators$Combine$skipMany1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many1(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_elm_community$parser_combinators$Combine$many(
				A2(_elm_community$parser_combinators$Combine_ops['*>'], sep, p)));
	});
var _elm_community$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$maybe(sep));
	});
var _elm_community$parser_combinators$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepEndBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$skipMany = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_elm_community$parser_combinators$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _elm_community$parser_combinators$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _elm_community$random_extra$Random_Extra$andThen6 = F7(
	function (constructor, generatorA, generatorB, generatorC, generatorD, generatorE, generatorF) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Random$andThen,
											function (e) {
												return A2(
													_elm_lang$core$Random$andThen,
													function (f) {
														return A6(constructor, a, b, c, d, e, f);
													},
													generatorF);
											},
											generatorE);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen5 = F6(
	function (constructor, generatorA, generatorB, generatorC, generatorD, generatorE) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Random$andThen,
											function (e) {
												return A5(constructor, a, b, c, d, e);
											},
											generatorE);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen4 = F5(
	function (constructor, generatorA, generatorB, generatorC, generatorD) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Random$andThen,
									function (d) {
										return A4(constructor, a, b, c, d);
									},
									generatorD);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen3 = F4(
	function (constructor, generatorA, generatorB, generatorC) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Random$andThen,
							function (c) {
								return A3(constructor, a, b, c);
							},
							generatorC);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$andThen2 = F3(
	function (constructor, generatorA, generatorB) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Random$andThen,
					function (b) {
						return A2(constructor, a, b);
					},
					generatorB);
			},
			generatorA);
	});
var _elm_community$random_extra$Random_Extra$rangeLengthList = F3(
	function (minLength, maxLength, generator) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (len) {
				return A2(_elm_lang$core$Random$list, len, generator);
			},
			A2(_elm_lang$core$Random$int, minLength, maxLength));
	});
var _elm_community$random_extra$Random_Extra$result = F3(
	function (genBool, genErr, genVal) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (b) {
				return b ? A2(_elm_lang$core$Random$map, _elm_lang$core$Result$Ok, genVal) : A2(_elm_lang$core$Random$map, _elm_lang$core$Result$Err, genErr);
			},
			genBool);
	});
var _elm_community$random_extra$Random_Extra$sample = function () {
	var find = F2(
		function (k, ys) {
			find:
			while (true) {
				var _p0 = ys;
				if (_p0.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_elm_lang$core$Native_Utils.eq(k, 0)) {
						return _elm_lang$core$Maybe$Just(_p0._0);
					} else {
						var _v1 = k - 1,
							_v2 = _p0._1;
						k = _v1;
						ys = _v2;
						continue find;
					}
				}
			}
		});
	return function (xs) {
		return A2(
			_elm_lang$core$Random$map,
			function (i) {
				return A2(find, i, xs);
			},
			A2(
				_elm_lang$core$Random$int,
				0,
				_elm_lang$core$List$length(xs) - 1));
	};
}();
var _elm_community$random_extra$Random_Extra$frequency = function (pairs) {
	var pick = F2(
		function (choices, n) {
			pick:
			while (true) {
				var _p1 = choices;
				if ((_p1.ctor === '::') && (_p1._0.ctor === '_Tuple2')) {
					var _p2 = _p1._0._0;
					if (_elm_lang$core$Native_Utils.cmp(n, _p2) < 1) {
						return _p1._0._1;
					} else {
						var _v4 = _p1._1,
							_v5 = n - _p2;
						choices = _v4;
						n = _v5;
						continue pick;
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Random.Extra',
						{
							start: {line: 154, column: 13},
							end: {line: 162, column: 79}
						},
						_p1)('Empty list passed to Random.Extra.frequency!');
				}
			}
		});
	var total = _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			function (_p4) {
				return _elm_lang$core$Basics$abs(
					_elm_lang$core$Tuple$first(_p4));
			},
			pairs));
	return A2(
		_elm_lang$core$Random$andThen,
		pick(pairs),
		A2(_elm_lang$core$Random$float, 0, total));
};
var _elm_community$random_extra$Random_Extra$choices = function (gens) {
	return _elm_community$random_extra$Random_Extra$frequency(
		A2(
			_elm_lang$core$List$map,
			function (g) {
				return {ctor: '_Tuple2', _0: 1, _1: g};
			},
			gens));
};
var _elm_community$random_extra$Random_Extra$choice = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Random$map,
			function (b) {
				return b ? x : y;
			},
			_elm_lang$core$Random$bool);
	});
var _elm_community$random_extra$Random_Extra$oneIn = function (n) {
	return A2(
		_elm_lang$core$Random$map,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(1),
		A2(_elm_lang$core$Random$int, 1, n));
};
var _elm_community$random_extra$Random_Extra$andMap = F2(
	function (generator, funcGenerator) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			funcGenerator,
			generator);
	});
var _elm_community$random_extra$Random_Extra$map6 = F7(
	function (f, generatorA, generatorB, generatorC, generatorD, generatorE, generatorF) {
		return A2(
			_elm_community$random_extra$Random_Extra$andMap,
			generatorF,
			A6(_elm_lang$core$Random$map5, f, generatorA, generatorB, generatorC, generatorD, generatorE));
	});
var _elm_community$random_extra$Random_Extra$constant = function (value) {
	return A2(
		_elm_lang$core$Random$map,
		function (_p5) {
			return value;
		},
		_elm_lang$core$Random$bool);
};
var _elm_community$random_extra$Random_Extra$filter = F2(
	function (predicate, generator) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (a) {
				return predicate(a) ? _elm_community$random_extra$Random_Extra$constant(a) : A2(_elm_community$random_extra$Random_Extra$filter, predicate, generator);
			},
			generator);
	});
var _elm_community$random_extra$Random_Extra$combine = function (generators) {
	var _p6 = generators;
	if (_p6.ctor === '[]') {
		return _elm_community$random_extra$Random_Extra$constant(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p6._0,
			_elm_community$random_extra$Random_Extra$combine(_p6._1));
	}
};
var _elm_community$random_extra$Random_Extra$maybe = F2(
	function (genBool, genA) {
		return A2(
			_elm_lang$core$Random$andThen,
			function (b) {
				return b ? A2(_elm_lang$core$Random$map, _elm_lang$core$Maybe$Just, genA) : _elm_community$random_extra$Random_Extra$constant(_elm_lang$core$Maybe$Nothing);
			},
			genBool);
	});

var _elm_community$random_extra$Random_List$get = F2(
	function (index, list) {
		return _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, index, list));
	});
var _elm_community$random_extra$Random_List$choose = function (list) {
	if (_elm_lang$core$List$isEmpty(list)) {
		return _elm_community$random_extra$Random_Extra$constant(
			{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: list});
	} else {
		var back = function (i) {
			return A2(_elm_lang$core$List$drop, i + 1, list);
		};
		var front = function (i) {
			return A2(_elm_lang$core$List$take, i, list);
		};
		var lastIndex = _elm_lang$core$List$length(list) - 1;
		var gen = A2(_elm_lang$core$Random$int, 0, lastIndex);
		return A2(
			_elm_lang$core$Random$map,
			function (index) {
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_community$random_extra$Random_List$get, index, list),
					_1: A2(
						_elm_lang$core$List$append,
						front(index),
						back(index))
				};
			},
			gen);
	}
};
var _elm_community$random_extra$Random_List$shuffle = function (list) {
	if (_elm_lang$core$List$isEmpty(list)) {
		return _elm_community$random_extra$Random_Extra$constant(list);
	} else {
		var helper = function (_p0) {
			var _p1 = _p0;
			var _p6 = _p1._0;
			return A2(
				_elm_lang$core$Random$andThen,
				function (_p2) {
					var _p3 = _p2;
					var _p5 = _p3._1;
					var _p4 = _p3._0;
					if (_p4.ctor === 'Nothing') {
						return _elm_community$random_extra$Random_Extra$constant(
							{ctor: '_Tuple2', _0: _p6, _1: _p5});
					} else {
						return helper(
							{
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: _p4._0, _1: _p6},
								_1: _p5
							});
					}
				},
				_elm_community$random_extra$Random_List$choose(_p1._1));
		};
		return A2(
			_elm_lang$core$Random$map,
			_elm_lang$core$Tuple$first,
			helper(
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: list
				}));
	}
};

var _elm_community$result_extra$Result_Extra$merge = function (r) {
	var _p0 = r;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _elm_community$result_extra$Result_Extra$orElse = F2(
	function (ra, rb) {
		var _p1 = rb;
		if (_p1.ctor === 'Err') {
			return ra;
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orElseLazy = F2(
	function (fra, rb) {
		var _p2 = rb;
		if (_p2.ctor === 'Err') {
			return fra(
				{ctor: '_Tuple0'});
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orLazy = F2(
	function (ra, frb) {
		var _p3 = ra;
		if (_p3.ctor === 'Err') {
			return frb(
				{ctor: '_Tuple0'});
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$or = F2(
	function (ra, rb) {
		var _p4 = ra;
		if (_p4.ctor === 'Err') {
			return rb;
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$andMap = F2(
	function (ra, rb) {
		var _p5 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p5._1.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p5._1._0);
		} else {
			return A2(_elm_lang$core$Result$map, _p5._1._0, _p5._0);
		}
	});
var _elm_community$result_extra$Result_Extra$singleton = _elm_lang$core$Result$Ok;
var _elm_community$result_extra$Result_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Result$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Result$Ok(
		{ctor: '[]'}));
var _elm_community$result_extra$Result_Extra$mapBoth = F3(
	function (errFunc, okFunc, result) {
		var _p6 = result;
		if (_p6.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				okFunc(_p6._0));
		} else {
			return _elm_lang$core$Result$Err(
				errFunc(_p6._0));
		}
	});
var _elm_community$result_extra$Result_Extra$unpack = F3(
	function (errFunc, okFunc, result) {
		var _p7 = result;
		if (_p7.ctor === 'Ok') {
			return okFunc(_p7._0);
		} else {
			return errFunc(_p7._0);
		}
	});
var _elm_community$result_extra$Result_Extra$unwrap = F3(
	function (defaultValue, okFunc, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return okFunc(_p8._0);
		} else {
			return defaultValue;
		}
	});
var _elm_community$result_extra$Result_Extra$extract = F2(
	function (f, x) {
		var _p9 = x;
		if (_p9.ctor === 'Ok') {
			return _p9._0;
		} else {
			return f(_p9._0);
		}
	});
var _elm_community$result_extra$Result_Extra$isErr = function (x) {
	var _p10 = x;
	if (_p10.ctor === 'Ok') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$result_extra$Result_Extra$isOk = function (x) {
	var _p11 = x;
	if (_p11.ctor === 'Ok') {
		return true;
	} else {
		return false;
	}
};

var _elm_community$string_extra$String_Extra$accentRegex = function () {
	var matches = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '[à-æ]', _1: 'a'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '[À-Æ]', _1: 'A'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ç', _1: 'c'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Ç', _1: 'C'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '[è-ë]', _1: 'e'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '[È-Ë]', _1: 'E'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '[ì-ï]', _1: 'i'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '[Ì-Ï]', _1: 'I'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ñ', _1: 'n'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'Ñ', _1: 'N'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '[ò-ö]', _1: 'o'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '[Ò-Ö]', _1: 'O'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '[ù-ü]', _1: 'u'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '[Ù-Ü]', _1: 'U'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'ý', _1: 'y'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'ÿ', _1: 'y'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'Ý', _1: 'Y'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$core$List$map,
		function (_p0) {
			var _p1 = _p0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Regex$regex(_p1._0),
				_1: _p1._1
			};
		},
		matches);
}();
var _elm_community$string_extra$String_Extra$removeAccents = function (string) {
	if (_elm_lang$core$String$isEmpty(string)) {
		return string;
	} else {
		var do_regex_to_remove_acents = function (_p2) {
			var _p3 = _p2;
			return A3(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_p3._0,
				function (_p4) {
					return _p3._1;
				});
		};
		return A3(_elm_lang$core$List$foldl, do_regex_to_remove_acents, string, _elm_community$string_extra$String_Extra$accentRegex);
	}
};
var _elm_community$string_extra$String_Extra$nonEmpty = function (string) {
	return _elm_lang$core$String$isEmpty(string) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(string);
};
var _elm_community$string_extra$String_Extra$replacementCodePoint = 65533;
var _elm_community$string_extra$String_Extra$toCodePoints = function (string) {
	var allCodeUnits = A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Char$toCode,
		_elm_lang$core$String$toList(string));
	var combineAndReverse = F2(
		function (codeUnits, accumulated) {
			combineAndReverse:
			while (true) {
				var _p5 = codeUnits;
				if (_p5.ctor === '[]') {
					return accumulated;
				} else {
					var _p9 = _p5._0;
					var _p8 = _p5._1;
					if ((_elm_lang$core$Native_Utils.cmp(_p9, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 55295) < 1)) {
						var _v3 = _p8,
							_v4 = {ctor: '::', _0: _p9, _1: accumulated};
						codeUnits = _v3;
						accumulated = _v4;
						continue combineAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p9, 55296) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 56319) < 1)) {
							var _p6 = _p8;
							if (_p6.ctor === '[]') {
								return {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
							} else {
								var _p7 = _p6._0;
								if ((_elm_lang$core$Native_Utils.cmp(_p7, 56320) > -1) && (_elm_lang$core$Native_Utils.cmp(_p7, 57343) < 1)) {
									var codePoint = (65536 + ((_p9 - 55296) * 1024)) + (_p7 - 56320);
									var _v6 = _p6._1,
										_v7 = {ctor: '::', _0: codePoint, _1: accumulated};
									codeUnits = _v6;
									accumulated = _v7;
									continue combineAndReverse;
								} else {
									var _v8 = _p8,
										_v9 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
									codeUnits = _v8;
									accumulated = _v9;
									continue combineAndReverse;
								}
							}
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p9, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 65535) < 1)) {
								var _v10 = _p8,
									_v11 = {ctor: '::', _0: _p9, _1: accumulated};
								codeUnits = _v10;
								accumulated = _v11;
								continue combineAndReverse;
							} else {
								var _v12 = _p8,
									_v13 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codeUnits = _v12;
								accumulated = _v13;
								continue combineAndReverse;
							}
						}
					}
				}
			}
		});
	return _elm_lang$core$List$reverse(
		A2(
			combineAndReverse,
			allCodeUnits,
			{ctor: '[]'}));
};
var _elm_community$string_extra$String_Extra$fromCodePoints = function (allCodePoints) {
	var splitAndReverse = F2(
		function (codePoints, accumulated) {
			splitAndReverse:
			while (true) {
				var _p10 = codePoints;
				if (_p10.ctor === '[]') {
					return accumulated;
				} else {
					var _p12 = _p10._1;
					var _p11 = _p10._0;
					if ((_elm_lang$core$Native_Utils.cmp(_p11, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 55295) < 1)) {
						var _v15 = _p12,
							_v16 = {ctor: '::', _0: _p11, _1: accumulated};
						codePoints = _v15;
						accumulated = _v16;
						continue splitAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p11, 65536) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 1114111) < 1)) {
							var subtracted = _p11 - 65536;
							var leading = (subtracted >> 10) + 55296;
							var trailing = (subtracted & 1023) + 56320;
							var _v17 = _p12,
								_v18 = {
								ctor: '::',
								_0: trailing,
								_1: {ctor: '::', _0: leading, _1: accumulated}
							};
							codePoints = _v17;
							accumulated = _v18;
							continue splitAndReverse;
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p11, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 65535) < 1)) {
								var _v19 = _p12,
									_v20 = {ctor: '::', _0: _p11, _1: accumulated};
								codePoints = _v19;
								accumulated = _v20;
								continue splitAndReverse;
							} else {
								var _v21 = _p12,
									_v22 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codePoints = _v21;
								accumulated = _v22;
								continue splitAndReverse;
							}
						}
					}
				}
			}
		});
	var allCodeUnits = _elm_lang$core$List$reverse(
		A2(
			splitAndReverse,
			allCodePoints,
			{ctor: '[]'}));
	return _elm_lang$core$String$fromList(
		A2(_elm_lang$core$List$map, _elm_lang$core$Char$fromCode, allCodeUnits));
};
var _elm_community$string_extra$String_Extra$fromFloat = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$fromInt = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$leftOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				A2(_elm_lang$core$Basics$flip, _elm_lang$core$String$left, string),
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$rightOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p13) {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$String$dropLeft,
						string,
						A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							_elm_lang$core$String$length(pattern),
							_p13));
				},
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$firstResultHelp = F2(
	function ($default, list) {
		firstResultHelp:
		while (true) {
			var _p14 = list;
			if (_p14.ctor === '[]') {
				return $default;
			} else {
				if (_p14._0.ctor === 'Just') {
					return _p14._0._0;
				} else {
					var _v24 = $default,
						_v25 = _p14._1;
					$default = _v24;
					list = _v25;
					continue firstResultHelp;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$firstResult = function (list) {
	return A2(_elm_community$string_extra$String_Extra$firstResultHelp, '', list);
};
var _elm_community$string_extra$String_Extra$leftOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p15) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p15));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'^(.*?)',
							_elm_lang$core$Regex$escape(pattern))),
					string)));
	});
var _elm_community$string_extra$String_Extra$rightOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p16) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p16));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Regex$escape(pattern),
							'(.*)$')),
					string)));
	});
var _elm_community$string_extra$String_Extra$pluralize = F3(
	function (singular, plural, count) {
		return _elm_lang$core$Native_Utils.eq(count, 1) ? A2(_elm_lang$core$Basics_ops['++'], '1 ', singular) : A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(count),
			A2(_elm_lang$core$Basics_ops['++'], ' ', plural));
	});
var _elm_community$string_extra$String_Extra$stripTags = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('<\\/?[^>]+>'),
		_elm_lang$core$Basics$always(''),
		string);
};
var _elm_community$string_extra$String_Extra$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p17 = list;
			if (_p17.ctor === '[]') {
				return sentence;
			} else {
				if (_p17._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p17._0));
				} else {
					var _v27 = lastPart,
						_v28 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ', ', _p17._0)),
						_v29 = _p17._1;
					lastPart = _v27;
					sentence = _v28;
					list = _v29;
					continue toSentenceHelper;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$toSentenceBaseCase = function (list) {
	var _p18 = list;
	_v30_2:
	do {
		if (_p18.ctor === '::') {
			if (_p18._1.ctor === '[]') {
				return _p18._0;
			} else {
				if (_p18._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p18._0,
						A2(_elm_lang$core$Basics_ops['++'], ' and ', _p18._1._0));
				} else {
					break _v30_2;
				}
			}
		} else {
			break _v30_2;
		}
	} while(false);
	return '';
};
var _elm_community$string_extra$String_Extra$toSentenceOxford = function (list) {
	var _p19 = list;
	if (((_p19.ctor === '::') && (_p19._1.ctor === '::')) && (_p19._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			', and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p19._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p19._1._0)),
			{ctor: '::', _0: _p19._1._1._0, _1: _p19._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$toSentence = function (list) {
	var _p20 = list;
	if (((_p20.ctor === '::') && (_p20._1.ctor === '::')) && (_p20._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			' and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p20._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p20._1._0)),
			{ctor: '::', _0: _p20._1._1._0, _1: _p20._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$ellipsisWith = F3(
	function (howLong, append, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$String$left,
				howLong - _elm_lang$core$String$length(append),
				string),
			append);
	});
var _elm_community$string_extra$String_Extra$ellipsis = F2(
	function (howLong, string) {
		return A3(_elm_community$string_extra$String_Extra$ellipsisWith, howLong, '...', string);
	});
var _elm_community$string_extra$String_Extra$countOccurrences = F2(
	function (needle, haystack) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(needle),
			0) || _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(haystack),
			0)) ? 0 : _elm_lang$core$List$length(
			A2(_elm_lang$core$String$indexes, needle, haystack));
	});
var _elm_community$string_extra$String_Extra$unindent = function (multilineSting) {
	var isNotWhitespace = function ($char) {
		return (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr('\t')));
	};
	var countLeadingWhitespace = F2(
		function (count, line) {
			countLeadingWhitespace:
			while (true) {
				var _p21 = _elm_lang$core$String$uncons(line);
				if (_p21.ctor === 'Nothing') {
					return count;
				} else {
					var _p23 = _p21._0._1;
					var _p22 = _p21._0._0;
					switch (_p22.valueOf()) {
						case ' ':
							var _v35 = count + 1,
								_v36 = _p23;
							count = _v35;
							line = _v36;
							continue countLeadingWhitespace;
						case '\t':
							var _v37 = count + 1,
								_v38 = _p23;
							count = _v37;
							line = _v38;
							continue countLeadingWhitespace;
						default:
							return count;
					}
				}
			}
		});
	var lines = _elm_lang$core$String$lines(multilineSting);
	var minLead = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$minimum(
			A2(
				_elm_lang$core$List$map,
				countLeadingWhitespace(0),
				A2(
					_elm_lang$core$List$filter,
					_elm_lang$core$String$any(isNotWhitespace),
					lines))));
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$String$dropLeft(minLead),
			lines));
};
var _elm_community$string_extra$String_Extra$dasherize = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('-'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([A-Z])'),
				function (_p24) {
					return A2(
						_elm_lang$core$String$append,
						'-',
						function (_) {
							return _.match;
						}(_p24));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$underscored = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('_'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([a-z\\d])([A-Z]+)'),
				function (_p25) {
					return A2(
						_elm_lang$core$String$join,
						'_',
						A2(
							_elm_lang$core$List$filterMap,
							_elm_lang$core$Basics$identity,
							function (_) {
								return _.submatches;
							}(_p25)));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$unsurround = F2(
	function (wrap, string) {
		if (A2(_elm_lang$core$String$startsWith, wrap, string) && A2(_elm_lang$core$String$endsWith, wrap, string)) {
			var length = _elm_lang$core$String$length(wrap);
			return A2(
				_elm_lang$core$String$dropRight,
				length,
				A2(_elm_lang$core$String$dropLeft, length, string));
		} else {
			return string;
		}
	});
var _elm_community$string_extra$String_Extra$unquote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$unsurround, '\"', string);
};
var _elm_community$string_extra$String_Extra$surround = F2(
	function (wrap, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			wrap,
			A2(_elm_lang$core$Basics_ops['++'], string, wrap));
	});
var _elm_community$string_extra$String_Extra$quote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$surround, '\"', string);
};
var _elm_community$string_extra$String_Extra$camelize = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[-_\\s]+(.)?'),
		function (_p26) {
			var _p27 = _p26;
			var _p28 = _p27.submatches;
			if ((_p28.ctor === '::') && (_p28._0.ctor === 'Just')) {
				return _elm_lang$core$String$toUpper(_p28._0._0);
			} else {
				return '';
			}
		},
		_elm_lang$core$String$trim(string));
};
var _elm_community$string_extra$String_Extra$isBlank = function (string) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('^\\s*$'),
		string);
};
var _elm_community$string_extra$String_Extra$clean = function (string) {
	return _elm_lang$core$String$trim(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s\\s+'),
			_elm_lang$core$Basics$always(' '),
			string));
};
var _elm_community$string_extra$String_Extra$softBreakRegexp = function (width) {
	return _elm_lang$core$Regex$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'.{1,',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(width),
				'}(\\s+|$)|\\S+?(\\s+|$)')));
};
var _elm_community$string_extra$String_Extra$softEllipsis = F2(
	function (howLong, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$String$append,
			'...',
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([\\.,;:\\s])+$'),
				_elm_lang$core$Basics$always(''),
				A2(
					_elm_lang$core$String$join,
					'',
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.match;
						},
						A3(
							_elm_lang$core$Regex$find,
							_elm_lang$core$Regex$AtMost(1),
							_elm_community$string_extra$String_Extra$softBreakRegexp(howLong),
							string)))));
	});
var _elm_community$string_extra$String_Extra$softBreak = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.cmp(width, 0) < 1) ? {ctor: '[]'} : A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.match;
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_community$string_extra$String_Extra$softBreakRegexp(width),
				string));
	});
var _elm_community$string_extra$String_Extra$softWrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$softBreak, width, string));
	});
var _elm_community$string_extra$String_Extra$softWrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$softWrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			var _p29 = string;
			if (_p29 === '') {
				return _elm_lang$core$List$reverse(acc);
			} else {
				var _v42 = width,
					_v43 = A2(_elm_lang$core$String$dropLeft, width, string),
					_v44 = {
					ctor: '::',
					_0: A3(_elm_lang$core$String$slice, 0, width, string),
					_1: acc
				};
				width = _v42;
				string = _v43;
				acc = _v44;
				continue breaker;
			}
		}
	});
var _elm_community$string_extra$String_Extra$break = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.eq(width, 0) || _elm_lang$core$Native_Utils.eq(string, '')) ? {
			ctor: '::',
			_0: string,
			_1: {ctor: '[]'}
		} : A3(
			_elm_community$string_extra$String_Extra$breaker,
			width,
			string,
			{ctor: '[]'});
	});
var _elm_community$string_extra$String_Extra$wrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$break, width, string));
	});
var _elm_community$string_extra$String_Extra$wrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$wrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, start, string),
			A2(
				_elm_lang$core$Basics_ops['++'],
				substitution,
				A3(
					_elm_lang$core$String$slice,
					end,
					_elm_lang$core$String$length(string),
					string)));
	});
var _elm_community$string_extra$String_Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4(_elm_community$string_extra$String_Extra$replaceSlice, insert, pos, pos, string);
	});
var _elm_community$string_extra$String_Extra$replace = F3(
	function (search, substitution, string) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(
				_elm_lang$core$Regex$escape(search)),
			function (_p30) {
				return substitution;
			},
			string);
	});
var _elm_community$string_extra$String_Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p31) {
					var _p32 = _p31;
					return A2(
						_elm_lang$core$String$cons,
						mutator(_p32._0),
						_p32._1);
				},
				_elm_lang$core$String$uncons(word)));
	});
var _elm_community$string_extra$String_Extra$toSentenceCase = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toUpper, word);
};
var _elm_community$string_extra$String_Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('\\w+'),
		function (_p33) {
			return _elm_community$string_extra$String_Extra$toSentenceCase(
				function (_) {
					return _.match;
				}(_p33));
		});
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('^([a-z])|\\s+([a-z])'),
		function (_p34) {
			return uppercaseMatch(
				function (_) {
					return _.match;
				}(_p34));
		},
		ws);
};
var _elm_community$string_extra$String_Extra$classify = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		A3(
			_elm_community$string_extra$String_Extra$replace,
			' ',
			'',
			_elm_community$string_extra$String_Extra$camelize(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('[\\W_]'),
					_elm_lang$core$Basics$always(' '),
					string))));
};
var _elm_community$string_extra$String_Extra$humanize = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		_elm_lang$core$String$toLower(
			_elm_lang$core$String$trim(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('_id$|[-_\\s]+'),
					_elm_lang$core$Basics$always(' '),
					A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex('[A-Z]'),
						function (_p35) {
							return A2(
								_elm_lang$core$String$append,
								'-',
								function (_) {
									return _.match;
								}(_p35));
						},
						string)))));
};
var _elm_community$string_extra$String_Extra$decapitalize = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toLower, word);
};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');


var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['@@>'] = F2(
	function (mx, mf) {
		return A2(_elm_community$result_extra$Result_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<@@'] = F2(
	function (mf, mx) {
		return A2(_elm_community$result_extra$Result_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['@>'] = F2(
	function (mx, f) {
		var _p0 = mx;
		if (_p0.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				f(_p0._0));
		} else {
			return _elm_lang$core$Result$Err(_p0._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<@'] = F2(
	function (f, mx) {
		var _p1 = mx;
		if (_p1.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				f(_p1._0));
		} else {
			return _elm_lang$core$Result$Err(_p1._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['!>'] = F2(
	function (mx, f) {
		var _p2 = mx;
		if (_p2.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p2._0));
		} else {
			return _toastal$either$Either$Left(_p2._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<!'] = F2(
	function (f, mx) {
		var _p3 = mx;
		if (_p3.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p3._0));
		} else {
			return _toastal$either$Either$Left(_p3._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['??>'] = F2(
	function (mx, mf) {
		return A2(_elm_community$maybe_extra$Maybe_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<??'] = F2(
	function (mf, mx) {
		return A2(_elm_community$maybe_extra$Maybe_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['?>'] = F2(
	function (mx, f) {
		var _p4 = mx;
		if (_p4.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<?'] = F2(
	function (f, mx) {
		var _p5 = mx;
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p5._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['$$>'] = F2(
	function (lx, lf) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (f, x) {
					return f(x);
				}),
			lf,
			lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<$$'] = F2(
	function (lf, lx) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (f, x) {
					return f(x);
				}),
			lf,
			lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['$>'] = F2(
	function (lx, f) {
		return A2(_elm_lang$core$List$map, f, lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<$'] = F2(
	function (f, lx) {
		return A2(_elm_lang$core$List$map, f, lx);
	});

var _user$project$Util$thd3 = function (_p0) {
	var _p1 = _p0;
	return _p1._2;
};
var _user$project$Util$snd3 = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Util$fst3 = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Util$snd = function (_p6) {
	var _p7 = _p6;
	return _p7._1;
};
var _user$project$Util$fst = function (_p8) {
	var _p9 = _p8;
	return _p9._0;
};
var _user$project$Util$removeComma = _elm_lang$core$List$filter(
	function (x) {
		return !_elm_lang$core$Native_Utils.eq(
			x,
			_elm_lang$core$Native_Utils.chr(','));
	});
var _user$project$Util$delete = F2(
	function (a, li) {
		return A2(
			_elm_lang$core$List$filter,
			function (x) {
				return !_elm_lang$core$Native_Utils.eq(a, x);
			},
			li);
	});
var _user$project$Util$removeWhiteSpace = _user$project$Util$delete(
	_elm_lang$core$Native_Utils.chr(' '));
var _user$project$Util$removeWhiteSpaceFromString = function (a) {
	return _elm_lang$core$String$fromList(
		_user$project$Util$removeWhiteSpace(
			_elm_lang$core$String$toList(a)));
};
var _user$project$Util$string2num = function (x) {
	return _elm_lang$core$Basics$toString(
		_Skinney$fnv$FNV$hashString(x));
};
var _user$project$Util$concatComma = function (a) {
	return _elm_lang$core$String$concat(
		A2(_elm_lang$core$List$intersperse, ' , ', a));
};
var _user$project$Util$powerList = function (xs) {
	return _elm_community$list_extra$List_Extra$subsequences(xs);
};
var _user$project$Util$subList = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$member,
			a,
			_user$project$Util$powerList(b));
	});
var _user$project$Util$difference = F2(
	function (xs, ys) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, a) {
					return A2(_elm_lang$core$List$member, x, ys) ? a : {ctor: '::', _0: x, _1: a};
				}),
			{ctor: '[]'},
			xs);
	});
var _user$project$Util$exists = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$any, p, xs);
	});
var _user$project$Util$forall = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$all, p, xs);
	});
var _user$project$Util$nub2 = _elm_community$list_extra$List_Extra$unique;
var _user$project$Util$nsort = function (x) {
	return _elm_lang$core$List$sort(
		_user$project$Util$nub2(x));
};
var _user$project$Util$nub = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (a, xss) {
				return A2(_elm_lang$core$List$member, a, xss) ? xss : {ctor: '::', _0: a, _1: xss};
			}),
		{ctor: '[]'},
		xs);
};
var _user$project$Util$rotate = function (li) {
	var ff = function (_p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Basics_ops['++'], _p11._0, _p11._1);
	};
	var tai = _elm_community$list_extra$List_Extra$tails(li);
	var ini = _elm_community$list_extra$List_Extra$inits(li);
	return _user$project$Util$nub(
		A2(
			_elm_lang$core$List$map,
			ff,
			A2(_elm_community$list_extra$List_Extra$zip, tai, ini)));
};
var _user$project$Util$intersectL = F2(
	function (xs1, xs2) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (a, ax) {
					return A2(_elm_lang$core$List$member, a, xs1) ? {ctor: '::', _0: a, _1: ax} : ax;
				}),
			{ctor: '[]'},
			xs2);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['==>'] = F2(
	function (b1, b2) {
		return (!b1) || b2;
	});
var _user$project$Util$unwords = _elm_lang$core$String$concat;
var _user$project$Util$initTail = function (a) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_community$list_extra$List_Extra$init(
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(a))));
};
var _user$project$Util$lookup = F2(
	function (a, li) {
		lookup:
		while (true) {
			var _p12 = li;
			if (_p12.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p12._0._0, a)) {
					return _elm_lang$core$Maybe$Just(_p12._0._1);
				} else {
					var _v7 = a,
						_v8 = _p12._1;
					a = _v7;
					li = _v8;
					continue lookup;
				}
			}
		}
	});
var _user$project$Util$lookVal = F2(
	function (at, li) {
		lookVal:
		while (true) {
			var _p13 = li;
			if (_p13.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p13._0._0)) {
					return _p13._0._1;
				} else {
					var _v10 = at,
						_v11 = _p13._1;
					at = _v10;
					li = _v11;
					continue lookVal;
				}
			}
		}
	});
var _user$project$Util$lookRel = F2(
	function (at, li) {
		var gg = function (_p14) {
			var _p15 = _p14;
			return {ctor: '_Tuple2', _0: _p15._1, _1: _p15._2};
		};
		return A2(_elm_lang$core$List$map, gg, li);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['$>>='] = F2(
	function (x, y) {
		return A2(_elm_lang$core$List$concatMap, y, x);
	});
var _user$project$Util$cartesian = F2(
	function (xs, ys) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: x, _1: y},
							_1: {ctor: '[]'}
						};
					});
			});
	});
var _user$project$Util$cartesian2 = F3(
	function (xs, ys, zs) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return A2(
							_user$project$Util_ops['$>>='],
							zs,
							function (z) {
								return {
									ctor: '::',
									_0: {ctor: '_Tuple3', _0: x, _1: y, _2: z},
									_1: {ctor: '[]'}
								};
							});
					});
			});
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['?>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Maybe$andThen);
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['@>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Result$andThen);
var _user$project$Util$unzip2 = function (pairs) {
	var ff = F2(
		function (_p17, _p16) {
			var _p18 = _p17;
			var _p19 = _p16;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], _p18._0, _p19._0),
				_1: A2(_elm_lang$core$Basics_ops['++'], _p18._1, _p19._1)
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		ff,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _user$project$Util$maybeBigOr = function (li) {
	var _p20 = li;
	if (_p20.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_elm_community$maybe_extra$Maybe_Extra$or, x, y);
				}),
			_p20._0,
			_p20._1);
	}
};
var _user$project$Util$show = _elm_lang$core$Basics$toString;
var _user$project$Util$isSingleton = function (li) {
	var _p21 = li;
	if ((_p21.ctor === '::') && (_p21._1.ctor === '[]')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Util$or = function (li) {
	return A2(
		_user$project$Util$exists,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$and = function (li) {
	return A2(
		_user$project$Util$forall,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$maybelist2list = function (mli) {
	maybelist2list:
	while (true) {
		var _p22 = mli;
		if (_p22.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p24 = _p22._1;
			var _p23 = _p22._0;
			if (_p23.ctor === 'Nothing') {
				var _v19 = _p24;
				mli = _v19;
				continue maybelist2list;
			} else {
				return {
					ctor: '::',
					_0: _p23._0,
					_1: _user$project$Util$maybelist2list(_p24)
				};
			}
		}
	}
};
var _user$project$Util$int2list = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? {ctor: '[]'} : A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: n,
			_1: {ctor: '[]'}
		},
		_user$project$Util$int2list(n - 1));
};
var _user$project$Util$forallResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p25 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p25._0.ctor === 'Ok') {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p25._0._0 && _p25._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._1._0);
					}
				} else {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Err(_p25._0._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$forallEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p26 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p26._0.ctor === 'Right') {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p26._0._0 && _p26._1._0);
					} else {
						return _toastal$either$Either$Left(_p26._1._0);
					}
				} else {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Left(_p26._0._0);
					} else {
						return _toastal$either$Either$Left(_p26._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(true),
			listOfEither);
	});
var _user$project$Util$existsResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p27 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p27._0.ctor === 'Ok') {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._0._0 || _p27._1._0);
					} else {
						return _elm_lang$core$Result$Ok(_p27._0._0);
					}
				} else {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p27._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$existsEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p28 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p28._0.ctor === 'Right') {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._0._0 || _p28._1._0);
					} else {
						return _toastal$either$Either$Right(_p28._0._0);
					}
				} else {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._1._0);
					} else {
						return _toastal$either$Either$Left(_p28._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(false),
			listOfEither);
	});
var _user$project$Util$forallMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p29 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p29._0.ctor === 'Just') {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p29._0._0 && _p29._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Maybe$Just(true),
			listOfEither);
	});
var _user$project$Util$existsMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p30 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p30._0.ctor === 'Just') {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._0._0 || _p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Just(_p30._0._0);
					}
				} else {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(_elm_lang$core$List$foldl, biOp, _elm_lang$core$Maybe$Nothing, listOfEither);
	});
var _user$project$Util$filterR2 = F3(
	function (func, li, res) {
		filterR2:
		while (true) {
			var _p31 = li;
			if (_p31.ctor === '[]') {
				return res;
			} else {
				var _p34 = _p31._1;
				var _p33 = _p31._0;
				var _p32 = func(_p33);
				if (_p32.ctor === 'Ok') {
					if (_p32._0 === true) {
						var _v28 = func,
							_v29 = _p34,
							_v30 = A2(
							_elm_lang$core$Result$map,
							function (y) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Util$nub(y),
									{
										ctor: '::',
										_0: _p33,
										_1: {ctor: '[]'}
									});
							},
							res);
						func = _v28;
						li = _v29;
						res = _v30;
						continue filterR2;
					} else {
						var _v31 = func,
							_v32 = _p34,
							_v33 = res;
						func = _v31;
						li = _v32;
						res = _v33;
						continue filterR2;
					}
				} else {
					return _elm_lang$core$Result$Err(_p32._0);
				}
			}
		}
	});
var _user$project$Util$filterR = F2(
	function (func, li) {
		return A3(
			_user$project$Util$filterR2,
			func,
			li,
			_elm_lang$core$Result$Ok(
				{ctor: '[]'}));
	});
var _user$project$Util$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p35 = list;
			if (_p35.ctor === '[]') {
				return sentence;
			} else {
				if (_p35._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p35._0));
				} else {
					var _v35 = lastPart,
						_v36 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p35._0)),
						_v37 = _p35._1;
					lastPart = _v35;
					sentence = _v36;
					list = _v37;
					continue toSentenceHelper;
				}
			}
		}
	});
var _user$project$Util$toSentenceBaseCase = function (list) {
	var _p36 = list;
	_v38_2:
	do {
		if (_p36.ctor === '::') {
			if (_p36._1.ctor === '[]') {
				return _p36._0;
			} else {
				if (_p36._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p36._0,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p36._1._0));
				} else {
					break _v38_2;
				}
			}
		} else {
			break _v38_2;
		}
	} while(false);
	return '';
};
var _user$project$Util$toSentenceComma = function (list) {
	var _p37 = list;
	if (((_p37.ctor === '::') && (_p37._1.ctor === '::')) && (_p37._1._1.ctor === '::')) {
		return A3(
			_user$project$Util$toSentenceHelper,
			',',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p37._0,
				A2(_elm_lang$core$Basics_ops['++'], ',', _p37._1._0)),
			{ctor: '::', _0: _p37._1._1._0, _1: _p37._1._1._1});
	} else {
		return _user$project$Util$toSentenceBaseCase(list);
	}
};

var _user$project$Common_syntax$outputAction = function (f) {
	var _p0 = f;
	switch (_p0.ctor) {
		case 'PointAModel':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0.am_name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(_elm_lang$core$Basics_ops['++'], _p0._1, ')'))));
		case 'Cup':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$outputAction(_p0._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'U',
					_user$project$Common_syntax$outputAction(_p0._1)));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$outputAction(_p0._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					_user$project$Common_syntax$outputAction(_p0._1)));
	}
};
var _user$project$Common_syntax_ops = _user$project$Common_syntax_ops || {};
_user$project$Common_syntax_ops['++++'] = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			a,
			A2(_elm_lang$core$Basics_ops['++'], ' ', b));
	});
var _user$project$Common_syntax$outputForm = F2(
	function (n, f) {
		var paren = F2(
			function (k, s) {
				return (_elm_lang$core$Native_Utils.cmp(n, k) > 0) ? A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(_elm_lang$core$Basics_ops['++'], s, ')')) : s;
			});
		var _p1 = f;
		switch (_p1.ctor) {
			case 'Atom':
				return _p1._0;
			case 'AnyFormula':
				return _p1._0;
			case 'Top':
				return 'top';
			case 'Bot':
				return 'bot';
			case 'Not':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'~',
					A2(_user$project$Common_syntax$outputForm, 3, _p1._0));
			case 'Dia':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					A2(_elm_lang$core$Basics_ops['++'], '$', _p1._0),
					A2(_user$project$Common_syntax$outputForm, 3, _p1._1));
			case 'Box':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'#',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0,
						A2(_user$project$Common_syntax$outputForm, 3, _p1._1)));
			case 'Imply':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'-> ',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'Imply2':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<-',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'Iff':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<->',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'And':
				return A2(
					paren,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'&',
							A2(_user$project$Common_syntax$outputForm, 3, _p1._1))));
			case 'Or':
				return A2(
					paren,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'v',
							A2(_user$project$Common_syntax$outputForm, 3, _p1._1))));
			case 'Bigwedge':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'&&(Rel',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._0.am_name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								')(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p1._1._1._1,
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_p1._1._1._2,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'))',
														A2(_user$project$Common_syntax$outputForm, 3, _p1._2)))))))))));
			case 'Bigvee':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'vv(Rel',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._0.am_name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								')(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p1._1._1._1,
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_p1._1._1._2,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'))',
														A2(_user$project$Common_syntax$outputForm, 3, _p1._2)))))))))));
			case 'BoxAction':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_syntax$outputAction(_p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								']',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			case 'DiaAction':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_syntax$outputAction(_p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'>',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			case 'Precon':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Pre(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0.am_name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							')(',
							A2(_elm_lang$core$Basics_ops['++'], _p1._1, ')'))));
			case 'Announce':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								']',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			default:
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'>',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
		}
	});
var _user$project$Common_syntax$lookPre = F2(
	function (li, at) {
		lookPre:
		while (true) {
			var _p2 = li;
			if (_p2.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p2._0._0)) {
					return _elm_lang$core$Maybe$Just(_p2._0._1);
				} else {
					var _v3 = _p2._1,
						_v4 = at;
					li = _v3;
					at = _v4;
					continue lookPre;
				}
			}
		}
	});
var _user$project$Common_syntax$amodel2agentlist = function (ac) {
	return A2(
		_elm_lang$core$List$map,
		function (_p3) {
			var _p4 = _p3;
			return _p4._0;
		},
		ac.am_relation);
};
var _user$project$Common_syntax$formula2Int = function (f) {
	var _p5 = f;
	switch (_p5.ctor) {
		case 'Bot':
			return 0;
		case 'Top':
			return 1;
		case 'Atom':
			return 2 + _elm_lang$core$String$length(_p5._0);
		case 'AnyFormula':
			return 3 + _elm_lang$core$String$length(_p5._0);
		case 'Not':
			return 4 + _user$project$Common_syntax$formula2Int(_p5._0);
		case 'And':
			return (5 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Or':
			return (6 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Imply':
			return (7 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Imply2':
			return (8 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Iff':
			return (9 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Dia':
			return (10 + _elm_lang$core$String$length(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Box':
			return (11 + _elm_lang$core$String$length(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Announce':
			return (12 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Announce2':
			return (13 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Bigwedge':
			return 14;
		case 'Bigvee':
			return 15;
		case 'BoxAction':
			return 16;
		case 'DiaAction':
			return 17;
		default:
			return 18;
	}
};
var _user$project$Common_syntax$isDELformula = function (f) {
	isDELformula:
	while (true) {
		var _p6 = f;
		_v7_14:
		do {
			switch (_p6.ctor) {
				case 'Not':
					var _v8 = _p6._0;
					f = _v8;
					continue isDELformula;
				case 'And':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Imply':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Imply2':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Iff':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Dia':
					var _v9 = _p6._1;
					f = _v9;
					continue isDELformula;
				case 'Box':
					var _v10 = _p6._1;
					f = _v10;
					continue isDELformula;
				case 'Announce':
					return false;
				case 'Announce2':
					return false;
				case 'Bigwedge':
					if ((_p6._1.ctor === '_Tuple2') && (_p6._1._1.ctor === '_Tuple3')) {
						var _v11 = _p6._2;
						f = _v11;
						continue isDELformula;
					} else {
						break _v7_14;
					}
				case 'Bigvee':
					if ((_p6._1.ctor === '_Tuple2') && (_p6._1._1.ctor === '_Tuple3')) {
						var _v12 = _p6._2;
						f = _v12;
						continue isDELformula;
					} else {
						break _v7_14;
					}
				case 'BoxAction':
					var _v13 = _p6._1;
					f = _v13;
					continue isDELformula;
				case 'DiaAction':
					var _v14 = _p6._1;
					f = _v14;
					continue isDELformula;
				case 'Precon':
					return true;
				default:
					break _v7_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$isPALformula = function (f) {
	isPALformula:
	while (true) {
		var _p7 = f;
		_v15_14:
		do {
			switch (_p7.ctor) {
				case 'Not':
					var _v16 = _p7._0;
					f = _v16;
					continue isPALformula;
				case 'And':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Imply':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Imply2':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Iff':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Dia':
					var _v17 = _p7._1;
					f = _v17;
					continue isPALformula;
				case 'Box':
					var _v18 = _p7._1;
					f = _v18;
					continue isPALformula;
				case 'Announce':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Announce2':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Bigwedge':
					if ((_p7._1.ctor === '_Tuple2') && (_p7._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v15_14;
					}
				case 'Bigvee':
					if ((_p7._1.ctor === '_Tuple2') && (_p7._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v15_14;
					}
				case 'BoxAction':
					return false;
				case 'DiaAction':
					return false;
				case 'Precon':
					return false;
				default:
					break _v15_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$isELformula = function (f) {
	isELformula:
	while (true) {
		var _p8 = f;
		_v19_14:
		do {
			switch (_p8.ctor) {
				case 'Not':
					var _v20 = _p8._0;
					f = _v20;
					continue isELformula;
				case 'And':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Imply':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Imply2':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Iff':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Dia':
					var _v21 = _p8._1;
					f = _v21;
					continue isELformula;
				case 'Box':
					var _v22 = _p8._1;
					f = _v22;
					continue isELformula;
				case 'Announce':
					return false;
				case 'Announce2':
					return false;
				case 'Bigwedge':
					if ((_p8._1.ctor === '_Tuple2') && (_p8._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v19_14;
					}
				case 'Bigvee':
					if ((_p8._1.ctor === '_Tuple2') && (_p8._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v19_14;
					}
				case 'BoxAction':
					return false;
				case 'DiaAction':
					return false;
				case 'Precon':
					return false;
				default:
					break _v19_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$AtomBool = F2(
	function (a, b) {
		return {atom: a, maybeBool: b};
	});
var _user$project$Common_syntax$FormulaBool = F2(
	function (a, b) {
		return {formula: a, maybeBool: b};
	});
var _user$project$Common_syntax$AModel = F4(
	function (a, b, c, d) {
		return {am_name: a, am_domain: b, am_relation: c, am_pre: d};
	});
var _user$project$Common_syntax$Precon = F2(
	function (a, b) {
		return {ctor: 'Precon', _0: a, _1: b};
	});
var _user$project$Common_syntax$DiaAction = F2(
	function (a, b) {
		return {ctor: 'DiaAction', _0: a, _1: b};
	});
var _user$project$Common_syntax$BoxAction = F2(
	function (a, b) {
		return {ctor: 'BoxAction', _0: a, _1: b};
	});
var _user$project$Common_syntax$Bigvee = F3(
	function (a, b, c) {
		return {ctor: 'Bigvee', _0: a, _1: b, _2: c};
	});
var _user$project$Common_syntax$Bigwedge = F3(
	function (a, b, c) {
		return {ctor: 'Bigwedge', _0: a, _1: b, _2: c};
	});
var _user$project$Common_syntax$Announce2 = F2(
	function (a, b) {
		return {ctor: 'Announce2', _0: a, _1: b};
	});
var _user$project$Common_syntax$Announce = F2(
	function (a, b) {
		return {ctor: 'Announce', _0: a, _1: b};
	});
var _user$project$Common_syntax$Box = F2(
	function (a, b) {
		return {ctor: 'Box', _0: a, _1: b};
	});
var _user$project$Common_syntax$know = F2(
	function (ag, f) {
		return A2(_user$project$Common_syntax$Box, ag, f);
	});
var _user$project$Common_syntax$Dia = F2(
	function (a, b) {
		return {ctor: 'Dia', _0: a, _1: b};
	});
var _user$project$Common_syntax$Iff = F2(
	function (a, b) {
		return {ctor: 'Iff', _0: a, _1: b};
	});
var _user$project$Common_syntax$Imply2 = F2(
	function (a, b) {
		return {ctor: 'Imply2', _0: a, _1: b};
	});
var _user$project$Common_syntax$Imply = F2(
	function (a, b) {
		return {ctor: 'Imply', _0: a, _1: b};
	});
var _user$project$Common_syntax$Or = F2(
	function (a, b) {
		return {ctor: 'Or', _0: a, _1: b};
	});
var _user$project$Common_syntax$And = F2(
	function (a, b) {
		return {ctor: 'And', _0: a, _1: b};
	});
var _user$project$Common_syntax$Not = function (a) {
	return {ctor: 'Not', _0: a};
};
var _user$project$Common_syntax$notknow = F2(
	function (ag, f) {
		return _user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$know, ag, f));
	});
var _user$project$Common_syntax$AnyFormula = function (a) {
	return {ctor: 'AnyFormula', _0: a};
};
var _user$project$Common_syntax$Atom = function (a) {
	return {ctor: 'Atom', _0: a};
};
var _user$project$Common_syntax$reada = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'e1',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'e0',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {ctor: '[]'}
		}
	};
	var name = 'Reada';
	var pa = 'e1';
	var npa = 'e0';
	var readaS = {
		ctor: '::',
		_0: npa,
		_1: {
			ctor: '::',
			_0: pa,
			_1: {ctor: '[]'}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npa, _2: npa},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pa, _2: pa},
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: npa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: pa},
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: pa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: npa},
					_1: {ctor: '[]'}
				}
			}));
	return {am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre};
}();
var _user$project$Common_syntax$readb = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'pb',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'npb',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {ctor: '[]'}
		}
	};
	var name = 'Readb';
	var pb = 'pb';
	var npb = 'npb';
	var readaS = {
		ctor: '::',
		_0: npb,
		_1: {
			ctor: '::',
			_0: pb,
			_1: {ctor: '[]'}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npb, _2: npb},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pb, _2: pb},
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: npb, _2: pb},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'a', _1: pb, _2: npb},
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npb, _2: npb},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pb, _2: pb},
					_1: {ctor: '[]'}
				}
			}));
	return {am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre};
}();
var _user$project$Common_syntax$Bot = {ctor: 'Bot'};
var _user$project$Common_syntax$bigOr = function (li) {
	var _p9 = li;
	if (_p9.ctor === '[]') {
		return _user$project$Common_syntax$Bot;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$Or, x, y);
				}),
			_p9._0,
			_p9._1);
	}
};
var _user$project$Common_syntax$knowEither = F2(
	function (ag, f) {
		return _user$project$Common_syntax$bigOr(
			{
				ctor: '::',
				_0: A2(_user$project$Common_syntax$Box, ag, f),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Common_syntax$Box,
						ag,
						_user$project$Common_syntax$Not(f)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Common_syntax$knowNeither = F2(
	function (ag, f) {
		return _user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$knowEither, ag, f));
	});
var _user$project$Common_syntax$lookPre2 = F2(
	function (li, at) {
		lookPre2:
		while (true) {
			var _p10 = li;
			if (_p10.ctor === '[]') {
				return _user$project$Common_syntax$Bot;
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p10._0._0)) {
					return _p10._0._1;
				} else {
					var _v25 = _p10._1,
						_v26 = at;
					li = _v25;
					at = _v26;
					continue lookPre2;
				}
			}
		}
	});
var _user$project$Common_syntax$Top = {ctor: 'Top'};
var _user$project$Common_syntax$bigAnd = function (li) {
	var _p11 = li;
	if (_p11.ctor === '[]') {
		return _user$project$Common_syntax$Top;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$And, x, y);
				}),
			_p11._0,
			_p11._1);
	}
};
var _user$project$Common_syntax$skip = function () {
	var skipPre = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'e1', _1: _user$project$Common_syntax$Top},
		_1: {ctor: '[]'}
	};
	var e1 = 'e1';
	var skipS = {
		ctor: '::',
		_0: e1,
		_1: {ctor: '[]'}
	};
	var refl = function (ag) {
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return {ctor: '_Tuple3', _0: ag, _1: x, _2: x};
			},
			skipS);
	};
	var skipR = {
		ctor: '::',
		_0: {ctor: '_Tuple3', _0: 'a', _1: e1, _2: e1},
		_1: {ctor: '[]'}
	};
	return {am_name: 'Skip', am_domain: skipS, am_relation: skipR, am_pre: skipPre};
}();
var _user$project$Common_syntax$ComposePoAM = F2(
	function (a, b) {
		return {ctor: 'ComposePoAM', _0: a, _1: b};
	});
var _user$project$Common_syntax$Cup = F2(
	function (a, b) {
		return {ctor: 'Cup', _0: a, _1: b};
	});
var _user$project$Common_syntax$PointAModel = F2(
	function (a, b) {
		return {ctor: 'PointAModel', _0: a, _1: b};
	});
var _user$project$Common_syntax$composeAM = F2(
	function (e1, e2) {
		var form = F2(
			function (x, y) {
				return A2(
					_user$project$Common_syntax$And,
					A2(_user$project$Common_syntax$Precon, e1, x),
					A2(
						_user$project$Common_syntax$BoxAction,
						A2(_user$project$Common_syntax$PointAModel, e1, x),
						A2(_user$project$Common_syntax$Precon, e2, y)));
			});
		var mapF = function (_p12) {
			var _p13 = _p12;
			var _p15 = _p13._1;
			var _p14 = _p13._0;
			return {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p14,
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(_elm_lang$core$Basics_ops['++'], _p15, ')')))),
				_1: A2(form, _p14, _p15)
			};
		};
		var ff = function (_p16) {
			var _p17 = _p16;
			var _p18 = _p17._0;
			return A2(
				_elm_lang$core$List$member,
				{ctor: '_Tuple3', _0: _p18, _1: _p17._1._0, _2: _p17._2._0},
				e1.am_relation) && A2(
				_elm_lang$core$List$member,
				{ctor: '_Tuple3', _0: _p18, _1: _p17._1._1, _2: _p17._2._1},
				e2.am_relation);
		};
		var domain1 = A2(_user$project$Util$cartesian, e1.am_domain, e2.am_domain);
		var domain2 = A2(
			_elm_lang$core$List$map,
			function (_p19) {
				var _p20 = _p19;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p20._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(_elm_lang$core$Basics_ops['++'], _p20._1, ')'))));
			},
			domain1);
		var pre2 = A2(_elm_lang$core$List$map, mapF, domain1);
		var name2 = A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				e1.am_name,
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					A2(_elm_lang$core$Basics_ops['++'], e2.am_name, ')'))));
		var agents = _user$project$Util$nub2(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$amodel2agentlist(e1),
				_user$project$Common_syntax$amodel2agentlist(e2)));
		var relation1 = A3(_user$project$Util$cartesian2, agents, domain1, domain1);
		var relation2 = A2(_elm_lang$core$List$filter, ff, relation1);
		var relation3 = A2(
			_elm_lang$core$List$map,
			function (_p21) {
				var _p22 = _p21;
				return {
					ctor: '_Tuple3',
					_0: _p22._0,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p22._1._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(_elm_lang$core$Basics_ops['++'], _p22._1._1, ')')))),
					_2: A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p22._2._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(_elm_lang$core$Basics_ops['++'], _p22._2._1, ')'))))
				};
			},
			relation2);
		return {am_name: name2, am_domain: domain2, am_relation: relation3, am_pre: pre2};
	});
var _user$project$Common_syntax$composeAction = F2(
	function (a, b) {
		composeAction:
		while (true) {
			var _p23 = {ctor: '_Tuple2', _0: a, _1: b};
			_v32_4:
			do {
				if (_p23.ctor === '_Tuple2') {
					switch (_p23._0.ctor) {
						case 'PointAModel':
							switch (_p23._1.ctor) {
								case 'PointAModel':
									return A2(
										_user$project$Common_syntax$PointAModel,
										A2(_user$project$Common_syntax$composeAM, _p23._0._0, _p23._1._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p23._0._1,
												A2(
													_elm_lang$core$Basics_ops['++'],
													',',
													A2(_elm_lang$core$Basics_ops['++'], _p23._1._1, ')')))));
								case 'ComposePoAM':
									var _v33 = A2(_user$project$Common_syntax$PointAModel, _p23._0._0, _p23._0._1),
										_v34 = A2(_user$project$Common_syntax$composeAction, _p23._1._0, _p23._1._1);
									a = _v33;
									b = _v34;
									continue composeAction;
								default:
									break _v32_4;
							}
						case 'ComposePoAM':
							switch (_p23._1.ctor) {
								case 'PointAModel':
									var _v35 = A2(_user$project$Common_syntax$composeAction, _p23._0._0, _p23._0._1),
										_v36 = A2(_user$project$Common_syntax$PointAModel, _p23._1._0, _p23._1._1);
									a = _v35;
									b = _v36;
									continue composeAction;
								case 'ComposePoAM':
									var _v37 = A2(_user$project$Common_syntax$composeAction, _p23._0._0, _p23._0._1),
										_v38 = A2(_user$project$Common_syntax$composeAction, _p23._1._0, _p23._1._1);
									a = _v37;
									b = _v38;
									continue composeAction;
								default:
									break _v32_4;
							}
						default:
							break _v32_4;
					}
				} else {
					break _v32_4;
				}
			} while(false);
			return _elm_lang$core$Native_Utils.crashCase(
				'Common_syntax',
				{
					start: {line: 197, column: 22},
					end: {line: 208, column: 50}
				},
				_p23)('error in composeAction');
		}
	});
var _user$project$Common_syntax_ops = _user$project$Common_syntax_ops || {};
_user$project$Common_syntax_ops['+++'] = _user$project$Common_syntax$composeAction;
var _user$project$Common_syntax$skip_point = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$skip, 's1');
var _user$project$Common_syntax$reada_po = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$reada, 'pa');
var _user$project$Common_syntax$readb_po = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$readb, 'pb');
var _user$project$Common_syntax$mayReada = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'pa',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'npa',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 't', _1: _user$project$Common_syntax$Top},
				_1: {ctor: '[]'}
			}
		}
	};
	var name = 'MayReada';
	var t = 't';
	var pa = 'pa';
	var npa = 'npa';
	var readaS = {
		ctor: '::',
		_0: npa,
		_1: {
			ctor: '::',
			_0: pa,
			_1: {
				ctor: '::',
				_0: t,
				_1: {ctor: '[]'}
			}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npa, _2: npa},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pa, _2: pa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'a', _1: t, _2: t},
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: npa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: pa},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: t},
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: pa},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: npa},
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: t},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: npa},
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: t},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: pa},
							_1: {ctor: '[]'}
						}
					}))));
	return A2(
		_user$project$Common_syntax$PointAModel,
		{am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre},
		pa);
}();

var _user$project$Common_sequent$toGraph = F2(
	function (pairs, result) {
		toGraph:
		while (true) {
			var _p0 = pairs;
			if (_p0.ctor === '[]') {
				return result;
			} else {
				var _v1 = _p0._1,
					_v2 = _elm_lang$core$Native_Utils.update(
					result,
					{
						nodes: _user$project$Util$nub(
							A2(_elm_lang$core$Basics_ops['++'], result.nodes, _p0._0._0)),
						edges: _user$project$Util$nub(
							A2(_elm_lang$core$Basics_ops['++'], result.edges, _p0._0._1))
					});
				pairs = _v1;
				result = _v2;
				continue toGraph;
			}
		}
	});
var _user$project$Common_sequent$splitStringByRoundBraket = function (string) {
	var maybe_n = _elm_lang$core$List$head(
		A2(_elm_lang$core$String$indexes, ')', string));
	var a = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (n) {
				return A2(_elm_lang$core$String$left, n + 1, string);
			},
			maybe_n));
	var b = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (n) {
				return A2(_elm_lang$core$String$dropLeft, n + 1, string);
			},
			maybe_n));
	return {ctor: '_Tuple2', _0: a, _1: b};
};
var _user$project$Common_sequent$drawNodeElm = function (string) {
	var _p1 = _user$project$Common_sequent$splitStringByRoundBraket(string);
	var stringCut = _p1._0;
	var stringCut2 = _p1._1;
	var _p2 = stringCut;
	switch (_p2) {
		case '(init)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(Top)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(Bot)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 1
			};
		case '(end)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 0
			};
		case '(limit)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 2
			};
		case '(stop)':
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: string,
				color: 9
			};
		default:
			return {
				id: _Skinney$fnv$FNV$hashString(string),
				label: stringCut2,
				color: 3
			};
	}
};
var _user$project$Common_sequent$drawEdgeElm = function (_p3) {
	var _p4 = _p3;
	var _p7 = _p4._1;
	var _p6 = _p4._0;
	var a = {
		ctor: '::',
		_0: _user$project$Common_sequent$drawNodeElm(_p6),
		_1: {
			ctor: '::',
			_0: _user$project$Common_sequent$drawNodeElm(_p7),
			_1: {ctor: '[]'}
		}
	};
	var _p5 = _user$project$Common_sequent$splitStringByRoundBraket(_p6);
	var stringCut = _p5._0;
	var stringCut2 = _p5._1;
	var b = {
		ctor: '::',
		_0: {
			id: _Skinney$fnv$FNV$hashString(
				A2(_elm_lang$core$Basics_ops['++'], _p6, _p7)),
			from: _Skinney$fnv$FNV$hashString(_p6),
			to: _Skinney$fnv$FNV$hashString(_p7),
			label: stringCut
		},
		_1: {ctor: '[]'}
	};
	return {ctor: '_Tuple2', _0: a, _1: b};
};
var _user$project$Common_sequent$list2pairElm = F2(
	function (xs, provable) {
		return function (x) {
			return A2(
				_user$project$Common_sequent$toGraph,
				x,
				{
					nodes: {ctor: '[]'},
					edges: {ctor: '[]'},
					provable: provable
				});
		}(
			_user$project$Util$nub(
				A2(_elm_lang$core$List$map, _user$project$Common_sequent$drawEdgeElm, xs)));
	});
var _user$project$Common_sequent$addBlank = F2(
	function (li, res) {
		addBlank:
		while (true) {
			var wholeseq = A2(
				_elm_lang$core$List$concatMap,
				function (_p8) {
					var _p9 = _p8;
					return {
						ctor: '::',
						_0: _p9._0,
						_1: {
							ctor: '::',
							_0: _p9._1,
							_1: {ctor: '[]'}
						}
					};
				},
				li);
			var _p10 = li;
			if (_p10.ctor === '[]') {
				return res;
			} else {
				var _p13 = _p10._0._1;
				var _p12 = _p10._1;
				var _p11 = _p10._0._0;
				if (A2(
					_user$project$Util$exists,
					wholeseq,
					function (z) {
						return A2(
							_elm_lang$core$List$member,
							{ctor: '_Tuple2', _0: z, _1: _p13},
							_p12);
					})) {
					var _v7 = _p12,
						_v8 = {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _p11,
							_1: A2(_elm_lang$core$Basics_ops['++'], _p13, ' ')
						},
						_1: res
					};
					li = _v7;
					res = _v8;
					continue addBlank;
				} else {
					var _v9 = _p12,
						_v10 = {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p11, _1: _p13},
						_1: res
					};
					li = _v9;
					res = _v10;
					continue addBlank;
				}
			}
		}
	});
var _user$project$Common_sequent$tree2vis = F2(
	function (_p14, list_tofrom) {
		var _p15 = _p14;
		var _p19 = _p15._1;
		var _p16 = _p19;
		if (_p16.ctor === '[]') {
			return list_tofrom;
		} else {
			return function (x) {
				return function (list) {
					return function (f) {
						return _user$project$Util$nub2(
							A2(_elm_lang$core$List$concatMap, f, _p19));
					}(
						function (tree) {
							return A2(_user$project$Common_sequent$tree2vis, tree, list);
						});
				}(
					A2(_elm_lang$core$Basics_ops['++'], list_tofrom, x));
			}(
				A2(
					_elm_lang$core$List$map,
					function (_p17) {
						var _p18 = _p17;
						return {ctor: '_Tuple2', _0: _p15._0, _1: _p18._0};
					},
					_p16));
		}
	});
var _user$project$Common_sequent$outputLabelExp3 = function (f) {
	var gg = function (_p20) {
		var _p21 = _p20;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'Rel(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$join,
					';',
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.am_name;
						},
						_p21._1)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					')(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p21._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							')(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p21._2,
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(_elm_lang$core$Basics_ops['++'], _p21._3, ')'))))))));
	};
	return _user$project$Util$concatComma(
		A2(_elm_lang$core$List$map, gg, f));
};
var _user$project$Common_sequent$outputLabelExp2 = F2(
	function (n, f) {
		var gg = function (annouceform) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					_user$project$Common_syntax$outputForm(n),
					annouceform));
		};
		var _p22 = f;
		_v15_4:
		do {
			if (_p22.ctor === 'RelAtom') {
				if (_p22._0.ctor === '_Tuple4') {
					if (_p22._0._1.ctor === '::') {
						if ((((_p22._0._2.ctor === '_Tuple2') && (_p22._0._2._1.ctor === '[]')) && (_p22._0._3.ctor === '_Tuple2')) && (_p22._0._3._1.ctor === '[]')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'<i>',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Util$show(_p22._0._2._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'R',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p22._0._0,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'(',
												A2(
													_elm_lang$core$Basics_ops['++'],
													gg(
														{ctor: '::', _0: _p22._0._1._0, _1: _p22._0._1._1}),
													A2(
														_elm_lang$core$Basics_ops['++'],
														')',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_user$project$Util$show(_p22._0._3._0),
															'</i>'))))))));
						} else {
							break _v15_4;
						}
					} else {
						if ((_p22._0._2.ctor === '_Tuple2') && (_p22._0._3.ctor === '_Tuple2')) {
							if ((_p22._0._2._1.ctor === '[]') && (_p22._0._3._1.ctor === '[]')) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'<i>',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Util$show(_p22._0._2._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'R',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p22._0._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													_user$project$Util$show(_p22._0._3._0),
													'</i>')))));
							} else {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'<i>',
									A2(
										_elm_lang$core$Basics_ops['++'],
										'(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Util$show(_p22._0._2._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													A2(
														_elm_lang$core$String$join,
														',',
														A2(_elm_lang$core$List$map, _user$project$Common_syntax$outputAction, _p22._0._2._1)),
													A2(
														_elm_lang$core$Basics_ops['++'],
														')',
														A2(
															_elm_lang$core$Basics_ops['++'],
															'R',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p22._0._0,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'(',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_user$project$Util$show(_p22._0._3._0),
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			',',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				A2(
																					_elm_lang$core$String$join,
																					',',
																					A2(_elm_lang$core$List$map, _user$project$Common_syntax$outputAction, _p22._0._3._1)),
																				A2(_elm_lang$core$Basics_ops['++'], ')', '</i>')))))))))))));
							}
						} else {
							break _v15_4;
						}
					}
				} else {
					break _v15_4;
				}
			} else {
				if (_p22._0.ctor === '_Tuple2') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Util$show(_p22._0._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'=<',
							_user$project$Util$show(_p22._0._1)));
				} else {
					break _v15_4;
				}
			}
		} while(false);
		return _elm_lang$core$Native_Utils.crashCase(
			'Common_sequent',
			{
				start: {line: 937, column: 5},
				end: {line: 945, column: 58}
			},
			_p22)('error in outputLabelExp2');
	});
var _user$project$Common_sequent$action2string = function (pam) {
	var _p24 = pam;
	switch (_p24.ctor) {
		case 'PointAModel':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p24._0.am_name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(_elm_lang$core$Basics_ops['++'], _p24._1, ')'))));
		case 'Cup':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$action2string(_p24._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'U',
					_user$project$Common_sequent$action2string(_p24._1)));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_sequent$action2string(_p24._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					_user$project$Common_sequent$action2string(_p24._1)));
	}
};
var _user$project$Common_sequent$outputLabelExp = F2(
	function (n, _p25) {
		var _p26 = _p25;
		var _p38 = _p26._0._1;
		var _p37 = _p26._0._3;
		var _p36 = _p26._0._0;
		var _p35 = _p26._0._2;
		var addhistory2 = function (x) {
			return _elm_lang$core$Native_Utils.eq(x, '') ? x : A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], x, ')'));
		}(
			_user$project$Util$toSentenceComma(
				A2(
					_elm_lang$core$List$map,
					function (x) {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Util$show(
								_user$project$Util$fst(x)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								_user$project$Util$toSentenceComma(
									A2(
										_elm_lang$core$List$map,
										_user$project$Common_sequent$action2string,
										_user$project$Util$snd(x)))));
					},
					_p36)));
		var addhistory1 = function (x) {
			return _elm_lang$core$Native_Utils.eq(x, '') ? x : A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], x, ')'));
		}(
			_user$project$Util$toSentenceComma(
				A2(
					_elm_lang$core$List$map,
					function (x) {
						return _user$project$Util$show(
							_user$project$Util$fst(x));
					},
					_p36)));
		var ff = function (_p27) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					function (y) {
						var _p28 = y;
						if (_p28.ctor === 'PointAModel') {
							return _user$project$Common_syntax$outputAction(
								A2(_user$project$Common_syntax$PointAModel, _p28._0, _p28._1));
						} else {
							return _elm_lang$core$Native_Utils.crashCase(
								'Common_sequent',
								{
									start: {line: 903, column: 48},
									end: {line: 905, column: 97}
								},
								_p28)('error in error in outputLabelExp (1)');
						}
					},
					_p27));
		};
		var gg = function (_p30) {
			return _user$project$Util$concatComma(
				A2(
					_elm_lang$core$List$map,
					_user$project$Common_syntax$outputForm(n),
					_p30));
		};
		var _p31 = _p35;
		if (_p31.ctor === '[]') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'<b>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p38),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'</b>:',
						A2(
							_elm_lang$core$Basics_ops['++'],
							addhistory1,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'<code>',
								A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Common_syntax$outputForm, n, _p37),
									'</code>'))))));
		} else {
			var _p32 = _p31._0;
			if (_p32.ctor === 'Left') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'<b>',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p38),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								gg(
									_toastal$either$Either$lefts(_p35)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									')</b>:',
									A2(
										_elm_lang$core$Basics_ops['++'],
										addhistory1,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'<code>',
											A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_user$project$Common_syntax$outputForm, n, _p37),
												'</code>'))))))));
			} else {
				var _p33 = _p32._0;
				if (_p33.ctor === 'PointAModel') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'<b>',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p38),
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(
										_elm_lang$core$Basics_ops['++'],
										ff(
											_toastal$either$Either$rights(_p35)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											')</b>:',
											A2(
												_elm_lang$core$Basics_ops['++'],
												addhistory2,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'<code>',
													A2(
														_elm_lang$core$Basics_ops['++'],
														A2(_user$project$Common_syntax$outputForm, n, _p37),
														'</code>')))))))));
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Common_sequent',
						{
							start: {line: 920, column: 20},
							end: {line: 922, column: 59}
						},
						_p33)('error in outputLabelExp (2)');
				}
			}
		}
	});
var _user$project$Common_sequent$outputSequent = function (seq) {
	var ff = F2(
		function (x, y) {
			return (_elm_lang$core$List$isEmpty(x) || _elm_lang$core$List$isEmpty(y)) ? '' : ',';
		});
	var r2 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp(1),
			seq.rightForm));
	var r1 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp2(1),
			seq.rightRel));
	var l2 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp(1),
			seq.leftForm));
	var l1 = _user$project$Util$concatComma(
		A2(
			_elm_lang$core$List$map,
			_user$project$Common_sequent$outputLabelExp2(1),
			seq.leftRel));
	var _p39 = _elm_lang$core$List$isEmpty(seq.forDEL);
	if (_p39 === true) {
		return _elm_community$string_extra$String_Extra$clean(
			A2(
				_user$project$Common_syntax_ops['++++'],
				l1,
				A2(
					_user$project$Common_syntax_ops['++++'],
					A2(ff, seq.leftRel, seq.leftForm),
					A2(
						_user$project$Common_syntax_ops['++++'],
						l2,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<i><b>==></b></i>',
							A2(
								_user$project$Common_syntax_ops['++++'],
								r1,
								A2(
									_user$project$Common_syntax_ops['++++'],
									A2(ff, seq.rightRel, seq.rightForm),
									r2)))))));
	} else {
		return _elm_community$string_extra$String_Extra$clean(
			A2(
				_user$project$Common_syntax_ops['++++'],
				l1,
				A2(
					_user$project$Common_syntax_ops['++++'],
					A2(ff, seq.leftRel, seq.leftForm),
					A2(
						_user$project$Common_syntax_ops['++++'],
						l2,
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<i><b>==></b></i>',
							A2(
								_user$project$Common_syntax_ops['++++'],
								r1,
								A2(
									_user$project$Common_syntax_ops['++++'],
									A2(ff, seq.rightRel, seq.rightForm),
									A2(
										_user$project$Common_syntax_ops['++++'],
										r2,
										A2(
											_user$project$Common_syntax_ops['++++'],
											'||',
											_user$project$Common_sequent$outputLabelExp3(seq.forDEL))))))))));
	}
};
var _user$project$Common_sequent$divideRules = F2(
	function (listrule, _p40) {
		divideRules:
		while (true) {
			var _p41 = _p40;
			var _p51 = _p41._2;
			var _p50 = _p41._3;
			var _p49 = _p41._4;
			var _p48 = _p41._5;
			var _p47 = _p41._0;
			var _p46 = _p41._1;
			var _p42 = listrule;
			if (_p42.ctor === '::') {
				var _p45 = _p42._1;
				var _p44 = _p42._0;
				var _p43 = _p44.category;
				switch (_p43.ctor) {
					case 'Rule4LeftFormula':
						var _v26 = _p45,
							_v27 = {
							ctor: '_Tuple6',
							_0: _p47,
							_1: {ctor: '::', _0: _p44, _1: _p46},
							_2: _p51,
							_3: _p50,
							_4: _p49,
							_5: _p48
						};
						listrule = _v26;
						_p40 = _v27;
						continue divideRules;
					case 'Rule4LeftRel':
						var _v28 = _p45,
							_v29 = {
							ctor: '_Tuple6',
							_0: {ctor: '::', _0: _p44, _1: _p47},
							_1: _p46,
							_2: _p51,
							_3: _p50,
							_4: _p49,
							_5: _p48
						};
						listrule = _v28;
						_p40 = _v29;
						continue divideRules;
					case 'Rule4RightFormula':
						var _v30 = _p45,
							_v31 = {
							ctor: '_Tuple6',
							_0: _p47,
							_1: _p46,
							_2: _p51,
							_3: {ctor: '::', _0: _p44, _1: _p50},
							_4: _p49,
							_5: _p48
						};
						listrule = _v30;
						_p40 = _v31;
						continue divideRules;
					case 'Rule4RightRel':
						var _v32 = _p45,
							_v33 = {
							ctor: '_Tuple6',
							_0: _p47,
							_1: _p46,
							_2: {ctor: '::', _0: _p44, _1: _p51},
							_3: _p50,
							_4: _p49,
							_5: _p48
						};
						listrule = _v32;
						_p40 = _v33;
						continue divideRules;
					case 'Rule4DEL':
						var _v34 = _p45,
							_v35 = {
							ctor: '_Tuple6',
							_0: _p47,
							_1: _p46,
							_2: _p51,
							_3: _p50,
							_4: {ctor: '::', _0: _p44, _1: _p49},
							_5: _p48
						};
						listrule = _v34;
						_p40 = _v35;
						continue divideRules;
					default:
						var _v36 = _p45,
							_v37 = {
							ctor: '_Tuple6',
							_0: _p47,
							_1: _p46,
							_2: _p51,
							_3: _p50,
							_4: _p49,
							_5: {ctor: '::', _0: _p44, _1: _p48}
						};
						listrule = _v36;
						_p40 = _v37;
						continue divideRules;
				}
			} else {
				return {ctor: '_Tuple6', _0: _p47, _1: _p46, _2: _p51, _3: _p50, _4: _p49, _5: _p48};
			}
		}
	});
var _user$project$Common_sequent$seq2branch = F2(
	function (seq, rule) {
		return A2(
			_user$project$Applicative_ops['?>'],
			rule.rule(seq),
			function (x) {
				return {causeSequent: seq, appliedRule: rule, resultSequents: x};
			});
	});
var _user$project$Common_sequent$anyFormulaCheck = function (seq) {
	var gg = function (f) {
		var _p52 = f;
		if (_p52.ctor === 'AnyFormula') {
			return true;
		} else {
			return false;
		}
	};
	var ff = function (_p53) {
		var _p54 = _p53;
		return _p54._0._3;
	};
	return _user$project$Util$or(
		A2(
			_elm_lang$core$List$map,
			function (_p55) {
				return gg(
					ff(_p55));
			},
			A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)));
};
var _user$project$Common_sequent$isProvable = function (pr) {
	var gg = function (_p56) {
		var _p57 = _p56;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _p57._1,
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$concatMap, gg, _p57._2));
	};
	var ruleList = gg(pr);
	return A2(_elm_lang$core$List$member, 'end', ruleList) ? 0 : (A2(_elm_lang$core$List$member, 'stop', ruleList) ? 9 : (A2(_elm_lang$core$List$member, 'limit', ruleList) ? 2 : 1));
};
var _user$project$Common_sequent$sortRelAtom = function (li) {
	var gg3 = function (x) {
		var _p58 = x;
		if (_p58.ctor === 'RelAtom') {
			return _p58._0._3._0;
		} else {
			return _p58._0._0;
		}
	};
	var gg2 = function (x) {
		var _p59 = x;
		if (_p59.ctor === 'RelAtom') {
			return _p59._0._2._0;
		} else {
			return _p59._0._0;
		}
	};
	var gg1 = function (x) {
		var _p60 = x;
		if (_p60.ctor === 'RelAtom') {
			return _p60._0._0;
		} else {
			return _user$project$Util$show(_p60._0._0);
		}
	};
	return function (x) {
		return A2(_elm_lang$core$List$sortWith, x, li);
	}(
		A6(_TSFoster$elm_compare$Compare$by, gg1, _TSFoster$elm_compare$Compare$thenBy, gg2, _TSFoster$elm_compare$Compare$thenBy, gg3, _TSFoster$elm_compare$Compare$ascending));
};
var _user$project$Common_sequent$sortLabelForm = function (li) {
	var gg3 = function (_p61) {
		var _p62 = _p61;
		return _elm_lang$core$List$length(_p62._0._2);
	};
	var gg2 = function (_p63) {
		var _p64 = _p63;
		return _user$project$Common_syntax$formula2Int(_p64._0._3);
	};
	var gg1 = function (_p65) {
		var _p66 = _p65;
		return _p66._0._1;
	};
	return A2(
		_elm_lang$core$List$sortWith,
		A6(_TSFoster$elm_compare$Compare$by, gg1, _TSFoster$elm_compare$Compare$thenBy, gg2, _TSFoster$elm_compare$Compare$thenBy, gg3, _TSFoster$elm_compare$Compare$ascending),
		li);
};
var _user$project$Common_sequent$sortLeftRightOfSeq = function (seq) {
	var ff = function (_p67) {
		return _user$project$Util$nub(
			_user$project$Common_sequent$sortLabelForm(_p67));
	};
	var gg = function (_p68) {
		return _user$project$Util$nub(
			_user$project$Common_sequent$sortRelAtom(_p68));
	};
	return _elm_lang$core$Native_Utils.update(
		seq,
		{
			leftRel: gg(seq.leftRel),
			leftForm: ff(seq.leftForm),
			rightRel: gg(seq.rightRel),
			rightForm: ff(seq.rightForm)
		});
};
var _user$project$Common_sequent$sortSeqOfBranch = function (bra) {
	return {
		causeSequent: bra.causeSequent,
		appliedRule: bra.appliedRule,
		resultSequents: A2(_elm_lang$core$List$map, _user$project$Common_sequent$sortLeftRightOfSeq, bra.resultSequents)
	};
};
var _user$project$Common_sequent$sameSeq = F2(
	function (seq1, seq2) {
		var d = A2(
			_elm_community$list_extra$List_Extra$isPermutationOf,
			_user$project$Util$nub(seq1.rightForm),
			_user$project$Util$nub(seq2.rightForm));
		var c = A2(
			_elm_community$list_extra$List_Extra$isPermutationOf,
			_user$project$Util$nub(seq1.leftForm),
			_user$project$Util$nub(seq2.leftForm));
		var b = _elm_lang$core$Native_Utils.eq(
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq1.rightRel)),
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq2.rightRel)));
		var a = _elm_lang$core$Native_Utils.eq(
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq1.leftRel)),
			_user$project$Common_sequent$sortRelAtom(
				_user$project$Util$nub(seq2.leftRel)));
		return A2(
			_user$project$Util$forall,
			{
				ctor: '::',
				_0: a,
				_1: {
					ctor: '::',
					_0: b,
					_1: {
						ctor: '::',
						_0: c,
						_1: {
							ctor: '::',
							_0: d,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			function (x) {
				return _elm_lang$core$Native_Utils.eq(x, true);
			});
	});
var _user$project$Common_sequent$agentInLabelExpression2 = F2(
	function (x, li) {
		var _p69 = x;
		if (_p69.ctor === 'RelAtom') {
			return {ctor: '::', _0: _p69._0._0, _1: li};
		} else {
			return li;
		}
	});
var _user$project$Common_sequent$agentInLabelExpression = F2(
	function (x, ags) {
		var gg = F2(
			function (y, zs) {
				gg:
				while (true) {
					var _p70 = y;
					switch (_p70.ctor) {
						case 'Box':
							var _v49 = _p70._1,
								_v50 = {ctor: '::', _0: _p70._0, _1: zs};
							y = _v49;
							zs = _v50;
							continue gg;
						case 'Dia':
							var _v51 = _p70._1,
								_v52 = {ctor: '::', _0: _p70._0, _1: zs};
							y = _v51;
							zs = _v52;
							continue gg;
						case 'Not':
							var _v53 = _p70._0,
								_v54 = zs;
							y = _v53;
							zs = _v54;
							continue gg;
						case 'And':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						case 'Or':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						case 'Imply':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						case 'Iff':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						case 'Announce':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						case 'Announce2':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A2(gg, _p70._0, zs),
								A2(gg, _p70._1, zs));
						default:
							return zs;
					}
				}
			});
		var _p71 = x;
		if (_p71.ctor === 'Left') {
			return A2(gg, _p71._0._0._3, ags);
		} else {
			if (_p71._0.ctor === 'RelAtom') {
				return {ctor: '::', _0: _p71._0._0._0, _1: ags};
			} else {
				return ags;
			}
		}
	});
var _user$project$Common_sequent$wholeAgent = function (seq) {
	var rels = A2(
		_elm_lang$core$List$map,
		function (x) {
			return _toastal$either$Either$Right(x);
		},
		A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel));
	var forms = A2(
		_elm_lang$core$List$map,
		function (x) {
			return _toastal$either$Either$Left(x);
		},
		A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm));
	return _user$project$Util$nsort(
		A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_user$project$Common_sequent$agentInLabelExpression,
					x,
					{ctor: '[]'});
			},
			A2(_elm_lang$core$Basics_ops['++'], forms, rels)));
};
var _user$project$Common_sequent$wholeLabel = function (seq) {
	var gg_ = function (s) {
		return function (x) {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}(
			A2(
				_elm_lang$core$Result$withDefault,
				0,
				_elm_lang$core$String$toInt(
					A2(_elm_lang$core$String$filter, _elm_lang$core$Char$isDigit, s))));
	};
	var gg3 = function (_p72) {
		var _p73 = _p72;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			gg_(_p73._2),
			gg_(_p73._3));
	};
	var gg2 = function (x) {
		var _p74 = x;
		if (_p74.ctor === 'RelAtom') {
			return {
				ctor: '::',
				_0: _p74._0._2._0,
				_1: {
					ctor: '::',
					_0: _p74._0._3._0,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: _p74._0._0,
				_1: {
					ctor: '::',
					_0: _p74._0._1,
					_1: {ctor: '[]'}
				}
			};
		}
	};
	var gg1 = function (_p75) {
		var _p76 = _p75;
		return {
			ctor: '::',
			_0: _p76._0._1,
			_1: {ctor: '[]'}
		};
	};
	return _user$project$Util$nsort(
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				gg1,
				A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$concatMap,
					gg2,
					A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel)),
				A2(_elm_lang$core$List$concatMap, gg3, seq.forDEL))));
};
var _user$project$Common_sequent$freshLabel = function (sq) {
	var n = function (_p77) {
		return _elm_lang$core$List$maximum(
			_user$project$Common_sequent$wholeLabel(_p77));
	}(sq);
	var _p78 = n;
	if (_p78.ctor === 'Nothing') {
		return 0;
	} else {
		return _p78._0 + 1;
	}
};
var _user$project$Common_sequent$deadEnd = function (seq) {
	var ff = function (n) {
		return A2(
			_elm_lang$core$List$map,
			function (z) {
				var _p79 = z;
				if ((((_p79.ctor === 'RelAtom') && (_p79._0.ctor === '_Tuple4')) && (_p79._0._3.ctor === '_Tuple2')) && (_p79._0._3._1.ctor === '[]')) {
					var _p82 = _p79._0._3._0;
					return ((!_elm_lang$core$Native_Utils.eq(
						_p79._0._2,
						{
							ctor: '_Tuple2',
							_0: _p82,
							_1: {ctor: '[]'}
						})) && (!A2(
						_user$project$Util$exists,
						seq.leftRel,
						function (w) {
							var _p80 = w;
							if ((((((_p80.ctor === 'RelAtom') && (_p80._0.ctor === '_Tuple4')) && (_p80._0._2.ctor === '_Tuple2')) && (_p80._0._2._1.ctor === '[]')) && (_p80._0._3.ctor === '_Tuple2')) && (_p80._0._3._1.ctor === '[]')) {
								return _elm_lang$core$Native_Utils.eq(
									_toastal$either$Either$Left(_p82),
									_toastal$either$Either$Left(_p80._0._2._0));
							} else {
								return _elm_lang$core$Native_Utils.crashCase(
									'Common_sequent',
									{
										start: {line: 619, column: 68},
										end: {line: 621, column: 63}
									},
									_p80)('error in deadEnd (1)');
							}
						}))) ? _elm_lang$core$Maybe$Just(_p82) : _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Common_sequent',
						{
							start: {line: 617, column: 18},
							end: {line: 624, column: 52}
						},
						_p79)('error in deadEnd (2)');
				}
			},
			seq.leftRel);
	};
	var wl = _user$project$Common_sequent$wholeLabel(seq);
	return _elm_lang$core$List$isEmpty(seq.leftRel) ? _elm_lang$core$List$head(wl) : _user$project$Util$maybeBigOr(
		_user$project$Util$nub(
			A2(_elm_lang$core$List$concatMap, ff, wl)));
};
var _user$project$Common_sequent$serR = 20;
var _user$project$Common_sequent$symR = 9;
var _user$project$Common_sequent$eucR = 9;
var _user$project$Common_sequent$traR = 9;
var _user$project$Common_sequent$refR = 9;
var _user$project$Common_sequent$boxLN = 16;
var _user$project$Common_sequent$boxRN = 15;
var _user$project$Common_sequent$diaLN = 6;
var _user$project$Common_sequent$diaRN = 6;
var _user$project$Common_sequent$amodelDefN_DEL = 30;
var _user$project$Common_sequent$boxLN2_DEL = 16;
var _user$project$Common_sequent$boxLN1_DEL = 16;
var _user$project$Common_sequent$boxRN2_DEL = 15;
var _user$project$Common_sequent$boxRN1_DEL = 15;
var _user$project$Common_sequent$bigAndLN_DEL = 20;
var _user$project$Common_sequent$bigAndRN_DEL = 5;
var _user$project$Common_sequent$cupLN_DEL = 2;
var _user$project$Common_sequent$cupRN_DEL = 5;
var _user$project$Common_sequent$action2RN_DEL = 9;
var _user$project$Common_sequent$action2LN_DEL = 3;
var _user$project$Common_sequent$actionLN_DEL = 9;
var _user$project$Common_sequent$actionRN_DEL = 3;
var _user$project$Common_sequent$atRN_DEL = 1;
var _user$project$Common_sequent$atLN_DEL = 1;
var _user$project$Common_sequent$cmpRN = 4;
var _user$project$Common_sequent$cmpLN = 4;
var _user$project$Common_sequent$ann2RN = 2;
var _user$project$Common_sequent$ann2LN = 2;
var _user$project$Common_sequent$annLN = 9;
var _user$project$Common_sequent$relLN = 4;
var _user$project$Common_sequent$relLN_DEL = _user$project$Common_sequent$relLN;
var _user$project$Common_sequent$annRN = 3;
var _user$project$Common_sequent$atRN = 1;
var _user$project$Common_sequent$atLN = 1;
var _user$project$Common_sequent$classicalTwo = 5;
var _user$project$Common_sequent$relRN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$relRN_DEL = _user$project$Common_sequent$relRN;
var _user$project$Common_sequent$disjLN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$conjRN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$implLN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$impl2LN = _user$project$Common_sequent$classicalTwo;
var _user$project$Common_sequent$classicalOne = 2;
var _user$project$Common_sequent$conjLN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$disjRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$implRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$impl2RN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$equiRN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$equiLN = _user$project$Common_sequent$classicalOne;
var _user$project$Common_sequent$negLN = 1;
var _user$project$Common_sequent$negRN = 1;
var _user$project$Common_sequent$initN = 0;
var _user$project$Common_sequent$limitOfSearching = 15;
var _user$project$Common_sequent$dd = _user$project$Common_syntax$AnyFormula('D');
var _user$project$Common_sequent$cc = _user$project$Common_syntax$AnyFormula('C');
var _user$project$Common_sequent$bb = _user$project$Common_syntax$AnyFormula('B');
var _user$project$Common_sequent$aa = _user$project$Common_syntax$AnyFormula('A');
var _user$project$Common_sequent$p3 = _user$project$Common_syntax$Atom('p3');
var _user$project$Common_sequent$p2 = _user$project$Common_syntax$Atom('p2');
var _user$project$Common_sequent$p1 = _user$project$Common_syntax$Atom('p1');
var _user$project$Common_sequent$ca123 = A2(
	_user$project$Common_syntax$And,
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_sequent$p1,
		A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p2, _user$project$Common_sequent$p1)),
	A2(
		_user$project$Common_syntax$And,
		A2(
			_user$project$Common_syntax$Imply,
			A2(
				_user$project$Common_syntax$Imply,
				_user$project$Common_sequent$p1,
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p2, _user$project$Common_sequent$p3)),
			A2(
				_user$project$Common_syntax$Imply,
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2),
				A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p3))),
		A2(
			_user$project$Common_syntax$Imply,
			A2(
				_user$project$Common_syntax$Imply,
				_user$project$Common_syntax$Not(_user$project$Common_sequent$p2),
				_user$project$Common_syntax$Not(_user$project$Common_sequent$p1)),
			A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2))));
var _user$project$Common_sequent$Sequent = F5(
	function (a, b, c, d, e) {
		return {leftRel: a, leftForm: b, rightRel: c, rightForm: d, forDEL: e};
	});
var _user$project$Common_sequent$Rule = F4(
	function (a, b, c, d) {
		return {priority: a, category: b, rulename: c, rule: d};
	});
var _user$project$Common_sequent$Branch = F3(
	function (a, b, c) {
		return {causeSequent: a, appliedRule: b, resultSequents: c};
	});
var _user$project$Common_sequent$RandomSeed = F2(
	function (a, b) {
		return {randomNumber: a, maxLengthOfRandomFormula: b};
	});
var _user$project$Common_sequent$Node = F3(
	function (a, b, c) {
		return {id: a, label: b, color: c};
	});
var _user$project$Common_sequent$Edge = F4(
	function (a, b, c, d) {
		return {id: a, from: b, to: c, label: d};
	});
var _user$project$Common_sequent$Graph = F3(
	function (a, b, c) {
		return {nodes: a, edges: b, provable: c};
	});
var _user$project$Common_sequent$LabelForm = function (a) {
	return {ctor: 'LabelForm', _0: a};
};
var _user$project$Common_sequent$formula2seq = function (f) {
	return {
		leftRel: {ctor: '[]'},
		leftForm: {ctor: '[]'},
		rightRel: {ctor: '[]'},
		rightForm: {
			ctor: '::',
			_0: _user$project$Common_sequent$LabelForm(
				{
					ctor: '_Tuple4',
					_0: {ctor: '[]'},
					_1: 0,
					_2: {ctor: '[]'},
					_3: f
				}),
			_1: {ctor: '[]'}
		},
		forDEL: {ctor: '[]'}
	};
};
var _user$project$Common_sequent$axK = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$Imply,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$bb))));
var _user$project$Common_sequent$axT = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
		_user$project$Common_sequent$aa));
var _user$project$Common_sequent$ax4 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa))));
var _user$project$Common_sequent$ax5 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa)),
		A2(
			_user$project$Common_syntax$Box,
			'a',
			_user$project$Common_syntax$Not(
				A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa)))));
var _user$project$Common_sequent$ax5p = _user$project$Common_sequent$formula2seq(
	_user$project$Common_syntax$Not(
		A2(
			_user$project$Common_syntax$Imply,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa),
			A2(
				_user$project$Common_syntax$Box,
				'a',
				_user$project$Common_syntax$Not(
					A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$aa))))));
var _user$project$Common_sequent$axB = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Imply,
		_user$project$Common_sequent$aa,
		A2(
			_user$project$Common_syntax$Box,
			'a',
			A2(_user$project$Common_syntax$Dia, 'a', _user$project$Common_sequent$aa))));
var _user$project$Common_sequent$axD = _user$project$Common_sequent$formula2seq(
	_user$project$Common_syntax$Not(
		A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_syntax$Bot)));
var _user$project$Common_sequent$RelAtom_int = function (a) {
	return {ctor: 'RelAtom_int', _0: a};
};
var _user$project$Common_sequent$RelAtom = function (a) {
	return {ctor: 'RelAtom', _0: a};
};
var _user$project$Common_sequent$tran = F2(
	function (exp1, exp2) {
		var _p84 = {ctor: '_Tuple2', _0: exp1, _1: exp2};
		if (((((((_p84.ctor === '_Tuple2') && (_p84._0.ctor === 'RelAtom')) && (_p84._0._0.ctor === '_Tuple4')) && (_p84._0._0._1.ctor === '[]')) && (_p84._1.ctor === 'RelAtom')) && (_p84._1._0.ctor === '_Tuple4')) && (_p84._1._0._1.ctor === '[]')) {
			var _p85 = _p84._0._0._0;
			return (_elm_lang$core$Native_Utils.eq(_p85, _p84._1._0._0) && _elm_lang$core$Native_Utils.eq(_p84._0._0._3, _p84._1._0._2)) ? {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {
						ctor: '::',
						_0: _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p85,
								_1: {ctor: '[]'},
								_2: _p84._0._0._2,
								_3: _p84._1._0._3
							}),
						_1: {ctor: '[]'}
					}
				}
			} : {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _user$project$Common_sequent$eucl = F2(
	function (exp1, exp2) {
		var _p86 = {ctor: '_Tuple2', _0: exp1, _1: exp2};
		if (((((((_p86.ctor === '_Tuple2') && (_p86._0.ctor === 'RelAtom')) && (_p86._0._0.ctor === '_Tuple4')) && (_p86._0._0._1.ctor === '[]')) && (_p86._1.ctor === 'RelAtom')) && (_p86._1._0.ctor === '_Tuple4')) && (_p86._1._0._1.ctor === '[]')) {
			var _p89 = _p86._1._0._3;
			var _p88 = _p86._0._0._3;
			var _p87 = _p86._0._0._0;
			return (_elm_lang$core$Native_Utils.eq(_p86._0._0._2, _p86._1._0._2) && _elm_lang$core$Native_Utils.eq(_p87, _p86._1._0._0)) ? {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {
						ctor: '::',
						_0: _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p87,
								_1: {ctor: '[]'},
								_2: _p88,
								_3: _p89
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p87,
									_1: {ctor: '[]'},
									_2: _p89,
									_3: _p88
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			} : {
				ctor: '::',
				_0: exp1,
				_1: {
					ctor: '::',
					_0: exp2,
					_1: {ctor: '[]'}
				}
			};
		} else {
			return _user$project$Util$nub(
				{
					ctor: '::',
					_0: exp1,
					_1: {
						ctor: '::',
						_0: exp2,
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _user$project$Common_sequent$Proof = F3(
	function (a, b, c) {
		return {ctor: 'Proof', _0: a, _1: b, _2: c};
	});
var _user$project$Common_sequent$Rule4Other = {ctor: 'Rule4Other'};
var _user$project$Common_sequent$axiomRule = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$initN,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'init',
		rule: function (seq) {
			var deleteBoxHistoty = function (_p90) {
				var _p91 = _p90;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {ctor: '[]'},
						_1: _p91._0._1,
						_2: _p91._0._2,
						_3: _p91._0._3
					});
			};
			return (A2(
				_user$project$Util$exists,
				seq.leftForm,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightForm,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(
								deleteBoxHistoty(x),
								deleteBoxHistoty(y));
						});
				}) || A2(
				_user$project$Util$exists,
				seq.leftRel,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightRel,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						});
				})) ? _elm_lang$core$Maybe$Just(
				{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$initN,
			category: _user$project$Common_sequent$Rule4Other,
			rulename: 'Top',
			rule: function (seq) {
				return A2(
					_user$project$Util$exists,
					seq.rightForm,
					function (a) {
						var _p92 = a;
						if ((_p92._0.ctor === '_Tuple4') && (_p92._0._3.ctor === 'Top')) {
							return true;
						} else {
							return false;
						}
					}) ? _elm_lang$core$Maybe$Just(
					{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$initN,
				category: _user$project$Common_sequent$Rule4Other,
				rulename: 'Bot',
				rule: function (seq) {
					return A2(
						_user$project$Util$exists,
						seq.leftForm,
						function (a) {
							var _p93 = a;
							if ((_p93._0.ctor === '_Tuple4') && (_p93._0._3.ctor === 'Bot')) {
								return true;
							} else {
								return false;
							}
						}) ? _elm_lang$core$Maybe$Just(
						{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
				}
			},
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Common_sequent$initCheck = function (li) {
	initCheck:
	while (true) {
		var _p94 = li;
		if (_p94.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p95 = _p94._0;
			if (A2(
				_user$project$Util$forall,
				_user$project$Common_sequent$axiomRule,
				function (x) {
					return function (y) {
						return _elm_lang$core$Native_Utils.eq(_elm_lang$core$Maybe$Nothing, y);
					}(
						_elm_community$maybe_extra$Maybe_Extra$combine(
							A2(_elm_lang$core$List$map, x.rule, _p95.resultSequents)));
				})) {
				var _v68 = _p94._1;
				li = _v68;
				continue initCheck;
			} else {
				return _elm_lang$core$Maybe$Just(_p95);
			}
		}
	}
};
var _user$project$Common_sequent$ruleEnd = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'end',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$ruleLimit = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'limit',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$ruleStop = {
	priority: _user$project$Common_sequent$initN,
	category: _user$project$Common_sequent$Rule4Other,
	rulename: 'stop',
	rule: function (x) {
		return _elm_lang$core$Maybe$Just(
			{ctor: '[]'});
	}
};
var _user$project$Common_sequent$makeProofBranch = F3(
	function (maxNum, ruleSet, seq) {
		var stopBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleStop,
			resultSequents: {ctor: '[]'}
		};
		var endBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleEnd,
			resultSequents: {ctor: '[]'}
		};
		var limitBranch = {
			causeSequent: seq,
			appliedRule: _user$project$Common_sequent$ruleLimit,
			resultSequents: {ctor: '[]'}
		};
		var forDEL1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{forDEL: x});
			},
			_user$project$Util$rotate(seq.forDEL));
		var rightSeqs2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{rightForm: x});
			},
			_user$project$Util$rotate(seq.rightForm));
		var rightSeqs1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{rightRel: x});
			},
			_user$project$Util$rotate(seq.rightRel));
		var leftSeqs2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{leftForm: x});
			},
			_user$project$Util$rotate(seq.leftForm));
		var leftSeqs1 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: x});
			},
			_user$project$Util$rotate(seq.leftRel));
		var applyrule = function (s) {
			return A2(
				_elm_lang$core$List$filterMap,
				function (r) {
					return A2(_user$project$Common_sequent$seq2branch, s, r);
				},
				ruleSet);
		};
		var branches = _user$project$Util$nub(
			A2(
				_elm_lang$core$List$concatMap,
				applyrule,
				_user$project$Util$nub(
					_elm_lang$core$List$concat(
						{
							ctor: '::',
							_0: leftSeqs1,
							_1: {
								ctor: '::',
								_0: leftSeqs2,
								_1: {
									ctor: '::',
									_0: rightSeqs1,
									_1: {
										ctor: '::',
										_0: rightSeqs2,
										_1: {
											ctor: '::',
											_0: forDEL1,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}))));
		var branchesSorted = A2(
			_elm_lang$core$List$sortBy,
			function (_p96) {
				return function (_) {
					return _.priority;
				}(
					function (_) {
						return _.appliedRule;
					}(_p96));
			},
			branches);
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel)) + _elm_lang$core$List$length(
				A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm)),
			maxNum) > 0) {
			return limitBranch;
		} else {
			var _p97 = branchesSorted;
			if (_p97.ctor === '[]') {
				return _user$project$Common_sequent$anyFormulaCheck(seq) ? stopBranch : endBranch;
			} else {
				var _p98 = _user$project$Common_sequent$initCheck(branchesSorted);
				if (_p98.ctor === 'Just') {
					return _user$project$Common_sequent$sortSeqOfBranch(_p98._0);
				} else {
					return _user$project$Common_sequent$sortSeqOfBranch(_p97._0);
				}
			}
		}
	});
var _user$project$Common_sequent$makeProofTree = F3(
	function (maxNum, ruleSet, seq) {
		var move = A3(_user$project$Common_sequent$makeProofBranch, maxNum, ruleSet, seq);
		return A3(
			_user$project$Common_sequent$Proof,
			seq,
			move.appliedRule.rulename,
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Common_sequent$makeProofTree, maxNum, ruleSet),
				move.resultSequents));
	});
var _user$project$Common_sequent$isProvableSeq = F3(
	function (maxNum, ruleSet, seq) {
		var _p99 = seq;
		if (_p99.ctor === 'Nothing') {
			return false;
		} else {
			var prf = A3(_user$project$Common_sequent$makeProofTree, maxNum, ruleSet, _p99._0);
			var _p100 = _user$project$Common_sequent$isProvable(prf);
			if (_p100 === 1) {
				return true;
			} else {
				return false;
			}
		}
	});
var _user$project$Common_sequent$ruleT = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$refR,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'ref',
		rule: function (seq) {
			var ref = A2(
				_user$project$Util_ops['$>>='],
				_user$project$Common_sequent$wholeAgent(seq),
				function (ag) {
					return A2(
						_user$project$Util_ops['$>>='],
						_user$project$Common_sequent$wholeLabel(seq),
						function (w) {
							return {
								ctor: '::',
								_0: _user$project$Common_sequent$RelAtom(
									{
										ctor: '_Tuple4',
										_0: ag,
										_1: {ctor: '[]'},
										_2: {
											ctor: '_Tuple2',
											_0: w,
											_1: {ctor: '[]'}
										},
										_3: {
											ctor: '_Tuple2',
											_0: w,
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							};
						});
				});
			var seq2 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					leftRel: _user$project$Util$nub(
						A2(_elm_lang$core$Basics_ops['++'], ref, seq.leftRel))
				});
			return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				});
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$ruleD = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$serR,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'ser',
		rule: function (seq) {
			var fresh = _user$project$Common_sequent$freshLabel(seq);
			var headLa = _user$project$Common_sequent$deadEnd(seq);
			var wholeAg = _user$project$Common_sequent$wholeAgent(seq);
			var _p101 = headLa;
			if (_p101.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var gg = A2(
					_elm_lang$core$List$concatMap,
					function (ag) {
						return {
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: ag,
									_1: {ctor: '[]'},
									_2: {
										ctor: '_Tuple2',
										_0: _p101._0,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: fresh,
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						};
					},
					wholeAg);
				return A2(
					_user$project$Common_sequent$sameSeq,
					seq,
					_elm_lang$core$Native_Utils.update(
						seq,
						{
							leftRel: A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, gg)
						})) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftRel: A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, gg)
							}),
						_1: {ctor: '[]'}
					});
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$Rule4DEL = {ctor: 'Rule4DEL'};
var _user$project$Common_sequent$Rule4RightFormula = {ctor: 'Rule4RightFormula'};
var _user$project$Common_sequent$Rule4RightRel = {ctor: 'Rule4RightRel'};
var _user$project$Common_sequent$Rule4LeftFormula = {ctor: 'Rule4LeftFormula'};
var _user$project$Common_sequent$ruleClassic = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$negLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L~',
		rule: function (seq) {
			var _p102 = seq.leftForm;
			if (((_p102.ctor === '::') && (_p102._0._0.ctor === '_Tuple4')) && (_p102._0._0._3.ctor === 'Not')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p102._0._0._0, _1: _p102._0._0._1, _2: _p102._0._0._2, _3: _p102._0._0._3._0});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: _p102._1,
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									seq.rightForm)
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$negRN,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'R~',
			rule: function (seq) {
				var _p103 = seq.rightForm;
				if (((_p103.ctor === '::') && (_p103._0._0.ctor === '_Tuple4')) && (_p103._0._0._3.ctor === 'Not')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{ctor: '_Tuple4', _0: _p103._0._0._0, _1: _p103._0._0._1, _2: _p103._0._0._2, _3: _p103._0._0._3._0});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftForm),
									rightForm: _p103._1
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$conjLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L&',
				rule: function (seq) {
					var _p104 = seq.leftForm;
					if (((_p104.ctor === '::') && (_p104._0._0.ctor === '_Tuple4')) && (_p104._0._0._3.ctor === 'And')) {
						var _p107 = _p104._0._0._1;
						var _p106 = _p104._0._0._0;
						var _p105 = _p104._0._0._2;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p106, _1: _p107, _2: _p105, _3: _p104._0._0._3._1});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p106, _1: _p107, _2: _p105, _3: _p104._0._0._3._0});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												}
											},
											_p104._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$conjRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R&',
					rule: function (seq) {
						var _p108 = seq.rightForm;
						if (((_p108.ctor === '::') && (_p108._0._0.ctor === '_Tuple4')) && (_p108._0._0._3.ctor === 'And')) {
							var _p112 = _p108._1;
							var _p111 = _p108._0._0._1;
							var _p110 = _p108._0._0._0;
							var _p109 = _p108._0._0._2;
							var f2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p110, _1: _p111, _2: _p109, _3: _p108._0._0._3._1});
							var f1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p110, _1: _p111, _2: _p109, _3: _p108._0._0._3._0});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: f1,
													_1: {ctor: '[]'}
												},
												_p112)
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: f2,
														_1: {ctor: '[]'}
													},
													_p112)
											}),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$disjLN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'Lv',
						rule: function (seq) {
							var _p113 = seq.leftForm;
							if (((_p113.ctor === '::') && (_p113._0._0.ctor === '_Tuple4')) && (_p113._0._0._3.ctor === 'Or')) {
								var _p117 = _p113._1;
								var _p116 = _p113._0._0._1;
								var _p115 = _p113._0._0._0;
								var _p114 = _p113._0._0._2;
								var add2 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p115, _1: _p116, _2: _p114, _3: _p113._0._0._3._1});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p115, _1: _p116, _2: _p114, _3: _p113._0._0._3._0});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													_p117)
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													leftForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														},
														_p117)
												}),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$disjRN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'Rv',
							rule: function (seq) {
								var _p118 = seq.rightForm;
								if (((_p118.ctor === '::') && (_p118._0._0.ctor === '_Tuple4')) && (_p118._0._0._3.ctor === 'Or')) {
									var _p121 = _p118._0._0._1;
									var _p120 = _p118._0._0._0;
									var _p119 = _p118._0._0._2;
									var add2 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p120, _1: _p121, _2: _p119, _3: _p118._0._0._3._1});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p120, _1: _p121, _2: _p119, _3: _p118._0._0._3._0});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															}
														},
														_p118._1)
												}),
											_1: {ctor: '[]'}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$implLN,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L->',
								rule: function (seq) {
									var _p122 = seq.leftForm;
									if (((_p122.ctor === '::') && (_p122._0._0.ctor === '_Tuple4')) && (_p122._0._0._3.ctor === 'Imply')) {
										var _p126 = _p122._1;
										var _p125 = _p122._0._0._1;
										var _p124 = _p122._0._0._0;
										var _p123 = _p122._0._0._2;
										var add2 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p124, _1: _p125, _2: _p123, _3: _p122._0._0._3._1});
										var add1 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p124, _1: _p125, _2: _p123, _3: _p122._0._0._3._0});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftForm: _p126,
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															},
															seq.rightForm)
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p126)
														}),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$implRN,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'R->',
									rule: function (seq) {
										var _p127 = seq.rightForm;
										if (((_p127.ctor === '::') && (_p127._0._0.ctor === '_Tuple4')) && (_p127._0._0._3.ctor === 'Imply')) {
											var _p130 = _p127._0._0._1;
											var _p129 = _p127._0._0._0;
											var _p128 = _p127._0._0._2;
											var add2 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p129, _1: _p130, _2: _p128, _3: _p127._0._0._3._1});
											var add1 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p129, _1: _p130, _2: _p128, _3: _p127._0._0._3._0});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.leftForm),
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p127._1)
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$impl2LN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L->2',
										rule: function (seq) {
											var _p131 = seq.leftForm;
											if (((_p131.ctor === '::') && (_p131._0._0.ctor === '_Tuple4')) && (_p131._0._0._3.ctor === 'Imply2')) {
												var _p135 = _p131._1;
												var _p134 = _p131._0._0._1;
												var _p133 = _p131._0._0._0;
												var _p132 = _p131._0._0._2;
												var add2 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p133, _1: _p134, _2: _p132, _3: _p131._0._0._3._0});
												var add1 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p133, _1: _p134, _2: _p132, _3: _p131._0._0._3._1});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add2,
																		_1: {ctor: '[]'}
																	},
																	_p135)
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: _p135,
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		seq.rightForm)
																}),
															_1: {ctor: '[]'}
														}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$impl2RN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R->2',
											rule: function (seq) {
												var _p136 = seq.rightForm;
												if (((_p136.ctor === '::') && (_p136._0._0.ctor === '_Tuple4')) && (_p136._0._0._3.ctor === 'Imply2')) {
													var _p139 = _p136._0._0._1;
													var _p138 = _p136._0._0._0;
													var _p137 = _p136._0._0._2;
													var add2 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p138, _1: _p139, _2: _p137, _3: _p136._0._0._3._1});
													var add1 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p138, _1: _p139, _2: _p137, _3: _p136._0._0._3._0});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add2,
																			_1: {ctor: '[]'}
																		},
																		seq.leftForm),
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		_p136._1)
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$equiLN,
												category: _user$project$Common_sequent$Rule4LeftFormula,
												rulename: 'L<->',
												rule: function (seq) {
													var _p140 = seq.leftForm;
													if (((_p140.ctor === '::') && (_p140._0._0.ctor === '_Tuple4')) && (_p140._0._0._3.ctor === 'Iff')) {
														var _p142 = _p140._0._0._3._1;
														var _p141 = _p140._0._0._3._0;
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: _p140._0._0._0,
																_1: _p140._0._0._1,
																_2: _p140._0._0._2,
																_3: A2(
																	_user$project$Common_syntax$And,
																	A2(_user$project$Common_syntax$Imply, _p141, _p142),
																	A2(_user$project$Common_syntax$Imply, _p142, _p141))
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p140._1)
																	}),
																_1: {ctor: '[]'}
															});
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$equiRN,
													category: _user$project$Common_sequent$Rule4RightFormula,
													rulename: 'R<->',
													rule: function (seq) {
														var _p143 = seq.rightForm;
														if (((_p143.ctor === '::') && (_p143._0._0.ctor === '_Tuple4')) && (_p143._0._0._3.ctor === 'Iff')) {
															var _p145 = _p143._0._0._3._1;
															var _p144 = _p143._0._0._3._0;
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: _p143._0._0._0,
																	_1: _p143._0._0._1,
																	_2: _p143._0._0._2,
																	_3: A2(
																		_user$project$Common_syntax$And,
																		A2(_user$project$Common_syntax$Imply, _p144, _p145),
																		A2(_user$project$Common_syntax$Imply, _p145, _p144))
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				_p143._1)
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Common_sequent$ruleK = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$boxRN,
		category: _user$project$Common_sequent$Rule4RightFormula,
		rulename: 'R#',
		rule: function (seq) {
			var _p146 = seq.rightForm;
			if (((_p146.ctor === '::') && (_p146._0._0.ctor === '_Tuple4')) && (_p146._0._0._3.ctor === 'Box')) {
				var _p147 = _p146._0._0._2;
				var $new = _user$project$Common_sequent$freshLabel(seq);
				var add1 = _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p146._0._0._3._0,
						_1: _toastal$either$Either$lefts(_p147),
						_2: {
							ctor: '_Tuple2',
							_0: _p146._0._0._1,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: $new,
							_1: {ctor: '[]'}
						}
					});
				var add2 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p146._0._0._0, _1: $new, _2: _p147, _3: _p146._0._0._3._1});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add2,
										_1: {ctor: '[]'}
									},
									_p146._1),
								leftRel: _user$project$Common_sequent$sortRelAtom(
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftRel))
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$boxLN,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L#',
			rule: function (seq) {
				var _p148 = seq.leftForm;
				if (((_p148.ctor === '::') && (_p148._0._0.ctor === '_Tuple4')) && (_p148._0._0._3.ctor === 'Box')) {
					var _p160 = _p148._0._0._1;
					var _p159 = _p148._0._0._3._1;
					var _p158 = _p148._1;
					var _p157 = _p148._0._0._0;
					var _p156 = _p148._0._0._2;
					var _p155 = _p148._0._0._3._0;
					var orig = function (_p149) {
						var _p150 = _p149;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p150._0, _1: _p150._1},
									_1: _p157
								},
								_1: _p160,
								_2: _p156,
								_3: A2(_user$project$Common_syntax$Box, _p155, _p159)
							});
					};
					var add2 = function (_p151) {
						var _p152 = _p151;
						return _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p155,
								_1: _toastal$either$Either$lefts(_p156),
								_2: {
									ctor: '_Tuple2',
									_0: _p160,
									_1: {ctor: '[]'}
								},
								_3: {
									ctor: '_Tuple2',
									_0: _p152._0,
									_1: {ctor: '[]'}
								}
							});
					};
					var add1 = function (_p153) {
						var _p154 = _p153;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {ctor: '[]'},
								_1: _p154._0,
								_2: _p156,
								_3: _p159
							});
					};
					var justlabel = function (wholeLabel2) {
						return _elm_community$list_extra$List_Extra$last(
							A2(_user$project$Util$difference, wholeLabel2, _p157));
					}(
						A2(
							_elm_lang$core$List$map,
							function (n) {
								return {
									ctor: '_Tuple2',
									_0: n,
									_1: {ctor: '[]'}
								};
							},
							_user$project$Common_sequent$wholeLabel(seq)));
					return A2(
						_user$project$Applicative_ops['?>'],
						justlabel,
						function (x) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: orig(x),
												_1: {
													ctor: '::',
													_0: add1(x),
													_1: {ctor: '[]'}
												}
											},
											_p158)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: orig(x),
													_1: {ctor: '[]'}
												},
												_p158),
											rightRel: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2(x),
													_1: {ctor: '[]'}
												},
												seq.rightRel)
										}),
									_1: {ctor: '[]'}
								}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$boxLN,
				category: _user$project$Common_sequent$Rule4RightFormula,
				rulename: 'R$',
				rule: function (seq) {
					var _p161 = seq.rightForm;
					if (((_p161.ctor === '::') && (_p161._0._0.ctor === '_Tuple4')) && (_p161._0._0._3.ctor === 'Dia')) {
						var _p173 = _p161._0._0._1;
						var _p172 = _p161._1;
						var _p171 = _p161._0._0._3._1;
						var _p170 = _p161._0._0._0;
						var _p169 = _p161._0._0._2;
						var _p168 = _p161._0._0._3._0;
						var orig = function (_p162) {
							var _p163 = _p162;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p163._0, _1: _p163._1},
										_1: _p170
									},
									_1: _p173,
									_2: _p169,
									_3: A2(_user$project$Common_syntax$Dia, _p168, _p171)
								});
						};
						var add2 = function (_p164) {
							var _p165 = _p164;
							return _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p168,
									_1: _toastal$either$Either$lefts(_p169),
									_2: {
										ctor: '_Tuple2',
										_0: _p173,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: _p165._0,
										_1: {ctor: '[]'}
									}
								});
						};
						var add1 = function (_p166) {
							var _p167 = _p166;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {ctor: '[]'},
									_1: _p167._0,
									_2: _p169,
									_3: _p171
								});
						};
						var justlabel = function (wholeLabel2) {
							return _elm_lang$core$List$head(
								A2(_user$project$Util$difference, wholeLabel2, _p170));
						}(
							A2(
								_elm_lang$core$List$map,
								function (n) {
									return {
										ctor: '_Tuple2',
										_0: n,
										_1: {ctor: '[]'}
									};
								},
								_user$project$Common_sequent$wholeLabel(seq)));
						return A2(
							_user$project$Applicative_ops['?>'],
							justlabel,
							function (x) {
								return {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: orig(x),
													_1: {
														ctor: '::',
														_0: add1(x),
														_1: {ctor: '[]'}
													}
												},
												_p172)
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: orig(x),
														_1: {ctor: '[]'}
													},
													_p172),
												rightRel: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add2(x),
														_1: {ctor: '[]'}
													},
													seq.rightRel)
											}),
										_1: {ctor: '[]'}
									}
								};
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$boxRN,
					category: _user$project$Common_sequent$Rule4LeftFormula,
					rulename: 'L$',
					rule: function (seq) {
						var _p174 = seq.leftForm;
						if (((_p174.ctor === '::') && (_p174._0._0.ctor === '_Tuple4')) && (_p174._0._0._3.ctor === 'Dia')) {
							var _p175 = _p174._0._0._2;
							var $new = _user$project$Common_sequent$freshLabel(seq);
							var add1 = _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p174._0._0._3._0,
									_1: _toastal$either$Either$lefts(_p175),
									_2: {
										ctor: '_Tuple2',
										_0: _p174._0._0._1,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: $new,
										_1: {ctor: '[]'}
									}
								});
							var add2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p174._0._0._0, _1: $new, _2: _p175, _3: _p174._0._0._3._1});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p174._1),
											leftRel: _user$project$Common_sequent$sortRelAtom(
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													seq.leftRel))
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Common_sequent$Rule4LeftRel = {ctor: 'Rule4LeftRel'};
var _user$project$Common_sequent$rule4 = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$traR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'tran',
		rule: function (seq) {
			var _p176 = seq.leftRel;
			if ((((_p176.ctor === '::') && (_p176._0.ctor === 'RelAtom')) && (_p176._0._0.ctor === '_Tuple4')) && (_p176._0._0._1.ctor === '[]')) {
				var ff = _user$project$Common_sequent$tran(
					_user$project$Common_sequent$RelAtom(
						{
							ctor: '_Tuple4',
							_0: _p176._0._0._0,
							_1: {ctor: '[]'},
							_2: _p176._0._0._2,
							_3: _p176._0._0._3
						}));
				var le2 = _user$project$Util$nub(
					A2(_elm_lang$core$List$concatMap, ff, seq.leftRel));
				var seq2 = _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: le2});
				return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: seq2,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$rule5 = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$eucR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'eucl',
		rule: function (seq) {
			var _p177 = seq.leftRel;
			if ((((_p177.ctor === '::') && (_p177._0.ctor === 'RelAtom')) && (_p177._0._0.ctor === '_Tuple4')) && (_p177._0._0._1.ctor === '[]')) {
				var ff = _user$project$Common_sequent$eucl(
					_user$project$Common_sequent$RelAtom(
						{
							ctor: '_Tuple4',
							_0: _p177._0._0._0,
							_1: {ctor: '[]'},
							_2: _p177._0._0._2,
							_3: _p177._0._0._3
						}));
				var le2 = _user$project$Util$nub(
					A2(_elm_lang$core$List$concatMap, ff, seq.leftRel));
				var seq2 = _elm_lang$core$Native_Utils.update(
					seq,
					{leftRel: le2});
				return A2(_user$project$Common_sequent$sameSeq, seq, seq2) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: seq2,
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$ruleB = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$symR,
		category: _user$project$Common_sequent$Rule4LeftRel,
		rulename: 'symm',
		rule: function (seq) {
			var _p178 = seq.leftRel;
			if ((((_p178.ctor === '::') && (_p178._0.ctor === 'RelAtom')) && (_p178._0._0.ctor === '_Tuple4')) && (_p178._0._0._1.ctor === '[]')) {
				var le2 = _user$project$Util$nub(
					A2(
						_elm_lang$core$Basics_ops['++'],
						seq.leftRel,
						{
							ctor: '::',
							_0: _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p178._0._0._0,
									_1: {ctor: '[]'},
									_2: _p178._0._0._3,
									_3: _p178._0._0._2
								}),
							_1: {ctor: '[]'}
						}));
				return A2(
					_user$project$Common_sequent$sameSeq,
					seq,
					_elm_lang$core$Native_Utils.update(
						seq,
						{leftRel: le2})) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{leftRel: le2}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {ctor: '[]'}
};
var _user$project$Common_sequent$proofSystem = function (str) {
	proofSystem:
	while (true) {
		var _p179 = _elm_lang$core$String$toList(str);
		if (_p179.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p183 = _p179._1;
			var _p180 = _p179._0;
			switch (_p180.valueOf()) {
				case 'K':
					var _v101 = _elm_lang$core$String$fromList(_p183);
					str = _v101;
					continue proofSystem;
				case 'T':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleT,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p183)));
				case 'B':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleB,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p183)));
				case 'D':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$ruleD,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p183)));
				case '4':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$rule4,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p183)));
				case '5':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Common_sequent$rule5,
						_user$project$Common_sequent$proofSystem(
							_elm_lang$core$String$fromList(_p183)));
				case 'S':
					var _p181 = _p183;
					if (_p181.ctor === '[]') {
						return {ctor: '[]'};
					} else {
						var _p182 = _p181._0;
						switch (_p182.valueOf()) {
							case '5':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Common_sequent$ruleK,
									A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleT, _user$project$Common_sequent$rule5));
							case '4':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Common_sequent$ruleK,
									A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleT, _user$project$Common_sequent$rule4));
							default:
								return {ctor: '[]'};
						}
					}
				default:
					return {ctor: '[]'};
			}
		}
	}
};
var _user$project$Common_sequent$Tree = F2(
	function (a, b) {
		return {ctor: 'Tree', _0: a, _1: b};
	});
var _user$project$Common_sequent$proof2tree = function (_p184) {
	var _p185 = _p184;
	return function (w) {
		return A2(
			_user$project$Common_sequent$Tree,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p185._1,
					A2(_elm_lang$core$Basics_ops['++'], ')  ', w))),
			A2(_elm_lang$core$List$map, _user$project$Common_sequent$proof2tree, _p185._2));
	}(
		_user$project$Common_sequent$outputSequent(_p185._0));
};
var _user$project$Common_sequent$drawProof = F3(
	function (maxNum, ruleSet, seq) {
		var derivation = A3(_user$project$Common_sequent$makeProofTree, maxNum, ruleSet, seq);
		var isPro = _user$project$Common_sequent$isProvable(derivation);
		return function (z) {
			return A2(_user$project$Common_sequent$list2pairElm, z, isPro);
		}(
			function (y) {
				return A2(
					_user$project$Common_sequent$addBlank,
					y,
					{ctor: '[]'});
			}(
				function (y) {
					return A2(
						_user$project$Common_sequent$addBlank,
						y,
						{ctor: '[]'});
				}(
					function (y) {
						return A2(
							_user$project$Common_sequent$addBlank,
							y,
							{ctor: '[]'});
					}(
						function (x) {
							return A2(
								_user$project$Common_sequent$tree2vis,
								x,
								{ctor: '[]'});
						}(
							_user$project$Common_sequent$proof2tree(derivation))))));
	});

var _user$project$DEL_sequent$substVar = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	return _elm_lang$core$Native_Utils.eq(_p1._1._0, _p2) ? _p1._1._1 : _p2;
};
var _user$project$DEL_sequent$substAM = function (_p3) {
	var _p4 = _p3;
	var _p7 = _p4._1._1;
	var _p6 = _p4._1._0;
	var _p5 = _p4._0;
	switch (_p5.ctor) {
		case 'PointAModel':
			return A2(
				_user$project$Common_syntax$PointAModel,
				_p5._0,
				_user$project$DEL_sequent$substVar(
					{
						ctor: '_Tuple2',
						_0: _p5._1,
						_1: {ctor: '_Tuple2', _0: _p6, _1: _p7}
					}));
		case 'Cup':
			return A2(
				_user$project$Common_syntax$Cup,
				_user$project$DEL_sequent$substAM(
					{
						ctor: '_Tuple2',
						_0: _p5._0,
						_1: {ctor: '_Tuple2', _0: _p6, _1: _p7}
					}),
				_user$project$DEL_sequent$substAM(
					{
						ctor: '_Tuple2',
						_0: _p5._1,
						_1: {ctor: '_Tuple2', _0: _p6, _1: _p7}
					}));
		default:
			return A2(
				_user$project$Common_syntax$ComposePoAM,
				_user$project$DEL_sequent$substAM(
					{
						ctor: '_Tuple2',
						_0: _p5._0,
						_1: {ctor: '_Tuple2', _0: _p6, _1: _p7}
					}),
				_user$project$DEL_sequent$substAM(
					{
						ctor: '_Tuple2',
						_0: _p5._1,
						_1: {ctor: '_Tuple2', _0: _p6, _1: _p7}
					}));
	}
};
var _user$project$DEL_sequent$substF = function (_p8) {
	var _p9 = _p8;
	var _p16 = _p9._1;
	var _p10 = _p9._0;
	_v4_14:
	do {
		switch (_p10.ctor) {
			case 'Atom':
				return _user$project$Common_syntax$Atom(_p10._0);
			case 'AnyFormula':
				return _user$project$Common_syntax$AnyFormula(_p10._0);
			case 'Not':
				return _user$project$Common_syntax$Not(
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}));
			case 'And':
				return A2(
					_user$project$Common_syntax$And,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Or':
				return A2(
					_user$project$Common_syntax$Or,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Iff':
				return A2(
					_user$project$Common_syntax$Iff,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Imply':
				return A2(
					_user$project$Common_syntax$Imply,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Imply2':
				return A2(
					_user$project$Common_syntax$Imply2,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Box':
				return A2(
					_user$project$Common_syntax$Box,
					_p10._0,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Dia':
				return A2(
					_user$project$Common_syntax$Dia,
					_p10._0,
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Bigwedge':
				if ((_p10._1.ctor === '_Tuple2') && (_p10._1._1.ctor === '_Tuple3')) {
					var _p12 = _p10._1._1._2;
					var _p11 = _p10._1._1._1;
					return A3(
						_user$project$Common_syntax$Bigwedge,
						_p10._0,
						{
							ctor: '_Tuple2',
							_0: _p10._1._0,
							_1: {ctor: '_Tuple3', _0: _p10._1._1._0, _1: _p11, _2: _p12}
						},
						_user$project$DEL_sequent$substF(
							{
								ctor: '_Tuple2',
								_0: _p10._2,
								_1: {ctor: '_Tuple2', _0: _p11, _1: _p12}
							}));
				} else {
					break _v4_14;
				}
			case 'Bigvee':
				if ((_p10._1.ctor === '_Tuple2') && (_p10._1._1.ctor === '_Tuple3')) {
					var _p14 = _p10._1._1._2;
					var _p13 = _p10._1._1._1;
					return A3(
						_user$project$Common_syntax$Bigvee,
						_p10._0,
						{
							ctor: '_Tuple2',
							_0: _p10._1._0,
							_1: {ctor: '_Tuple3', _0: _p10._1._1._0, _1: _p13, _2: _p14}
						},
						_user$project$DEL_sequent$substF(
							{
								ctor: '_Tuple2',
								_0: _p10._2,
								_1: {ctor: '_Tuple2', _0: _p13, _1: _p14}
							}));
				} else {
					break _v4_14;
				}
			case 'BoxAction':
				return A2(
					_user$project$Common_syntax$BoxAction,
					_user$project$DEL_sequent$substAM(
						{ctor: '_Tuple2', _0: _p10._0, _1: _p16}),
					_user$project$DEL_sequent$substF(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			case 'Precon':
				return A2(
					_user$project$Common_syntax$Precon,
					_p10._0,
					_user$project$DEL_sequent$substVar(
						{ctor: '_Tuple2', _0: _p10._1, _1: _p16}));
			default:
				break _v4_14;
		}
	} while(false);
	return _elm_lang$core$Native_Utils.crashCase(
		'DEL_sequent',
		{
			start: {line: 771, column: 17},
			end: {line: 787, column: 51}
		},
		_p10)('error in substF');
};
var _user$project$DEL_sequent$substLabel = function (_p17) {
	var _p18 = _p17;
	return _user$project$Common_sequent$LabelForm(
		{
			ctor: '_Tuple4',
			_0: _p18._0._0._0,
			_1: _p18._0._0._1,
			_2: _p18._0._0._2,
			_3: _user$project$DEL_sequent$substF(
				{ctor: '_Tuple2', _0: _p18._0._0._3, _1: _p18._1})
		});
};
var _user$project$DEL_sequent$substRel = function (xx) {
	var _p19 = xx;
	if (_p19._0.ctor === 'RelAtom') {
		var ff = function (x) {
			var _p20 = x;
			switch (_p20.ctor) {
				case 'PointAModel':
					return A2(
						_user$project$Common_syntax$PointAModel,
						_p20._0,
						_user$project$DEL_sequent$substVar(
							{ctor: '_Tuple2', _0: _p20._1, _1: _p19._1}));
				case 'Cup':
					var _p21 = _p20._0;
					return A2(
						_user$project$Common_syntax$Cup,
						ff(_p21),
						ff(_p21));
				default:
					var _p22 = _p20._0;
					return A2(
						_user$project$Common_syntax$ComposePoAM,
						ff(_p22),
						ff(_p22));
			}
		};
		var gg = function (_p23) {
			var _p24 = _p23;
			return {
				ctor: '_Tuple2',
				_0: _p24._0,
				_1: A2(_elm_lang$core$List$map, ff, _p24._1)
			};
		};
		return _user$project$Common_sequent$RelAtom(
			{
				ctor: '_Tuple4',
				_0: _p19._0._0._0,
				_1: _p19._0._0._1,
				_2: gg(_p19._0._0._2),
				_3: gg(_p19._0._0._3)
			});
	} else {
		return _user$project$Common_sequent$RelAtom_int(
			{ctor: '_Tuple2', _0: _p19._0._0._0, _1: _p19._0._0._1});
	}
};
var _user$project$DEL_sequent$substForDEL = function (_p25) {
	var _p26 = _p25;
	var _p29 = _p26._1;
	var ff = function (_p27) {
		var _p28 = _p27;
		return {
			ctor: '_Tuple4',
			_0: _p28._0,
			_1: _p28._1,
			_2: _user$project$DEL_sequent$substVar(
				{ctor: '_Tuple2', _0: _p28._2, _1: _p29}),
			_3: _user$project$DEL_sequent$substVar(
				{ctor: '_Tuple2', _0: _p28._3, _1: _p29})
		};
	};
	return A2(_elm_lang$core$List$map, ff, _p26._0);
};
var _user$project$DEL_sequent$substSeq = F2(
	function (seq, sp) {
		var forDEL2 = _user$project$DEL_sequent$substForDEL(
			{ctor: '_Tuple2', _0: seq.forDEL, _1: sp});
		var right2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _user$project$DEL_sequent$substLabel(
					{ctor: '_Tuple2', _0: x, _1: sp});
			},
			seq.rightForm);
		var left2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _user$project$DEL_sequent$substLabel(
					{ctor: '_Tuple2', _0: x, _1: sp});
			},
			seq.leftForm);
		var ri2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _user$project$DEL_sequent$substRel(
					{ctor: '_Tuple2', _0: x, _1: sp});
			},
			seq.rightRel);
		var le2 = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _user$project$DEL_sequent$substRel(
					{ctor: '_Tuple2', _0: x, _1: sp});
			},
			seq.leftRel);
		return {leftRel: le2, leftForm: left2, rightRel: ri2, rightForm: right2, forDEL: forDEL2};
	});
var _user$project$DEL_sequent$ruleAModel = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$amodelDefN_DEL,
		category: _user$project$Common_sequent$Rule4RightFormula,
		rulename: 'R.Definition of AModel_pre',
		rule: function (seq) {
			var _p30 = seq.rightForm;
			if (((_p30.ctor === '::') && (_p30._0._0.ctor === '_Tuple4')) && (_p30._0._0._3.ctor === 'Precon')) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (add1) {
						return {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									rightForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										_p30._1)
								}),
							_1: {ctor: '[]'}
						};
					},
					A2(
						_elm_lang$core$Maybe$map,
						function (a) {
							return _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p30._0._0._0, _1: _p30._0._0._1, _2: _p30._0._0._2, _3: a});
						},
						A2(_user$project$Common_syntax$lookPre, _p30._0._0._3._0.am_pre, _p30._0._0._3._1)));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$amodelDefN_DEL,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L.Definition of AModel_pre',
			rule: function (seq) {
				var _p31 = seq.leftForm;
				if (((_p31.ctor === '::') && (_p31._0._0.ctor === '_Tuple4')) && (_p31._0._0._3.ctor === 'Precon')) {
					return A2(
						_elm_lang$core$Maybe$map,
						function (add1) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {ctor: '[]'}
											},
											_p31._1)
									}),
								_1: {ctor: '[]'}
							};
						},
						A2(
							_elm_lang$core$Maybe$map,
							function (f) {
								return _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p31._0._0._0, _1: _p31._0._0._1, _2: _p31._0._0._2, _3: f});
							},
							A2(_user$project$Common_syntax$lookPre, _p31._0._0._3._0.am_pre, _p31._0._0._3._1)));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$amodelDefN_DEL,
				category: _user$project$Common_sequent$Rule4DEL,
				rulename: 'Definition of AModel_Rel',
				rule: function (seq) {
					var _p32 = seq.forDEL;
					if (((_p32.ctor === '::') && (_p32._0.ctor === '_Tuple4')) && (_p32._0._1.ctor === '::')) {
						var _p37 = _p32._0._3;
						if (A2(_elm_lang$core$String$contains, 'x', _p37)) {
							var listOfStatesFrom_s1 = A2(
								_user$project$Util_ops['$>>='],
								_p32._0._1._0.am_relation,
								function (_p33) {
									var _p34 = _p33;
									return (_elm_lang$core$Native_Utils.eq(_p34._1, _p32._0._2) && _elm_lang$core$Native_Utils.eq(_p34._0, _p32._0._0)) ? {
										ctor: '::',
										_0: _p34._2,
										_1: {ctor: '[]'}
									} : {ctor: '[]'};
								});
							var from_s2 = function (_p35) {
								var _p36 = _p35;
								return A2(
									_user$project$Util_ops['$>>='],
									_user$project$Util$nub(listOfStatesFrom_s1),
									function (t) {
										return {
											ctor: '::',
											_0: A2(
												_user$project$DEL_sequent$substSeq,
												_elm_lang$core$Native_Utils.update(
													seq,
													{forDEL: _p32._1}),
												{ctor: '_Tuple2', _0: _p37, _1: t}),
											_1: {ctor: '[]'}
										};
									});
							};
							return function (y) {
								return function (x) {
									return _elm_lang$core$List$isEmpty(x) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(x);
								}(
									_elm_lang$core$List$concat(y));
							}(
								A2(_elm_lang$core$List$map, from_s2, seq.forDEL));
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$DEL_sequent$state2freevar = F2(
	function (listBoundVar, s) {
		return (!A2(_elm_lang$core$List$member, s, listBoundVar)) ? {
			ctor: '::',
			_0: s,
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
	});
var _user$project$DEL_sequent$action2freevar = F2(
	function (listBoundVar, a) {
		var _p38 = a;
		switch (_p38.ctor) {
			case 'PointAModel':
				return A2(_user$project$DEL_sequent$state2freevar, listBoundVar, _p38._1);
			case 'Cup':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p38._0),
					A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p38._1));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p38._0),
					A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p38._1));
		}
	});
var _user$project$DEL_sequent$form2freevar = F2(
	function (listBoundVar, f) {
		form2freevar:
		while (true) {
			var _p39 = f;
			_v17_13:
			do {
				switch (_p39.ctor) {
					case 'Not':
						var _v18 = listBoundVar,
							_v19 = _p39._0;
						listBoundVar = _v18;
						f = _v19;
						continue form2freevar;
					case 'And':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Or':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Iff':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Imply':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Imply2':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Box':
						var _v20 = listBoundVar,
							_v21 = _p39._1;
						listBoundVar = _v20;
						f = _v21;
						continue form2freevar;
					case 'Dia':
						var _v22 = listBoundVar,
							_v23 = _p39._1;
						listBoundVar = _v22;
						f = _v23;
						continue form2freevar;
					case 'Bigwedge':
						if ((_p39._1.ctor === '_Tuple2') && (_p39._1._1.ctor === '_Tuple3')) {
							var _p42 = _p39._2;
							var _p41 = _p39._1._1._2;
							var _p40 = _p39._1._1._1;
							if (!A2(_elm_lang$core$List$member, _p40, listBoundVar)) {
								return {
									ctor: '::',
									_0: _p40,
									_1: A2(
										_user$project$DEL_sequent$form2freevar,
										{ctor: '::', _0: _p41, _1: listBoundVar},
										_p42)
								};
							} else {
								var _v24 = {ctor: '::', _0: _p41, _1: listBoundVar},
									_v25 = _p42;
								listBoundVar = _v24;
								f = _v25;
								continue form2freevar;
							}
						} else {
							break _v17_13;
						}
					case 'Bigvee':
						if ((_p39._1.ctor === '_Tuple2') && (_p39._1._1.ctor === '_Tuple3')) {
							var _p45 = _p39._2;
							var _p44 = _p39._1._1._2;
							var _p43 = _p39._1._1._1;
							if (!A2(_elm_lang$core$List$member, _p43, listBoundVar)) {
								return {
									ctor: '::',
									_0: _p43,
									_1: A2(
										_user$project$DEL_sequent$form2freevar,
										{ctor: '::', _0: _p44, _1: listBoundVar},
										_p45)
								};
							} else {
								var _v26 = {ctor: '::', _0: _p44, _1: listBoundVar},
									_v27 = _p45;
								listBoundVar = _v26;
								f = _v27;
								continue form2freevar;
							}
						} else {
							break _v17_13;
						}
					case 'BoxAction':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'DiaAction':
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$DEL_sequent$action2freevar, listBoundVar, _p39._0),
							A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p39._1));
					case 'Precon':
						return A2(_user$project$DEL_sequent$state2freevar, listBoundVar, _p39._1);
					default:
						break _v17_13;
				}
			} while(false);
			return {ctor: '[]'};
		}
	});
var _user$project$DEL_sequent$labelExp2freevar = F2(
	function (listBoundVar, a) {
		var _p46 = a;
		if (_p46.ctor === 'Left') {
			return function (x) {
				return function (y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}(
					A2(_user$project$DEL_sequent$form2freevar, listBoundVar, _p46._0._0._3));
			}(
				A2(
					_elm_lang$core$List$concatMap,
					function (a) {
						return A2(_user$project$DEL_sequent$action2freevar, listBoundVar, a);
					},
					_toastal$either$Either$rights(_p46._0._0._2)));
		} else {
			if (_p46._0.ctor === 'RelAtom') {
				return _user$project$Util$nub(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$concatMap,
							function (a) {
								return A2(_user$project$DEL_sequent$action2freevar, listBoundVar, a);
							},
							A2(_elm_lang$core$Basics_ops['++'], _p46._0._0._2._1, _p46._0._0._3._1)),
						A2(
							_elm_lang$core$List$concatMap,
							function (f) {
								return A2(_user$project$DEL_sequent$form2freevar, listBoundVar, f);
							},
							_p46._0._0._1)));
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _user$project$DEL_sequent$sequent2freevar = F2(
	function (listBoundVar, seq) {
		var labelforms = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _toastal$either$Either$Left(x);
			},
			A2(_elm_lang$core$Basics_ops['++'], seq.leftForm, seq.rightForm));
		var relatoms = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _toastal$either$Either$Right(x);
			},
			A2(_elm_lang$core$Basics_ops['++'], seq.leftRel, seq.rightRel));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				function (x) {
					return A2(_user$project$DEL_sequent$labelExp2freevar, listBoundVar, x);
				},
				relatoms),
			A2(
				_elm_lang$core$List$concatMap,
				function (x) {
					return A2(_user$project$DEL_sequent$labelExp2freevar, listBoundVar, x);
				},
				labelforms));
	});
var _user$project$DEL_sequent$ruleDEL = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$atLN_DEL,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'Lat',
		rule: function (seq) {
			var _p47 = seq.leftForm;
			if (((_p47.ctor === '::') && (_p47._0._0.ctor === '_Tuple4')) && (_p47._0._0._3.ctor === 'Atom')) {
				var add1 = function (ini) {
					return _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: _p47._0._0._0,
							_1: _p47._0._0._1,
							_2: ini,
							_3: _user$project$Common_syntax$Atom(_p47._0._0._3._0)
						});
				};
				return A2(
					_user$project$Applicative_ops['?>'],
					_elm_community$list_extra$List_Extra$init(_p47._0._0._2),
					function (ini) {
						return {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1(ini),
											_1: {ctor: '[]'}
										},
										_p47._1)
								}),
							_1: {ctor: '[]'}
						};
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$atRN_DEL,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'Rat',
			rule: function (seq) {
				var _p48 = seq.rightForm;
				if (((_p48.ctor === '::') && (_p48._0._0.ctor === '_Tuple4')) && (_p48._0._0._3.ctor === 'Atom')) {
					var add1 = function (ini) {
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p48._0._0._0,
								_1: _p48._0._0._1,
								_2: ini,
								_3: _user$project$Common_syntax$Atom(_p48._0._0._3._0)
							});
					};
					return A2(
						_user$project$Applicative_ops['?>'],
						_elm_community$list_extra$List_Extra$init(_p48._0._0._2),
						function (ini) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										rightForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1(ini),
												_1: {ctor: '[]'}
											},
											_p48._1)
									}),
								_1: {ctor: '[]'}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$actionLN_DEL,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L[.]',
				rule: function (seq) {
					var _p49 = seq.leftForm;
					if ((((_p49.ctor === '::') && (_p49._0._0.ctor === '_Tuple4')) && (_p49._0._0._3.ctor === 'BoxAction')) && (_p49._0._0._3._0.ctor === 'PointAModel')) {
						var _p55 = _p49._0._0._3._0._1;
						var _p54 = _p49._1;
						var _p53 = _p49._0._0._1;
						var _p52 = _p49._0._0._0;
						var _p51 = _p49._0._0._3._0._0;
						var _p50 = _p49._0._0._2;
						var add2 = _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p52,
								_1: _p53,
								_2: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: _toastal$either$Either$Right(
											A2(_user$project$Common_syntax$PointAModel, _p51, _p55)),
										_1: {ctor: '[]'}
									},
									_p50),
								_3: _p49._0._0._3._1
							});
						var add1 = _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p52,
								_1: _p53,
								_2: _p50,
								_3: A2(_user$project$Common_syntax$Precon, _p51, _p55)
							});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add2,
												_1: {ctor: '[]'}
											},
											_p54)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: _p54,
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1,
													_1: {ctor: '[]'}
												},
												seq.rightForm)
										}),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$actionRN_DEL,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R[.]',
					rule: function (seq) {
						var _p56 = seq.rightForm;
						if ((((_p56.ctor === '::') && (_p56._0._0.ctor === '_Tuple4')) && (_p56._0._0._3.ctor === 'BoxAction')) && (_p56._0._0._3._0.ctor === 'PointAModel')) {
							var _p61 = _p56._0._0._3._0._1;
							var _p60 = _p56._0._0._1;
							var _p59 = _p56._0._0._0;
							var _p58 = _p56._0._0._3._0._0;
							var _p57 = _p56._0._0._2;
							var add2 = _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: _p59,
									_1: _p60,
									_2: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: _toastal$either$Either$Right(
												A2(_user$project$Common_syntax$PointAModel, _p58, _p61)),
											_1: {ctor: '[]'}
										},
										_p57),
									_3: _p56._0._0._3._1
								});
							var add1 = _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: _p59,
									_1: _p60,
									_2: _p57,
									_3: A2(_user$project$Common_syntax$Precon, _p58, _p61)
								});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1,
													_1: {ctor: '[]'}
												},
												seq.leftForm),
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p56._1)
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$action2LN_DEL,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'L<.>',
						rule: function (seq) {
							var _p62 = seq.leftForm;
							if ((((_p62.ctor === '::') && (_p62._0._0.ctor === '_Tuple4')) && (_p62._0._0._3.ctor === 'DiaAction')) && (_p62._0._0._3._0.ctor === 'PointAModel')) {
								var _p67 = _p62._0._0._3._0._1;
								var _p66 = _p62._0._0._1;
								var _p65 = _p62._0._0._0;
								var _p64 = _p62._0._0._3._0._0;
								var _p63 = _p62._0._0._2;
								var add2 = _user$project$Common_sequent$LabelForm(
									{
										ctor: '_Tuple4',
										_0: _p65,
										_1: _p66,
										_2: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: _toastal$either$Either$Right(
													A2(_user$project$Common_syntax$PointAModel, _p64, _p67)),
												_1: {ctor: '[]'}
											},
											_p63),
										_3: _p62._0._0._3._1
									});
								var add1 = _user$project$Common_sequent$LabelForm(
									{
										ctor: '_Tuple4',
										_0: _p65,
										_1: _p66,
										_2: _p63,
										_3: A2(_user$project$Common_syntax$Precon, _p64, _p67)
									});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														}
													},
													_p62._1)
											}),
										_1: {ctor: '[]'}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$action2RN_DEL,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'R<.>',
							rule: function (seq) {
								var _p68 = seq.rightForm;
								if ((((_p68.ctor === '::') && (_p68._0._0.ctor === '_Tuple4')) && (_p68._0._0._3.ctor === 'DiaAction')) && (_p68._0._0._3._0.ctor === 'PointAModel')) {
									var _p74 = _p68._0._0._3._0._1;
									var _p73 = _p68._1;
									var _p72 = _p68._0._0._1;
									var _p71 = _p68._0._0._0;
									var _p70 = _p68._0._0._3._0._0;
									var _p69 = _p68._0._0._2;
									var add2 = _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: _p71,
											_1: _p72,
											_2: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: _toastal$either$Either$Right(
														A2(_user$project$Common_syntax$PointAModel, _p70, _p74)),
													_1: {ctor: '[]'}
												},
												_p69),
											_3: _p68._0._0._3._1
										});
									var add1 = _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: _p71,
											_1: _p72,
											_2: _p69,
											_3: A2(_user$project$Common_syntax$Precon, _p70, _p74)
										});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														_p73)
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															_p73)
													}),
												_1: {ctor: '[]'}
											}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$cupLN_DEL,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'LU',
								rule: function (seq) {
									var _p75 = seq.leftForm;
									if ((((_p75.ctor === '::') && (_p75._0._0.ctor === '_Tuple4')) && (_p75._0._0._3.ctor === 'BoxAction')) && (_p75._0._0._3._0.ctor === 'Cup')) {
										var _p79 = _p75._0._0._1;
										var _p78 = _p75._0._0._3._1;
										var _p77 = _p75._0._0._0;
										var _p76 = _p75._0._0._2;
										var add2 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: _p77,
												_1: _p79,
												_2: _p76,
												_3: A2(_user$project$Common_syntax$BoxAction, _p75._0._0._3._0._1, _p78)
											});
										var add1 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: _p77,
												_1: _p79,
												_2: _p76,
												_3: A2(_user$project$Common_syntax$BoxAction, _p75._0._0._3._0._0, _p78)
											});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																}
															},
															_p75._1)
													}),
												_1: {ctor: '[]'}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$cupRN_DEL,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'RU',
									rule: function (seq) {
										var _p80 = seq.rightForm;
										if ((((_p80.ctor === '::') && (_p80._0._0.ctor === '_Tuple4')) && (_p80._0._0._3.ctor === 'BoxAction')) && (_p80._0._0._3._0.ctor === 'Cup')) {
											var _p85 = _p80._1;
											var _p84 = _p80._0._0._1;
											var _p83 = _p80._0._0._3._1;
											var _p82 = _p80._0._0._0;
											var _p81 = _p80._0._0._2;
											var add2 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: _p82,
													_1: _p84,
													_2: _p81,
													_3: A2(_user$project$Common_syntax$BoxAction, _p80._0._0._3._0._1, _p83)
												});
											var add1 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: _p82,
													_1: _p84,
													_2: _p81,
													_3: A2(_user$project$Common_syntax$BoxAction, _p80._0._0._3._0._0, _p83)
												});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																_p85)
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																rightForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add2,
																		_1: {ctor: '[]'}
																	},
																	_p85)
															}),
														_1: {ctor: '[]'}
													}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$cupLN_DEL,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L;',
										rule: function (seq) {
											var _p86 = seq.leftForm;
											if ((((_p86.ctor === '::') && (_p86._0._0.ctor === '_Tuple4')) && (_p86._0._0._3.ctor === 'BoxAction')) && (_p86._0._0._3._0.ctor === 'ComposePoAM')) {
												var add1 = _user$project$Common_sequent$LabelForm(
													{
														ctor: '_Tuple4',
														_0: _p86._0._0._0,
														_1: _p86._0._0._1,
														_2: _p86._0._0._2,
														_3: A2(
															_user$project$Common_syntax$BoxAction,
															A2(_user$project$Common_syntax$composeAction, _p86._0._0._3._0._0, _p86._0._0._3._0._1),
															_p86._0._0._3._1)
													});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add1,
																		_1: {ctor: '[]'}
																	},
																	_p86._1)
															}),
														_1: {ctor: '[]'}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$cupRN_DEL,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R;',
											rule: function (seq) {
												var _p87 = seq.rightForm;
												if ((((_p87.ctor === '::') && (_p87._0._0.ctor === '_Tuple4')) && (_p87._0._0._3.ctor === 'BoxAction')) && (_p87._0._0._3._0.ctor === 'ComposePoAM')) {
													var add1 = _user$project$Common_sequent$LabelForm(
														{
															ctor: '_Tuple4',
															_0: _p87._0._0._0,
															_1: _p87._0._0._1,
															_2: _p87._0._0._2,
															_3: A2(
																_user$project$Common_syntax$BoxAction,
																A2(_user$project$Common_syntax$composeAction, _p87._0._0._3._0._0, _p87._0._0._3._0._1),
																_p87._0._0._3._1)
														});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		_p87._1)
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$relLN_DEL,
												category: _user$project$Common_sequent$Rule4LeftRel,
												rulename: 'Lrel',
												rule: function (seq) {
													var _p88 = seq.leftRel;
													if ((((_p88.ctor === '::') && (_p88._0.ctor === 'RelAtom')) && (_p88._0._0.ctor === '_Tuple4')) && (_p88._0._0._1.ctor === '[]')) {
														var _p89 = {ctor: '_Tuple2', _0: _p88._0._0._2, _1: _p88._0._0._3};
														if (((((((_p89.ctor === '_Tuple2') && (_p89._0.ctor === '_Tuple2')) && (_p89._0._1.ctor === '::')) && (_p89._0._1._0.ctor === 'PointAModel')) && (_p89._1.ctor === '_Tuple2')) && (_p89._1._1.ctor === '::')) && (_p89._1._1._0.ctor === 'PointAModel')) {
															var _p93 = _p89._1._0;
															var _p92 = _p89._0._0;
															var _p91 = _p89._1._1._1;
															var _p90 = _p89._0._1._1;
															var add3 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: {ctor: '[]'},
																	_1: _p93,
																	_2: A2(
																		_elm_lang$core$List$map,
																		function (x) {
																			return _toastal$either$Either$Right(x);
																		},
																		_p91),
																	_3: A2(_user$project$Common_syntax$Precon, _p89._1._1._0._0, _p89._1._1._0._1)
																});
															var add2 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: {ctor: '[]'},
																	_1: _p92,
																	_2: A2(
																		_elm_lang$core$List$map,
																		function (x) {
																			return _toastal$either$Either$Right(x);
																		},
																		_p90),
																	_3: A2(_user$project$Common_syntax$Precon, _p89._0._1._0._0, _p89._0._1._0._1)
																});
															var add1 = _user$project$Common_sequent$RelAtom(
																{
																	ctor: '_Tuple4',
																	_0: _p88._0._0._0,
																	_1: {ctor: '[]'},
																	_2: {ctor: '_Tuple2', _0: _p92, _1: _p90},
																	_3: {ctor: '_Tuple2', _0: _p93, _1: _p91}
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			leftRel: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				_p88._1),
																			leftForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add2,
																					_1: {
																						ctor: '::',
																						_0: add3,
																						_1: {ctor: '[]'}
																					}
																				},
																				seq.leftForm)
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$relRN_DEL,
													category: _user$project$Common_sequent$Rule4RightRel,
													rulename: 'Rrel',
													rule: function (seq) {
														var _p94 = seq.rightRel;
														if ((((_p94.ctor === '::') && (_p94._0.ctor === 'RelAtom')) && (_p94._0._0.ctor === '_Tuple4')) && (_p94._0._0._1.ctor === '[]')) {
															var _p95 = {ctor: '_Tuple2', _0: _p94._0._0._2, _1: _p94._0._0._3};
															if (((((((_p95.ctor === '_Tuple2') && (_p95._0.ctor === '_Tuple2')) && (_p95._0._1.ctor === '::')) && (_p95._0._1._0.ctor === 'PointAModel')) && (_p95._1.ctor === '_Tuple2')) && (_p95._1._1.ctor === '::')) && (_p95._1._1._0.ctor === 'PointAModel')) {
																var _p99 = _p95._1._0;
																var _p98 = _p95._0._0;
																var _p97 = _p95._1._1._1;
																var _p96 = _p95._0._1._1;
																var add3 = _user$project$Common_sequent$LabelForm(
																	{
																		ctor: '_Tuple4',
																		_0: {ctor: '[]'},
																		_1: _p99,
																		_2: A2(
																			_elm_lang$core$List$map,
																			function (x) {
																				return _toastal$either$Either$Right(x);
																			},
																			_p97),
																		_3: A2(_user$project$Common_syntax$Precon, _p95._1._1._0._0, _p95._1._1._0._1)
																	});
																var add2 = _user$project$Common_sequent$LabelForm(
																	{
																		ctor: '_Tuple4',
																		_0: {ctor: '[]'},
																		_1: _p98,
																		_2: A2(
																			_elm_lang$core$List$map,
																			function (x) {
																				return _toastal$either$Either$Right(x);
																			},
																			_p96),
																		_3: A2(_user$project$Common_syntax$Precon, _p95._0._1._0._0, _p95._0._1._0._1)
																	});
																var add1 = _user$project$Common_sequent$RelAtom(
																	{
																		ctor: '_Tuple4',
																		_0: _p94._0._0._0,
																		_1: {ctor: '[]'},
																		_2: {ctor: '_Tuple2', _0: _p98, _1: _p96},
																		_3: {ctor: '_Tuple2', _0: _p99, _1: _p97}
																	});
																return _elm_lang$core$Maybe$Just(
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.update(
																			seq,
																			{
																				rightRel: A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: add1,
																						_1: {ctor: '[]'}
																					},
																					_p94._1)
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$Native_Utils.update(
																				seq,
																				{
																					rightForm: A2(
																						_elm_lang$core$Basics_ops['++'],
																						{
																							ctor: '::',
																							_0: add2,
																							_1: {ctor: '[]'}
																						},
																						seq.rightForm)
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.update(
																					seq,
																					{
																						rightForm: A2(
																							_elm_lang$core$Basics_ops['++'],
																							{
																								ctor: '::',
																								_0: add3,
																								_1: {ctor: '[]'}
																							},
																							seq.rightForm)
																					}),
																				_1: {ctor: '[]'}
																			}
																		}
																	});
															} else {
																return _elm_lang$core$Maybe$Nothing;
															}
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														priority: _user$project$Common_sequent$bigAndRN_DEL,
														category: _user$project$Common_sequent$Rule4RightFormula,
														rulename: 'R&&',
														rule: function (seq) {
															var _p100 = seq.rightForm;
															if (((((_p100.ctor === '::') && (_p100._0._0.ctor === '_Tuple4')) && (_p100._0._0._3.ctor === 'Bigwedge')) && (_p100._0._0._3._1.ctor === '_Tuple2')) && (_p100._0._0._3._1._1.ctor === '_Tuple3')) {
																var $new = function (n) {
																	return A2(_elm_lang$core$Basics_ops['++'], 'x', n);
																}(
																	_user$project$Util$show(
																		_user$project$Common_sequent$freshLabel(seq)));
																var add1 = _user$project$Common_sequent$LabelForm(
																	{
																		ctor: '_Tuple4',
																		_0: _p100._0._0._0,
																		_1: _p100._0._0._1,
																		_2: _p100._0._0._2,
																		_3: _user$project$DEL_sequent$substF(
																			{
																				ctor: '_Tuple2',
																				_0: _p100._0._0._3._2,
																				_1: {ctor: '_Tuple2', _0: _p100._0._0._3._1._1._2, _1: $new}
																			})
																	});
																var add2 = {
																	ctor: '_Tuple4',
																	_0: _p100._0._0._3._1._1._0,
																	_1: {
																		ctor: '::',
																		_0: _p100._0._0._3._1._0,
																		_1: {ctor: '[]'}
																	},
																	_2: _p100._0._0._3._1._1._1,
																	_3: $new
																};
																return _elm_lang$core$Maybe$Just(
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.update(
																			seq,
																			{
																				rightForm: A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: add1,
																						_1: {ctor: '[]'}
																					},
																					_p100._1),
																				forDEL: A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: add2,
																						_1: {ctor: '[]'}
																					},
																					seq.forDEL)
																			}),
																		_1: {ctor: '[]'}
																	});
															} else {
																return _elm_lang$core$Maybe$Nothing;
															}
														}
													},
													_1: {
														ctor: '::',
														_0: {
															priority: _user$project$Common_sequent$bigAndLN_DEL,
															category: _user$project$Common_sequent$Rule4LeftFormula,
															rulename: 'L&&',
															rule: function (seq) {
																var _p101 = seq.leftForm;
																if (((((_p101.ctor === '::') && (_p101._0._0.ctor === '_Tuple4')) && (_p101._0._0._3.ctor === 'Bigwedge')) && (_p101._0._0._3._1.ctor === '_Tuple2')) && (_p101._0._0._3._1._1.ctor === '_Tuple3')) {
																	var _p107 = _p101._0._0._1;
																	var _p106 = _p101._0._0._3._2;
																	var _p105 = _p101._0._0._3._0;
																	var _p104 = _p101._0._0._2;
																	var _p103 = _p101._0._0._3._1._1._2;
																	var _p102 = _p101._0._0._0;
																	var orig = function (z) {
																		return _user$project$Common_sequent$LabelForm(
																			{
																				ctor: '_Tuple4',
																				_0: _p102,
																				_1: _p107,
																				_2: _p104,
																				_3: A3(
																					_user$project$Common_syntax$Bigwedge,
																					{ctor: '::', _0: z, _1: _p105},
																					{
																						ctor: '_Tuple2',
																						_0: _p101._0._0._3._1._0,
																						_1: {ctor: '_Tuple3', _0: _p101._0._0._3._1._1._0, _1: _p101._0._0._3._1._1._1, _2: _p103}
																					},
																					_p106)
																			});
																	};
																	var add1 = function (sel) {
																		return _user$project$Common_sequent$LabelForm(
																			{
																				ctor: '_Tuple4',
																				_0: _p102,
																				_1: _p107,
																				_2: _p104,
																				_3: _user$project$DEL_sequent$substF(
																					{
																						ctor: '_Tuple2',
																						_0: _p106,
																						_1: {ctor: '_Tuple2', _0: _p103, _1: sel}
																					})
																			});
																	};
																	var wholeVar = A2(
																		_user$project$DEL_sequent$sequent2freevar,
																		{ctor: '[]'},
																		seq);
																	var justLabel = _elm_lang$core$List$head(
																		_elm_lang$core$List$reverse(
																			A2(_user$project$Util$difference, wholeVar, _p105)));
																	return A2(
																		_user$project$Applicative_ops['?>'],
																		justLabel,
																		function (x) {
																			return {
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.update(
																					seq,
																					{
																						leftForm: A2(
																							_elm_lang$core$Basics_ops['++'],
																							{
																								ctor: '::',
																								_0: add1(x),
																								_1: {ctor: '[]'}
																							},
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								{
																									ctor: '::',
																									_0: orig(x),
																									_1: {ctor: '[]'}
																								},
																								_p101._1))
																					}),
																				_1: {ctor: '[]'}
																			};
																		});
																} else {
																	return _elm_lang$core$Maybe$Nothing;
																}
															}
														},
														_1: {
															ctor: '::',
															_0: {
																priority: _user$project$Common_sequent$bigAndRN_DEL,
																category: _user$project$Common_sequent$Rule4RightFormula,
																rulename: 'Rpre',
																rule: function (seq) {
																	var _p108 = seq.rightForm;
																	if (((_p108.ctor === '::') && (_p108._0._0.ctor === '_Tuple4')) && (_p108._0._0._3.ctor === 'Precon')) {
																		var _p109 = _p108._0._0._3._1;
																		if (A2(_elm_lang$core$String$contains, ',', _p109)) {
																			var add1 = A2(
																				_elm_lang$core$Maybe$map,
																				function (x) {
																					return _user$project$Common_sequent$LabelForm(
																						{ctor: '_Tuple4', _0: _p108._0._0._0, _1: _p108._0._0._1, _2: _p108._0._0._2, _3: x});
																				},
																				A2(_user$project$Common_syntax$lookPre, _p108._0._0._3._0.am_pre, _p109));
																			return A2(
																				_elm_lang$core$Maybe$map,
																				function (x) {
																					return {
																						ctor: '::',
																						_0: _elm_lang$core$Native_Utils.update(
																							seq,
																							{
																								rightForm: A2(
																									_elm_lang$core$Basics_ops['++'],
																									{
																										ctor: '::',
																										_0: x,
																										_1: {ctor: '[]'}
																									},
																									_p108._1)
																							}),
																						_1: {ctor: '[]'}
																					};
																				},
																				add1);
																		} else {
																			return _elm_lang$core$Maybe$Nothing;
																		}
																	} else {
																		return _elm_lang$core$Maybe$Nothing;
																	}
																}
															},
															_1: {
																ctor: '::',
																_0: {
																	priority: _user$project$Common_sequent$bigAndLN_DEL,
																	category: _user$project$Common_sequent$Rule4LeftFormula,
																	rulename: 'Lpre',
																	rule: function (seq) {
																		var _p110 = seq.leftForm;
																		if (((_p110.ctor === '::') && (_p110._0._0.ctor === '_Tuple4')) && (_p110._0._0._3.ctor === 'Precon')) {
																			var add1 = A2(
																				_elm_lang$core$Maybe$map,
																				function (x) {
																					return _user$project$Common_sequent$LabelForm(
																						{ctor: '_Tuple4', _0: _p110._0._0._0, _1: _p110._0._0._1, _2: _p110._0._0._2, _3: x});
																				},
																				A2(_user$project$Common_syntax$lookPre, _p110._0._0._3._0.am_pre, _p110._0._0._3._1));
																			return A2(
																				_elm_lang$core$Maybe$map,
																				function (x) {
																					return {
																						ctor: '::',
																						_0: _elm_lang$core$Native_Utils.update(
																							seq,
																							{
																								leftForm: A2(
																									_elm_lang$core$Basics_ops['++'],
																									{
																										ctor: '::',
																										_0: x,
																										_1: {ctor: '[]'}
																									},
																									_p110._1)
																							}),
																						_1: {ctor: '[]'}
																					};
																				},
																				add1);
																		} else {
																			return _elm_lang$core$Maybe$Nothing;
																		}
																	}
																},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$DEL_sequent$actionCombi = function (list) {
	var ff = F2(
		function (xs, ys) {
			return A2(
				_user$project$Util_ops['$>>='],
				A2(_elm_lang$core$List$map, _elm_lang$core$List$singleton, xs),
				function (x) {
					return A2(
						_user$project$Util_ops['$>>='],
						ys,
						function (y) {
							return {
								ctor: '::',
								_0: A2(_elm_lang$core$Basics_ops['++'], x, y),
								_1: {ctor: '[]'}
							};
						});
				});
		});
	return A3(
		_elm_lang$core$List$foldr,
		ff,
		{
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		list);
};
var _user$project$DEL_sequent$wholeActions = F3(
	function (acts, ag, seq) {
		var gg = F2(
			function (_p111, k0) {
				var _p112 = _p111;
				var _p119 = _p112._1;
				var _p113 = k0;
				if ((_p113.ctor === 'Right') && (_p113._0.ctor === 'PointAModel')) {
					return A2(
						_user$project$Util_ops['$>>='],
						A2(
							_elm_lang$core$List$map,
							function (_p114) {
								var _p115 = _p114;
								return {ctor: '_Tuple2', _0: _p115._1, _1: _p115._3};
							},
							_p119),
						function (_p116) {
							var _p117 = _p116;
							var _p118 = _p117._1;
							return A2(
								_elm_lang$core$List$member,
								{ctor: '_Tuple4', _0: _p112._0, _1: _p117._0, _2: _p113._0._1, _3: _p118},
								_p119) ? {
								ctor: '::',
								_0: A2(_user$project$Common_syntax$PointAModel, _p113._0._0, _p118),
								_1: {ctor: '[]'}
							} : {ctor: '[]'};
						});
				} else {
					return {ctor: '[]'};
				}
			});
		var _p120 = A2(
			_elm_lang$core$List$map,
			gg(
				{ctor: '_Tuple2', _0: ag, _1: seq.forDEL}),
			acts);
		if (_p120.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return _user$project$DEL_sequent$actionCombi(_p120);
		}
	});
var _user$project$DEL_sequent$substitution4Action = F2(
	function (act, _p121) {
		var _p122 = _p121;
		var _p124 = _p122;
		var gg = function (am) {
			return _elm_lang$core$Native_Utils.eq(am.am_name, _p124.am_name) ? _p124 : am;
		};
		var _p123 = act;
		switch (_p123.ctor) {
			case 'PointAModel':
				return A2(
					_user$project$Common_syntax$PointAModel,
					gg(_p123._0),
					_p123._1);
			case 'Cup':
				return A2(
					_user$project$Common_syntax$Cup,
					A2(_user$project$DEL_sequent$substitution4Action, _p123._0, _p124),
					A2(_user$project$DEL_sequent$substitution4Action, _p123._1, _p124));
			default:
				return A2(
					_user$project$Common_syntax$ComposePoAM,
					A2(_user$project$DEL_sequent$substitution4Action, _p123._0, _p124),
					A2(_user$project$DEL_sequent$substitution4Action, _p123._1, _p124));
		}
	});
var _user$project$DEL_sequent$substitution4AModel = F2(
	function (f, amWith) {
		var gg = function (am) {
			return _elm_lang$core$Native_Utils.eq(am.am_name, amWith.am_name) ? amWith : am;
		};
		var _p125 = f;
		_v54_13:
		do {
			switch (_p125.ctor) {
				case 'Bigwedge':
					if ((_p125._1.ctor === '_Tuple2') && (_p125._1._1.ctor === '_Tuple3')) {
						var _p131 = _p125._1._1._2;
						var _p130 = _p125._1._1._1;
						var _p129 = _p125._0;
						var _p128 = _p125._2;
						var _p127 = _p125._1._0;
						var _p126 = _p125._1._1._0;
						return _elm_lang$core$Native_Utils.eq(_p127.am_name, amWith.am_name) ? A3(
							_user$project$Common_syntax$Bigwedge,
							_p129,
							{
								ctor: '_Tuple2',
								_0: amWith,
								_1: {ctor: '_Tuple3', _0: _p126, _1: _p130, _2: _p131}
							},
							A2(_user$project$DEL_sequent$substitution4AModel, _p128, amWith)) : A3(
							_user$project$Common_syntax$Bigwedge,
							_p129,
							{
								ctor: '_Tuple2',
								_0: _p127,
								_1: {ctor: '_Tuple3', _0: _p126, _1: _p130, _2: _p131}
							},
							A2(_user$project$DEL_sequent$substitution4AModel, _p128, amWith));
					} else {
						break _v54_13;
					}
				case 'Bigvee':
					if ((_p125._1.ctor === '_Tuple2') && (_p125._1._1.ctor === '_Tuple3')) {
						var _p137 = _p125._1._1._2;
						var _p136 = _p125._1._1._1;
						var _p135 = _p125._0;
						var _p134 = _p125._2;
						var _p133 = _p125._1._0;
						var _p132 = _p125._1._1._0;
						return _elm_lang$core$Native_Utils.eq(_p133.am_name, amWith.am_name) ? A3(
							_user$project$Common_syntax$Bigvee,
							_p135,
							{
								ctor: '_Tuple2',
								_0: amWith,
								_1: {ctor: '_Tuple3', _0: _p132, _1: _p136, _2: _p137}
							},
							A2(_user$project$DEL_sequent$substitution4AModel, _p134, amWith)) : A3(
							_user$project$Common_syntax$Bigvee,
							_p135,
							{
								ctor: '_Tuple2',
								_0: _p133,
								_1: {ctor: '_Tuple3', _0: _p132, _1: _p136, _2: _p137}
							},
							A2(_user$project$DEL_sequent$substitution4AModel, _p134, amWith));
					} else {
						break _v54_13;
					}
				case 'Precon':
					var _p139 = _p125._1;
					var _p138 = _p125._0;
					return _elm_lang$core$Native_Utils.eq(_p138.am_name, amWith.am_name) ? A2(_user$project$Common_syntax$Precon, amWith, _p139) : A2(_user$project$Common_syntax$Precon, _p138, _p139);
				case 'And':
					return A2(
						_user$project$Common_syntax$And,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Or':
					return A2(
						_user$project$Common_syntax$Or,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Iff':
					return A2(
						_user$project$Common_syntax$Iff,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Imply':
					return A2(
						_user$project$Common_syntax$Imply,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Imply2':
					return A2(
						_user$project$Common_syntax$Imply2,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Not':
					return _user$project$Common_syntax$Not(
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._0, amWith));
				case 'Box':
					return A2(
						_user$project$Common_syntax$Box,
						_p125._0,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'Dia':
					return A2(
						_user$project$Common_syntax$Dia,
						_p125._0,
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'BoxAction':
					return A2(
						_user$project$Common_syntax$BoxAction,
						A2(_user$project$DEL_sequent$substitution4Action, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				case 'DiaAction':
					return A2(
						_user$project$Common_syntax$DiaAction,
						A2(_user$project$DEL_sequent$substitution4Action, _p125._0, amWith),
						A2(_user$project$DEL_sequent$substitution4AModel, _p125._1, amWith));
				default:
					break _v54_13;
			}
		} while(false);
		return f;
	});
var _user$project$DEL_sequent$substitution4AModel4list = F2(
	function (f, listOfAM) {
		substitution4AModel4list:
		while (true) {
			var _p140 = listOfAM;
			if (_p140.ctor === '[]') {
				return f;
			} else {
				var changed = A2(_user$project$DEL_sequent$substitution4AModel, f, _p140._0);
				var _v56 = changed,
					_v57 = _p140._1;
				f = _v56;
				listOfAM = _v57;
				continue substitution4AModel4list;
			}
		}
	});
var _user$project$DEL_sequent$amNub = function (xs) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (a, xss) {
				return A2(
					_elm_lang$core$List$member,
					a.am_name,
					A2(
						_elm_lang$core$List$map,
						function (x) {
							return x.am_name;
						},
						xss)) ? xss : {ctor: '::', _0: a, _1: xss};
			}),
		{ctor: '[]'},
		xs);
};
var _user$project$DEL_sequent$substPrecondition = F2(
	function (amWith, amNothing) {
		return _elm_lang$core$Native_Utils.update(
			amNothing,
			{
				am_pre: A2(
					_elm_lang$core$List$map,
					function (_p141) {
						var _p142 = _p141;
						return {
							ctor: '_Tuple2',
							_0: _p142._0,
							_1: A2(_user$project$DEL_sequent$substitution4AModel, _p142._1, amWith)
						};
					},
					amNothing.am_pre)
			});
	});
var _user$project$DEL_sequent$substitution4AModel4list_AModels = F2(
	function (listOfAM, result) {
		substitution4AModel4list_AModels:
		while (true) {
			var _p143 = listOfAM;
			if (_p143.ctor === '[]') {
				return result;
			} else {
				var subst = A2(
					_elm_lang$core$List$map,
					_user$project$DEL_sequent$substPrecondition(_p143._0),
					_p143._1);
				var _v60 = subst,
					_v61 = A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$DEL_sequent$amNub(result),
					subst);
				listOfAM = _v60;
				result = _v61;
				continue substitution4AModel4list_AModels;
			}
		}
	});
var _user$project$DEL_sequent$am_relation_f = F3(
	function (rel, ag, s) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (_p144) {
				var _p145 = _p144;
				return (_elm_lang$core$Native_Utils.eq(s, _p145._1) && _elm_lang$core$Native_Utils.eq(ag, _p145._0)) ? {
					ctor: '::',
					_0: _p145._2,
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			},
			rel);
	});
var _user$project$DEL_sequent$forPAL = {ctor: '[]'};
var _user$project$DEL_sequent$ruleK_DEL = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$boxLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L#1',
		rule: function (seq) {
			var _p146 = seq.leftForm;
			if ((((_p146.ctor === '::') && (_p146._0._0.ctor === '_Tuple4')) && (_p146._0._0._2.ctor === '[]')) && (_p146._0._0._3.ctor === 'Box')) {
				var _p157 = _p146._1;
				var _p156 = _p146._0._0._1;
				var _p155 = _p146._0._0._3._1;
				var _p154 = _p146._0._0._0;
				var _p153 = _p146._0._0._3._0;
				var add2 = function (_p147) {
					var _p148 = _p147;
					return _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: {ctor: '[]'},
							_1: _p148._0,
							_2: {ctor: '[]'},
							_3: _p155
						});
				};
				var add1 = function (_p149) {
					var _p150 = _p149;
					return _user$project$Common_sequent$RelAtom(
						{
							ctor: '_Tuple4',
							_0: _p153,
							_1: {ctor: '[]'},
							_2: {
								ctor: '_Tuple2',
								_0: _p156,
								_1: {ctor: '[]'}
							},
							_3: {
								ctor: '_Tuple2',
								_0: _p150._0,
								_1: {ctor: '[]'}
							}
						});
				};
				var orig = function (_p151) {
					var _p152 = _p151;
					return _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p152._0, _1: _p152._1},
								_1: _p154
							},
							_1: _p156,
							_2: {ctor: '[]'},
							_3: A2(_user$project$Common_syntax$Box, _p153, _p155)
						});
				};
				var justlabel = function (wholeLabel2) {
					return _elm_community$list_extra$List_Extra$last(
						A2(_user$project$Util$difference, wholeLabel2, _p154));
				}(
					A2(
						_elm_lang$core$List$map,
						function (n) {
							return {
								ctor: '_Tuple2',
								_0: n,
								_1: {ctor: '[]'}
							};
						},
						_user$project$Common_sequent$wholeLabel(seq)));
				return A2(
					_user$project$Applicative_ops['?>'],
					justlabel,
					function ($new) {
						return {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add2($new),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: orig($new),
												_1: {ctor: '[]'}
											},
											_p157))
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: orig($new),
												_1: {ctor: '[]'}
											},
											_p157),
										rightRel: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1($new),
												_1: {ctor: '[]'}
											},
											seq.rightRel)
									}),
								_1: {ctor: '[]'}
							}
						};
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$boxLN2_DEL,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L#2',
			rule: function (seq) {
				var _p158 = seq.leftForm;
				if ((((_p158.ctor === '::') && (_p158._0._0.ctor === '_Tuple4')) && (_p158._0._0._2.ctor === '::')) && (_p158._0._0._3.ctor === 'Box')) {
					var _p173 = _p158._1;
					var _p172 = _p158._0._0._1;
					var _p171 = _p158._0._0._3._1;
					var _p170 = _p158._0._0._0;
					var _p169 = _p158._0._0._3._0;
					var add2 = function (_p159) {
						var _p160 = _p159;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p170,
								_1: _p160._0,
								_2: A2(
									_elm_lang$core$List$map,
									function (x) {
										return _toastal$either$Either$Right(x);
									},
									_p160._1),
								_3: _p171
							});
					};
					var acts = {ctor: '::', _0: _p158._0._0._2._0, _1: _p158._0._0._2._1};
					var original = function (_p161) {
						var _p162 = _p161;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p162._0, _1: _p162._1},
									_1: _p170
								},
								_1: _p172,
								_2: acts,
								_3: A2(_user$project$Common_syntax$Box, _p169, _p171)
							});
					};
					var wholeLabel2 = _user$project$Util$nub(
						A2(
							_user$project$Util$cartesian,
							_user$project$Common_sequent$wholeLabel(seq),
							A3(_user$project$DEL_sequent$wholeActions, acts, _p169, seq)));
					var justLabel = _elm_lang$core$List$head(
						A2(_user$project$Util$difference, wholeLabel2, _p170));
					var add1 = function (_p163) {
						var _p164 = _p163;
						return _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p169,
								_1: _user$project$DEL_sequent$forPAL,
								_2: {
									ctor: '_Tuple2',
									_0: _p172,
									_1: _toastal$either$Either$rights(acts)
								},
								_3: {ctor: '_Tuple2', _0: _p164._0, _1: _p164._1}
							});
					};
					return A2(
						_user$project$Applicative_ops['?>'],
						justLabel,
						function (_p165) {
							var _p166 = _p165;
							var _p168 = _p166._0;
							var _p167 = _p166._1;
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: original(
													{ctor: '_Tuple2', _0: _p168, _1: _p167}),
												_1: {ctor: '[]'}
											},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2(
														{ctor: '_Tuple2', _0: _p168, _1: _p167}),
													_1: {ctor: '[]'}
												},
												_p173))
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: original(
														{ctor: '_Tuple2', _0: _p168, _1: _p167}),
													_1: {ctor: '[]'}
												},
												_p173),
											rightRel: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1(
														{ctor: '_Tuple2', _0: _p168, _1: _p167}),
													_1: {ctor: '[]'}
												},
												seq.rightRel)
										}),
									_1: {ctor: '[]'}
								}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$boxRN,
				category: _user$project$Common_sequent$Rule4RightFormula,
				rulename: 'R#1',
				rule: function (seq) {
					var _p174 = seq.rightForm;
					if ((((_p174.ctor === '::') && (_p174._0._0.ctor === '_Tuple4')) && (_p174._0._0._2.ctor === '[]')) && (_p174._0._0._3.ctor === 'Box')) {
						var $new = _user$project$Common_sequent$freshLabel(seq);
						var add1 = _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p174._0._0._3._0,
								_1: _user$project$DEL_sequent$forPAL,
								_2: {
									ctor: '_Tuple2',
									_0: _p174._0._0._1,
									_1: {ctor: '[]'}
								},
								_3: {
									ctor: '_Tuple2',
									_0: $new,
									_1: {ctor: '[]'}
								}
							});
						var add2 = _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p174._0._0._0,
								_1: $new,
								_2: {ctor: '[]'},
								_3: _p174._0._0._3._1
							});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftRel: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {ctor: '[]'}
											},
											seq.leftRel),
										rightForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add2,
												_1: {ctor: '[]'}
											},
											_p174._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$boxRN2_DEL,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R#2',
					rule: function (seq) {
						var _p175 = seq.rightForm;
						if ((((((_p175.ctor === '::') && (_p175._0._0.ctor === '_Tuple4')) && (_p175._0._0._2.ctor === '::')) && (_p175._0._0._2._0.ctor === 'Right')) && (_p175._0._0._2._0._0.ctor === 'PointAModel')) && (_p175._0._0._3.ctor === 'Box')) {
							var _p184 = _p175._0._0._2._0._0._1;
							var _p183 = _p175._0._0._2._0._0._0;
							var _p182 = _p175._0._0._3._0;
							var $new = _user$project$Common_sequent$freshLabel(seq);
							var acts = {
								ctor: '::',
								_0: _toastal$either$Either$Right(
									A2(_user$project$Common_syntax$PointAModel, _p183, _p184)),
								_1: _p175._0._0._2._1
							};
							var ooo = function (newVar) {
								return A2(
									_elm_lang$core$List$map,
									function (_p176) {
										var _p177 = _p176;
										var _p178 = _p177._0;
										if ((_p178.ctor === 'Right') && (_p178._0.ctor === 'PointAModel')) {
											return A2(
												_user$project$Common_syntax$PointAModel,
												_p178._0._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'x',
													_user$project$Util$show(_p177._1)));
										} else {
											return _elm_lang$core$Native_Utils.crashCase(
												'DEL_sequent',
												{
													start: {line: 254, column: 49},
													end: {line: 256, column: 76}
												},
												_p178)('error in R#2 (1)');
										}
									},
									A2(
										_elm_community$list_extra$List_Extra$zip,
										acts,
										A2(
											_elm_lang$core$List$range,
											newVar,
											newVar + _elm_lang$core$List$length(acts))));
							}($new);
							var add2 = _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {ctor: '[]'},
									_1: $new,
									_2: A2(
										_elm_lang$core$List$map,
										function (x) {
											return _toastal$either$Either$Right(x);
										},
										ooo),
									_3: _p175._0._0._3._1
								});
							var add3 = A2(
								_elm_lang$core$List$map,
								function (state2) {
									return {
										ctor: '_Tuple4',
										_0: _p182,
										_1: {
											ctor: '::',
											_0: _p183,
											_1: {ctor: '[]'}
										},
										_2: _p184,
										_3: state2
									};
								},
								A2(
									_elm_lang$core$List$map,
									function (act) {
										var _p180 = act;
										if (_p180.ctor === 'PointAModel') {
											return _p180._1;
										} else {
											return _elm_lang$core$Native_Utils.crashCase(
												'DEL_sequent',
												{
													start: {line: 260, column: 46},
													end: {line: 262, column: 80}
												},
												_p180)('error in R#2 (2)');
										}
									},
									ooo));
							var add1 = _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p182,
									_1: _user$project$DEL_sequent$forPAL,
									_2: {
										ctor: '_Tuple2',
										_0: _p175._0._0._1,
										_1: _toastal$either$Either$rights(acts)
									},
									_3: {ctor: '_Tuple2', _0: $new, _1: ooo}
								});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftRel: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1,
													_1: {ctor: '[]'}
												},
												seq.leftRel),
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p175._1),
											forDEL: A2(_elm_lang$core$Basics_ops['++'], add3, seq.forDEL)
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$diaRN,
						category: _user$project$Common_sequent$Rule4RightFormula,
						rulename: 'R$1',
						rule: function (seq) {
							var _p185 = seq.rightForm;
							if ((((_p185.ctor === '::') && (_p185._0._0.ctor === '_Tuple4')) && (_p185._0._0._2.ctor === '[]')) && (_p185._0._0._3.ctor === 'Dia')) {
								var _p196 = _p185._1;
								var _p195 = _p185._0._0._1;
								var _p194 = _p185._0._0._3._1;
								var _p193 = _p185._0._0._0;
								var _p192 = _p185._0._0._3._0;
								var add2 = function (_p186) {
									var _p187 = _p186;
									return _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: {ctor: '[]'},
											_1: _p187._0,
											_2: {ctor: '[]'},
											_3: _p194
										});
								};
								var add1 = function (_p188) {
									var _p189 = _p188;
									return _user$project$Common_sequent$RelAtom(
										{
											ctor: '_Tuple4',
											_0: _p192,
											_1: {ctor: '[]'},
											_2: {
												ctor: '_Tuple2',
												_0: _p195,
												_1: {ctor: '[]'}
											},
											_3: {
												ctor: '_Tuple2',
												_0: _p189._0,
												_1: {ctor: '[]'}
											}
										});
								};
								var orig = function (_p190) {
									var _p191 = _p190;
									return _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _p191._0, _1: _p191._1},
												_1: _p193
											},
											_1: _p195,
											_2: {ctor: '[]'},
											_3: A2(_user$project$Common_syntax$Dia, _p192, _p194)
										});
								};
								var justlabel = function (wholeLabel2) {
									return _elm_lang$core$List$head(
										A2(_user$project$Util$difference, wholeLabel2, _p193));
								}(
									A2(
										_elm_lang$core$List$map,
										function (n) {
											return {
												ctor: '_Tuple2',
												_0: n,
												_1: {ctor: '[]'}
											};
										},
										_user$project$Common_sequent$wholeLabel(seq)));
								return A2(
									_user$project$Applicative_ops['?>'],
									justlabel,
									function ($new) {
										return {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2($new),
															_1: {ctor: '[]'}
														},
														A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: orig($new),
																_1: {ctor: '[]'}
															},
															_p196))
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: orig($new),
																_1: {ctor: '[]'}
															},
															_p196),
														rightRel: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1($new),
																_1: {ctor: '[]'}
															},
															seq.rightRel)
													}),
												_1: {ctor: '[]'}
											}
										};
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$boxLN2_DEL,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'R$2',
							rule: function (seq) {
								var _p197 = seq.rightForm;
								if ((((_p197.ctor === '::') && (_p197._0._0.ctor === '_Tuple4')) && (_p197._0._0._2.ctor === '::')) && (_p197._0._0._3.ctor === 'Dia')) {
									var _p212 = _p197._1;
									var _p211 = _p197._0._0._1;
									var _p210 = _p197._0._0._3._1;
									var _p209 = _p197._0._0._0;
									var _p208 = _p197._0._0._3._0;
									var add2 = function (_p198) {
										var _p199 = _p198;
										return _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: _p209,
												_1: _p199._0,
												_2: A2(
													_elm_lang$core$List$map,
													function (x) {
														return _toastal$either$Either$Right(x);
													},
													_p199._1),
												_3: _p210
											});
									};
									var acts = {ctor: '::', _0: _p197._0._0._2._0, _1: _p197._0._0._2._1};
									var original = function (_p200) {
										var _p201 = _p200;
										return _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _p201._0, _1: _p201._1},
													_1: _p209
												},
												_1: _p211,
												_2: acts,
												_3: A2(_user$project$Common_syntax$Dia, _p208, _p210)
											});
									};
									var wholeLabel2 = _user$project$Util$nub(
										A2(
											_user$project$Util$cartesian,
											_user$project$Common_sequent$wholeLabel(seq),
											A3(_user$project$DEL_sequent$wholeActions, acts, _p208, seq)));
									var justLabel = _elm_lang$core$List$head(
										A2(_user$project$Util$difference, wholeLabel2, _p209));
									var add1 = function (_p202) {
										var _p203 = _p202;
										return _user$project$Common_sequent$RelAtom(
											{
												ctor: '_Tuple4',
												_0: _p208,
												_1: _user$project$DEL_sequent$forPAL,
												_2: {
													ctor: '_Tuple2',
													_0: _p211,
													_1: _toastal$either$Either$rights(acts)
												},
												_3: {ctor: '_Tuple2', _0: _p203._0, _1: _p203._1}
											});
									};
									return A2(
										_user$project$Applicative_ops['?>'],
										justLabel,
										function (_p204) {
											var _p205 = _p204;
											var _p207 = _p205._0;
											var _p206 = _p205._1;
											return {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: original(
																	{ctor: '_Tuple2', _0: _p207, _1: _p206}),
																_1: {ctor: '[]'}
															},
															A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2(
																		{ctor: '_Tuple2', _0: _p207, _1: _p206}),
																	_1: {ctor: '[]'}
																},
																_p212))
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: original(
																		{ctor: '_Tuple2', _0: _p207, _1: _p206}),
																	_1: {ctor: '[]'}
																},
																_p212),
															rightRel: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1(
																		{ctor: '_Tuple2', _0: _p207, _1: _p206}),
																	_1: {ctor: '[]'}
																},
																seq.rightRel)
														}),
													_1: {ctor: '[]'}
												}
											};
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$diaLN,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L$1',
								rule: function (seq) {
									var _p213 = seq.leftForm;
									if ((((_p213.ctor === '::') && (_p213._0._0.ctor === '_Tuple4')) && (_p213._0._0._2.ctor === '[]')) && (_p213._0._0._3.ctor === 'Dia')) {
										var $new = _user$project$Common_sequent$freshLabel(seq);
										var add1 = _user$project$Common_sequent$RelAtom(
											{
												ctor: '_Tuple4',
												_0: _p213._0._0._3._0,
												_1: _user$project$DEL_sequent$forPAL,
												_2: {
													ctor: '_Tuple2',
													_0: _p213._0._0._1,
													_1: {ctor: '[]'}
												},
												_3: {
													ctor: '_Tuple2',
													_0: $new,
													_1: {ctor: '[]'}
												}
											});
										var add2 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: _p213._0._0._0,
												_1: $new,
												_2: {ctor: '[]'},
												_3: _p213._0._0._3._1
											});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftRel: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															},
															seq.leftRel),
														leftForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															_p213._1)
													}),
												_1: {ctor: '[]'}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$boxRN2_DEL,
									category: _user$project$Common_sequent$Rule4LeftFormula,
									rulename: 'L$2',
									rule: function (seq) {
										var _p214 = seq.leftForm;
										if ((((((_p214.ctor === '::') && (_p214._0._0.ctor === '_Tuple4')) && (_p214._0._0._2.ctor === '::')) && (_p214._0._0._2._0.ctor === 'Right')) && (_p214._0._0._2._0._0.ctor === 'PointAModel')) && (_p214._0._0._3.ctor === 'Dia')) {
											var _p223 = _p214._0._0._2._0._0._1;
											var _p222 = _p214._0._0._2._0._0._0;
											var _p221 = _p214._0._0._3._0;
											var $new = _user$project$Common_sequent$freshLabel(seq);
											var acts = {
												ctor: '::',
												_0: _toastal$either$Either$Right(
													A2(_user$project$Common_syntax$PointAModel, _p222, _p223)),
												_1: _p214._0._0._2._1
											};
											var ooo = function (newVar) {
												return A2(
													_elm_lang$core$List$map,
													function (_p215) {
														var _p216 = _p215;
														var _p217 = _p216._0;
														if ((_p217.ctor === 'Right') && (_p217._0.ctor === 'PointAModel')) {
															return A2(
																_user$project$Common_syntax$PointAModel,
																_p217._0._0,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'x',
																	_user$project$Util$show(_p216._1)));
														} else {
															return _elm_lang$core$Native_Utils.crashCase(
																'DEL_sequent',
																{
																	start: {line: 342, column: 49},
																	end: {line: 344, column: 76}
																},
																_p217)('error in R#2 (1)');
														}
													},
													A2(
														_elm_community$list_extra$List_Extra$zip,
														acts,
														A2(
															_elm_lang$core$List$range,
															newVar,
															newVar + _elm_lang$core$List$length(acts))));
											}($new);
											var add2 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {ctor: '[]'},
													_1: $new,
													_2: A2(
														_elm_lang$core$List$map,
														function (x) {
															return _toastal$either$Either$Right(x);
														},
														ooo),
													_3: _p214._0._0._3._1
												});
											var add3 = A2(
												_elm_lang$core$List$map,
												function (state2) {
													return {
														ctor: '_Tuple4',
														_0: _p221,
														_1: {
															ctor: '::',
															_0: _p222,
															_1: {ctor: '[]'}
														},
														_2: _p223,
														_3: state2
													};
												},
												A2(
													_elm_lang$core$List$map,
													function (act) {
														var _p219 = act;
														if (_p219.ctor === 'PointAModel') {
															return _p219._1;
														} else {
															return _elm_lang$core$Native_Utils.crashCase(
																'DEL_sequent',
																{
																	start: {line: 348, column: 46},
																	end: {line: 350, column: 80}
																},
																_p219)('error in R#2 (2)');
														}
													},
													ooo));
											var add1 = _user$project$Common_sequent$RelAtom(
												{
													ctor: '_Tuple4',
													_0: _p221,
													_1: _user$project$DEL_sequent$forPAL,
													_2: {
														ctor: '_Tuple2',
														_0: _p214._0._0._1,
														_1: _toastal$either$Either$rights(acts)
													},
													_3: {ctor: '_Tuple2', _0: $new, _1: ooo}
												});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftRel: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.leftRel),
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p214._1),
															forDEL: A2(_elm_lang$core$Basics_ops['++'], add3, seq.forDEL)
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$DEL_sequent$ra6 = A2(
	_user$project$Common_syntax$Iff,
	A2(
		_user$project$Common_syntax$BoxAction,
		A2(_user$project$Common_syntax$Cup, _user$project$Common_syntax$skip_point, _user$project$Common_syntax$reada_po),
		_user$project$Common_syntax$AnyFormula('A')),
	A2(
		_user$project$Common_syntax$And,
		A2(
			_user$project$Common_syntax$BoxAction,
			_user$project$Common_syntax$skip_point,
			_user$project$Common_syntax$AnyFormula('A')),
		A2(
			_user$project$Common_syntax$BoxAction,
			_user$project$Common_syntax$reada_po,
			_user$project$Common_syntax$AnyFormula('A'))));
var _user$project$DEL_sequent$dd = _user$project$Common_syntax$AnyFormula('D');
var _user$project$DEL_sequent$cc = _user$project$Common_syntax$AnyFormula('C');
var _user$project$DEL_sequent$bb = _user$project$Common_syntax$AnyFormula('B');
var _user$project$DEL_sequent$aa = _user$project$Common_syntax$AnyFormula('A');
var _user$project$DEL_sequent$p3 = _user$project$Common_syntax$Atom('p3');
var _user$project$DEL_sequent$p2 = _user$project$Common_syntax$Atom('p2');
var _user$project$DEL_sequent$p1 = _user$project$Common_syntax$Atom('p1');
var _user$project$DEL_sequent$ex638 = A2(
	_user$project$Common_syntax$BoxAction,
	_user$project$Common_syntax$reada_po,
	A2(_user$project$Common_syntax$Box, 'a', _user$project$DEL_sequent$p1));
var _user$project$DEL_sequent$ex639a = A2(
	_user$project$Common_syntax$BoxAction,
	_user$project$Common_syntax$reada_po,
	A2(
		_user$project$Common_syntax$Box,
		'b',
		A2(
			_user$project$Common_syntax$Or,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$DEL_sequent$p1),
			A2(
				_user$project$Common_syntax$Box,
				'a',
				_user$project$Common_syntax$Not(_user$project$DEL_sequent$p1)))));
var _user$project$DEL_sequent$ex639b = A2(
	_user$project$Common_syntax$BoxAction,
	_user$project$Common_syntax$reada_po,
	A2(
		_user$project$Common_syntax$Or,
		A2(_user$project$Common_syntax$Box, 'a', _user$project$DEL_sequent$p1),
		_user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$Box, 'a', _user$project$DEL_sequent$p1))));

var _user$project$Int_sequent$lookEachDiamond = F3(
	function (maxNum, ruleSet, seq) {
		var _p0 = seq.rightForm;
		if ((((_p0.ctor === '::') && (_p0._0._0.ctor === '_Tuple4')) && (_p0._0._0._3.ctor === 'Dia')) && (_p0._1.ctor === '[]')) {
			var _p11 = _p0._0._0._1;
			var _p10 = _p0._0._0._3._1;
			var _p9 = _p0._0._0._0;
			var _p8 = _p0._0._0._2;
			var _p7 = _p0._0._0._3._0;
			var orig = function (_p1) {
				var _p2 = _p1;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p2._0, _1: _p2._1},
							_1: _p9
						},
						_1: _p11,
						_2: _p8,
						_3: A2(_user$project$Common_syntax$Dia, _p7, _p10)
					});
			};
			var add2 = function (_p3) {
				var _p4 = _p3;
				return _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p7,
						_1: _toastal$either$Either$lefts(_p8),
						_2: {
							ctor: '_Tuple2',
							_0: _p11,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: _p4._0,
							_1: {ctor: '[]'}
						}
					});
			};
			var add1 = function (_p5) {
				var _p6 = _p5;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {ctor: '[]'},
						_1: _p6._0,
						_2: _p8,
						_3: _p10
					});
			};
			var justlabel = function (wholeLabel2) {
				return _elm_lang$core$List$head(
					A2(_user$project$Util$difference, wholeLabel2, _p9));
			}(
				A2(
					_elm_lang$core$List$map,
					function (n) {
						return {
							ctor: '_Tuple2',
							_0: n,
							_1: {ctor: '[]'}
						};
					},
					_user$project$Common_sequent$wholeLabel(seq)));
			var seq1 = A2(
				_user$project$Applicative_ops['?>'],
				justlabel,
				function (x) {
					return _elm_lang$core$Native_Utils.update(
						seq,
						{
							rightForm: A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: add1(x),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'})
						});
				});
			var seq2 = A2(
				_user$project$Applicative_ops['?>'],
				justlabel,
				function (x) {
					return _elm_lang$core$Native_Utils.update(
						seq,
						{
							rightRel: A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: add2(x),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'})
						});
				});
			return A3(_user$project$Common_sequent$isProvableSeq, maxNum, ruleSet, seq1) ? _elm_community$maybe_extra$Maybe_Extra$combine(
				{
					ctor: '::',
					_0: seq1,
					_1: {ctor: '[]'}
				}) : (A3(_user$project$Common_sequent$isProvableSeq, maxNum, ruleSet, seq2) ? _elm_community$maybe_extra$Maybe_Extra$combine(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				}) : _elm_lang$core$Maybe$Nothing);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Int_sequent$lookEachDisjunct = F3(
	function (maxNum, ruleSet, seq) {
		var _p12 = seq.rightForm;
		if ((((_p12.ctor === '::') && (_p12._0._0.ctor === '_Tuple4')) && (_p12._0._0._3.ctor === 'Or')) && (_p12._1.ctor === '[]')) {
			var _p15 = _p12._0._0._1;
			var _p14 = _p12._0._0._0;
			var _p13 = _p12._0._0._2;
			var seq2 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					rightForm: {
						ctor: '::',
						_0: _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p14, _1: _p15, _2: _p13, _3: _p12._0._0._3._1}),
						_1: {ctor: '[]'}
					}
				});
			var seq1 = _elm_lang$core$Native_Utils.update(
				seq,
				{
					rightForm: {
						ctor: '::',
						_0: _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p14, _1: _p15, _2: _p13, _3: _p12._0._0._3._0}),
						_1: {ctor: '[]'}
					}
				});
			return A3(
				_user$project$Common_sequent$isProvableSeq,
				maxNum,
				ruleSet,
				_elm_lang$core$Maybe$Just(seq1)) ? _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq1,
					_1: {ctor: '[]'}
				}) : (A3(
				_user$project$Common_sequent$isProvableSeq,
				maxNum,
				ruleSet,
				_elm_lang$core$Maybe$Just(seq2)) ? _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: seq2,
					_1: {ctor: '[]'}
				}) : _elm_lang$core$Maybe$Nothing);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Int_sequent$ruleK_int = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$boxRN,
		category: _user$project$Common_sequent$Rule4RightFormula,
		rulename: 'R#',
		rule: function (seq) {
			var _p16 = seq.rightForm;
			if ((((_p16.ctor === '::') && (_p16._0._0.ctor === '_Tuple4')) && (_p16._0._0._3.ctor === 'Box')) && (_p16._1.ctor === '[]')) {
				var _p17 = _p16._0._0._2;
				var $new = _user$project$Common_sequent$freshLabel(seq);
				var add1 = _user$project$Common_sequent$RelAtom(
					{
						ctor: '_Tuple4',
						_0: _p16._0._0._3._0,
						_1: _toastal$either$Either$lefts(_p17),
						_2: {
							ctor: '_Tuple2',
							_0: _p16._0._0._1,
							_1: {ctor: '[]'}
						},
						_3: {
							ctor: '_Tuple2',
							_0: $new,
							_1: {ctor: '[]'}
						}
					});
				var add2 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p16._0._0._0, _1: $new, _2: _p17, _3: _p16._0._0._3._1});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add2,
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								leftRel: _user$project$Common_sequent$sortRelAtom(
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftRel))
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: 99,
			category: _user$project$Common_sequent$Rule4LeftFormula,
			rulename: 'L#_int',
			rule: function (seq) {
				var _p18 = seq.leftForm;
				if (((_p18.ctor === '::') && (_p18._0._0.ctor === '_Tuple4')) && (_p18._0._0._3.ctor === 'Box')) {
					var _p30 = _p18._0._0._1;
					var _p29 = _p18._0._0._3._1;
					var _p28 = _p18._1;
					var _p27 = _p18._0._0._0;
					var _p26 = _p18._0._0._2;
					var _p25 = _p18._0._0._3._0;
					var orig = function (_p19) {
						var _p20 = _p19;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p20._0, _1: _p20._1},
									_1: _p27
								},
								_1: _p30,
								_2: _p26,
								_3: A2(_user$project$Common_syntax$Box, _p25, _p29)
							});
					};
					var add2 = function (_p21) {
						var _p22 = _p21;
						return _user$project$Common_sequent$RelAtom(
							{
								ctor: '_Tuple4',
								_0: _p25,
								_1: _toastal$either$Either$lefts(_p26),
								_2: {
									ctor: '_Tuple2',
									_0: _p30,
									_1: {ctor: '[]'}
								},
								_3: {
									ctor: '_Tuple2',
									_0: _p22._0,
									_1: {ctor: '[]'}
								}
							});
					};
					var add1 = function (_p23) {
						var _p24 = _p23;
						return _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: {ctor: '[]'},
								_1: _p24._0,
								_2: _p26,
								_3: _p29
							});
					};
					var justlabel = function (wholeLabel2) {
						return _elm_community$list_extra$List_Extra$last(
							A2(_user$project$Util$difference, wholeLabel2, _p27));
					}(
						A2(
							_elm_lang$core$List$map,
							function (n) {
								return {
									ctor: '_Tuple2',
									_0: n,
									_1: {ctor: '[]'}
								};
							},
							_user$project$Common_sequent$wholeLabel(seq)));
					return A2(
						_user$project$Applicative_ops['?>'],
						justlabel,
						function (x) {
							return {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1(x),
												_1: {ctor: '[]'}
											},
											_p28)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: _p28,
											rightRel: {
												ctor: '::',
												_0: add2(x),
												_1: {ctor: '[]'}
											},
											rightForm: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							};
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$boxLN,
				category: _user$project$Common_sequent$Rule4RightFormula,
				rulename: 'R$_int',
				rule: function (seq) {
					var _p31 = seq.rightForm;
					if ((((_p31.ctor === '::') && (_p31._0._0.ctor === '_Tuple4')) && (_p31._0._0._3.ctor === 'Dia')) && (_p31._1.ctor === '[]')) {
						var _p42 = _p31._0._0._1;
						var _p41 = _p31._0._0._3._1;
						var _p40 = _p31._0._0._0;
						var _p39 = _p31._0._0._2;
						var _p38 = _p31._0._0._3._0;
						var orig = function (_p32) {
							var _p33 = _p32;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p33._0, _1: _p33._1},
										_1: _p40
									},
									_1: _p42,
									_2: _p39,
									_3: A2(_user$project$Common_syntax$Dia, _p38, _p41)
								});
						};
						var add2 = function (_p34) {
							var _p35 = _p34;
							return _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p38,
									_1: _toastal$either$Either$lefts(_p39),
									_2: {
										ctor: '_Tuple2',
										_0: _p42,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: _p35._0,
										_1: {ctor: '[]'}
									}
								});
						};
						var add1 = function (_p36) {
							var _p37 = _p36;
							return _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: {ctor: '[]'},
									_1: _p37._0,
									_2: _p39,
									_3: _p41
								});
						};
						var justlabel = function (wholeLabel2) {
							return _elm_community$list_extra$List_Extra$last(
								A2(_user$project$Util$difference, wholeLabel2, _p40));
						}(
							A2(
								_elm_lang$core$List$map,
								function (n) {
									return {
										ctor: '_Tuple2',
										_0: n,
										_1: {ctor: '[]'}
									};
								},
								_user$project$Common_sequent$wholeLabel(seq)));
						return A2(
							_user$project$Applicative_ops['?>'],
							justlabel,
							function (x) {
								return {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1(x),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'})
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightRel: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add2(x),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												rightForm: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								};
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$boxRN,
					category: _user$project$Common_sequent$Rule4LeftFormula,
					rulename: 'L$',
					rule: function (seq) {
						var _p43 = seq.leftForm;
						if (((_p43.ctor === '::') && (_p43._0._0.ctor === '_Tuple4')) && (_p43._0._0._3.ctor === 'Dia')) {
							var _p44 = _p43._0._0._2;
							var $new = _user$project$Common_sequent$freshLabel(seq);
							var add1 = _user$project$Common_sequent$RelAtom(
								{
									ctor: '_Tuple4',
									_0: _p43._0._0._3._0,
									_1: _toastal$either$Either$lefts(_p44),
									_2: {
										ctor: '_Tuple2',
										_0: _p43._0._0._1,
										_1: {ctor: '[]'}
									},
									_3: {
										ctor: '_Tuple2',
										_0: $new,
										_1: {ctor: '[]'}
									}
								});
							var add2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p43._0._0._0, _1: $new, _2: _p44, _3: _p43._0._0._3._1});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p43._1),
											leftRel: _user$project$Common_sequent$sortRelAtom(
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													seq.leftRel))
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Int_sequent$ruleInt = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$negLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L~',
		rule: function (seq) {
			var _p45 = seq.leftForm;
			if (((_p45.ctor === '::') && (_p45._0._0.ctor === '_Tuple4')) && (_p45._0._0._3.ctor === 'Not')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{ctor: '_Tuple4', _0: _p45._0._0._0, _1: _p45._0._0._1, _2: _p45._0._0._2, _3: _p45._0._0._3._0});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: _p45._1,
								rightForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									{ctor: '[]'})
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: 99,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'R~',
			rule: function (seq) {
				var _p46 = seq.rightForm;
				if ((((_p46.ctor === '::') && (_p46._0._0.ctor === '_Tuple4')) && (_p46._0._0._3.ctor === 'Not')) && (_p46._1.ctor === '[]')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{ctor: '_Tuple4', _0: _p46._0._0._0, _1: _p46._0._0._1, _2: _p46._0._0._2, _3: _p46._0._0._3._0});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									leftForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										seq.leftForm),
									rightForm: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$conjLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L&',
				rule: function (seq) {
					var _p47 = seq.leftForm;
					if (((_p47.ctor === '::') && (_p47._0._0.ctor === '_Tuple4')) && (_p47._0._0._3.ctor === 'And')) {
						var _p50 = _p47._0._0._2;
						var _p49 = _p47._0._0._0;
						var _p48 = _p47._0._0._1;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p49, _1: _p48, _2: _p50, _3: _p47._0._0._3._1});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p49, _1: _p48, _2: _p50, _3: _p47._0._0._3._0});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												}
											},
											_p47._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$conjRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R&',
					rule: function (seq) {
						var _p51 = seq.rightForm;
						if ((((_p51.ctor === '::') && (_p51._0._0.ctor === '_Tuple4')) && (_p51._0._0._3.ctor === 'And')) && (_p51._1.ctor === '[]')) {
							var _p54 = _p51._0._0._2;
							var _p53 = _p51._0._0._0;
							var _p52 = _p51._0._0._1;
							var f2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p53, _1: _p52, _2: _p54, _3: _p51._0._0._3._1});
							var f1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p53, _1: _p52, _2: _p54, _3: _p51._0._0._3._0});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: f1,
													_1: {ctor: '[]'}
												},
												{ctor: '[]'})
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: f2,
														_1: {ctor: '[]'}
													},
													{ctor: '[]'})
											}),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$disjLN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'Lv',
						rule: function (seq) {
							var _p55 = seq.leftForm;
							if (((_p55.ctor === '::') && (_p55._0._0.ctor === '_Tuple4')) && (_p55._0._0._3.ctor === 'Or')) {
								var _p59 = _p55._1;
								var _p58 = _p55._0._0._2;
								var _p57 = _p55._0._0._0;
								var _p56 = _p55._0._0._1;
								var add2 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p57, _1: _p56, _2: _p58, _3: _p55._0._0._3._1});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p57, _1: _p56, _2: _p58, _3: _p55._0._0._3._0});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													_p59)
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													leftForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														},
														_p59)
												}),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$disjRN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'Rv_int',
							rule: function (seq) {
								var _p60 = seq.rightForm;
								if ((((_p60.ctor === '::') && (_p60._0._0.ctor === '_Tuple4')) && (_p60._0._0._3.ctor === 'Or')) && (_p60._1.ctor === '[]')) {
									var _p63 = _p60._0._0._2;
									var _p62 = _p60._0._0._0;
									var _p61 = _p60._0._0._1;
									var add2 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p62, _1: _p61, _2: _p63, _3: _p60._0._0._3._1});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p62, _1: _p61, _2: _p63, _3: _p60._0._0._3._0});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														{ctor: '[]'})
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															{ctor: '[]'})
													}),
												_1: {ctor: '[]'}
											}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: 99,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L->',
								rule: function (seq) {
									var _p64 = seq.leftForm;
									if (((_p64.ctor === '::') && (_p64._0._0.ctor === '_Tuple4')) && (_p64._0._0._3.ctor === 'Imply')) {
										var _p68 = _p64._1;
										var _p67 = _p64._0._0._2;
										var _p66 = _p64._0._0._0;
										var _p65 = _p64._0._0._1;
										var add2 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p66, _1: _p65, _2: _p67, _3: _p64._0._0._3._1});
										var add1 = _user$project$Common_sequent$LabelForm(
											{ctor: '_Tuple4', _0: _p66, _1: _p65, _2: _p67, _3: _p64._0._0._3._0});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftForm: _p68,
														rightForm: {
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																_p68)
														}),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$implRN,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'R->',
									rule: function (seq) {
										var _p69 = seq.rightForm;
										if ((((_p69.ctor === '::') && (_p69._0._0.ctor === '_Tuple4')) && (_p69._0._0._3.ctor === 'Imply')) && (_p69._1.ctor === '[]')) {
											var _p72 = _p69._0._0._2;
											var _p71 = _p69._0._0._0;
											var _p70 = _p69._0._0._1;
											var add2 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p71, _1: _p70, _2: _p72, _3: _p69._0._0._3._1});
											var add1 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p71, _1: _p70, _2: _p72, _3: _p69._0._0._3._0});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.leftForm),
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																{ctor: '[]'})
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$impl2LN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L->2',
										rule: function (seq) {
											var _p73 = seq.leftForm;
											if (((_p73.ctor === '::') && (_p73._0._0.ctor === '_Tuple4')) && (_p73._0._0._3.ctor === 'Imply2')) {
												var _p77 = _p73._1;
												var _p76 = _p73._0._0._2;
												var _p75 = _p73._0._0._0;
												var _p74 = _p73._0._0._1;
												var add2 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p75, _1: _p74, _2: _p76, _3: _p73._0._0._3._0});
												var add1 = _user$project$Common_sequent$LabelForm(
													{ctor: '_Tuple4', _0: _p75, _1: _p74, _2: _p76, _3: _p73._0._0._3._1});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add2,
																		_1: {ctor: '[]'}
																	},
																	_p77)
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: _p77,
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'})
																}),
															_1: {ctor: '[]'}
														}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$impl2RN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R->2',
											rule: function (seq) {
												var _p78 = seq.rightForm;
												if ((((_p78.ctor === '::') && (_p78._0._0.ctor === '_Tuple4')) && (_p78._0._0._3.ctor === 'Imply2')) && (_p78._1.ctor === '[]')) {
													var _p81 = _p78._0._0._2;
													var _p80 = _p78._0._0._0;
													var _p79 = _p78._0._0._1;
													var add2 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p80, _1: _p79, _2: _p81, _3: _p78._0._0._3._1});
													var add1 = _user$project$Common_sequent$LabelForm(
														{ctor: '_Tuple4', _0: _p80, _1: _p79, _2: _p81, _3: _p78._0._0._3._0});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add2,
																			_1: {ctor: '[]'}
																		},
																		seq.leftForm),
																	rightForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		{ctor: '[]'})
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$equiLN,
												category: _user$project$Common_sequent$Rule4LeftFormula,
												rulename: 'L<->',
												rule: function (seq) {
													var _p82 = seq.leftForm;
													if (((_p82.ctor === '::') && (_p82._0._0.ctor === '_Tuple4')) && (_p82._0._0._3.ctor === 'Iff')) {
														var _p84 = _p82._0._0._3._1;
														var _p83 = _p82._0._0._3._0;
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: _p82._0._0._0,
																_1: _p82._0._0._1,
																_2: _p82._0._0._2,
																_3: A2(
																	_user$project$Common_syntax$And,
																	A2(_user$project$Common_syntax$Imply, _p83, _p84),
																	A2(_user$project$Common_syntax$Imply, _p84, _p83))
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p82._1)
																	}),
																_1: {ctor: '[]'}
															});
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$equiRN,
													category: _user$project$Common_sequent$Rule4RightFormula,
													rulename: 'R<->',
													rule: function (seq) {
														var _p85 = seq.rightForm;
														if ((((_p85.ctor === '::') && (_p85._0._0.ctor === '_Tuple4')) && (_p85._0._0._3.ctor === 'Iff')) && (_p85._1.ctor === '[]')) {
															var _p87 = _p85._0._0._3._1;
															var _p86 = _p85._0._0._3._0;
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: _p85._0._0._0,
																	_1: _p85._0._0._1,
																	_2: _p85._0._0._2,
																	_3: A2(
																		_user$project$Common_syntax$And,
																		A2(_user$project$Common_syntax$Imply, _p86, _p87),
																		A2(_user$project$Common_syntax$Imply, _p87, _p86))
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'})
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};

var _user$project$Random_formula$emptyAction = function (string) {
	return A2(
		_user$project$Common_syntax$PointAModel,
		A4(
			_user$project$Common_syntax$AModel,
			string,
			{ctor: '[]'},
			{ctor: '[]'},
			{ctor: '[]'}),
		_elm_lang$core$String$toLower(string));
};
var _user$project$Random_formula$atomLists = function (listOfConnectives) {
	var n4shuffle = _Skinney$fnv$FNV$hashString(
		A2(_elm_lang$core$String$join, '', listOfConnectives));
	var pn = F2(
		function (n, p) {
			return _user$project$Common_syntax$Atom(
				A2(
					_elm_lang$core$String$append,
					p,
					_user$project$Util$show(n)));
		});
	var gg = function (x) {
		var _p0 = x;
		switch (_p0) {
			case '&':
				return 1;
			case 'v':
				return 1;
			case '->':
				return 1;
			case '<->':
				return 1;
			case '[.]':
				return 1;
			case '<.>':
				return 1;
			default:
				return 0;
		}
	};
	var nn = _elm_lang$core$List$sum(
		A2(_elm_lang$core$List$map, gg, listOfConnectives)) + 1;
	var plist = A2(_elm_lang$core$List$repeat, nn, 'p');
	var listpn = A2(_elm_lang$core$List$indexedMap, pn, plist);
	var shuf = _elm_community$random_extra$Random_List$shuffle(
		_elm_lang$core$List$concat(
			A2(_elm_lang$core$List$repeat, nn, listpn)));
	var _p1 = A2(
		_elm_lang$core$Random$step,
		shuf,
		_elm_lang$core$Random$initialSeed(n4shuffle));
	var aa = _p1._0;
	var s = _p1._1;
	return A2(_elm_lang$core$List$take, nn, aa);
};
var _user$project$Random_formula$randomConnectives = F3(
	function (seed0, n, conneList) {
		if (_elm_lang$core$Native_Utils.eq(n, 0)) {
			return {ctor: '[]'};
		} else {
			var _p2 = A2(
				_elm_lang$core$Random$step,
				_elm_community$random_extra$Random_List$shuffle(conneList),
				seed0);
			var shufflelist = _p2._0;
			var seed1 = _p2._1;
			var _p3 = shufflelist;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Random_formula',
					{
						start: {line: 103, column: 4},
						end: {line: 105, column: 62}
					},
					_p3)('error in randomConnectives');
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_user$project$Random_formula$randomConnectives, seed1, n - 1, conneList),
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					});
			}
		}
	});
var _user$project$Random_formula$makeAct = function (n) {
	var gg = function (x) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'[',
			A2(_elm_lang$core$Basics_ops['++'], x, ']'));
	};
	return A2(
		_elm_lang$core$List$map,
		gg,
		A2(
			_elm_lang$core$List$take,
			n,
			{
				ctor: '::',
				_0: 'a',
				_1: {
					ctor: '::',
					_0: 'b',
					_1: {
						ctor: '::',
						_0: 'c',
						_1: {
							ctor: '::',
							_0: 'd',
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$Random_formula$makeBox = function (n) {
	var gg = function (x) {
		return A2(_elm_lang$core$Basics_ops['++'], '#', x);
	};
	return A2(
		_elm_lang$core$List$map,
		gg,
		A2(
			_elm_lang$core$List$take,
			n,
			{
				ctor: '::',
				_0: 'a',
				_1: {
					ctor: '::',
					_0: 'b',
					_1: {
						ctor: '::',
						_0: 'c',
						_1: {
							ctor: '::',
							_0: 'd',
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$Random_formula$connectiveList4EL = function (maxNumberOfAgents) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: '~',
			_1: {
				ctor: '::',
				_0: '->',
				_1: {
					ctor: '::',
					_0: '&',
					_1: {
						ctor: '::',
						_0: 'v',
						_1: {ctor: '[]'}
					}
				}
			}
		},
		_user$project$Random_formula$makeBox(maxNumberOfAgents));
};
var _user$project$Random_formula$connectiveList4PAL = function (maxNumberOfAgents) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: '~',
			_1: {
				ctor: '::',
				_0: '->',
				_1: {
					ctor: '::',
					_0: '&',
					_1: {
						ctor: '::',
						_0: 'v',
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Random_formula$makeBox(maxNumberOfAgents),
			{
				ctor: '::',
				_0: '[.]',
				_1: {ctor: '[]'}
			}));
};
var _user$project$Random_formula$connectiveList4DEL = F2(
	function (maxNumberOfActions, maxNumberOfAgents) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: '~',
				_1: {
					ctor: '::',
					_0: '->',
					_1: {
						ctor: '::',
						_0: '&',
						_1: {
							ctor: '::',
							_0: 'v',
							_1: {ctor: '[]'}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Random_formula$makeBox(maxNumberOfAgents),
				_user$project$Random_formula$makeAct(maxNumberOfActions)));
	});
var _user$project$Random_formula$connectiveList4CL = {
	ctor: '::',
	_0: '~',
	_1: {
		ctor: '::',
		_0: '->',
		_1: {ctor: '[]'}
	}
};
var _user$project$Random_formula$maxLengthOfRandomFormula = 5;
var _user$project$Random_formula$numOfFormulas = 100;
var _user$project$Random_formula$List = function (a) {
	return {ctor: 'List', _0: a};
};
var _user$project$Random_formula$Zero = function (a) {
	return {ctor: 'Zero', _0: a};
};
var _user$project$Random_formula$One = function (a) {
	return {ctor: 'One', _0: a};
};
var _user$project$Random_formula$randomFormula = F2(
	function (seed0, connectivelist) {
		randomFormula:
		while (true) {
			var _p5 = connectivelist;
			_v2_2:
			do {
				if (_p5.ctor === '::') {
					if (_p5._1.ctor === '[]') {
						if (_p5._0.ctor === 'Zero') {
							return _p5._0._0;
						} else {
							break _v2_2;
						}
					} else {
						var _p11 = _p5._1._0;
						var _p10 = _p5._1._1;
						var _p9 = _p5._0;
						var _p6 = {ctor: '_Tuple2', _0: _p9, _1: _p11};
						switch (_p6._0.ctor) {
							case 'One':
								var _v4 = seed0,
									_v5 = {
									ctor: '::',
									_0: _p11,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p10,
										{
											ctor: '::',
											_0: _p9,
											_1: {ctor: '[]'}
										})
								};
								seed0 = _v4;
								connectivelist = _v5;
								continue randomFormula;
							case 'Two':
								var _v6 = seed0,
									_v7 = {
									ctor: '::',
									_0: _p11,
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p10,
										{
											ctor: '::',
											_0: _p9,
											_1: {ctor: '[]'}
										})
								};
								seed0 = _v6;
								connectivelist = _v7;
								continue randomFormula;
							default:
								switch (_p6._1.ctor) {
									case 'Zero':
										var _v8 = seed0,
											_v9 = {
											ctor: '::',
											_0: _p11,
											_1: A2(
												_elm_lang$core$Basics_ops['++'],
												_p10,
												{
													ctor: '::',
													_0: _p9,
													_1: {ctor: '[]'}
												})
										};
										seed0 = _v8;
										connectivelist = _v9;
										continue randomFormula;
									case 'One':
										var _p7 = A2(
											_elm_lang$core$Random$step,
											_elm_community$random_extra$Random_List$shuffle(
												{
													ctor: '::',
													_0: _user$project$Random_formula$Zero(
														_p6._1._0(_p6._0._0)),
													_1: _p10
												}),
											seed0);
										var shufflexs = _p7._0;
										var seed1 = _p7._1;
										var _v10 = seed1,
											_v11 = shufflexs;
										seed0 = _v10;
										connectivelist = _v11;
										continue randomFormula;
									default:
										var _p8 = A2(
											_elm_lang$core$Random$step,
											_elm_community$random_extra$Random_List$shuffle(
												{
													ctor: '::',
													_0: _user$project$Random_formula$One(
														_p6._1._0(_p6._0._0)),
													_1: _p10
												}),
											seed0);
										var shufflexs = _p8._0;
										var seed1 = _p8._1;
										var _v12 = seed1,
											_v13 = shufflexs;
										seed0 = _v12;
										connectivelist = _v13;
										continue randomFormula;
								}
						}
					}
				} else {
					break _v2_2;
				}
			} while(false);
			return _elm_lang$core$Native_Utils.crashCase(
				'Random_formula',
				{
					start: {line: 195, column: 3},
					end: {line: 212, column: 46}
				},
				_p5)('error in randomFormula');
		}
	});
var _user$project$Random_formula$Two = function (a) {
	return {ctor: 'Two', _0: a};
};
var _user$project$Random_formula$string2connective = function (li) {
	var gg = function (b) {
		var _p13 = b;
		switch (_p13) {
			case '~':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return _user$project$Common_syntax$Not(x);
						}),
					_1: {ctor: '[]'}
				};
			case '&':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$And, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case 'v':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$Or, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case '->':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$Imply, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case '<->':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$Iff, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case '[.]':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$Announce, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case '<.>':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$Two(
						F2(
							function (x, y) {
								return A2(_user$project$Common_syntax$Announce2, x, y);
							})),
					_1: {ctor: '[]'}
				};
			case '[a]':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$BoxAction,
								_user$project$Random_formula$emptyAction('E1'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '[b]':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$BoxAction,
								_user$project$Random_formula$emptyAction('E2'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '[c]':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$BoxAction,
								_user$project$Random_formula$emptyAction('E3'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '[d]':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$BoxAction,
								_user$project$Random_formula$emptyAction('E4'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '<a>':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$DiaAction,
								_user$project$Random_formula$emptyAction('E1'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '<b>':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$DiaAction,
								_user$project$Random_formula$emptyAction('E2'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '<c>':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$DiaAction,
								_user$project$Random_formula$emptyAction('E3'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '<d>':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(
								_user$project$Common_syntax$DiaAction,
								_user$project$Random_formula$emptyAction('E4'),
								x);
						}),
					_1: {ctor: '[]'}
				};
			case '#a':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Box, 'a', x);
						}),
					_1: {ctor: '[]'}
				};
			case '#b':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Box, 'b', x);
						}),
					_1: {ctor: '[]'}
				};
			case '#c':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Box, 'c', x);
						}),
					_1: {ctor: '[]'}
				};
			case '#d':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Box, 'd', x);
						}),
					_1: {ctor: '[]'}
				};
			case '$a':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Dia, 'a', x);
						}),
					_1: {ctor: '[]'}
				};
			case '$b':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Dia, 'b', x);
						}),
					_1: {ctor: '[]'}
				};
			case '$c':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Dia, 'c', x);
						}),
					_1: {ctor: '[]'}
				};
			case '$d':
				return {
					ctor: '::',
					_0: _user$project$Random_formula$One(
						function (x) {
							return A2(_user$project$Common_syntax$Dia, 'd', x);
						}),
					_1: {ctor: '[]'}
				};
			default:
				return _elm_lang$core$Native_Utils.crashCase(
					'Random_formula',
					{
						start: {line: 158, column: 12},
						end: {line: 184, column: 51}
					},
					_p13)('error in string2connective');
		}
	};
	var _p15 = li;
	if (_p15.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			gg(_p15._0),
			_user$project$Random_formula$string2connective(_p15._1));
	}
};
var _user$project$Random_formula$createRandomFormula = F3(
	function (num, conneList, seed0) {
		var _p16 = A2(_elm_lang$core$Random$step, _elm_lang$core$Random$bool, seed0);
		var bool = _p16._0;
		var seed1 = _p16._1;
		var randomConnects = A3(_user$project$Random_formula$randomConnectives, seed0, num, conneList);
		var atom = A2(
			_elm_lang$core$List$map,
			function (x) {
				return _user$project$Random_formula$Zero(x);
			},
			_user$project$Random_formula$atomLists(randomConnects));
		var randomf = function (listOfConnective) {
			return A2(
				_user$project$Random_formula$randomFormula,
				seed0,
				A2(_elm_lang$core$Basics_ops['++'], atom, listOfConnective));
		}(
			_user$project$Random_formula$string2connective(randomConnects));
		return {ctor: '_Tuple2', _0: randomf, _1: seed1};
	});
var _user$project$Random_formula$createRandomFormula_s = F3(
	function (n, connects, seed0) {
		var _p17 = A3(_user$project$Random_formula$createRandomFormula, _user$project$Random_formula$maxLengthOfRandomFormula, connects, seed0);
		var f = _p17._0;
		var seed1 = _p17._1;
		var li = _user$project$Util$int2list(n);
		var _p18 = n;
		if (_p18 === 0) {
			return {ctor: '[]'};
		} else {
			return _user$project$Util$nub(
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: f,
						_1: {ctor: '[]'}
					},
					A3(_user$project$Random_formula$createRandomFormula_s, n - 1, connects, seed1)));
		}
	});

var _user$project$PAL_sequent$ruleGPAL = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$atLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'Lat',
		rule: function (seq) {
			var _p0 = seq.leftForm;
			if ((((_p0.ctor === '::') && (_p0._0._0.ctor === '_Tuple4')) && (_p0._0._0._2.ctor === '::')) && (_p0._0._0._3.ctor === 'Atom')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: _p0._0._0._0,
						_1: _p0._0._0._1,
						_2: _p0._0._0._2._1,
						_3: _user$project$Common_syntax$Atom(_p0._0._0._3._0)
					});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									_p0._1)
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$atRN,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'Rat',
			rule: function (seq) {
				var _p1 = seq.rightForm;
				if ((((_p1.ctor === '::') && (_p1._0._0.ctor === '_Tuple4')) && (_p1._0._0._2.ctor === '::')) && (_p1._0._0._3.ctor === 'Atom')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: _p1._0._0._0,
							_1: _p1._0._0._1,
							_2: _p1._0._0._2._1,
							_3: _user$project$Common_syntax$Atom(_p1._0._0._3._0)
						});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									rightForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										_p1._1)
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$annLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L[.]',
				rule: function (seq) {
					var _p2 = seq.leftForm;
					if (((_p2.ctor === '::') && (_p2._0._0.ctor === '_Tuple4')) && (_p2._0._0._3.ctor === 'Announce')) {
						var _p7 = _p2._0._0._3._0;
						var _p6 = _p2._1;
						var _p5 = _p2._0._0._1;
						var _p4 = _p2._0._0._0;
						var _p3 = _p2._0._0._2;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p4, _1: _p5, _2: _p3, _3: _p7});
						var add1 = _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p4,
								_1: _p5,
								_2: A2(
									_elm_lang$core$Basics_ops['++'],
									_p3,
									{
										ctor: '::',
										_0: _toastal$either$Either$Left(_p7),
										_1: {ctor: '[]'}
									}),
								_3: _p2._0._0._3._1
							});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {ctor: '[]'}
											},
											_p6)
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: _p6,
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												seq.rightForm)
										}),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$annRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R[.]',
					rule: function (seq) {
						var _p8 = seq.rightForm;
						if (((_p8.ctor === '::') && (_p8._0._0.ctor === '_Tuple4')) && (_p8._0._0._3.ctor === 'Announce')) {
							var _p12 = _p8._0._0._3._0;
							var _p11 = _p8._0._0._1;
							var _p10 = _p8._0._0._0;
							var _p9 = _p8._0._0._2;
							var add2 = _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: _p10,
									_1: _p11,
									_2: A2(
										_elm_lang$core$Basics_ops['++'],
										_p9,
										{
											ctor: '::',
											_0: _toastal$either$Either$Left(_p12),
											_1: {ctor: '[]'}
										}),
									_3: _p8._0._0._3._1
								});
							var add1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p10, _1: _p11, _2: _p9, _3: _p12});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1,
													_1: {ctor: '[]'}
												},
												seq.leftForm),
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p8._1)
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$ann2LN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'L<.>',
						rule: function (seq) {
							var _p13 = seq.leftForm;
							if (((_p13.ctor === '::') && (_p13._0._0.ctor === '_Tuple4')) && (_p13._0._0._3.ctor === 'Announce2')) {
								var _p17 = _p13._0._0._3._0;
								var _p16 = _p13._0._0._1;
								var _p15 = _p13._0._0._0;
								var _p14 = _p13._0._0._2;
								var add2 = _user$project$Common_sequent$LabelForm(
									{
										ctor: '_Tuple4',
										_0: _p15,
										_1: _p16,
										_2: A2(
											_elm_lang$core$Basics_ops['++'],
											_p14,
											{
												ctor: '::',
												_0: _toastal$either$Either$Left(_p17),
												_1: {ctor: '[]'}
											}),
										_3: _p13._0._0._3._1
									});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p15, _1: _p16, _2: _p14, _3: _p17});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														}
													},
													_p13._1)
											}),
										_1: {ctor: '[]'}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$ann2RN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'R<.>',
							rule: function (seq) {
								var _p18 = seq.rightForm;
								if (((_p18.ctor === '::') && (_p18._0._0.ctor === '_Tuple4')) && (_p18._0._0._3.ctor === 'Announce2')) {
									var _p23 = _p18._1;
									var _p22 = _p18._0._0._3._0;
									var _p21 = _p18._0._0._1;
									var _p20 = _p18._0._0._0;
									var _p19 = _p18._0._0._2;
									var add2 = _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: _p20,
											_1: _p21,
											_2: A2(
												_elm_lang$core$Basics_ops['++'],
												_p19,
												{
													ctor: '::',
													_0: _toastal$either$Either$Left(_p22),
													_1: {ctor: '[]'}
												}),
											_3: _p18._0._0._3._1
										});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p20, _1: _p21, _2: _p19, _3: _p22});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														_p23)
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															_p23)
													}),
												_1: {ctor: '[]'}
											}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$relLN,
								category: _user$project$Common_sequent$Rule4LeftRel,
								rulename: 'Lrel',
								rule: function (seq) {
									var _p24 = seq.leftRel;
									if ((((((((_p24.ctor === '::') && (_p24._0.ctor === 'RelAtom')) && (_p24._0._0.ctor === '_Tuple4')) && (_p24._0._0._1.ctor === '::')) && (_p24._0._0._2.ctor === '_Tuple2')) && (_p24._0._0._2._1.ctor === '[]')) && (_p24._0._0._3.ctor === '_Tuple2')) && (_p24._0._0._3._1.ctor === '[]')) {
										var _p28 = _p24._0._0._3._0;
										var _p27 = _p24._0._0._2._0;
										var _p26 = _p24._0._0._1._0;
										var _p25 = _p24._0._0._1._1;
										var add3 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: {ctor: '[]'},
												_1: _p28,
												_2: A2(
													_elm_lang$core$List$map,
													function (x) {
														return _toastal$either$Either$Left(x);
													},
													_p25),
												_3: _p26
											});
										var add2 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: {ctor: '[]'},
												_1: _p27,
												_2: A2(
													_elm_lang$core$List$map,
													function (x) {
														return _toastal$either$Either$Left(x);
													},
													_p25),
												_3: _p26
											});
										var add1 = _user$project$Common_sequent$RelAtom(
											{
												ctor: '_Tuple4',
												_0: _p24._0._0._0,
												_1: _p25,
												_2: {
													ctor: '_Tuple2',
													_0: _p27,
													_1: {ctor: '[]'}
												},
												_3: {
													ctor: '_Tuple2',
													_0: _p28,
													_1: {ctor: '[]'}
												}
											});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftRel: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															},
															_p24._1),
														leftForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {
																	ctor: '::',
																	_0: add3,
																	_1: {ctor: '[]'}
																}
															},
															seq.leftForm)
													}),
												_1: {ctor: '[]'}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$relRN,
									category: _user$project$Common_sequent$Rule4RightRel,
									rulename: 'Rrel',
									rule: function (seq) {
										var _p29 = seq.rightRel;
										if ((((((((_p29.ctor === '::') && (_p29._0.ctor === 'RelAtom')) && (_p29._0._0.ctor === '_Tuple4')) && (_p29._0._0._1.ctor === '::')) && (_p29._0._0._2.ctor === '_Tuple2')) && (_p29._0._0._2._1.ctor === '[]')) && (_p29._0._0._3.ctor === '_Tuple2')) && (_p29._0._0._3._1.ctor === '[]')) {
											var _p34 = _p29._0._0._3._0;
											var _p33 = _p29._0._0._2._0;
											var _p32 = _p29._1;
											var _p31 = _p29._0._0._1._0;
											var _p30 = _p29._0._0._1._1;
											var add3 = _user$project$Common_sequent$RelAtom(
												{
													ctor: '_Tuple4',
													_0: _p29._0._0._0,
													_1: _p30,
													_2: {
														ctor: '_Tuple2',
														_0: _p33,
														_1: {ctor: '[]'}
													},
													_3: {
														ctor: '_Tuple2',
														_0: _p34,
														_1: {ctor: '[]'}
													}
												});
											var add2 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {ctor: '[]'},
													_1: _p34,
													_2: A2(
														_elm_lang$core$List$map,
														function (x) {
															return _toastal$either$Either$Left(x);
														},
														_p30),
													_3: _p31
												});
											var add1 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {ctor: '[]'},
													_1: _p33,
													_2: A2(
														_elm_lang$core$List$map,
														function (x) {
															return _toastal$either$Either$Left(x);
														},
														_p30),
													_3: _p31
												});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															rightRel: _p32,
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add1,
																	_1: {ctor: '[]'}
																},
																seq.rightForm)
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																rightRel: _p32,
																rightForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add2,
																		_1: {ctor: '[]'}
																	},
																	seq.rightForm)
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	rightRel: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add3,
																			_1: {ctor: '[]'}
																		},
																		_p32)
																}),
															_1: {ctor: '[]'}
														}
													}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$cmpLN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'Lcmp',
										rule: function (seq) {
											var _p35 = seq.leftForm;
											if (((_p35.ctor === '::') && (_p35._0._0.ctor === '_Tuple4')) && (_p35._0._0._2.ctor === '::')) {
												var _p36 = _p35._0._0._2._0;
												if (((_p36.ctor === 'Left') && (_p36._0.ctor === 'And')) && (_p36._0._1.ctor === 'Announce')) {
													var _p37 = _p36._0._0;
													if (_elm_lang$core$Native_Utils.eq(_p37, _p36._0._1._0)) {
														return _elm_lang$core$Maybe$Nothing;
													} else {
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: {ctor: '[]'},
																_1: _p35._0._0._1,
																_2: A2(
																	_elm_lang$core$Basics_ops['++'],
																	_p35._0._0._2._1,
																	{
																		ctor: '::',
																		_0: _toastal$either$Either$Left(_p37),
																		_1: {
																			ctor: '::',
																			_0: _toastal$either$Either$Left(_p36._0._1._1),
																			_1: {ctor: '[]'}
																		}
																	}),
																_3: _p35._0._0._3
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p35._1)
																	}),
																_1: {ctor: '[]'}
															});
													}
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$cmpRN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'Rcmp',
											rule: function (seq) {
												var _p38 = seq.rightForm;
												if (((_p38.ctor === '::') && (_p38._0._0.ctor === '_Tuple4')) && (_p38._0._0._2.ctor === '::')) {
													var _p39 = _p38._0._0._2._0;
													if (((_p39.ctor === 'Left') && (_p39._0.ctor === 'And')) && (_p39._0._1.ctor === 'Announce')) {
														var _p40 = _p39._0._0;
														if (_elm_lang$core$Native_Utils.eq(_p40, _p39._0._1._0)) {
															return _elm_lang$core$Maybe$Nothing;
														} else {
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: {ctor: '[]'},
																	_1: _p38._0._0._1,
																	_2: A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p38._0._0._2._1,
																		{
																			ctor: '::',
																			_0: _toastal$either$Either$Left(_p40),
																			_1: {
																				ctor: '::',
																				_0: _toastal$either$Either$Left(_p39._0._1._1),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_3: _p38._0._0._3
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				_p38._1)
																		}),
																	_1: {ctor: '[]'}
																});
														}
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$PAL_sequent$prop425 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$And,
			_user$project$Common_sequent$aa,
			_user$project$Common_syntax$Not(
				A2(_user$project$Common_syntax$Announce2, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb))),
		A2(
			_user$project$Common_syntax$Announce2,
			_user$project$Common_sequent$aa,
			_user$project$Common_syntax$Not(_user$project$Common_sequent$bb))));
var _user$project$PAL_sequent$prop421 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Announce2,
		A2(
			_user$project$Common_syntax$And,
			_user$project$Common_sequent$aa,
			_user$project$Common_syntax$Not(
				A2(_user$project$Common_syntax$Box, 'b', _user$project$Common_sequent$aa))),
		A2(
			_user$project$Common_syntax$Dia,
			'a',
			A2(
				_user$project$Common_syntax$Dia,
				'b',
				_user$project$Common_syntax$Not(_user$project$Common_sequent$aa)))));
var _user$project$PAL_sequent$prop419c = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce2,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Dia, 'a', _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$And,
			_user$project$Common_sequent$aa,
			A2(
				_user$project$Common_syntax$Dia,
				'a',
				A2(_user$project$Common_syntax$Announce2, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)))));
var _user$project$PAL_sequent$prop419b = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce2,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$And,
			_user$project$Common_sequent$aa,
			A2(
				_user$project$Common_syntax$Box,
				'a',
				A2(
					_user$project$Common_syntax$Imply,
					_user$project$Common_sequent$aa,
					A2(_user$project$Common_syntax$Announce2, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb))))));
var _user$project$PAL_sequent$prop419a = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$Imply,
			_user$project$Common_sequent$aa,
			A2(
				_user$project$Common_syntax$Box,
				'a',
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)))));
var _user$project$PAL_sequent$prop3 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb),
		_user$project$Common_syntax$Not(
			A2(
				_user$project$Common_syntax$Announce2,
				_user$project$Common_sequent$aa,
				_user$project$Common_syntax$Not(_user$project$Common_sequent$bb)))));
var _user$project$PAL_sequent$prop2 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			A2(
				_user$project$Common_syntax$Announce,
				_user$project$Common_sequent$bb,
				A2(
					_user$project$Common_syntax$And,
					A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$cc),
					_user$project$Common_sequent$dd))),
		A2(
			_user$project$Common_syntax$Announce,
			A2(
				_user$project$Common_syntax$And,
				_user$project$Common_sequent$aa,
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)),
			A2(
				_user$project$Common_syntax$And,
				A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$cc),
				_user$project$Common_sequent$dd))));
var _user$project$PAL_sequent$prop1p = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			A2(_user$project$Common_syntax$And, _user$project$Common_sequent$p1, _user$project$Common_sequent$p1),
			_user$project$Common_sequent$p2),
		A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2)));
var _user$project$PAL_sequent$prop1 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			A2(_user$project$Common_syntax$And, _user$project$Common_sequent$aa, _user$project$Common_sequent$aa),
			_user$project$Common_sequent$bb),
		A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)));
var _user$project$PAL_sequent$ra5p = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$p1,
			A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$p2, _user$project$Common_sequent$p3)),
		A2(
			_user$project$Common_syntax$Announce,
			A2(
				_user$project$Common_syntax$And,
				_user$project$Common_sequent$p1,
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$p1, _user$project$Common_sequent$p2)),
			_user$project$Common_sequent$p3)));
var _user$project$PAL_sequent$ra5 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$bb, _user$project$Common_sequent$cc)),
		A2(
			_user$project$Common_syntax$Announce,
			A2(
				_user$project$Common_syntax$And,
				_user$project$Common_sequent$aa,
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)),
			_user$project$Common_sequent$cc)));
var _user$project$PAL_sequent$ra4 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Box, 'a', _user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$Imply,
			_user$project$Common_sequent$aa,
			A2(
				_user$project$Common_syntax$Box,
				'a',
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)))));
var _user$project$PAL_sequent$ra3 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			_user$project$Common_syntax$Not(_user$project$Common_sequent$bb)),
		A2(
			_user$project$Common_syntax$Imply,
			_user$project$Common_sequent$aa,
			_user$project$Common_syntax$Not(
				A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb)))));
var _user$project$PAL_sequent$ra2 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(
			_user$project$Common_syntax$Announce,
			_user$project$Common_sequent$aa,
			A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$bb, _user$project$Common_sequent$cc)),
		A2(
			_user$project$Common_syntax$Imply,
			A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$bb),
			A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$cc))));
var _user$project$PAL_sequent$ra1 = _user$project$Common_sequent$formula2seq(
	A2(
		_user$project$Common_syntax$Iff,
		A2(_user$project$Common_syntax$Announce, _user$project$Common_sequent$aa, _user$project$Common_sequent$p2),
		A2(_user$project$Common_syntax$Imply, _user$project$Common_sequent$aa, _user$project$Common_sequent$p2)));
var _user$project$PAL_sequent$isPALformula = function (f) {
	isPALformula:
	while (true) {
		var _p41 = f;
		switch (_p41.ctor) {
			case 'Top':
				return true;
			case 'Bot':
				return true;
			case 'Atom':
				return true;
			case 'AnyFormula':
				return true;
			case 'Not':
				var _v13 = _p41._0;
				f = _v13;
				continue isPALformula;
			case 'And':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Or':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Imply':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Imply2':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Iff':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Dia':
				var _v14 = _p41._1;
				f = _v14;
				continue isPALformula;
			case 'Box':
				var _v15 = _p41._1;
				f = _v15;
				continue isPALformula;
			case 'Announce':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			case 'Announce2':
				return _user$project$PAL_sequent$isPALformula(_p41._0) && _user$project$PAL_sequent$isPALformula(_p41._1);
			default:
				return false;
		}
	}
};

var _user$project$IntPAL_sequent$ruleGIntPAL = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$atLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'Lat',
		rule: function (seq) {
			var _p0 = seq.leftForm;
			if ((((_p0.ctor === '::') && (_p0._0._0.ctor === '_Tuple4')) && (_p0._0._0._2.ctor === '::')) && (_p0._0._0._3.ctor === 'Atom')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: _p0._0._0._0,
						_1: _p0._0._0._1,
						_2: _p0._0._0._2._1,
						_3: _user$project$Common_syntax$Atom(_p0._0._0._3._0)
					});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									_p0._1)
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$atRN,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'Rat',
			rule: function (seq) {
				var _p1 = seq.rightForm;
				if (((((_p1.ctor === '::') && (_p1._0._0.ctor === '_Tuple4')) && (_p1._0._0._2.ctor === '::')) && (_p1._0._0._3.ctor === 'Atom')) && (_p1._1.ctor === '[]')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: _p1._0._0._0,
							_1: _p1._0._0._1,
							_2: _p1._0._0._2._1,
							_3: _user$project$Common_syntax$Atom(_p1._0._0._3._0)
						});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									rightForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										{ctor: '[]'})
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: 5,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L[.]',
				rule: function (seq) {
					var _p2 = seq.leftForm;
					if (((_p2.ctor === '::') && (_p2._0._0.ctor === '_Tuple4')) && (_p2._0._0._3.ctor === 'Announce')) {
						var _p7 = _p2._0._0._3._0;
						var _p6 = _p2._1;
						var _p5 = _p2._0._0._1;
						var _p4 = _p2._0._0._0;
						var _p3 = _p2._0._0._2;
						var add2 = _user$project$Common_sequent$LabelForm(
							{
								ctor: '_Tuple4',
								_0: _p4,
								_1: _p5,
								_2: A2(
									_elm_lang$core$Basics_ops['++'],
									_p3,
									{
										ctor: '::',
										_0: _toastal$either$Either$Left(_p7),
										_1: {ctor: '[]'}
									}),
								_3: _p2._0._0._3._1
							});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p4, _1: _p5, _2: _p3, _3: _p7});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: _p6,
										rightForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {ctor: '[]'}
											},
											{ctor: '[]'})
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												_p6)
										}),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$annRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R[.]',
					rule: function (seq) {
						var _p8 = seq.rightForm;
						if ((((_p8.ctor === '::') && (_p8._0._0.ctor === '_Tuple4')) && (_p8._0._0._3.ctor === 'Announce')) && (_p8._1.ctor === '[]')) {
							var _p12 = _p8._0._0._3._0;
							var _p11 = _p8._0._0._1;
							var _p10 = _p8._0._0._0;
							var _p9 = _p8._0._0._2;
							var add2 = _user$project$Common_sequent$LabelForm(
								{
									ctor: '_Tuple4',
									_0: _p10,
									_1: _p11,
									_2: A2(
										_elm_lang$core$Basics_ops['++'],
										_p9,
										{
											ctor: '::',
											_0: _toastal$either$Either$Left(_p12),
											_1: {ctor: '[]'}
										}),
									_3: _p8._0._0._3._1
								});
							var add1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p10, _1: _p11, _2: _p9, _3: _p12});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											leftForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add1,
													_1: {ctor: '[]'}
												},
												seq.leftForm),
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												},
												{ctor: '[]'})
										}),
									_1: {ctor: '[]'}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$ann2LN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'L<.>',
						rule: function (seq) {
							var _p13 = seq.leftForm;
							if (((_p13.ctor === '::') && (_p13._0._0.ctor === '_Tuple4')) && (_p13._0._0._3.ctor === 'Announce2')) {
								var _p17 = _p13._0._0._3._0;
								var _p16 = _p13._0._0._1;
								var _p15 = _p13._0._0._0;
								var _p14 = _p13._0._0._2;
								var add2 = _user$project$Common_sequent$LabelForm(
									{
										ctor: '_Tuple4',
										_0: _p15,
										_1: _p16,
										_2: A2(
											_elm_lang$core$Basics_ops['++'],
											_p14,
											{
												ctor: '::',
												_0: _toastal$either$Either$Left(_p17),
												_1: {ctor: '[]'}
											}),
										_3: _p13._0._0._3._1
									});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p15, _1: _p16, _2: _p14, _3: _p17});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														}
													},
													_p13._1)
											}),
										_1: {ctor: '[]'}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$ann2RN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'R<.>',
							rule: function (seq) {
								var _p18 = seq.rightForm;
								if ((((_p18.ctor === '::') && (_p18._0._0.ctor === '_Tuple4')) && (_p18._0._0._3.ctor === 'Announce2')) && (_p18._1.ctor === '[]')) {
									var _p22 = _p18._0._0._3._0;
									var _p21 = _p18._0._0._1;
									var _p20 = _p18._0._0._0;
									var _p19 = _p18._0._0._2;
									var add2 = _user$project$Common_sequent$LabelForm(
										{
											ctor: '_Tuple4',
											_0: _p20,
											_1: _p21,
											_2: A2(
												_elm_lang$core$Basics_ops['++'],
												_p19,
												{
													ctor: '::',
													_0: _toastal$either$Either$Left(_p22),
													_1: {ctor: '[]'}
												}),
											_3: _p18._0._0._3._1
										});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p20, _1: _p21, _2: _p19, _3: _p22});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {ctor: '[]'}
														},
														{ctor: '[]'})
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														rightForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															},
															{ctor: '[]'})
													}),
												_1: {ctor: '[]'}
											}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$relLN,
								category: _user$project$Common_sequent$Rule4LeftRel,
								rulename: 'Lrel',
								rule: function (seq) {
									var _p23 = seq.leftRel;
									if ((((((((_p23.ctor === '::') && (_p23._0.ctor === 'RelAtom')) && (_p23._0._0.ctor === '_Tuple4')) && (_p23._0._0._1.ctor === '::')) && (_p23._0._0._2.ctor === '_Tuple2')) && (_p23._0._0._2._1.ctor === '[]')) && (_p23._0._0._3.ctor === '_Tuple2')) && (_p23._0._0._3._1.ctor === '[]')) {
										var _p27 = _p23._0._0._3._0;
										var _p26 = _p23._0._0._2._0;
										var _p25 = _p23._0._0._1._0;
										var _p24 = _p23._0._0._1._1;
										var add3 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: {ctor: '[]'},
												_1: _p27,
												_2: A2(
													_elm_lang$core$List$map,
													function (x) {
														return _toastal$either$Either$Left(x);
													},
													_p24),
												_3: _p25
											});
										var add2 = _user$project$Common_sequent$LabelForm(
											{
												ctor: '_Tuple4',
												_0: {ctor: '[]'},
												_1: _p26,
												_2: A2(
													_elm_lang$core$List$map,
													function (x) {
														return _toastal$either$Either$Left(x);
													},
													_p24),
												_3: _p25
											});
										var add1 = _user$project$Common_sequent$RelAtom(
											{
												ctor: '_Tuple4',
												_0: _p23._0._0._0,
												_1: _p24,
												_2: {
													ctor: '_Tuple2',
													_0: _p26,
													_1: {ctor: '[]'}
												},
												_3: {
													ctor: '_Tuple2',
													_0: _p27,
													_1: {ctor: '[]'}
												}
											});
										return _elm_lang$core$Maybe$Just(
											{
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.update(
													seq,
													{
														leftRel: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															},
															_p23._1),
														leftForm: A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: add2,
																_1: {
																	ctor: '::',
																	_0: add3,
																	_1: {ctor: '[]'}
																}
															},
															seq.leftForm)
													}),
												_1: {ctor: '[]'}
											});
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$relRN,
									category: _user$project$Common_sequent$Rule4RightRel,
									rulename: 'Rrel',
									rule: function (seq) {
										var _p28 = seq.rightRel;
										if (((((((((_p28.ctor === '::') && (_p28._0.ctor === 'RelAtom')) && (_p28._0._0.ctor === '_Tuple4')) && (_p28._0._0._1.ctor === '::')) && (_p28._0._0._2.ctor === '_Tuple2')) && (_p28._0._0._2._1.ctor === '[]')) && (_p28._0._0._3.ctor === '_Tuple2')) && (_p28._0._0._3._1.ctor === '[]')) && (_p28._1.ctor === '[]')) {
											var _p32 = _p28._0._0._3._0;
											var _p31 = _p28._0._0._2._0;
											var _p30 = _p28._0._0._1._0;
											var _p29 = _p28._0._0._1._1;
											var add3 = _user$project$Common_sequent$RelAtom(
												{
													ctor: '_Tuple4',
													_0: _p28._0._0._0,
													_1: _p29,
													_2: {
														ctor: '_Tuple2',
														_0: _p31,
														_1: {ctor: '[]'}
													},
													_3: {
														ctor: '_Tuple2',
														_0: _p32,
														_1: {ctor: '[]'}
													}
												});
											var add2 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {ctor: '[]'},
													_1: _p32,
													_2: A2(
														_elm_lang$core$List$map,
														function (x) {
															return _toastal$either$Either$Left(x);
														},
														_p29),
													_3: _p30
												});
											var add1 = _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {ctor: '[]'},
													_1: _p31,
													_2: A2(
														_elm_lang$core$List$map,
														function (x) {
															return _toastal$either$Either$Left(x);
														},
														_p29),
													_3: _p30
												});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															rightRel: {ctor: '[]'},
															rightForm: {
																ctor: '::',
																_0: add1,
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																rightRel: {ctor: '[]'},
																rightForm: {
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	rightRel: {
																		ctor: '::',
																		_0: add3,
																		_1: {ctor: '[]'}
																	},
																	rightForm: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$cmpLN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'Lcmp',
										rule: function (seq) {
											var _p33 = seq.leftForm;
											if (((_p33.ctor === '::') && (_p33._0._0.ctor === '_Tuple4')) && (_p33._0._0._2.ctor === '::')) {
												var _p34 = _p33._0._0._2._0;
												if (((_p34.ctor === 'Left') && (_p34._0.ctor === 'And')) && (_p34._0._1.ctor === 'Announce')) {
													var _p35 = _p34._0._0;
													if (_elm_lang$core$Native_Utils.eq(_p35, _p34._0._1._0)) {
														return _elm_lang$core$Maybe$Nothing;
													} else {
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: {ctor: '[]'},
																_1: _p33._0._0._1,
																_2: A2(
																	_elm_lang$core$Basics_ops['++'],
																	_p33._0._0._2._1,
																	{
																		ctor: '::',
																		_0: _toastal$either$Either$Left(_p35),
																		_1: {
																			ctor: '::',
																			_0: _toastal$either$Either$Left(_p34._0._1._1),
																			_1: {ctor: '[]'}
																		}
																	}),
																_3: _p33._0._0._3
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p33._1)
																	}),
																_1: {ctor: '[]'}
															});
													}
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$cmpRN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'Rcmp',
											rule: function (seq) {
												var _p36 = seq.rightForm;
												if ((((_p36.ctor === '::') && (_p36._0._0.ctor === '_Tuple4')) && (_p36._0._0._2.ctor === '::')) && (_p36._1.ctor === '[]')) {
													var _p37 = _p36._0._0._2._0;
													if (((_p37.ctor === 'Left') && (_p37._0.ctor === 'And')) && (_p37._0._1.ctor === 'Announce')) {
														var _p38 = _p37._0._0;
														if (_elm_lang$core$Native_Utils.eq(_p38, _p37._0._1._0)) {
															return _elm_lang$core$Maybe$Nothing;
														} else {
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: {ctor: '[]'},
																	_1: _p36._0._0._1,
																	_2: A2(
																		_elm_lang$core$Basics_ops['++'],
																		_p36._0._0._2._1,
																		{
																			ctor: '::',
																			_0: _toastal$either$Either$Left(_p38),
																			_1: {
																				ctor: '::',
																				_0: _toastal$either$Either$Left(_p37._0._1._1),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_3: _p36._0._0._3
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				{ctor: '[]'})
																		}),
																	_1: {ctor: '[]'}
																});
														}
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$IntPAL_sequent$isPALformula = function (f) {
	isPALformula:
	while (true) {
		var _p39 = f;
		switch (_p39.ctor) {
			case 'Top':
				return true;
			case 'Bot':
				return true;
			case 'Atom':
				return true;
			case 'AnyFormula':
				return true;
			case 'Not':
				var _v13 = _p39._0;
				f = _v13;
				continue isPALformula;
			case 'And':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Or':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Imply':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Imply2':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Iff':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Dia':
				var _v14 = _p39._1;
				f = _v14;
				continue isPALformula;
			case 'Box':
				var _v15 = _p39._1;
				f = _v15;
				continue isPALformula;
			case 'Announce':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			case 'Announce2':
				return _user$project$IntPAL_sequent$isPALformula(_p39._0) && _user$project$IntPAL_sequent$isPALformula(_p39._1);
			default:
				return false;
		}
	}
};

var _user$project$Int_sequent_BiRel$ruleInt2 = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$negLN,
		category: _user$project$Common_sequent$Rule4LeftFormula,
		rulename: 'L~',
		rule: function (seq) {
			var _p0 = seq.leftForm;
			if (((_p0.ctor === '::') && (_p0._0._0.ctor === '_Tuple4')) && (_p0._0._0._3.ctor === 'Not')) {
				var add1 = _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: _p0._0._0._0,
						_1: _p0._0._0._1,
						_2: _p0._0._0._2,
						_3: A2(_user$project$Common_syntax$Imply, _p0._0._0._3._0, _user$project$Common_syntax$Bot)
					});
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.update(
							seq,
							{
								leftForm: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: add1,
										_1: {ctor: '[]'}
									},
									_p0._1)
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$negRN,
			category: _user$project$Common_sequent$Rule4RightFormula,
			rulename: 'R~',
			rule: function (seq) {
				var _p1 = seq.rightForm;
				if (((_p1.ctor === '::') && (_p1._0._0.ctor === '_Tuple4')) && (_p1._0._0._3.ctor === 'Not')) {
					var add1 = _user$project$Common_sequent$LabelForm(
						{
							ctor: '_Tuple4',
							_0: _p1._0._0._0,
							_1: _p1._0._0._1,
							_2: _p1._0._0._2,
							_3: A2(_user$project$Common_syntax$Imply, _p1._0._0._3._0, _user$project$Common_syntax$Bot)
						});
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.update(
								seq,
								{
									rightForm: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: add1,
											_1: {ctor: '[]'}
										},
										_p1._1)
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$conjLN,
				category: _user$project$Common_sequent$Rule4LeftFormula,
				rulename: 'L&',
				rule: function (seq) {
					var _p2 = seq.leftForm;
					if (((_p2.ctor === '::') && (_p2._0._0.ctor === '_Tuple4')) && (_p2._0._0._3.ctor === 'And')) {
						var _p5 = _p2._0._0._2;
						var _p4 = _p2._0._0._0;
						var _p3 = _p2._0._0._1;
						var add2 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p4, _1: _p3, _2: _p5, _3: _p2._0._0._3._1});
						var add1 = _user$project$Common_sequent$LabelForm(
							{ctor: '_Tuple4', _0: _p4, _1: _p3, _2: _p5, _3: _p2._0._0._3._0});
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									seq,
									{
										leftForm: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: add1,
												_1: {
													ctor: '::',
													_0: add2,
													_1: {ctor: '[]'}
												}
											},
											_p2._1)
									}),
								_1: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					priority: _user$project$Common_sequent$conjRN,
					category: _user$project$Common_sequent$Rule4RightFormula,
					rulename: 'R&',
					rule: function (seq) {
						var _p6 = seq.rightForm;
						if (((_p6.ctor === '::') && (_p6._0._0.ctor === '_Tuple4')) && (_p6._0._0._3.ctor === 'And')) {
							var _p10 = _p6._1;
							var _p9 = _p6._0._0._2;
							var _p8 = _p6._0._0._0;
							var _p7 = _p6._0._0._1;
							var f2 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p8, _1: _p7, _2: _p9, _3: _p6._0._0._3._1});
							var f1 = _user$project$Common_sequent$LabelForm(
								{ctor: '_Tuple4', _0: _p8, _1: _p7, _2: _p9, _3: _p6._0._0._3._0});
							return _elm_lang$core$Maybe$Just(
								{
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.update(
										seq,
										{
											rightForm: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: f1,
													_1: {ctor: '[]'}
												},
												_p10)
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												rightForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: f2,
														_1: {ctor: '[]'}
													},
													_p10)
											}),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						priority: _user$project$Common_sequent$disjLN,
						category: _user$project$Common_sequent$Rule4LeftFormula,
						rulename: 'Lv',
						rule: function (seq) {
							var _p11 = seq.leftForm;
							if (((_p11.ctor === '::') && (_p11._0._0.ctor === '_Tuple4')) && (_p11._0._0._3.ctor === 'Or')) {
								var _p15 = _p11._1;
								var _p14 = _p11._0._0._2;
								var _p13 = _p11._0._0._0;
								var _p12 = _p11._0._0._1;
								var add2 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p13, _1: _p12, _2: _p14, _3: _p11._0._0._3._1});
								var add1 = _user$project$Common_sequent$LabelForm(
									{ctor: '_Tuple4', _0: _p13, _1: _p12, _2: _p14, _3: _p11._0._0._3._0});
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.update(
											seq,
											{
												leftForm: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: add1,
														_1: {ctor: '[]'}
													},
													_p15)
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													leftForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add2,
															_1: {ctor: '[]'}
														},
														_p15)
												}),
											_1: {ctor: '[]'}
										}
									});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							priority: _user$project$Common_sequent$disjRN,
							category: _user$project$Common_sequent$Rule4RightFormula,
							rulename: 'Rv',
							rule: function (seq) {
								var _p16 = seq.rightForm;
								if (((_p16.ctor === '::') && (_p16._0._0.ctor === '_Tuple4')) && (_p16._0._0._3.ctor === 'Or')) {
									var _p19 = _p16._0._0._2;
									var _p18 = _p16._0._0._0;
									var _p17 = _p16._0._0._1;
									var add2 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p18, _1: _p17, _2: _p19, _3: _p16._0._0._3._1});
									var add1 = _user$project$Common_sequent$LabelForm(
										{ctor: '_Tuple4', _0: _p18, _1: _p17, _2: _p19, _3: _p16._0._0._3._0});
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.update(
												seq,
												{
													rightForm: A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: add1,
															_1: {
																ctor: '::',
																_0: add2,
																_1: {ctor: '[]'}
															}
														},
														_p16._1)
												}),
											_1: {ctor: '[]'}
										});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								priority: _user$project$Common_sequent$implLN,
								category: _user$project$Common_sequent$Rule4LeftFormula,
								rulename: 'L->1_int',
								rule: function (seq) {
									var _p20 = seq.leftForm;
									if (((_p20.ctor === '::') && (_p20._0._0.ctor === '_Tuple4')) && (_p20._0._0._3.ctor === 'Imply')) {
										var _p37 = _p20._0._0._3._1;
										var _p36 = _p20._0._0._3._0;
										var _p35 = _p20._1;
										var _p34 = _p20._0._0._1;
										var _p33 = _p20._0._0._0;
										var _p32 = _p20._0._0._2;
										var orig = function (_p21) {
											var _p22 = _p21;
											return _user$project$Common_sequent$LabelForm(
												{
													ctor: '_Tuple4',
													_0: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _p22._0, _1: _p22._1},
														_1: _p33
													},
													_1: _p34,
													_2: _p32,
													_3: A2(_user$project$Common_syntax$Imply, _p36, _p37)
												});
										};
										var add3 = function (_p23) {
											var _p24 = _p23;
											return _user$project$Common_sequent$RelAtom_int(
												{ctor: '_Tuple2', _0: _p34, _1: _p24._0});
										};
										var add2 = function (_p25) {
											var _p26 = _p25;
											return _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p33, _1: _p26._0, _2: _p32, _3: _p37});
										};
										var add1 = function (_p27) {
											var _p28 = _p27;
											return _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p33, _1: _p28._0, _2: _p32, _3: _p36});
										};
										var justlabel = function (wholeLabel2) {
											return _elm_community$list_extra$List_Extra$last(
												A2(_user$project$Util$difference, wholeLabel2, _p33));
										}(
											A2(
												_elm_lang$core$List$map,
												function (n) {
													return {
														ctor: '_Tuple2',
														_0: n,
														_1: {ctor: '[]'}
													};
												},
												_user$project$Common_sequent$wholeLabel(seq)));
										var _p29 = justlabel;
										if (_p29.ctor === 'Nothing') {
											return _elm_lang$core$Maybe$Nothing;
										} else {
											var _p31 = _p29._0._1;
											var _p30 = _p29._0._0;
											return (!(_elm_lang$core$Native_Utils.cmp(_p34, _p30) < 1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: orig(
																		{ctor: '_Tuple2', _0: _p30, _1: _p31}),
																	_1: {
																		ctor: '::',
																		_0: add2(
																			{ctor: '_Tuple2', _0: _p30, _1: _p31}),
																		_1: {ctor: '[]'}
																	}
																},
																_p35)
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: orig(
																			{ctor: '_Tuple2', _0: _p30, _1: _p31}),
																		_1: {ctor: '[]'}
																	},
																	_p35),
																rightForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add1(
																			{ctor: '_Tuple2', _0: _p30, _1: _p31}),
																		_1: {ctor: '[]'}
																	},
																	seq.rightForm),
																rightRel: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add3(
																			{ctor: '_Tuple2', _0: _p30, _1: _p31}),
																		_1: {ctor: '[]'}
																	},
																	seq.rightRel)
															}),
														_1: {ctor: '[]'}
													}
												});
										}
									} else {
										return _elm_lang$core$Maybe$Nothing;
									}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									priority: _user$project$Common_sequent$boxRN,
									category: _user$project$Common_sequent$Rule4RightFormula,
									rulename: 'R->1_int',
									rule: function (seq) {
										var _p38 = seq.rightForm;
										if (((_p38.ctor === '::') && (_p38._0._0.ctor === '_Tuple4')) && (_p38._0._0._3.ctor === 'Imply')) {
											var _p40 = _p38._0._0._0;
											var _p39 = _p38._0._0._2;
											var $new = _user$project$Common_sequent$freshLabel(seq);
											var add1 = _user$project$Common_sequent$RelAtom_int(
												{ctor: '_Tuple2', _0: _p38._0._0._1, _1: $new});
											var add2 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p40, _1: $new, _2: _p39, _3: _p38._0._0._3._0});
											var add3 = _user$project$Common_sequent$LabelForm(
												{ctor: '_Tuple4', _0: _p40, _1: $new, _2: _p39, _3: _p38._0._0._3._1});
											return _elm_lang$core$Maybe$Just(
												{
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.update(
														seq,
														{
															leftRel: _user$project$Common_sequent$sortRelAtom(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add1,
																		_1: {ctor: '[]'}
																	},
																	seq.leftRel)),
															leftForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add2,
																	_1: {ctor: '[]'}
																},
																seq.leftForm),
															rightForm: A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: add3,
																	_1: {ctor: '[]'}
																},
																_p38._1)
														}),
													_1: {ctor: '[]'}
												});
										} else {
											return _elm_lang$core$Maybe$Nothing;
										}
									}
								},
								_1: {
									ctor: '::',
									_0: {
										priority: _user$project$Common_sequent$impl2LN,
										category: _user$project$Common_sequent$Rule4LeftFormula,
										rulename: 'L->2',
										rule: function (seq) {
											var _p41 = seq.leftForm;
											if (((_p41.ctor === '::') && (_p41._0._0.ctor === '_Tuple4')) && (_p41._0._0._3.ctor === 'Imply2')) {
												var add1 = _user$project$Common_sequent$LabelForm(
													{
														ctor: '_Tuple4',
														_0: _p41._0._0._0,
														_1: _p41._0._0._1,
														_2: _p41._0._0._2,
														_3: A2(_user$project$Common_syntax$Imply, _p41._0._0._3._1, _p41._0._0._3._0)
													});
												return _elm_lang$core$Maybe$Just(
													{
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.update(
															seq,
															{
																leftForm: A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: add1,
																		_1: {ctor: '[]'}
																	},
																	_p41._1)
															}),
														_1: {ctor: '[]'}
													});
											} else {
												return _elm_lang$core$Maybe$Nothing;
											}
										}
									},
									_1: {
										ctor: '::',
										_0: {
											priority: _user$project$Common_sequent$impl2RN,
											category: _user$project$Common_sequent$Rule4RightFormula,
											rulename: 'R->2',
											rule: function (seq) {
												var _p42 = seq.rightForm;
												if (((_p42.ctor === '::') && (_p42._0._0.ctor === '_Tuple4')) && (_p42._0._0._3.ctor === 'Imply2')) {
													var add1 = _user$project$Common_sequent$LabelForm(
														{
															ctor: '_Tuple4',
															_0: _p42._0._0._0,
															_1: _p42._0._0._1,
															_2: _p42._0._0._2,
															_3: A2(_user$project$Common_syntax$Imply, _p42._0._0._3._1, _p42._0._0._3._0)
														});
													return _elm_lang$core$Maybe$Just(
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.update(
																seq,
																{
																	leftForm: A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: add1,
																			_1: {ctor: '[]'}
																		},
																		_p42._1)
																}),
															_1: {ctor: '[]'}
														});
												} else {
													return _elm_lang$core$Maybe$Nothing;
												}
											}
										},
										_1: {
											ctor: '::',
											_0: {
												priority: _user$project$Common_sequent$equiLN,
												category: _user$project$Common_sequent$Rule4LeftFormula,
												rulename: 'L<->',
												rule: function (seq) {
													var _p43 = seq.leftForm;
													if (((_p43.ctor === '::') && (_p43._0._0.ctor === '_Tuple4')) && (_p43._0._0._3.ctor === 'Iff')) {
														var _p45 = _p43._0._0._3._1;
														var _p44 = _p43._0._0._3._0;
														var add1 = _user$project$Common_sequent$LabelForm(
															{
																ctor: '_Tuple4',
																_0: _p43._0._0._0,
																_1: _p43._0._0._1,
																_2: _p43._0._0._2,
																_3: A2(
																	_user$project$Common_syntax$And,
																	A2(_user$project$Common_syntax$Imply, _p44, _p45),
																	A2(_user$project$Common_syntax$Imply, _p45, _p44))
															});
														return _elm_lang$core$Maybe$Just(
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.update(
																	seq,
																	{
																		leftForm: A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: add1,
																				_1: {ctor: '[]'}
																			},
																			_p43._1)
																	}),
																_1: {ctor: '[]'}
															});
													} else {
														return _elm_lang$core$Maybe$Nothing;
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													priority: _user$project$Common_sequent$equiRN,
													category: _user$project$Common_sequent$Rule4RightFormula,
													rulename: 'R<->',
													rule: function (seq) {
														var _p46 = seq.rightForm;
														if (((_p46.ctor === '::') && (_p46._0._0.ctor === '_Tuple4')) && (_p46._0._0._3.ctor === 'Iff')) {
															var _p48 = _p46._0._0._3._1;
															var _p47 = _p46._0._0._3._0;
															var add1 = _user$project$Common_sequent$LabelForm(
																{
																	ctor: '_Tuple4',
																	_0: _p46._0._0._0,
																	_1: _p46._0._0._1,
																	_2: _p46._0._0._2,
																	_3: A2(
																		_user$project$Common_syntax$And,
																		A2(_user$project$Common_syntax$Imply, _p47, _p48),
																		A2(_user$project$Common_syntax$Imply, _p48, _p47))
																});
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.update(
																		seq,
																		{
																			rightForm: A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: add1,
																					_1: {ctor: '[]'}
																				},
																				_p46._1)
																		}),
																	_1: {ctor: '[]'}
																});
														} else {
															return _elm_lang$core$Maybe$Nothing;
														}
													}
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Int_sequent_BiRel$axiomRule_int = {
	ctor: '::',
	_0: {
		priority: _user$project$Common_sequent$initN,
		category: _user$project$Common_sequent$Rule4Other,
		rulename: 'init_int',
		rule: function (seq) {
			var deleteBoxHistoty = function (_p49) {
				var _p50 = _p49;
				return _user$project$Common_sequent$LabelForm(
					{
						ctor: '_Tuple4',
						_0: {ctor: '[]'},
						_1: _p50._0._1,
						_2: _p50._0._2,
						_3: _p50._0._3
					});
			};
			return (A2(
				_user$project$Util$exists,
				seq.leftForm,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightForm,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(
								deleteBoxHistoty(x),
								deleteBoxHistoty(y));
						});
				}) || A2(
				_user$project$Util$exists,
				seq.leftRel,
				function (x) {
					return A2(
						_user$project$Util$exists,
						seq.rightRel,
						function (y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						});
				})) ? _elm_lang$core$Maybe$Just(
				{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
		}
	},
	_1: {
		ctor: '::',
		_0: {
			priority: _user$project$Common_sequent$initN,
			category: _user$project$Common_sequent$Rule4Other,
			rulename: 'Top',
			rule: function (seq) {
				return A2(
					_user$project$Util$exists,
					seq.rightForm,
					function (a) {
						var _p51 = a;
						if ((_p51._0.ctor === '_Tuple4') && (_p51._0._3.ctor === 'Top')) {
							return true;
						} else {
							return false;
						}
					}) ? _elm_lang$core$Maybe$Just(
					{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
			}
		},
		_1: {
			ctor: '::',
			_0: {
				priority: _user$project$Common_sequent$initN,
				category: _user$project$Common_sequent$Rule4Other,
				rulename: 'Bot',
				rule: function (seq) {
					return A2(
						_user$project$Util$exists,
						seq.leftForm,
						function (a) {
							var _p52 = a;
							if ((_p52._0.ctor === '_Tuple4') && (_p52._0._3.ctor === 'Bot')) {
								return true;
							} else {
								return false;
							}
						}) ? _elm_lang$core$Maybe$Just(
						{ctor: '[]'}) : _elm_lang$core$Maybe$Nothing;
				}
			},
			_1: {ctor: '[]'}
		}
	}
};

var _user$project$Parser_Formula$jsonRel2AMRelation = function (x) {
	return {ctor: '_Tuple3', _0: x.agent, _1: x.from, _2: x.to};
};
var _user$project$Parser_Formula$parseFormatError = F2(
	function (ms, stream) {
		var expectationSeparator = '\n  * ';
		var separator = '| ';
		var separatorOffset = _elm_lang$core$String$length(separator);
		var location = _elm_community$parser_combinators$Combine$currentLocation(stream);
		var lineNumberOffset = _elm_lang$core$Basics$floor(
			A2(
				_elm_lang$core$Basics$logBase,
				10,
				_elm_lang$core$Basics$toFloat(location.line))) + 1;
		var padding = (location.column + separatorOffset) + 2;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'Parse error around line:\n\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(location.line),
				A2(
					_elm_lang$core$Basics_ops['++'],
					separator,
					A2(
						_elm_lang$core$Basics_ops['++'],
						location.source,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A3(
									_elm_lang$core$String$padLeft,
									padding,
									_elm_lang$core$Native_Utils.chr(' '),
									'^'),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\nI expected one of the following:\n',
									A2(
										_elm_lang$core$Basics_ops['++'],
										expectationSeparator,
										A2(_elm_lang$core$String$join, expectationSeparator, ms)))))))));
	});
var _user$project$Parser_Formula$identifier_state_var = _elm_community$parser_combinators$Combine$lazy(
	function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$regex('[x-z0-9]+'),
			'identifier_state');
	});
var _user$project$Parser_Formula$identifier_state = _elm_community$parser_combinators$Combine$lazy(
	function (_p2) {
		var _p3 = _p2;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$regex('[e-g0-9]+'),
			'identifier_state');
	});
var _user$project$Parser_Formula$identifier_AModel = _elm_community$parser_combinators$Combine$lazy(
	function (_p4) {
		var _p5 = _p4;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return {
					am_name: x,
					am_domain: {ctor: '[]'},
					am_relation: {ctor: '[]'},
					am_pre: {ctor: '[]'}
				};
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[A-Za-z0-9]+'),
				'identifier_AModel'));
	});
var _user$project$Parser_Formula$mixAM2AM = function (st) {
	var ff = function (x) {
		var _p6 = x;
		if (_p6.ctor === 'AModelAt') {
			return _p6._0;
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					ff(_p6._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						';',
						A2(
							_elm_lang$core$Basics_ops['++'],
							ff(_p6._1),
							')'))));
		}
	};
	return {
		am_name: ff(st),
		am_domain: {ctor: '[]'},
		am_relation: {ctor: '[]'},
		am_pre: {ctor: '[]'}
	};
};
var _user$project$Parser_Formula$mixState2state = function (st) {
	var _p7 = st;
	switch (_p7.ctor) {
		case 'StateAt':
			return _p7._0;
		case 'StateVar':
			return _p7._0;
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Parser_Formula$mixState2state(_p7._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Parser_Formula$mixState2state(_p7._1),
							')'))));
	}
};
var _user$project$Parser_Formula$parseForm0_identifier_atom = A2(
	_elm_community$parser_combinators$Combine_ops['<$>'],
	_user$project$Common_syntax$Atom,
	A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine$regex('[_p-r][_p-r0-9]*'),
		'parseForm0_identifier_atom'));
var _user$project$Parser_Formula$parseForm0_identifier_formula = _elm_community$parser_combinators$Combine$lazy(
	function (_p8) {
		var _p9 = _p8;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Common_syntax$AnyFormula,
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[_A-D][_A-D0-9]*'),
				'parseForm0_identifier_formula'));
	});
var _user$project$Parser_Formula$parseAgent_identifire_agent = _elm_community$parser_combinators$Combine$lazy(
	function (_p10) {
		var _p11 = _p10;
		var name = _elm_community$parser_combinators$Combine$regex('[a-e][a0-9]*');
		return A2(_elm_community$parser_combinators$Combine_ops['<?>'], name, 'agent');
	});
var _user$project$Parser_Formula$parseForm0_boolForm = _elm_community$parser_combinators$Combine$lazy(
	function (_p12) {
		var _p13 = _p12;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$choice(
				{
					ctor: '::',
					_0: A2(
						_elm_community$parser_combinators$Combine_ops['<$'],
						_user$project$Common_syntax$Top,
						_elm_community$parser_combinators$Combine$string('top')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$parser_combinators$Combine_ops['<$'],
							_user$project$Common_syntax$Bot,
							_elm_community$parser_combinators$Combine$string('bot')),
						_1: {ctor: '[]'}
					}
				}),
			'parseForm0_boolForm');
	});
var _user$project$Parser_Formula$parse_pair_states = _elm_community$parser_combinators$Combine$lazy(
	function (_p14) {
		var _p15 = _p14;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (a, _p16) {
						var _p17 = _p16;
						return {ctor: '_Tuple3', _0: a, _1: _p17._0, _2: _p17._1};
					}),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAgent_identifire_agent)),
			_elm_community$parser_combinators$Combine$parens(
				A2(
					_elm_community$parser_combinators$Combine_ops['<*>'],
					A2(
						_elm_community$parser_combinators$Combine_ops['<*'],
						A2(
							_elm_community$parser_combinators$Combine_ops['<$>'],
							F2(
								function (x, y) {
									return {ctor: '_Tuple2', _0: x, _1: y};
								}),
							_user$project$Parser_Formula$identifier_state),
						_elm_community$parser_combinators$Combine$string(',')),
					_user$project$Parser_Formula$identifier_state_var)));
	});
var _user$project$Parser_Formula$parseAModel_amodel_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p18) {
		var _p19 = _p18;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (e, a) {
						return {ctor: '_Tuple2', _0: e, _1: a};
					}),
				A2(
					_elm_community$parser_combinators$Combine_ops['*>'],
					_elm_community$parser_combinators$Combine$string('Rel'),
					_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$identifier_AModel))),
			_user$project$Parser_Formula$parse_pair_states);
	});
var _user$project$Parser_Formula$AModelJSON = F5(
	function (a, b, c, d, e) {
		return {name: a, domain: b, relation: c, precondition: d, comment: e};
	});
var _user$project$Parser_Formula$AModelJSON_rel = F3(
	function (a, b, c) {
		return {agent: a, from: b, to: c};
	});
var _user$project$Parser_Formula$AModelJSON_pre = F2(
	function (a, b) {
		return {from: a, to: b};
	});
var _user$project$Parser_Formula$MixState = F2(
	function (a, b) {
		return {ctor: 'MixState', _0: a, _1: b};
	});
var _user$project$Parser_Formula$StateVar = function (a) {
	return {ctor: 'StateVar', _0: a};
};
var _user$project$Parser_Formula$identifier_State2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p20) {
		var _p21 = _p20;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return _user$project$Parser_Formula$StateVar(x);
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[x-z0-9]+'),
				'identifier_Stete2'));
	});
var _user$project$Parser_Formula$StateAt = function (a) {
	return {ctor: 'StateAt', _0: a};
};
var _user$project$Parser_Formula$identifier_State1 = _elm_community$parser_combinators$Combine$lazy(
	function (_p22) {
		var _p23 = _p22;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return _user$project$Parser_Formula$StateAt(x);
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[e-gx-z0-9]+'),
				'identifier_State1'));
	});
var _user$project$Parser_Formula$parseStateSelect = _elm_community$parser_combinators$Combine$lazy(
	function (_p24) {
		var _p25 = _p24;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseState),
			_user$project$Parser_Formula$identifier_State1);
	});
var _user$project$Parser_Formula$parseState = _elm_community$parser_combinators$Combine$lazy(
	function (_p26) {
		var _p27 = _p26;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Parser_Formula$MixState,
			_elm_community$parser_combinators$Combine$string(','));
		return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseStateSelect);
	});
var _user$project$Parser_Formula$MixAModel = F2(
	function (a, b) {
		return {ctor: 'MixAModel', _0: a, _1: b};
	});
var _user$project$Parser_Formula$AModelAt = function (a) {
	return {ctor: 'AModelAt', _0: a};
};
var _user$project$Parser_Formula$identifier_AModel1 = _elm_community$parser_combinators$Combine$lazy(
	function (_p28) {
		var _p29 = _p28;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Parser_Formula$AModelAt,
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[A-Za-z0-9]+'),
				'identifier_AModel1'));
	});
var _user$project$Parser_Formula$parseAModelSelect = _elm_community$parser_combinators$Combine$lazy(
	function (_p30) {
		var _p31 = _p30;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel2),
			_user$project$Parser_Formula$identifier_AModel1);
	});
var _user$project$Parser_Formula$parseAModel2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p32) {
		var _p33 = _p32;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Parser_Formula$MixAModel,
			_elm_community$parser_combinators$Combine$string(';'));
		return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAModelSelect);
	});
var _user$project$Parser_Formula$test21 = A2(_elm_community$parser_combinators$Combine$parse, _user$project$Parser_Formula$parseAModel2, '(((E1;E2);E3))');
var _user$project$Parser_Formula$parseAction1_identifier_actionModel = _elm_community$parser_combinators$Combine$lazy(
	function (_p34) {
		var _p35 = _p34;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					_user$project$Common_syntax$PointAModel,
					A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixAM2AM, _user$project$Parser_Formula$parseAModel2)),
				_elm_community$parser_combinators$Combine$string(',')),
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixState2state, _user$project$Parser_Formula$parseState),
				'parseAction1_identifier_actionModel'));
	});
var _user$project$Parser_Formula$parseAction2_anyAction = _elm_community$parser_combinators$Combine$lazy(
	function (_p36) {
		var _p37 = _p36;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAction1_identifier_actionModel),
			'parseAction2_anyAction_p');
	});
var _user$project$Parser_Formula$parseAction3_composition = _elm_community$parser_combinators$Combine$lazy(
	function (_p38) {
		var _p39 = _p38;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$ComposePoAM,
			_elm_community$parser_combinators$Combine$string(';'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAction2_anyAction),
			'parseAction4_cup');
	});
var _user$project$Parser_Formula$parseAction4_cup = _elm_community$parser_combinators$Combine$lazy(
	function (_p40) {
		var _p41 = _p40;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Cup,
			_elm_community$parser_combinators$Combine$string('U'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAction3_composition),
			'parseAction4_cup');
	});
var _user$project$Parser_Formula$parseForm0_identifier_precon = _elm_community$parser_combinators$Combine$lazy(
	function (_p42) {
		var _p43 = _p42;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					_user$project$Common_syntax$Precon,
					_elm_community$parser_combinators$Combine$string('Pre')),
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixAM2AM, _user$project$Parser_Formula$parseAModel2)),
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixState2state, _user$project$Parser_Formula$parseState),
				'parseForm0_identifier_atom'));
	});
var _user$project$Parser_Formula$parseForm_atom = _elm_community$parser_combinators$Combine$lazy(
	function (_p44) {
		var _p45 = _p44;
		return _elm_community$parser_combinators$Combine$choice(
			{
				ctor: '::',
				_0: _user$project$Parser_Formula$parseForm0_boolForm,
				_1: {
					ctor: '::',
					_0: _user$project$Parser_Formula$parseForm10_bigWedgep,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$parseForm10_bigVee,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$parseForm8_announce_p,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$parseForm9_announce2_p,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$parseForm11_action_p,
									_1: {
										ctor: '::',
										_0: _user$project$Parser_Formula$parseForm0_identifier_precon,
										_1: {
											ctor: '::',
											_0: _user$project$Parser_Formula$parseForm0_identifier_formula,
											_1: {
												ctor: '::',
												_0: _user$project$Parser_Formula$parseForm0_identifier_atom,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Parser_Formula$parseForm10_bigVee = _elm_community$parser_combinators$Combine$lazy(
	function (_p46) {
		var _p47 = _p46;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					F2(
						function (mo, f) {
							return A3(
								_user$project$Common_syntax$Bigwedge,
								{ctor: '[]'},
								mo,
								f);
						}),
					_elm_community$parser_combinators$Combine$string('vv')),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel_amodel_p)),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$parseForm2_unary = _elm_community$parser_combinators$Combine$lazy(
	function (_p48) {
		var _p49 = _p48;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$choice(
				{
					ctor: '::',
					_0: _user$project$Parser_Formula$knowp,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$knowifp,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$boxp,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$diap,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$notp,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_user$project$Parser_Formula$parseForm1_term);
	});
var _user$project$Parser_Formula$boxp = _elm_community$parser_combinators$Combine$lazy(
	function (_p50) {
		var _p51 = _p50;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					_user$project$Common_syntax$Box,
					_elm_community$parser_combinators$Combine$string('#')),
				_user$project$Parser_Formula$parseAgent_identifire_agent),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$diap = _elm_community$parser_combinators$Combine$lazy(
	function (_p52) {
		var _p53 = _p52;
		var unaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$Dia, x, y);
				}),
			_elm_community$parser_combinators$Combine$string('$'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(_elm_community$parser_combinators$Combine_ops['<*>'], unaryOp, _user$project$Parser_Formula$parseAgent_identifire_agent),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$knowifp = _elm_community$parser_combinators$Combine$lazy(
	function (_p54) {
		var _p55 = _p54;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$'],
				function (_p56) {
					var _p57 = _p56;
					var _p59 = _p57._1;
					var _p58 = _p57._0;
					return A2(
						_user$project$Common_syntax$Or,
						A2(_user$project$Common_syntax$Box, _p58, _p59),
						A2(
							_user$project$Common_syntax$Box,
							_p58,
							_user$project$Common_syntax$Not(_p59)));
				},
				_elm_community$parser_combinators$Combine$string('knows_if')),
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$knowp2));
	});
var _user$project$Parser_Formula$knowp2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p60) {
		var _p61 = _p60;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F2(
						function (x, y) {
							return {ctor: '_Tuple2', _0: x, _1: y};
						}),
					_user$project$Parser_Formula$parseAgent_identifire_agent),
				_elm_community$parser_combinators$Combine$string(',')),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$knowp = _elm_community$parser_combinators$Combine$lazy(
	function (_p62) {
		var _p63 = _p62;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$'],
				function (_p64) {
					var _p65 = _p64;
					return A2(_user$project$Common_syntax$Box, _p65._0, _p65._1);
				},
				_elm_community$parser_combinators$Combine$string('knows')),
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$knowp2));
	});
var _user$project$Parser_Formula$notp = _elm_community$parser_combinators$Combine$lazy(
	function (_p66) {
		var _p67 = _p66;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Common_syntax$Not,
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$string('~'),
				_user$project$Parser_Formula$parseForm2_unary));
	});
var _user$project$Parser_Formula$parseForm1_term = _elm_community$parser_combinators$Combine$lazy(
	function (_p68) {
		var _p69 = _p68;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseForm7_expr),
			_user$project$Parser_Formula$parseForm_atom);
	});
var _user$project$Parser_Formula$parseForm7_expr = _elm_community$parser_combinators$Combine$lazy(
	function (_p70) {
		var _p71 = _p70;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Iff,
			_elm_community$parser_combinators$Combine$string('<->'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p72) {
				var _p73 = _p72;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm6_impl2);
			});
	});
var _user$project$Parser_Formula$parseForm6_impl2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p74) {
		var _p75 = _p74;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Imply2,
			_elm_community$parser_combinators$Combine$string('<-'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p76) {
				var _p77 = _p76;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm5_impl);
			});
	});
var _user$project$Parser_Formula$parseForm5_impl = _elm_community$parser_combinators$Combine$lazy(
	function (_p78) {
		var _p79 = _p78;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Imply,
			_elm_community$parser_combinators$Combine$string('->'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p80) {
				var _p81 = _p80;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm4_or);
			});
	});
var _user$project$Parser_Formula$parseForm4_or = _elm_community$parser_combinators$Combine$lazy(
	function (_p82) {
		var _p83 = _p82;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Or,
			_elm_community$parser_combinators$Combine$string('v'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p84) {
				var _p85 = _p84;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm3_and);
			});
	});
var _user$project$Parser_Formula$parseForm3_and = _elm_community$parser_combinators$Combine$lazy(
	function (_p86) {
		var _p87 = _p86;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$And,
			_elm_community$parser_combinators$Combine$string('&'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p88) {
				var _p89 = _p88;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm2_unary);
			});
	});
var _user$project$Parser_Formula$parseForm10_bigWedgep = _elm_community$parser_combinators$Combine$lazy(
	function (_p90) {
		var _p91 = _p90;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					F2(
						function (mo, f) {
							return A3(
								_user$project$Common_syntax$Bigwedge,
								{ctor: '[]'},
								mo,
								f);
						}),
					_elm_community$parser_combinators$Combine$string('&&')),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel_amodel_p)),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$parseForm11_action_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p92) {
		var _p93 = _p92;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$BoxAction,
				_elm_community$parser_combinators$Combine$brackets(_user$project$Parser_Formula$parseAction4_cup)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm11_action_p'));
	});
var _user$project$Parser_Formula$parseForm8_announce_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p94) {
		var _p95 = _p94;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$Announce,
				_elm_community$parser_combinators$Combine$brackets(_user$project$Parser_Formula$parseForm7_expr)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm8_announce_p'));
	});
var _user$project$Parser_Formula$parseForm9_announce2_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p96) {
		var _p97 = _p96;
		var brackets2 = A2(
			_elm_community$parser_combinators$Combine$between,
			_elm_community$parser_combinators$Combine$string('<'),
			_elm_community$parser_combinators$Combine$string('>'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$Announce2,
				brackets2(_user$project$Parser_Formula$parseForm7_expr)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm9_announce2_p'));
	});
var _user$project$Parser_Formula$programFormula = _elm_community$parser_combinators$Combine$lazy(
	function (_p98) {
		var _p99 = _p98;
		return A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm7_expr, 'error in parseForm7_expression');
	});
var _user$project$Parser_Formula$parseFormula2 = function (s) {
	var ss = _user$project$Util$removeWhiteSpaceFromString(s);
	return A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['<*'], _user$project$Parser_Formula$programFormula, _elm_community$parser_combinators$Combine$end),
		ss);
};
var _user$project$Parser_Formula$test02 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))A');
var _user$project$Parser_Formula$test03 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))[(E,x)]A');
var _user$project$Parser_Formula$test04 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#aA');
var _user$project$Parser_Formula$test05 = _user$project$Parser_Formula$parseFormula2('[(E,e)]A');
var _user$project$Parser_Formula$test06 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#a[(E,e)]A');
var _user$project$Parser_Formula$test07 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#a[(E,x1)]A');
var _user$project$Parser_Formula$test08 = _user$project$Parser_Formula$parseFormula2('[(E,e)]#aA <->(Pre(E)(e)->&&(~(E)(a)(e,x))#a[(E,x)]A)');
var _user$project$Parser_Formula$parseFormula = function (s) {
	var ss = _user$project$Util$removeWhiteSpaceFromString(s);
	var _p100 = A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['<*'], _user$project$Parser_Formula$programFormula, _elm_community$parser_combinators$Combine$end),
		ss);
	if (_p100.ctor === 'Ok') {
		return _elm_lang$core$Result$Ok(_p100._0._2);
	} else {
		return _elm_lang$core$Result$Err(
			A2(_user$project$Parser_Formula$parseFormatError, _p100._0._2, _p100._0._1));
	}
};
var _user$project$Parser_Formula$test14 = _user$project$Parser_Formula$parseFormula('[((Skip;Skip),(e1,e1))]Pre(Skip)(e1)');
var _user$project$Parser_Formula$test15 = _user$project$Parser_Formula$parseFormula('[((Skip;Skip),(e1,e1))]top');
var _user$project$Parser_Formula$test11 = _user$project$Parser_Formula$parseFormula('Pre(((Skip;Ski);Crash))(((e2,e1),e3))');
var _user$project$Parser_Formula$test13 = _user$project$Parser_Formula$parseFormula('Pre((Crash;(Skip;Ski)))((e3,(e2,e1)))');
var _user$project$Parser_Formula$test12 = _user$project$Parser_Formula$parseFormula('Pre(Skip)(((e2,e1),e3))');
var _user$project$Parser_Formula$test80 = _user$project$Parser_Formula$parseFormula('Pre((Skip;Skip))((e2,e1))');
var _user$project$Parser_Formula$test91 = _user$project$Parser_Formula$parseFormula('Pre(Skip)(e1)');
var _user$project$Parser_Formula$test92 = _user$project$Parser_Formula$parseFormula('[(Skip,e1)]Pre(Skip)(e1)');
var _user$project$Parser_Formula$test0 = _user$project$Parser_Formula$parseFormula('[p1 & [q]p2]r');
var _user$project$Parser_Formula$test1 = _user$project$Parser_Formula$parseFormula('(A -> (B -> C)) -> ((A -> B)->(A -> C))');
var _user$project$Parser_Formula$test2 = _user$project$Parser_Formula$parseFormula('(p1 -> p9) v (p8 & ~top)');
var _user$project$Parser_Formula$test3 = _user$project$Parser_Formula$parseFormula('p1 & p9 -> (p8 <-> ~top)');
var _user$project$Parser_Formula$test4 = _user$project$Parser_Formula$parseFormula('#a~#a~#ap4');
var _user$project$Parser_Formula$test5 = _user$project$Parser_Formula$parseFormula('~#a1 (p1 v ~p4)');
var _user$project$Parser_Formula$test6 = _user$project$Parser_Formula$parseFormula('~#a~#b~ (p1 v ~p4)');
var _user$project$Parser_Formula$test7 = _user$project$Parser_Formula$parseFormula('[~#a<#ap5 v ~p8>p1]p2');
var _user$project$Parser_Formula$test8 = _user$project$Parser_Formula$parseFormula('#b8p');
var _user$project$Parser_Formula$test9 = _user$project$Parser_Formula$parseFormula('[(E,e)]p');
var _user$project$Parser_Formula$test10 = _user$project$Parser_Formula$parseFormula('[(E1,e1)U(E2,e2)]p');
var _user$project$Parser_Formula$testall = A2(
	_user$project$Util$forall,
	{
		ctor: '::',
		_0: _user$project$Parser_Formula$test2,
		_1: {
			ctor: '::',
			_0: _user$project$Parser_Formula$test3,
			_1: {
				ctor: '::',
				_0: _user$project$Parser_Formula$test4,
				_1: {
					ctor: '::',
					_0: _user$project$Parser_Formula$test5,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$test6,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$test7,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$test8,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$test9,
									_1: {
										ctor: '::',
										_0: _user$project$Parser_Formula$test10,
										_1: {
											ctor: '::',
											_0: _user$project$Parser_Formula$test11,
											_1: {
												ctor: '::',
												_0: _user$project$Parser_Formula$test12,
												_1: {
													ctor: '::',
													_0: _user$project$Parser_Formula$test91,
													_1: {
														ctor: '::',
														_0: _user$project$Parser_Formula$test92,
														_1: {
															ctor: '::',
															_0: _user$project$Parser_Formula$test80,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	function (x) {
		var _p101 = x;
		if (_p101.ctor === 'Ok') {
			return true;
		} else {
			return false;
		}
	});
var _user$project$Parser_Formula$test111 = _user$project$Parser_Formula$parseFormula('knows(a,p)');
var _user$project$Parser_Formula$test112 = _user$project$Parser_Formula$parseFormula('knows_if(a,p)');
var _user$project$Parser_Formula$jsonPre2precondition = function (pre) {
	return function (x) {
		var _p102 = x;
		if (_p102.ctor === 'Ok') {
			return {ctor: '_Tuple2', _0: _p102._0._0, _1: _p102._0._1};
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Parser_Formula',
				{
					start: {line: 441, column: 38},
					end: {line: 443, column: 82}
				},
				_p102)('error in jsonPre2precondition');
		}
	}(
		A2(
			_user$project$Applicative_ops['@>'],
			_user$project$Parser_Formula$parseFormula(pre.to),
			function (x) {
				return {ctor: '_Tuple2', _0: pre.from, _1: x};
			}));
};
var _user$project$Parser_Formula$object2listOfActions = function (actionJSON) {
	return {
		am_name: actionJSON.name,
		am_domain: actionJSON.domain,
		am_relation: A2(_elm_lang$core$List$map, _user$project$Parser_Formula$jsonRel2AMRelation, actionJSON.relation),
		am_pre: A2(_elm_lang$core$List$map, _user$project$Parser_Formula$jsonPre2precondition, actionJSON.precondition)
	};
};

var _user$project$ElmFunctions_sequent$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$ElmFunctions_sequent$testAModels = {
	ctor: '::',
	_0: _user$project$Common_syntax$reada,
	_1: {
		ctor: '::',
		_0: _user$project$Common_syntax$skip,
		_1: {ctor: '[]'}
	}
};
var _user$project$ElmFunctions_sequent$decodeJSON4action_pre = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Parser_Formula$AModelJSON_pre,
	A2(_elm_lang$core$Json_Decode$field, 'from', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'to', _elm_lang$core$Json_Decode$string));
var _user$project$ElmFunctions_sequent$decodeJSON4action_rel = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Parser_Formula$AModelJSON_rel,
	A2(_elm_lang$core$Json_Decode$field, 'agent', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'from', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'to', _elm_lang$core$Json_Decode$string));
var _user$project$ElmFunctions_sequent$decodeJSON4action = A6(
	_elm_lang$core$Json_Decode$map5,
	_user$project$Parser_Formula$AModelJSON,
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'domain',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'relation',
		_elm_lang$core$Json_Decode$list(_user$project$ElmFunctions_sequent$decodeJSON4action_rel)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'precondition',
		_elm_lang$core$Json_Decode$list(_user$project$ElmFunctions_sequent$decodeJSON4action_pre)),
	A2(_elm_lang$core$Json_Decode$field, 'comment', _elm_lang$core$Json_Decode$string));
var _user$project$ElmFunctions_sequent$modal_system = function (json) {
	var modal_system = function (x) {
		var _p0 = x;
		switch (_p0.valueOf()) {
			case 'T':
				return _user$project$Common_sequent$ruleT;
			case 'D':
				return _user$project$Common_sequent$ruleD;
			case 'B':
				return _user$project$Common_sequent$ruleB;
			case '4':
				return _user$project$Common_sequent$rule4;
			case '5':
				return _user$project$Common_sequent$rule5;
			default:
				return {ctor: '[]'};
		}
	};
	var modalSystemString = _elm_lang$core$String$toList(json.modalSystem);
	return _user$project$Util$nub(
		A2(_elm_lang$core$List$concatMap, modal_system, modalSystemString));
};
var _user$project$ElmFunctions_sequent$checkIncludingConnective = F2(
	function (json, f) {
		var gg = function (json) {
			var _p1 = json.elSystem;
			switch (_p1) {
				case 'EL':
					return '#';
				case 'PAL':
					return '[';
				case 'IntPAL':
					return '<';
				case 'DEL':
					return '[';
				default:
					return '';
			}
		};
		return A2(
			_elm_lang$core$String$contains,
			gg(json),
			A2(_user$project$Common_syntax$outputForm, 0, f)) ? _elm_lang$core$Maybe$Just(f) : _elm_lang$core$Maybe$Nothing;
	});
var _user$project$ElmFunctions_sequent$json2formula = function (json) {
	var num4act = json.randomSeed.maxNumberOfActions;
	var num4agent = json.randomSeed.maxNumberOfAgents;
	var gg = function (json) {
		var _p2 = json.elSystem;
		switch (_p2) {
			case 'EL':
				return _user$project$Random_formula$connectiveList4EL(num4agent);
			case 'PAL':
				return _user$project$Random_formula$connectiveList4PAL(num4agent);
			case 'DEL':
				return A2(_user$project$Random_formula$connectiveList4DEL, num4act, num4agent);
			default:
				return _user$project$Random_formula$connectiveList4EL(num4agent);
		}
	};
	return _user$project$Util$fst(
		A3(
			_user$project$Random_formula$createRandomFormula,
			json.randomSeed.maxLengthOfRandomFormula,
			gg(json),
			_elm_lang$core$Random$initialSeed(json.randomSeed.randomNumber)));
};
var _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON = function (json) {
	return A2(
		_user$project$ElmFunctions_sequent$retryForConnective,
		json,
		A2(
			_user$project$ElmFunctions_sequent$checkIncludingConnective,
			json,
			_user$project$ElmFunctions_sequent$json2formula(json)));
};
var _user$project$ElmFunctions_sequent$retryForConnective = F2(
	function (json, mf) {
		var json2 = _elm_lang$core$Native_Utils.update(
			json,
			{
				randomSeed: {randomNumber: json.randomSeed.randomNumber + 1, maxLengthOfRandomFormula: json.randomSeed.maxLengthOfRandomFormula, maxNumberOfAgents: json.randomSeed.maxNumberOfAgents, maxNumberOfActions: json.randomSeed.maxNumberOfActions}
			});
		var _p3 = mf;
		if (_p3.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(_p3._0);
		} else {
			return _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON(json2);
		}
	});
var _user$project$ElmFunctions_sequent$basicRules_int = A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$axiomRule, _user$project$Int_sequent_BiRel$ruleInt2);
var _user$project$ElmFunctions_sequent$basicRules = A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$axiomRule, _user$project$Common_sequent$ruleClassic);
var _user$project$ElmFunctions_sequent$proofSystemfromJSON = function (json) {
	var maxNum = json.maxNumberOfExpressionsAppearingInANode;
	var _p4 = json.elSystem;
	switch (_p4) {
		case 'EL':
			return A2(_elm_lang$core$Basics_ops['++'], _user$project$ElmFunctions_sequent$basicRules, _user$project$Common_sequent$ruleK);
		case 'PAL':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$ElmFunctions_sequent$basicRules,
				A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleK, _user$project$PAL_sequent$ruleGPAL));
		case 'IntPAL':
			return _user$project$ElmFunctions_sequent$basicRules_int;
		case 'DEL':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$ElmFunctions_sequent$basicRules,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Common_sequent$ruleK,
					A2(_elm_lang$core$Basics_ops['++'], _user$project$DEL_sequent$ruleK_DEL, _user$project$DEL_sequent$ruleDEL)));
		default:
			return A2(_elm_lang$core$Basics_ops['++'], _user$project$ElmFunctions_sequent$basicRules, _user$project$Common_sequent$ruleK);
	}
};
var _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON_provable = function (json) {
	var json2 = _elm_lang$core$Native_Utils.update(
		json,
		{
			randomSeed: {randomNumber: json.randomSeed.randomNumber + 1, maxLengthOfRandomFormula: json.randomSeed.maxLengthOfRandomFormula, maxNumberOfAgents: json.randomSeed.maxNumberOfAgents, maxNumberOfActions: json.randomSeed.maxNumberOfActions}
		});
	return function (p) {
		return function (sy) {
			return function (pr) {
				return _elm_lang$core$Native_Utils.eq(
					_user$project$Common_sequent$isProvable(pr),
					1) ? _elm_lang$core$Maybe$Just(p) : _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON_provable(json2);
			}(
				A3(
					_user$project$Common_sequent$makeProofTree,
					15,
					sy,
					_user$project$Common_sequent$formula2seq(p)));
		}(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$ElmFunctions_sequent$modal_system(json),
				_user$project$ElmFunctions_sequent$proofSystemfromJSON(json)));
	}(
		A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$Common_syntax$Top,
			_user$project$ElmFunctions_sequent$createRandomFormulaFromJSON(json)));
};
var _user$project$ElmFunctions_sequent$loadMap = _elm_lang$core$Native_Platform.outgoingPort(
	'loadMap',
	function (v) {
		return null;
	});
var _user$project$ElmFunctions_sequent$input4prove = _elm_lang$core$Native_Platform.incomingPort('input4prove', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_sequent$input4randomFormula = _elm_lang$core$Native_Platform.incomingPort('input4randomFormula', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_sequent$input4randomFormula_provable = _elm_lang$core$Native_Platform.incomingPort('input4randomFormula_provable', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_sequent$input4syntaxCheck = _elm_lang$core$Native_Platform.incomingPort('input4syntaxCheck', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_sequent$output4prove = _elm_lang$core$Native_Platform.outgoingPort(
	'output4prove',
	function (v) {
		return {
			formula: v.formula,
			nodes: _elm_lang$core$Native_List.toArray(v.nodes).map(
				function (v) {
					return {id: v.id, label: v.label, color: v.color};
				}),
			edges: _elm_lang$core$Native_List.toArray(v.edges).map(
				function (v) {
					return {id: v.id, from: v.from, to: v.to, label: v.label};
				}),
			provable: v.provable,
			system: v.system
		};
	});
var _user$project$ElmFunctions_sequent$output4randomFormula = _elm_lang$core$Native_Platform.outgoingPort(
	'output4randomFormula',
	function (v) {
		return {
			formula: v.formula,
			nodes: _elm_lang$core$Native_List.toArray(v.nodes).map(
				function (v) {
					return {id: v.id, label: v.label, color: v.color};
				}),
			edges: _elm_lang$core$Native_List.toArray(v.edges).map(
				function (v) {
					return {id: v.id, from: v.from, to: v.to, label: v.label};
				}),
			provable: v.provable,
			system: v.system
		};
	});
var _user$project$ElmFunctions_sequent$output4randomFormula_provable = _elm_lang$core$Native_Platform.outgoingPort(
	'output4randomFormula_provable',
	function (v) {
		return {
			formula: v.formula,
			nodes: _elm_lang$core$Native_List.toArray(v.nodes).map(
				function (v) {
					return {id: v.id, label: v.label, color: v.color};
				}),
			edges: _elm_lang$core$Native_List.toArray(v.edges).map(
				function (v) {
					return {id: v.id, from: v.from, to: v.to, label: v.label};
				}),
			provable: v.provable,
			system: v.system
		};
	});
var _user$project$ElmFunctions_sequent$output4syntaxCheck = _elm_lang$core$Native_Platform.outgoingPort(
	'output4syntaxCheck',
	function (v) {
		return {
			formula: v.formula,
			nodes: _elm_lang$core$Native_List.toArray(v.nodes).map(
				function (v) {
					return {id: v.id, label: v.label, color: v.color};
				}),
			edges: _elm_lang$core$Native_List.toArray(v.edges).map(
				function (v) {
					return {id: v.id, from: v.from, to: v.to, label: v.label};
				}),
			provable: v.provable,
			system: v.system
		};
	});
var _user$project$ElmFunctions_sequent$JSON = F6(
	function (a, b, c, d, e, f) {
		return {formula: a, action: b, modalSystem: c, elSystem: d, maxNumberOfExpressionsAppearingInANode: e, randomSeed: f};
	});
var _user$project$ElmFunctions_sequent$RandomSeed = F4(
	function (a, b, c, d) {
		return {randomNumber: a, maxLengthOfRandomFormula: b, maxNumberOfAgents: c, maxNumberOfActions: d};
	});
var _user$project$ElmFunctions_sequent$decodeJSON4randomFormula = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$ElmFunctions_sequent$RandomSeed,
	A2(_elm_lang$core$Json_Decode$field, 'randomNumber', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'maxLengthOfRandomFormula', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'maxNumberOfAgents', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'maxNumberOfActions', _elm_lang$core$Json_Decode$int));
var _user$project$ElmFunctions_sequent$decodeJSON4prove = A7(
	_elm_lang$core$Json_Decode$map6,
	_user$project$ElmFunctions_sequent$JSON,
	A2(_elm_lang$core$Json_Decode$field, 'formula', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'action',
		_elm_lang$core$Json_Decode$list(_user$project$ElmFunctions_sequent$decodeJSON4action)),
	A2(_elm_lang$core$Json_Decode$field, 'modalSystem', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'elSystem', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'maxNumberOfExpressionsAppearingInANode', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'randomSeed', _user$project$ElmFunctions_sequent$decodeJSON4randomFormula));
var _user$project$ElmFunctions_sequent$update = F2(
	function (message, model) {
		var _p5 = message;
		switch (_p5.ctor) {
			case 'JsonFromJS_prove':
				var object = function () {
					var _p6 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$ElmFunctions_sequent$decodeJSON4prove, _p5._0);
					if (_p6.ctor === 'Ok') {
						return _p6._0;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ElmFunctions_sequent',
							{
								start: {line: 263, column: 26},
								end: {line: 265, column: 107}
							},
							_p6)(
							A2(_elm_lang$core$Basics_ops['++'], 'error (1) in ElmFunctions_sequent.elm: ', _p6._0));
					}
				}();
				var modal_system = _user$project$Common_sequent$proofSystem(object.modalSystem);
				var limitNum = object.maxNumberOfExpressionsAppearingInANode;
				var el_system = function () {
					var _p8 = object.elSystem;
					switch (_p8) {
						case 'EL':
							return A2(_elm_lang$core$Basics_ops['++'], _user$project$ElmFunctions_sequent$basicRules, _user$project$Common_sequent$ruleK);
						case 'PAL':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmFunctions_sequent$basicRules,
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Common_sequent$ruleK, _user$project$PAL_sequent$ruleGPAL));
						case 'IntPAL':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmFunctions_sequent$basicRules_int,
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Int_sequent$ruleK_int, _user$project$IntPAL_sequent$ruleGIntPAL));
						case 'DEL':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$ElmFunctions_sequent$basicRules,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$DEL_sequent$ruleK_DEL,
									A2(_elm_lang$core$Basics_ops['++'], _user$project$DEL_sequent$ruleDEL, _user$project$DEL_sequent$ruleAModel)));
						default:
							return {ctor: '[]'};
					}
				}();
				var maybeFormula_parsed = _user$project$Parser_Formula$parseFormula(object.formula);
				var maybeFormula2_syntaxChecked = function () {
					var _p9 = maybeFormula_parsed;
					if (_p9.ctor === 'Err') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p12 = _p9._0;
						var _p10 = object.elSystem;
						switch (_p10) {
							case 'EL':
								return _user$project$Common_syntax$isELformula(_p12) ? _elm_lang$core$Maybe$Just(_p12) : _elm_lang$core$Maybe$Nothing;
							case 'PAL':
								return _user$project$Common_syntax$isPALformula(_p12) ? _elm_lang$core$Maybe$Just(_p12) : _elm_lang$core$Maybe$Nothing;
							case 'IntPAL':
								return _user$project$Common_syntax$isPALformula(_p12) ? _elm_lang$core$Maybe$Just(_p12) : _elm_lang$core$Maybe$Nothing;
							case 'DEL':
								return _user$project$Common_syntax$isDELformula(_p12) ? _elm_lang$core$Maybe$Just(_p12) : _elm_lang$core$Maybe$Nothing;
							default:
								return _elm_lang$core$Native_Utils.crashCase(
									'ElmFunctions_sequent',
									{
										start: {line: 278, column: 27},
										end: {line: 283, column: 87}
									},
									_p10)('error (3) in ElmFunctions_sequent.elm: ');
						}
					}
				}();
				var actionList = A2(_elm_lang$core$List$map, _user$project$Parser_Formula$object2listOfActions, object.action);
				var maybeFormula3_AModelChanged = function (listOfAM) {
					return function (func) {
						return A2(_elm_lang$core$Maybe$map, func, maybeFormula2_syntaxChecked);
					}(
						function (x) {
							return A2(_user$project$DEL_sequent$substitution4AModel4list, x, listOfAM);
						});
				}(actionList);
				var newModel = function () {
					var _p13 = maybeFormula3_AModelChanged;
					if (_p13.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								nodes: {ctor: '[]'},
								edges: {ctor: '[]'}
							});
					} else {
						var _p14 = _p13._0;
						var bottom_sequent = _user$project$Common_sequent$formula2seq(_p14);
						var graph = A3(
							_user$project$Common_sequent$drawProof,
							limitNum,
							A2(_elm_lang$core$Basics_ops['++'], modal_system, el_system),
							bottom_sequent);
						return {
							formula: A2(_user$project$Common_syntax$outputForm, 0, _p14),
							nodes: graph.nodes,
							edges: graph.edges,
							provable: graph.provable,
							system: A2(
								_elm_lang$core$Basics_ops['++'],
								'  (',
								A2(
									_elm_lang$core$Basics_ops['++'],
									object.elSystem,
									A2(
										_elm_lang$core$Basics_ops['++'],
										', ',
										A2(_elm_lang$core$Basics_ops['++'], object.modalSystem, ')'))))
						};
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					newModel,
					{
						ctor: '::',
						_0: _user$project$ElmFunctions_sequent$output4prove(newModel),
						_1: {ctor: '[]'}
					});
			case 'JsonFromJS2_randomFormula':
				var decodedJSON = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$ElmFunctions_sequent$decodeJSON4prove, _p5._0);
				var decodedJSON2 = function () {
					var _p15 = decodedJSON;
					if (_p15.ctor === 'Ok') {
						return _p15._0;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ElmFunctions_sequent',
							{
								start: {line: 308, column: 28},
								end: {line: 310, column: 88}
							},
							_p15)(
							A2(_elm_lang$core$Basics_ops['++'], 'error in update (2):', _p15._0));
					}
				}();
				var maybeFormula = _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON(decodedJSON2);
				var newModel = function () {
					var _p17 = maybeFormula;
					if (_p17.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								nodes: {ctor: '[]'},
								edges: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								formula: A2(_user$project$Common_syntax$outputForm, 0, _p17._0)
							});
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					newModel,
					{
						ctor: '::',
						_0: _user$project$ElmFunctions_sequent$output4randomFormula(newModel),
						_1: {ctor: '[]'}
					});
			case 'JsonFromJS3_randomFormulaProvable':
				var decodedJSON = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$ElmFunctions_sequent$decodeJSON4prove, _p5._0);
				var decodedJSON2 = function () {
					var _p18 = decodedJSON;
					if (_p18.ctor === 'Ok') {
						return _p18._0;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ElmFunctions_sequent',
							{
								start: {line: 322, column: 28},
								end: {line: 324, column: 88}
							},
							_p18)(
							A2(_elm_lang$core$Basics_ops['++'], 'error in update (3):', _p18._0));
					}
				}();
				var maybeFormula = _user$project$ElmFunctions_sequent$createRandomFormulaFromJSON_provable(decodedJSON2);
				var newModel = function () {
					var _p20 = maybeFormula;
					if (_p20.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								nodes: {ctor: '[]'},
								edges: {ctor: '[]'}
							});
					} else {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								formula: A2(_user$project$Common_syntax$outputForm, 0, _p20._0)
							});
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					newModel,
					{
						ctor: '::',
						_0: _user$project$ElmFunctions_sequent$output4randomFormula_provable(newModel),
						_1: {ctor: '[]'}
					});
			default:
				var decodedJSON = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$ElmFunctions_sequent$decodeJSON4prove, _p5._0);
				var decodedJSON2 = function () {
					var _p21 = decodedJSON;
					if (_p21.ctor === 'Ok') {
						return _p21._0;
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'ElmFunctions_sequent',
							{
								start: {line: 336, column: 28},
								end: {line: 338, column: 88}
							},
							_p21)(
							A2(_elm_lang$core$Basics_ops['++'], 'error in update (4):', _p21._0));
					}
				}();
				var maybeFormula = _user$project$Parser_Formula$parseFormula(decodedJSON2.formula);
				var newModel = function () {
					var _p23 = maybeFormula;
					if (_p23.ctor === 'Ok') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								formula: A2(_user$project$Common_syntax$outputForm, 0, _p23._0)
							});
					} else {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								formula: A2(_elm_lang$core$Basics_ops['++'], 'parseError in ', _p23._0)
							});
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					newModel,
					{
						ctor: '::',
						_0: _user$project$ElmFunctions_sequent$output4syntaxCheck(newModel),
						_1: {ctor: '[]'}
					});
		}
	});
var _user$project$ElmFunctions_sequent$Node = F3(
	function (a, b, c) {
		return {id: a, label: b, color: c};
	});
var _user$project$ElmFunctions_sequent$Edge = F4(
	function (a, b, c, d) {
		return {id: a, from: b, to: c, label: d};
	});
var _user$project$ElmFunctions_sequent$Model = F5(
	function (a, b, c, d, e) {
		return {formula: a, nodes: b, edges: c, provable: d, system: e};
	});
var _user$project$ElmFunctions_sequent$initModel = {
	ctor: '_Tuple2',
	_0: A5(
		_user$project$ElmFunctions_sequent$Model,
		'',
		{ctor: '[]'},
		{ctor: '[]'},
		0,
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$ElmFunctions_sequent$JsonFromJS4_syntaxChecker = function (a) {
	return {ctor: 'JsonFromJS4_syntaxChecker', _0: a};
};
var _user$project$ElmFunctions_sequent$JsonFromJS3_randomFormulaProvable = function (a) {
	return {ctor: 'JsonFromJS3_randomFormulaProvable', _0: a};
};
var _user$project$ElmFunctions_sequent$JsonFromJS2_randomFormula = function (a) {
	return {ctor: 'JsonFromJS2_randomFormula', _0: a};
};
var _user$project$ElmFunctions_sequent$JsonFromJS_prove = function (a) {
	return {ctor: 'JsonFromJS_prove', _0: a};
};
var _user$project$ElmFunctions_sequent$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$ElmFunctions_sequent$input4prove(_user$project$ElmFunctions_sequent$JsonFromJS_prove),
			_1: {
				ctor: '::',
				_0: _user$project$ElmFunctions_sequent$input4randomFormula(_user$project$ElmFunctions_sequent$JsonFromJS2_randomFormula),
				_1: {
					ctor: '::',
					_0: _user$project$ElmFunctions_sequent$input4randomFormula_provable(_user$project$ElmFunctions_sequent$JsonFromJS3_randomFormulaProvable),
					_1: {
						ctor: '::',
						_0: _user$project$ElmFunctions_sequent$input4syntaxCheck(_user$project$ElmFunctions_sequent$JsonFromJS4_syntaxChecker),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$ElmFunctions_sequent$main = _elm_lang$html$Html$program(
	{init: _user$project$ElmFunctions_sequent$initModel, update: _user$project$ElmFunctions_sequent$update, view: _user$project$ElmFunctions_sequent$view, subscriptions: _user$project$ElmFunctions_sequent$subscriptions})();

var Elm = {};
Elm['ElmFunctions_sequent'] = Elm['ElmFunctions_sequent'] || {};
if (typeof _user$project$ElmFunctions_sequent$main !== 'undefined') {
    _user$project$ElmFunctions_sequent$main(Elm['ElmFunctions_sequent'], 'ElmFunctions_sequent', undefined);
}

if (true)
{
  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return Elm; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  return;
}

if (true)
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);



/***/ }),

/***/ 37:
/***/ (function(module, exports, __webpack_require__) {

!function(t,n){if(true)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var e=n();for(var i in e)("object"==typeof exports?exports:t)[i]=e[i]}}(this,function(){return function(t){function n(i){if(e[i])return e[i].exports;var r=e[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){"use strict";function i(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0}),i(e(2)),i(e(3)),i(e(1)),i(e(4))},function(t,n){"use strict";function e(t,n){var i=0;if(t===n)return!0;if("function"==typeof t.equals)return t.equals(n);if(t.length>0&&t.length===n.length){for(;i<t.length;i+=1)if(!e(t[i],n[i]))return!1;return!0}return!1}Object.defineProperty(n,"__esModule",{value:!0}),n.eq=e},function(t,n,e){"use strict";function i(t){return null!==t&&void 0!==t}function r(t,n){if(i(t)&&i(n))throw new TypeError("Cannot construct an Either with both a left and a right");if(!i(t)&&!i(n))throw new TypeError("Cannot construct an Either with neither a left nor a right");return i(t)&&!i(n)?s.left(t):!i(t)&&i(n)?s.right(n):void 0}Object.defineProperty(n,"__esModule",{value:!0});var u,o=e(1);!function(t){t[t.Left=0]="Left",t[t.Right=1]="Right"}(u=n.EitherType||(n.EitherType={})),n.either=r;var s=function(){function t(t,n,e){this.type=t,this.l=n,this.r=e,this.of=this.unit,this.chain=this.bind,this.lift=this.fmap,this.map=this.fmap}return t.left=function(n){return new t(u.Left,n)},t.right=function(n){return new t(u.Right,null,n)},t.prototype.unit=function(n){return t.right(n)},t.prototype.bind=function(n){return this.type===u.Right?n(this.r):t.left(this.l)},t.prototype.fmap=function(t){var n=this;return this.bind(function(e){return n.unit(t(e))})},t.prototype.caseOf=function(t){return this.type===u.Right?t.right(this.r):t.left(this.l)},t.prototype.equals=function(t){return t.type===this.type&&(this.type===u.Left&&o.eq(t.l,this.l)||this.type===u.Right&&o.eq(t.r,this.r))},t.prototype.do=function(t){void 0===t&&(t={});var n={left:function(t){},right:function(t){}},e=Object.assign(n,t);return this.caseOf(e),this},t}();n.Either=s},function(t,n,e){"use strict";function i(t){return o.maybe(t)}Object.defineProperty(n,"__esModule",{value:!0});var r,u=e(1);!function(t){t[t.Nothing=0]="Nothing",t[t.Just=1]="Just"}(r=n.MaybeType||(n.MaybeType={})),n.maybe=i;var o=function(){function t(t,n){this.type=t,this.value=n,this.of=this.unit,this.chain=this.bind,this.lift=this.fmap,this.map=this.fmap}return t.sequence=function(n){if(Object.keys(n).filter(function(t){return n[t].type===r.Nothing}).length)return t.nothing();var e={};for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i].value);return t.just(e)},t.maybe=function(n){return null===n||void 0===n?new t(r.Nothing):new t(r.Just,n)},t.just=function(n){if(null===n||void 0===n)throw new TypeError("Cannot Maybe.just(null)");return new t(r.Just,n)},t.nothing=function(){return new t(r.Nothing)},t.isJust=function(t){return t.type===r.Just},t.isNothing=function(t){return t.type===r.Nothing},t.prototype.unit=function(n){return t.maybe(n)},t.prototype.bind=function(n){return this.type===r.Just?n(this.value):t.nothing()},t.prototype.fmap=function(t){var n=this;return this.bind(function(e){return n.unit(t(e))})},t.prototype.caseOf=function(t){return this.type===r.Just?t.just(this.value):t.nothing()},t.prototype.defaulting=function(n){return t.just(this.valueOr(n))},t.prototype.equals=function(t){return t.type===this.type&&(this.type===r.Nothing||u.eq(t.value,this.value))},t.prototype.valueOr=function(t){return this.valueOrCompute(function(){return t})},t.prototype.valueOrCompute=function(t){return this.type===r.Just?this.value:t()},t.prototype.valueOrThrow=function(t){if(this.type===r.Just)return this.value;throw t||new Error("No value is available.")},t.prototype.do=function(t){void 0===t&&(t={});var n={just:function(t){},nothing:function(){}},e=Object.assign(n,t);return this.caseOf(e),this},t}();o.all=function(t){return o.sequence(t)},n.Maybe=o},function(t,n){"use strict";function e(t,n){return i.writer(t,n)}Object.defineProperty(n,"__esModule",{value:!0}),n.writer=e;var i=function(){function t(t,n){this.story=t,this.value=n,this.of=this.unit,this.chain=this.bind,this.lift=this.fmap,this.map=this.fmap}return t.writer=function(n,e){return new t(n,e)},t.tell=function(n){return new t([n],0)},t.prototype.unit=function(n){return new t([],n)},t.prototype.bind=function(n){var e=n(this.value),i=this.story.concat(e.story);return new t(i,e.value)},t.prototype.fmap=function(t){var n=this;return this.bind(function(e){return n.unit(t(e))})},t.prototype.caseOf=function(t){return t.writer(this.story,this.value)},t.prototype.equals=function(t){var n,e=!0;for(n=0;n<this.story.length;n+=1)e=e&&this.story[n]===t.story[n];return e&&this.value===t.value},t}();n.Writer=i}])});
//# sourceMappingURL=tsmonad.js.map

/***/ }),

/***/ 76:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Elm_syntaxChecker = __webpack_require__(77);
var Util = __webpack_require__(10);
var $ELM_SYNTAX = Elm_syntaxChecker.ElmFunctions_syntaxChecker.embed(document.getElementById('elm_syntaxChecker'));
var $$INPUT_FORM = document.querySelector('#input_formula');
$('#input_formula').on('keyup', function () {
    syntaxCheck($$INPUT_FORM.value.toString());
});
function syntaxFail() {
    Util.writeDOM_html('#error_input')('syntax &#10008;');
    $('#error_input').css("color", "#A44644");
}
function syntaxSuccess() {
    Util.writeDOM_html('#error_input')('syntax &#10004;');
    $('#error_input').css("color", "#346B36");
}
function syntaxCheck(str) {
    var _elsystem = document.querySelector(".select_logic_for_labelled").innerHTML;
    var _form = {
        system: _elsystem,
        formula: str
    };
    $ELM_SYNTAX.ports.input1.send(_form);
}
exports.syntaxCheck = syntaxCheck;
$ELM_SYNTAX.ports.output1.subscribe(function ($model) {
    if ($model.result === 'parseError') {
        syntaxFail();
    }
    else {
        syntaxSuccess();
    }
});


/***/ }),

/***/ 77:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _toastal$either$Either$unwrap = F3(
	function (d, f, e) {
		var _p0 = e;
		if (_p0.ctor === 'Right') {
			return f(_p0._0);
		} else {
			return d;
		}
	});
var _toastal$either$Either$unpack = F3(
	function (f, g, e) {
		var _p1 = e;
		if (_p1.ctor === 'Left') {
			return f(_p1._0);
		} else {
			return g(_p1._0);
		}
	});
var _toastal$either$Either$fromRight = F2(
	function (d, e) {
		var _p2 = e;
		if (_p2.ctor === 'Right') {
			return _p2._0;
		} else {
			return d;
		}
	});
var _toastal$either$Either$withDefault = _toastal$either$Either$fromRight;
var _toastal$either$Either$fromLeft = F2(
	function (d, e) {
		var _p3 = e;
		if (_p3.ctor === 'Left') {
			return _p3._0;
		} else {
			return d;
		}
	});
var _toastal$either$Either$isRight = function (e) {
	var _p4 = e;
	if (_p4.ctor === 'Right') {
		return true;
	} else {
		return false;
	}
};
var _toastal$either$Either$isLeft = function (e) {
	var _p5 = e;
	if (_p5.ctor === 'Left') {
		return true;
	} else {
		return false;
	}
};
var _toastal$either$Either$toResult = function (e) {
	var _p6 = e;
	if (_p6.ctor === 'Left') {
		return _elm_lang$core$Result$Err(_p6._0);
	} else {
		return _elm_lang$core$Result$Ok(_p6._0);
	}
};
var _toastal$either$Either$leftToMaybe = function (e) {
	var _p7 = e;
	if (_p7.ctor === 'Left') {
		return _elm_lang$core$Maybe$Just(_p7._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _toastal$either$Either$toMaybe = function (e) {
	var _p8 = e;
	if (_p8.ctor === 'Right') {
		return _elm_lang$core$Maybe$Just(_p8._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _toastal$either$Either$rightToMaybe = _toastal$either$Either$toMaybe;
var _toastal$either$Either$biList = A2(_toastal$either$Either$unpack, _elm_lang$core$List$singleton, _elm_lang$core$List$singleton);
var _toastal$either$Either$partition = function () {
	var fun = F2(
		function (e, _p9) {
			var _p10 = _p9;
			var _p13 = _p10._1;
			var _p12 = _p10._0;
			var _p11 = e;
			if (_p11.ctor === 'Left') {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p11._0, _1: _p12},
					_1: _p13
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _p12,
					_1: {ctor: '::', _0: _p11._0, _1: _p13}
				};
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		fun,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		});
}();
var _toastal$either$Either$rights = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			var _p14 = e;
			if (_p14.ctor === 'Right') {
				return {ctor: '::', _0: _p14._0, _1: acc};
			} else {
				return acc;
			}
		}),
	{ctor: '[]'});
var _toastal$either$Either$lefts = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			var _p15 = e;
			if (_p15.ctor === 'Left') {
				return {ctor: '::', _0: _p15._0, _1: acc};
			} else {
				return acc;
			}
		}),
	{ctor: '[]'});
var _toastal$either$Either$foldr = F3(
	function (f, acc, e) {
		var _p16 = e;
		if (_p16.ctor === 'Left') {
			return acc;
		} else {
			return A2(f, _p16._0, acc);
		}
	});
var _toastal$either$Either$foldl = F3(
	function (f, acc, e) {
		var _p17 = e;
		if (_p17.ctor === 'Right') {
			return acc;
		} else {
			return A2(f, _p17._0, acc);
		}
	});
var _toastal$either$Either$length = function (e) {
	var _p18 = e;
	if (_p18.ctor === 'Left') {
		return 0;
	} else {
		return 1;
	}
};
var _toastal$either$Either$Right = function (a) {
	return {ctor: 'Right', _0: a};
};
var _toastal$either$Either$singleton = _toastal$either$Either$Right;
var _toastal$either$Either$andThenLeft = F2(
	function (f, e) {
		var _p19 = e;
		if (_p19.ctor === 'Left') {
			return f(_p19._0);
		} else {
			return _toastal$either$Either$Right(_p19._0);
		}
	});
var _toastal$either$Either$Left = function (a) {
	return {ctor: 'Left', _0: a};
};
var _toastal$either$Either$map = F2(
	function (f, e) {
		var _p20 = e;
		if (_p20.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p20._0));
		} else {
			return _toastal$either$Either$Left(_p20._0);
		}
	});
var _toastal$either$Either$mapRight = _toastal$either$Either$map;
var _toastal$either$Either$voidRight = function (f) {
	return _toastal$either$Either$map(
		_elm_lang$core$Basics$always(f));
};
var _toastal$either$Either$mapLeft = F2(
	function (f, e) {
		var _p21 = e;
		if (_p21.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p21._0));
		} else {
			return _toastal$either$Either$Right(_p21._0);
		}
	});
var _toastal$either$Either$voidLeft = function (f) {
	return _toastal$either$Either$mapLeft(
		_elm_lang$core$Basics$always(f));
};
var _toastal$either$Either$andMapLeft = F2(
	function (e, e1) {
		var _p22 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p22._1.ctor === 'Right') {
			return _toastal$either$Either$Right(_p22._1._0);
		} else {
			return A2(_toastal$either$Either$mapLeft, _p22._1._0, _p22._0);
		}
	});
var _toastal$either$Either$mapBoth = F3(
	function (f, g, e) {
		var _p23 = e;
		if (_p23.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p23._0));
		} else {
			return _toastal$either$Either$Right(
				g(_p23._0));
		}
	});
var _toastal$either$Either$mapEach = F2(
	function (f, e) {
		var _p24 = e;
		if (_p24.ctor === 'Left') {
			return _toastal$either$Either$Left(
				f(_p24._0));
		} else {
			return _toastal$either$Either$Right(
				f(_p24._0));
		}
	});
var _toastal$either$Either$andMap = F2(
	function (e, e1) {
		var _p25 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p25._1.ctor === 'Left') {
			return _toastal$either$Either$Left(_p25._1._0);
		} else {
			return A2(_toastal$either$Either$map, _p25._1._0, _p25._0);
		}
	});
var _toastal$either$Either$andMapRight = _toastal$either$Either$andMap;
var _toastal$either$Either$map2 = F3(
	function (f, e, e1) {
		var _p26 = {ctor: '_Tuple2', _0: e, _1: e1};
		if (_p26._0.ctor === 'Right') {
			if (_p26._1.ctor === 'Right') {
				return _toastal$either$Either$Right(
					A2(f, _p26._0._0, _p26._1._0));
			} else {
				return _toastal$either$Either$Left(_p26._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p26._0._0);
		}
	});
var _toastal$either$Either$map3 = F4(
	function (f, e, e1, e2) {
		var _p27 = {ctor: '_Tuple3', _0: e, _1: e1, _2: e2};
		if (_p27._0.ctor === 'Right') {
			if (_p27._1.ctor === 'Right') {
				if (_p27._2.ctor === 'Right') {
					return _toastal$either$Either$Right(
						A3(f, _p27._0._0, _p27._1._0, _p27._2._0));
				} else {
					return _toastal$either$Either$Left(_p27._2._0);
				}
			} else {
				return _toastal$either$Either$Left(_p27._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p27._0._0);
		}
	});
var _toastal$either$Either$map4 = F5(
	function (f, e, e1, e2, e3) {
		var _p28 = {ctor: '_Tuple4', _0: e, _1: e1, _2: e2, _3: e3};
		if (_p28._0.ctor === 'Right') {
			if (_p28._1.ctor === 'Right') {
				if (_p28._2.ctor === 'Right') {
					if (_p28._3.ctor === 'Right') {
						return _toastal$either$Either$Right(
							A4(f, _p28._0._0, _p28._1._0, _p28._2._0, _p28._3._0));
					} else {
						return _toastal$either$Either$Left(_p28._3._0);
					}
				} else {
					return _toastal$either$Either$Left(_p28._2._0);
				}
			} else {
				return _toastal$either$Either$Left(_p28._1._0);
			}
		} else {
			return _toastal$either$Either$Left(_p28._0._0);
		}
	});
var _toastal$either$Either$andThen = F2(
	function (f, e) {
		var _p29 = e;
		if (_p29.ctor === 'Right') {
			return f(_p29._0);
		} else {
			return _toastal$either$Either$Left(_p29._0);
		}
	});
var _toastal$either$Either$andThenRight = _toastal$either$Either$andThen;
var _toastal$either$Either$fromMaybe = F2(
	function (d, m) {
		var _p30 = m;
		if (_p30.ctor === 'Just') {
			return _toastal$either$Either$Right(_p30._0);
		} else {
			return _toastal$either$Either$Left(d);
		}
	});
var _toastal$either$Either$rightFromMaybe = _toastal$either$Either$fromMaybe;
var _toastal$either$Either$leftFromMaybe = F2(
	function (d, m) {
		var _p31 = m;
		if (_p31.ctor === 'Just') {
			return _toastal$either$Either$Left(_p31._0);
		} else {
			return _toastal$either$Either$Right(d);
		}
	});
var _toastal$either$Either$fromResult = function (r) {
	var _p32 = r;
	if (_p32.ctor === 'Err') {
		return _toastal$either$Either$Left(_p32._0);
	} else {
		return _toastal$either$Either$Right(_p32._0);
	}
};
var _toastal$either$Either$swap = function (e) {
	var _p33 = e;
	if (_p33.ctor === 'Left') {
		return _toastal$either$Either$Right(_p33._0);
	} else {
		return _toastal$either$Either$Left(_p33._0);
	}
};

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _Skinney$fnv$FNV$fnvPrime = (Math.pow(2, 24) + Math.pow(2, 8)) + 147;
var _Skinney$fnv$FNV$hashHelp = F2(
	function (c, hash) {
		return ((hash ^ _elm_lang$core$Char$toCode(c)) * _Skinney$fnv$FNV$fnvPrime) >>> 0;
	});
var _Skinney$fnv$FNV$hashString = function (str) {
	return A3(_elm_lang$core$String$foldl, _Skinney$fnv$FNV$hashHelp, 0, str);
};

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p0 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p0._0.ctor === '[]') {
			return true;
		} else {
			if (_p0._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p0._0._1, _p0._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p1 = xs;
	if (_p1.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p5 = _p1._1;
		var _p4 = _p1._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p4,
				_2: _p5
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p4, _1: _p3._0},
						_1: _p3._1,
						_2: _p3._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p5))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p9, _1: _p10},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: {ctor: '::', _0: _p9, _1: _p8._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p11 = list;
		if (_p11.ctor === '::') {
			var _p12 = _p11._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p12},
				_1: {ctor: '::', _0: _p12, _1: _p11._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infix, xs) {
		return A2(
			_elm_lang$core$List$any,
			_elm_community$list_extra$List_Extra$isPrefixOf(infix),
			_elm_community$list_extra$List_Extra$tails(xs));
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (cmp, xs_) {
		var _p13 = xs_;
		if (_p13.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p13._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _p13._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p15 = _p13._0;
				var _p14 = A2(_elm_community$list_extra$List_Extra$groupWhileTransitively, cmp, _p13._1);
				if (_p14.ctor === '::') {
					return A2(cmp, _p15, _p13._1._0) ? {
						ctor: '::',
						_0: {ctor: '::', _0: _p15, _1: _p14._0},
						_1: _p14._1
					} : {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _p15,
							_1: {ctor: '[]'}
						},
						_1: _p14
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p16 = m;
				if (_p16.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p16._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p16._0._0) ? _elm_lang$core$Maybe$Just(_p16._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p17) {
			var _p18 = _p17;
			var _p19 = _p18._0;
			return (p(x) && _p18._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p19},
				_1: true
			} : {ctor: '_Tuple2', _0: _p19, _1: false};
		});
	return function (_p20) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p20));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p21 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === '::')) && (_p21._1.ctor === '::')) {
				var _p22 = A2(_elm_community$list_extra$List_Extra$splitAt, _p21._0._0, list);
				var head = _p22._0;
				var tail = _p22._1;
				var _v11 = _p21._0._1,
					_v12 = tail,
					_v13 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v11;
				list = _v12;
				accu = _v13;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p23 = f(seed);
		if (_p23.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p23._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p23._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p24 = xs_;
		if (_p24.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p24._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p25 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p24._1);
				if (_p25.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p24._0, _p25._0),
						_1: _p25
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p26 = xs_;
		if (_p26.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p27 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p26._1);
			if (_p27.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p26._0, _p27._0),
					_1: _p27
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p28 = xs_;
		if (_p28.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p28._0, _p28._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				return {
					ctor: '_Tuple2',
					_0: _p31 - 1,
					_1: A3(func, _p31, x, _p30._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p32) {
				var _p33 = _p32;
				var _p34 = _p33._0;
				return {
					ctor: '_Tuple2',
					_0: _p34 + 1,
					_1: A3(func, _p34, x, _p33._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p35 = m;
						if (_p35.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p35._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p36 = m;
						if (_p36.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p36._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (l1, l2, acc) {
		interweaveHelp:
		while (true) {
			var _p37 = {ctor: '_Tuple2', _0: l1, _1: l2};
			_v24_1:
			do {
				if (_p37._0.ctor === '::') {
					if (_p37._1.ctor === '::') {
						var _v25 = _p37._0._1,
							_v26 = _p37._1._1,
							_v27 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							{
								ctor: '::',
								_0: _p37._0._0,
								_1: {
									ctor: '::',
									_0: _p37._1._0,
									_1: {ctor: '[]'}
								}
							});
						l1 = _v25;
						l2 = _v26;
						acc = _v27;
						continue interweaveHelp;
					} else {
						break _v24_1;
					}
				} else {
					if (_p37._1.ctor === '[]') {
						break _v24_1;
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._1);
					}
				}
			} while(false);
			return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._0);
		}
	});
var _elm_community$list_extra$List_Extra$interweave = F2(
	function (l1, l2) {
		return A3(
			_elm_community$list_extra$List_Extra$interweaveHelp,
			l1,
			l2,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p38 = xs_;
	if (_p38.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p39) {
			var _p40 = _p39;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p40._0),
				_elm_community$list_extra$List_Extra$permutations(_p40._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p38));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p41 = xs;
	if (_p41.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p42 = _p41._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p42, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p42,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p41._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, xs) {
		return A2(
			_elm_lang$core$List$member,
			subseq,
			_elm_community$list_extra$List_Extra$subsequences(xs));
	});
var _elm_community$list_extra$List_Extra$transpose = function (ll) {
	transpose:
	while (true) {
		var _p43 = ll;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p43._0.ctor === '[]') {
				var _v32 = _p43._1;
				ll = _v32;
				continue transpose;
			} else {
				var _p44 = _p43._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p44);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p44);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p43._0._0, _1: heads},
					_1: _elm_community$list_extra$List_Extra$transpose(
						{ctor: '::', _0: _p43._0._1, _1: tails})
				};
			}
		}
	}
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p45) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p45));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p46) {
				return !pred(_p46);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p47 = tail;
			if (_p47.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p47._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p49, _p48) {
				var _p50 = _p49;
				var _p51 = _p48;
				var result = A2(pred, _p50._0, _p51._0);
				var _p52 = result;
				if (_p52.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p50._1, _p51._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$setAt = F3(
	function (index, value, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p53 = tail;
			if (_p53.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$List$append,
						head,
						{ctor: '::', _0: value, _1: _p53._0}));
			}
		}
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p54 = xs;
		if (_p54.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p56 = _p54._1;
			var _p55 = _p54._0;
			return _elm_lang$core$Native_Utils.eq(x, _p55) ? _p56 : {
				ctor: '::',
				_0: _p55,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p56)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, update, list) {
		return ((_elm_lang$core$Native_Utils.cmp(index, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$List$length(list)) > -1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A3(
				_elm_community$list_extra$List_Extra$updateIfIndex,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(index),
				update,
				list));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$findIndices = function (p) {
	return function (_p57) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p58) {
					var _p59 = _p58;
					return p(_p59._1);
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p57)));
	};
};
var _elm_community$list_extra$List_Extra$findIndex = function (p) {
	return function (_p60) {
		return _elm_lang$core$List$head(
			A2(_elm_community$list_extra$List_Extra$findIndices, p, _p60));
	};
};
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p61 = list;
			if (_p61.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p62 = _p61._0;
				if (predicate(_p62)) {
					return _elm_lang$core$Maybe$Just(_p62);
				} else {
					var _v41 = predicate,
						_v42 = _p61._1;
					predicate = _v41;
					list = _v42;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p63) {
		return !A2(_elm_lang$core$List$member, x, _p63);
	};
};
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p64 = remaining;
			if (_p64.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p66 = _p64._1;
				var _p65 = _p64._0;
				var computedFirst = f(_p65);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v44 = f,
						_v45 = existing,
						_v46 = _p66;
					f = _v44;
					existing = _v45;
					remaining = _v46;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p65,
						_1: A3(
							_elm_community$list_extra$List_Extra$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p66)
					};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A3(_elm_community$list_extra$List_Extra$uniqueHelp, f, _elm_lang$core$Set$empty, list);
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A3(_elm_community$list_extra$List_Extra$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p67 = list;
			if (_p67.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p67._0)) {
					var _v48 = predicate,
						_v49 = _p67._1;
					predicate = _v48;
					list = _v49;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p68 = list;
				if (_p68.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p69 = _p68._0;
					if (predicate(_p69)) {
						var _v51 = {ctor: '::', _0: _p69, _1: memo},
							_v52 = _p68._1;
						memo = _v51;
						list = _v52;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p70) {
			return !p(_p70);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p71 = xs_;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p73 = _p71._0;
			var _p72 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p73),
				_p71._1);
			var ys = _p72._0;
			var zs = _p72._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p73, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p74) {
				var _p75 = _p74;
				var _p76 = _p75._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p76) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p75._0, _1: _p76};
			});
		var _p77 = ls;
		if (_p77.ctor === '::') {
			if (_p77._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p77._0);
			} else {
				var _p78 = _p77._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p78,
								_1: f(_p78)
							},
							_p77._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p79) {
				var _p80 = _p79;
				var _p81 = _p80._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p81) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p80._0, _1: _p81};
			});
		var _p82 = ls;
		if (_p82.ctor === '::') {
			if (_p82._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p82._0);
			} else {
				var _p83 = _p82._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p83,
								_1: f(_p83)
							},
							_p82._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p84 = xs;
	if (_p84.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p84._0, _1: _p84._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2)) {
				return _elm_lang$core$Maybe$Just(l);
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v59 = index2,
						_v60 = index1,
						_v61 = l;
					index1 = _v59;
					index2 = _v60;
					l = _v61;
					continue swapAt;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p85 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
						var part1 = _p85._0;
						var tail1 = _p85._1;
						var _p86 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
						var head2 = _p86._0;
						var tail2 = _p86._1;
						return A3(
							_elm_lang$core$Maybe$map2,
							F2(
								function (_p88, _p87) {
									var _p89 = _p88;
									var _p90 = _p87;
									return _elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: part1,
											_1: {
												ctor: '::',
												_0: {ctor: '::', _0: _p90._0, _1: _p89._1},
												_1: {
													ctor: '::',
													_0: {ctor: '::', _0: _p89._0, _1: _p90._1},
													_1: {ctor: '[]'}
												}
											}
										});
								}),
							_elm_community$list_extra$List_Extra$uncons(head2),
							_elm_community$list_extra$List_Extra$uncons(tail2));
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p91 = f(x);
		if (_p91.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p91._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function () {
	var maybe = F2(
		function (d, f) {
			return function (_p92) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					d,
					A2(_elm_lang$core$Maybe$map, f, _p92));
			};
		});
	return A2(
		_elm_lang$core$List$foldr,
		function (x) {
			return function (_p93) {
				return _elm_lang$core$Maybe$Just(
					A3(
						maybe,
						{ctor: '[]'},
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(x),
						_p93));
			};
		},
		_elm_lang$core$Maybe$Nothing);
}();
var _elm_community$list_extra$List_Extra$last = _elm_community$list_extra$List_Extra$foldl1(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$toArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$toList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _elm_community$parser_combinators$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _elm_community$parser_combinators$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _elm_community$parser_combinators$Combine$initStream = function (s) {
	return A3(_elm_community$parser_combinators$Combine$InputStream, s, s, 0);
};
var _elm_community$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_elm_community$parser_combinators$Combine$app,
			p,
			st,
			_elm_community$parser_combinators$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _elm_community$parser_combinators$Combine$parse = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _elm_community$parser_combinators$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _elm_community$parser_combinators$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_elm_community$parser_combinators$Combine$ParseLocation, '', 1, position);
				} else {
					if (_p2._1.ctor === '[]') {
						return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p2._0, currentLine + 1, position);
					} else {
						var _p3 = _p2._0;
						var length = _elm_lang$core$String$length(_p3);
						if (_elm_lang$core$Native_Utils.cmp(position, length) > -1) {
							var _v3 = (position - length) - 1,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							if (_elm_lang$core$Native_Utils.eq(currentLine, 0)) {
								return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, 1, position);
							} else {
								return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, currentLine, position - 1);
							}
						}
					}
				}
			}
		});
	return A3(
		find,
		stream.position,
		0,
		A2(_elm_lang$core$String$split, '\n', stream.data));
};
var _elm_community$parser_combinators$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p4));
};
var _elm_community$parser_combinators$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p5));
};
var _elm_community$parser_combinators$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p6));
};
var _elm_community$parser_combinators$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _elm_community$parser_combinators$Combine$lazy = function (t) {
	return _elm_community$parser_combinators$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _elm_community$parser_combinators$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _elm_community$parser_combinators$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_community$parser_combinators$Combine$primitive = _elm_community$parser_combinators$Combine$Parser;
var _elm_community$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3(_elm_community$parser_combinators$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$>'] = _elm_community$parser_combinators$Combine$map;
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$'] = function (res) {
	return _elm_community$parser_combinators$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _elm_community$parser_combinators$Combine$skip = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_elm_community$parser_combinators$Combine_ops['<$'], x, y);
		}));
var _elm_community$parser_combinators$Combine$mapError = _elm_community$parser_combinators$Combine$bimap(_elm_lang$core$Basics$identity);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_elm_community$parser_combinators$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _elm_community$parser_combinators$Combine$withState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLocation = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLine = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withColumn = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_elm_community$parser_combinators$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andThen);
var _elm_community$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _elm_community$parser_combinators$Combine$map, rp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andMap);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(_elm_community$parser_combinators$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(
				_elm_community$parser_combinators$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _elm_community$parser_combinators$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine_ops['*>'], lp, p),
			rp);
	});
var _elm_community$parser_combinators$Combine$sequence = function (parsers) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_elm_community$parser_combinators$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					parsers,
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$fail = function (m) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _elm_community$parser_combinators$Combine$emptyErr = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _elm_community$parser_combinators$Combine$succeed = function (res) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$putState = function (state) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$modifyState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _elm_community$parser_combinators$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _elm_community$parser_combinators$Combine$string = function (s) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$parens = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('('),
	_elm_community$parser_combinators$Combine$string(')'));
var _elm_community$parser_combinators$Combine$braces = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('{'),
	_elm_community$parser_combinators$Combine$string('}'));
var _elm_community$parser_combinators$Combine$brackets = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('['),
	_elm_community$parser_combinators$Combine$string(']'));
var _elm_community$parser_combinators$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$whitespace = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _elm_community$parser_combinators$Combine$whitespace1 = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]+'),
	'whitespace');
var _elm_community$parser_combinators$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$end = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _elm_community$parser_combinators$Combine$lookAhead = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _elm_community$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_elm_community$parser_combinators$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_elm_community$parser_combinators$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _elm_community$parser_combinators$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _elm_community$parser_combinators$Combine$or, _elm_community$parser_combinators$Combine$emptyErr, xs);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<|>'] = _elm_community$parser_combinators$Combine$or;
var _elm_community$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			p,
			_elm_community$parser_combinators$Combine$succeed(res));
	});
var _elm_community$parser_combinators$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return _elm_community$parser_combinators$Combine$succeed(
									A2(f, x, y));
							},
							A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p));
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$maybe = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$many1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_elm_community$parser_combinators$Combine$many(p));
};
var _elm_community$parser_combinators$Combine$skipMany1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many1(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_elm_community$parser_combinators$Combine$many(
				A2(_elm_community$parser_combinators$Combine_ops['*>'], sep, p)));
	});
var _elm_community$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$maybe(sep));
	});
var _elm_community$parser_combinators$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepEndBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$skipMany = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_elm_community$parser_combinators$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _elm_community$parser_combinators$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _elm_community$result_extra$Result_Extra$merge = function (r) {
	var _p0 = r;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _elm_community$result_extra$Result_Extra$orElse = F2(
	function (ra, rb) {
		var _p1 = rb;
		if (_p1.ctor === 'Err') {
			return ra;
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orElseLazy = F2(
	function (fra, rb) {
		var _p2 = rb;
		if (_p2.ctor === 'Err') {
			return fra(
				{ctor: '_Tuple0'});
		} else {
			return rb;
		}
	});
var _elm_community$result_extra$Result_Extra$orLazy = F2(
	function (ra, frb) {
		var _p3 = ra;
		if (_p3.ctor === 'Err') {
			return frb(
				{ctor: '_Tuple0'});
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$or = F2(
	function (ra, rb) {
		var _p4 = ra;
		if (_p4.ctor === 'Err') {
			return rb;
		} else {
			return ra;
		}
	});
var _elm_community$result_extra$Result_Extra$andMap = F2(
	function (ra, rb) {
		var _p5 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p5._1.ctor === 'Err') {
			return _elm_lang$core$Result$Err(_p5._1._0);
		} else {
			return A2(_elm_lang$core$Result$map, _p5._1._0, _p5._0);
		}
	});
var _elm_community$result_extra$Result_Extra$singleton = _elm_lang$core$Result$Ok;
var _elm_community$result_extra$Result_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Result$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Result$Ok(
		{ctor: '[]'}));
var _elm_community$result_extra$Result_Extra$mapBoth = F3(
	function (errFunc, okFunc, result) {
		var _p6 = result;
		if (_p6.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				okFunc(_p6._0));
		} else {
			return _elm_lang$core$Result$Err(
				errFunc(_p6._0));
		}
	});
var _elm_community$result_extra$Result_Extra$unpack = F3(
	function (errFunc, okFunc, result) {
		var _p7 = result;
		if (_p7.ctor === 'Ok') {
			return okFunc(_p7._0);
		} else {
			return errFunc(_p7._0);
		}
	});
var _elm_community$result_extra$Result_Extra$unwrap = F3(
	function (defaultValue, okFunc, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return okFunc(_p8._0);
		} else {
			return defaultValue;
		}
	});
var _elm_community$result_extra$Result_Extra$extract = F2(
	function (f, x) {
		var _p9 = x;
		if (_p9.ctor === 'Ok') {
			return _p9._0;
		} else {
			return f(_p9._0);
		}
	});
var _elm_community$result_extra$Result_Extra$isErr = function (x) {
	var _p10 = x;
	if (_p10.ctor === 'Ok') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$result_extra$Result_Extra$isOk = function (x) {
	var _p11 = x;
	if (_p11.ctor === 'Ok') {
		return true;
	} else {
		return false;
	}
};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');


var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['@@>'] = F2(
	function (mx, mf) {
		return A2(_elm_community$result_extra$Result_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<@@'] = F2(
	function (mf, mx) {
		return A2(_elm_community$result_extra$Result_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['@>'] = F2(
	function (mx, f) {
		var _p0 = mx;
		if (_p0.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				f(_p0._0));
		} else {
			return _elm_lang$core$Result$Err(_p0._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<@'] = F2(
	function (f, mx) {
		var _p1 = mx;
		if (_p1.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				f(_p1._0));
		} else {
			return _elm_lang$core$Result$Err(_p1._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['!>'] = F2(
	function (mx, f) {
		var _p2 = mx;
		if (_p2.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p2._0));
		} else {
			return _toastal$either$Either$Left(_p2._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<!'] = F2(
	function (f, mx) {
		var _p3 = mx;
		if (_p3.ctor === 'Right') {
			return _toastal$either$Either$Right(
				f(_p3._0));
		} else {
			return _toastal$either$Either$Left(_p3._0);
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['??>'] = F2(
	function (mx, mf) {
		return A2(_elm_community$maybe_extra$Maybe_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<??'] = F2(
	function (mf, mx) {
		return A2(_elm_community$maybe_extra$Maybe_Extra$andMap, mx, mf);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['?>'] = F2(
	function (mx, f) {
		var _p4 = mx;
		if (_p4.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<?'] = F2(
	function (f, mx) {
		var _p5 = mx;
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p5._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['$$>'] = F2(
	function (lx, lf) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (f, x) {
					return f(x);
				}),
			lf,
			lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<$$'] = F2(
	function (lf, lx) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (f, x) {
					return f(x);
				}),
			lf,
			lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['$>'] = F2(
	function (lx, f) {
		return A2(_elm_lang$core$List$map, f, lx);
	});
var _user$project$Applicative_ops = _user$project$Applicative_ops || {};
_user$project$Applicative_ops['<$'] = F2(
	function (f, lx) {
		return A2(_elm_lang$core$List$map, f, lx);
	});

var _user$project$Util$thd3 = function (_p0) {
	var _p1 = _p0;
	return _p1._2;
};
var _user$project$Util$snd3 = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Util$fst3 = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Util$snd = function (_p6) {
	var _p7 = _p6;
	return _p7._1;
};
var _user$project$Util$fst = function (_p8) {
	var _p9 = _p8;
	return _p9._0;
};
var _user$project$Util$removeComma = _elm_lang$core$List$filter(
	function (x) {
		return !_elm_lang$core$Native_Utils.eq(
			x,
			_elm_lang$core$Native_Utils.chr(','));
	});
var _user$project$Util$delete = F2(
	function (a, li) {
		return A2(
			_elm_lang$core$List$filter,
			function (x) {
				return !_elm_lang$core$Native_Utils.eq(a, x);
			},
			li);
	});
var _user$project$Util$removeWhiteSpace = _user$project$Util$delete(
	_elm_lang$core$Native_Utils.chr(' '));
var _user$project$Util$removeWhiteSpaceFromString = function (a) {
	return _elm_lang$core$String$fromList(
		_user$project$Util$removeWhiteSpace(
			_elm_lang$core$String$toList(a)));
};
var _user$project$Util$string2num = function (x) {
	return _elm_lang$core$Basics$toString(
		_Skinney$fnv$FNV$hashString(x));
};
var _user$project$Util$concatComma = function (a) {
	return _elm_lang$core$String$concat(
		A2(_elm_lang$core$List$intersperse, ' , ', a));
};
var _user$project$Util$powerList = function (xs) {
	return _elm_community$list_extra$List_Extra$subsequences(xs);
};
var _user$project$Util$subList = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$member,
			a,
			_user$project$Util$powerList(b));
	});
var _user$project$Util$difference = F2(
	function (xs, ys) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, a) {
					return A2(_elm_lang$core$List$member, x, ys) ? a : {ctor: '::', _0: x, _1: a};
				}),
			{ctor: '[]'},
			xs);
	});
var _user$project$Util$exists = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$any, p, xs);
	});
var _user$project$Util$forall = F2(
	function (xs, p) {
		return A2(_elm_lang$core$List$all, p, xs);
	});
var _user$project$Util$nub2 = _elm_community$list_extra$List_Extra$unique;
var _user$project$Util$nsort = function (x) {
	return _elm_lang$core$List$sort(
		_user$project$Util$nub2(x));
};
var _user$project$Util$nub = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (a, xss) {
				return A2(_elm_lang$core$List$member, a, xss) ? xss : {ctor: '::', _0: a, _1: xss};
			}),
		{ctor: '[]'},
		xs);
};
var _user$project$Util$rotate = function (li) {
	var ff = function (_p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Basics_ops['++'], _p11._0, _p11._1);
	};
	var tai = _elm_community$list_extra$List_Extra$tails(li);
	var ini = _elm_community$list_extra$List_Extra$inits(li);
	return _user$project$Util$nub(
		A2(
			_elm_lang$core$List$map,
			ff,
			A2(_elm_community$list_extra$List_Extra$zip, tai, ini)));
};
var _user$project$Util$intersectL = F2(
	function (xs1, xs2) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (a, ax) {
					return A2(_elm_lang$core$List$member, a, xs1) ? {ctor: '::', _0: a, _1: ax} : ax;
				}),
			{ctor: '[]'},
			xs2);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['==>'] = F2(
	function (b1, b2) {
		return (!b1) || b2;
	});
var _user$project$Util$unwords = _elm_lang$core$String$concat;
var _user$project$Util$initTail = function (a) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '[]'},
		_elm_community$list_extra$List_Extra$init(
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(a))));
};
var _user$project$Util$lookup = F2(
	function (a, li) {
		lookup:
		while (true) {
			var _p12 = li;
			if (_p12.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p12._0._0, a)) {
					return _elm_lang$core$Maybe$Just(_p12._0._1);
				} else {
					var _v7 = a,
						_v8 = _p12._1;
					a = _v7;
					li = _v8;
					continue lookup;
				}
			}
		}
	});
var _user$project$Util$lookVal = F2(
	function (at, li) {
		lookVal:
		while (true) {
			var _p13 = li;
			if (_p13.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p13._0._0)) {
					return _p13._0._1;
				} else {
					var _v10 = at,
						_v11 = _p13._1;
					at = _v10;
					li = _v11;
					continue lookVal;
				}
			}
		}
	});
var _user$project$Util$lookRel = F2(
	function (at, li) {
		var gg = function (_p14) {
			var _p15 = _p14;
			return {ctor: '_Tuple2', _0: _p15._1, _1: _p15._2};
		};
		return A2(_elm_lang$core$List$map, gg, li);
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['$>>='] = F2(
	function (x, y) {
		return A2(_elm_lang$core$List$concatMap, y, x);
	});
var _user$project$Util$cartesian = F2(
	function (xs, ys) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: x, _1: y},
							_1: {ctor: '[]'}
						};
					});
			});
	});
var _user$project$Util$cartesian2 = F3(
	function (xs, ys, zs) {
		return A2(
			_user$project$Util_ops['$>>='],
			xs,
			function (x) {
				return A2(
					_user$project$Util_ops['$>>='],
					ys,
					function (y) {
						return A2(
							_user$project$Util_ops['$>>='],
							zs,
							function (z) {
								return {
									ctor: '::',
									_0: {ctor: '_Tuple3', _0: x, _1: y, _2: z},
									_1: {ctor: '[]'}
								};
							});
					});
			});
	});
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['?>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Maybe$andThen);
var _user$project$Util_ops = _user$project$Util_ops || {};
_user$project$Util_ops['@>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Result$andThen);
var _user$project$Util$unzip2 = function (pairs) {
	var ff = F2(
		function (_p17, _p16) {
			var _p18 = _p17;
			var _p19 = _p16;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], _p18._0, _p19._0),
				_1: A2(_elm_lang$core$Basics_ops['++'], _p18._1, _p19._1)
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		ff,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _user$project$Util$maybeBigOr = function (li) {
	var _p20 = li;
	if (_p20.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_elm_community$maybe_extra$Maybe_Extra$or, x, y);
				}),
			_p20._0,
			_p20._1);
	}
};
var _user$project$Util$show = _elm_lang$core$Basics$toString;
var _user$project$Util$isSingleton = function (li) {
	var _p21 = li;
	if ((_p21.ctor === '::') && (_p21._1.ctor === '[]')) {
		return true;
	} else {
		return false;
	}
};
var _user$project$Util$or = function (li) {
	return A2(
		_user$project$Util$exists,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$and = function (li) {
	return A2(
		_user$project$Util$forall,
		li,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x, true);
		});
};
var _user$project$Util$maybelist2list = function (mli) {
	maybelist2list:
	while (true) {
		var _p22 = mli;
		if (_p22.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p24 = _p22._1;
			var _p23 = _p22._0;
			if (_p23.ctor === 'Nothing') {
				var _v19 = _p24;
				mli = _v19;
				continue maybelist2list;
			} else {
				return {
					ctor: '::',
					_0: _p23._0,
					_1: _user$project$Util$maybelist2list(_p24)
				};
			}
		}
	}
};
var _user$project$Util$int2list = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? {ctor: '[]'} : A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: n,
			_1: {ctor: '[]'}
		},
		_user$project$Util$int2list(n - 1));
};
var _user$project$Util$forallResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p25 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p25._0.ctor === 'Ok') {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p25._0._0 && _p25._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._1._0);
					}
				} else {
					if (_p25._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Err(_p25._0._0);
					} else {
						return _elm_lang$core$Result$Err(_p25._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$forallEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p26 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p26._0.ctor === 'Right') {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p26._0._0 && _p26._1._0);
					} else {
						return _toastal$either$Either$Left(_p26._1._0);
					}
				} else {
					if (_p26._1.ctor === 'Right') {
						return _toastal$either$Either$Left(_p26._0._0);
					} else {
						return _toastal$either$Either$Left(_p26._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(true),
			listOfEither);
	});
var _user$project$Util$existsResult = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p27 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p27._0.ctor === 'Ok') {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._0._0 || _p27._1._0);
					} else {
						return _elm_lang$core$Result$Ok(_p27._0._0);
					}
				} else {
					if (_p27._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(_p27._1._0);
					} else {
						return _elm_lang$core$Result$Err(_p27._0._0);
					}
				}
			});
		var listOfResult = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Result$Ok(true),
			listOfResult);
	});
var _user$project$Util$existsEither = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p28 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p28._0.ctor === 'Right') {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._0._0 || _p28._1._0);
					} else {
						return _toastal$either$Either$Right(_p28._0._0);
					}
				} else {
					if (_p28._1.ctor === 'Right') {
						return _toastal$either$Either$Right(_p28._1._0);
					} else {
						return _toastal$either$Either$Left(_p28._0._0);
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_toastal$either$Either$Right(false),
			listOfEither);
	});
var _user$project$Util$forallMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p29 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p29._0.ctor === 'Just') {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p29._0._0 && _p29._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					if (_p29._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(
			_elm_lang$core$List$foldl,
			biOp,
			_elm_lang$core$Maybe$Just(true),
			listOfEither);
	});
var _user$project$Util$existsMaybe = F2(
	function (list, func) {
		var biOp = F2(
			function (x, y) {
				var _p30 = {ctor: '_Tuple2', _0: x, _1: y};
				if (_p30._0.ctor === 'Just') {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._0._0 || _p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Just(_p30._0._0);
					}
				} else {
					if (_p30._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p30._1._0);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		var listOfEither = A2(_elm_lang$core$List$map, func, list);
		return A3(_elm_lang$core$List$foldl, biOp, _elm_lang$core$Maybe$Nothing, listOfEither);
	});
var _user$project$Util$filterR2 = F3(
	function (func, li, res) {
		filterR2:
		while (true) {
			var _p31 = li;
			if (_p31.ctor === '[]') {
				return res;
			} else {
				var _p34 = _p31._1;
				var _p33 = _p31._0;
				var _p32 = func(_p33);
				if (_p32.ctor === 'Ok') {
					if (_p32._0 === true) {
						var _v28 = func,
							_v29 = _p34,
							_v30 = A2(
							_elm_lang$core$Result$map,
							function (y) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Util$nub(y),
									{
										ctor: '::',
										_0: _p33,
										_1: {ctor: '[]'}
									});
							},
							res);
						func = _v28;
						li = _v29;
						res = _v30;
						continue filterR2;
					} else {
						var _v31 = func,
							_v32 = _p34,
							_v33 = res;
						func = _v31;
						li = _v32;
						res = _v33;
						continue filterR2;
					}
				} else {
					return _elm_lang$core$Result$Err(_p32._0);
				}
			}
		}
	});
var _user$project$Util$filterR = F2(
	function (func, li) {
		return A3(
			_user$project$Util$filterR2,
			func,
			li,
			_elm_lang$core$Result$Ok(
				{ctor: '[]'}));
	});
var _user$project$Util$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p35 = list;
			if (_p35.ctor === '[]') {
				return sentence;
			} else {
				if (_p35._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p35._0));
				} else {
					var _v35 = lastPart,
						_v36 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p35._0)),
						_v37 = _p35._1;
					lastPart = _v35;
					sentence = _v36;
					list = _v37;
					continue toSentenceHelper;
				}
			}
		}
	});
var _user$project$Util$toSentenceBaseCase = function (list) {
	var _p36 = list;
	_v38_2:
	do {
		if (_p36.ctor === '::') {
			if (_p36._1.ctor === '[]') {
				return _p36._0;
			} else {
				if (_p36._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p36._0,
						A2(_elm_lang$core$Basics_ops['++'], ',', _p36._1._0));
				} else {
					break _v38_2;
				}
			}
		} else {
			break _v38_2;
		}
	} while(false);
	return '';
};
var _user$project$Util$toSentenceComma = function (list) {
	var _p37 = list;
	if (((_p37.ctor === '::') && (_p37._1.ctor === '::')) && (_p37._1._1.ctor === '::')) {
		return A3(
			_user$project$Util$toSentenceHelper,
			',',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p37._0,
				A2(_elm_lang$core$Basics_ops['++'], ',', _p37._1._0)),
			{ctor: '::', _0: _p37._1._1._0, _1: _p37._1._1._1});
	} else {
		return _user$project$Util$toSentenceBaseCase(list);
	}
};

var _user$project$Common_syntax$outputAction = function (f) {
	var _p0 = f;
	switch (_p0.ctor) {
		case 'PointAModel':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0.am_name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(_elm_lang$core$Basics_ops['++'], _p0._1, ')'))));
		case 'Cup':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$outputAction(_p0._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'U',
					_user$project$Common_syntax$outputAction(_p0._1)));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$outputAction(_p0._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					_user$project$Common_syntax$outputAction(_p0._1)));
	}
};
var _user$project$Common_syntax_ops = _user$project$Common_syntax_ops || {};
_user$project$Common_syntax_ops['++++'] = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			a,
			A2(_elm_lang$core$Basics_ops['++'], ' ', b));
	});
var _user$project$Common_syntax$outputForm = F2(
	function (n, f) {
		var paren = F2(
			function (k, s) {
				return (_elm_lang$core$Native_Utils.cmp(n, k) > 0) ? A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(_elm_lang$core$Basics_ops['++'], s, ')')) : s;
			});
		var _p1 = f;
		switch (_p1.ctor) {
			case 'Atom':
				return _p1._0;
			case 'AnyFormula':
				return _p1._0;
			case 'Top':
				return 'top';
			case 'Bot':
				return 'bot';
			case 'Not':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'~',
					A2(_user$project$Common_syntax$outputForm, 3, _p1._0));
			case 'Dia':
				return A2(
					_user$project$Common_syntax_ops['++++'],
					A2(_elm_lang$core$Basics_ops['++'], '$', _p1._0),
					A2(_user$project$Common_syntax$outputForm, 3, _p1._1));
			case 'Box':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'#',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0,
						A2(_user$project$Common_syntax$outputForm, 3, _p1._1)));
			case 'Imply':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'-> ',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'Imply2':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<-',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'Iff':
				return A2(
					paren,
					1,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 2, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'<->',
							A2(_user$project$Common_syntax$outputForm, 2, _p1._1))));
			case 'And':
				return A2(
					paren,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'&',
							A2(_user$project$Common_syntax$outputForm, 3, _p1._1))));
			case 'Or':
				return A2(
					paren,
					2,
					A2(
						_user$project$Common_syntax_ops['++++'],
						A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
						A2(
							_user$project$Common_syntax_ops['++++'],
							'v',
							A2(_user$project$Common_syntax$outputForm, 3, _p1._1))));
			case 'Bigwedge':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'&&(Rel',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._0.am_name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								')(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p1._1._1._1,
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_p1._1._1._2,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'))',
														A2(_user$project$Common_syntax$outputForm, 3, _p1._2)))))))))));
			case 'Bigvee':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'vv(Rel',
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p1._1._0.am_name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								')(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._1._1._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										')(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p1._1._1._1,
											A2(
												_elm_lang$core$Basics_ops['++'],
												',',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_p1._1._1._2,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'))',
														A2(_user$project$Common_syntax$outputForm, 3, _p1._2)))))))))));
			case 'BoxAction':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_syntax$outputAction(_p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								']',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			case 'DiaAction':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Common_syntax$outputAction(_p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'>',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			case 'Precon':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Pre(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p1._0.am_name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							')(',
							A2(_elm_lang$core$Basics_ops['++'], _p1._1, ')'))));
			case 'Announce':
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'[',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								']',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
			default:
				return A2(
					paren,
					3,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'<',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_user$project$Common_syntax$outputForm, 3, _p1._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'>',
								A2(_user$project$Common_syntax$outputForm, 3, _p1._1)))));
		}
	});
var _user$project$Common_syntax$lookPre = F2(
	function (li, at) {
		lookPre:
		while (true) {
			var _p2 = li;
			if (_p2.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p2._0._0)) {
					return _elm_lang$core$Maybe$Just(_p2._0._1);
				} else {
					var _v3 = _p2._1,
						_v4 = at;
					li = _v3;
					at = _v4;
					continue lookPre;
				}
			}
		}
	});
var _user$project$Common_syntax$amodel2agentlist = function (ac) {
	return A2(
		_elm_lang$core$List$map,
		function (_p3) {
			var _p4 = _p3;
			return _p4._0;
		},
		ac.am_relation);
};
var _user$project$Common_syntax$formula2Int = function (f) {
	var _p5 = f;
	switch (_p5.ctor) {
		case 'Bot':
			return 0;
		case 'Top':
			return 1;
		case 'Atom':
			return 2 + _elm_lang$core$String$length(_p5._0);
		case 'AnyFormula':
			return 3 + _elm_lang$core$String$length(_p5._0);
		case 'Not':
			return 4 + _user$project$Common_syntax$formula2Int(_p5._0);
		case 'And':
			return (5 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Or':
			return (6 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Imply':
			return (7 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Imply2':
			return (8 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Iff':
			return (9 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Dia':
			return (10 + _elm_lang$core$String$length(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Box':
			return (11 + _elm_lang$core$String$length(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Announce':
			return (12 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Announce2':
			return (13 + _user$project$Common_syntax$formula2Int(_p5._0)) + _user$project$Common_syntax$formula2Int(_p5._1);
		case 'Bigwedge':
			return 14;
		case 'Bigvee':
			return 15;
		case 'BoxAction':
			return 16;
		case 'DiaAction':
			return 17;
		default:
			return 18;
	}
};
var _user$project$Common_syntax$isDELformula = function (f) {
	isDELformula:
	while (true) {
		var _p6 = f;
		_v7_14:
		do {
			switch (_p6.ctor) {
				case 'Not':
					var _v8 = _p6._0;
					f = _v8;
					continue isDELformula;
				case 'And':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Imply':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Imply2':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Iff':
					return _user$project$Common_syntax$isDELformula(_p6._0) && _user$project$Common_syntax$isDELformula(_p6._1);
				case 'Dia':
					var _v9 = _p6._1;
					f = _v9;
					continue isDELformula;
				case 'Box':
					var _v10 = _p6._1;
					f = _v10;
					continue isDELformula;
				case 'Announce':
					return false;
				case 'Announce2':
					return false;
				case 'Bigwedge':
					if ((_p6._1.ctor === '_Tuple2') && (_p6._1._1.ctor === '_Tuple3')) {
						var _v11 = _p6._2;
						f = _v11;
						continue isDELformula;
					} else {
						break _v7_14;
					}
				case 'Bigvee':
					if ((_p6._1.ctor === '_Tuple2') && (_p6._1._1.ctor === '_Tuple3')) {
						var _v12 = _p6._2;
						f = _v12;
						continue isDELformula;
					} else {
						break _v7_14;
					}
				case 'BoxAction':
					var _v13 = _p6._1;
					f = _v13;
					continue isDELformula;
				case 'DiaAction':
					var _v14 = _p6._1;
					f = _v14;
					continue isDELformula;
				case 'Precon':
					return true;
				default:
					break _v7_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$isPALformula = function (f) {
	isPALformula:
	while (true) {
		var _p7 = f;
		_v15_14:
		do {
			switch (_p7.ctor) {
				case 'Not':
					var _v16 = _p7._0;
					f = _v16;
					continue isPALformula;
				case 'And':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Imply':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Imply2':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Iff':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Dia':
					var _v17 = _p7._1;
					f = _v17;
					continue isPALformula;
				case 'Box':
					var _v18 = _p7._1;
					f = _v18;
					continue isPALformula;
				case 'Announce':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Announce2':
					return _user$project$Common_syntax$isPALformula(_p7._0) && _user$project$Common_syntax$isPALformula(_p7._1);
				case 'Bigwedge':
					if ((_p7._1.ctor === '_Tuple2') && (_p7._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v15_14;
					}
				case 'Bigvee':
					if ((_p7._1.ctor === '_Tuple2') && (_p7._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v15_14;
					}
				case 'BoxAction':
					return false;
				case 'DiaAction':
					return false;
				case 'Precon':
					return false;
				default:
					break _v15_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$isELformula = function (f) {
	isELformula:
	while (true) {
		var _p8 = f;
		_v19_14:
		do {
			switch (_p8.ctor) {
				case 'Not':
					var _v20 = _p8._0;
					f = _v20;
					continue isELformula;
				case 'And':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Imply':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Imply2':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Iff':
					return _user$project$Common_syntax$isELformula(_p8._0) && _user$project$Common_syntax$isELformula(_p8._1);
				case 'Dia':
					var _v21 = _p8._1;
					f = _v21;
					continue isELformula;
				case 'Box':
					var _v22 = _p8._1;
					f = _v22;
					continue isELformula;
				case 'Announce':
					return false;
				case 'Announce2':
					return false;
				case 'Bigwedge':
					if ((_p8._1.ctor === '_Tuple2') && (_p8._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v19_14;
					}
				case 'Bigvee':
					if ((_p8._1.ctor === '_Tuple2') && (_p8._1._1.ctor === '_Tuple3')) {
						return false;
					} else {
						break _v19_14;
					}
				case 'BoxAction':
					return false;
				case 'DiaAction':
					return false;
				case 'Precon':
					return false;
				default:
					break _v19_14;
			}
		} while(false);
		return true;
	}
};
var _user$project$Common_syntax$AtomBool = F2(
	function (a, b) {
		return {atom: a, maybeBool: b};
	});
var _user$project$Common_syntax$FormulaBool = F2(
	function (a, b) {
		return {formula: a, maybeBool: b};
	});
var _user$project$Common_syntax$AModel = F4(
	function (a, b, c, d) {
		return {am_name: a, am_domain: b, am_relation: c, am_pre: d};
	});
var _user$project$Common_syntax$Precon = F2(
	function (a, b) {
		return {ctor: 'Precon', _0: a, _1: b};
	});
var _user$project$Common_syntax$DiaAction = F2(
	function (a, b) {
		return {ctor: 'DiaAction', _0: a, _1: b};
	});
var _user$project$Common_syntax$BoxAction = F2(
	function (a, b) {
		return {ctor: 'BoxAction', _0: a, _1: b};
	});
var _user$project$Common_syntax$Bigvee = F3(
	function (a, b, c) {
		return {ctor: 'Bigvee', _0: a, _1: b, _2: c};
	});
var _user$project$Common_syntax$Bigwedge = F3(
	function (a, b, c) {
		return {ctor: 'Bigwedge', _0: a, _1: b, _2: c};
	});
var _user$project$Common_syntax$Announce2 = F2(
	function (a, b) {
		return {ctor: 'Announce2', _0: a, _1: b};
	});
var _user$project$Common_syntax$Announce = F2(
	function (a, b) {
		return {ctor: 'Announce', _0: a, _1: b};
	});
var _user$project$Common_syntax$Box = F2(
	function (a, b) {
		return {ctor: 'Box', _0: a, _1: b};
	});
var _user$project$Common_syntax$know = F2(
	function (ag, f) {
		return A2(_user$project$Common_syntax$Box, ag, f);
	});
var _user$project$Common_syntax$Dia = F2(
	function (a, b) {
		return {ctor: 'Dia', _0: a, _1: b};
	});
var _user$project$Common_syntax$Iff = F2(
	function (a, b) {
		return {ctor: 'Iff', _0: a, _1: b};
	});
var _user$project$Common_syntax$Imply2 = F2(
	function (a, b) {
		return {ctor: 'Imply2', _0: a, _1: b};
	});
var _user$project$Common_syntax$Imply = F2(
	function (a, b) {
		return {ctor: 'Imply', _0: a, _1: b};
	});
var _user$project$Common_syntax$Or = F2(
	function (a, b) {
		return {ctor: 'Or', _0: a, _1: b};
	});
var _user$project$Common_syntax$And = F2(
	function (a, b) {
		return {ctor: 'And', _0: a, _1: b};
	});
var _user$project$Common_syntax$Not = function (a) {
	return {ctor: 'Not', _0: a};
};
var _user$project$Common_syntax$notknow = F2(
	function (ag, f) {
		return _user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$know, ag, f));
	});
var _user$project$Common_syntax$AnyFormula = function (a) {
	return {ctor: 'AnyFormula', _0: a};
};
var _user$project$Common_syntax$Atom = function (a) {
	return {ctor: 'Atom', _0: a};
};
var _user$project$Common_syntax$reada = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'e1',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'e0',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {ctor: '[]'}
		}
	};
	var name = 'Reada';
	var pa = 'e1';
	var npa = 'e0';
	var readaS = {
		ctor: '::',
		_0: npa,
		_1: {
			ctor: '::',
			_0: pa,
			_1: {ctor: '[]'}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npa, _2: npa},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pa, _2: pa},
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: npa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: pa},
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: pa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: npa},
					_1: {ctor: '[]'}
				}
			}));
	return {am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre};
}();
var _user$project$Common_syntax$readb = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'pb',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'npb',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {ctor: '[]'}
		}
	};
	var name = 'Readb';
	var pb = 'pb';
	var npb = 'npb';
	var readaS = {
		ctor: '::',
		_0: npb,
		_1: {
			ctor: '::',
			_0: pb,
			_1: {ctor: '[]'}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npb, _2: npb},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pb, _2: pb},
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: npb, _2: pb},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'a', _1: pb, _2: npb},
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npb, _2: npb},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pb, _2: pb},
					_1: {ctor: '[]'}
				}
			}));
	return {am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre};
}();
var _user$project$Common_syntax$Bot = {ctor: 'Bot'};
var _user$project$Common_syntax$bigOr = function (li) {
	var _p9 = li;
	if (_p9.ctor === '[]') {
		return _user$project$Common_syntax$Bot;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$Or, x, y);
				}),
			_p9._0,
			_p9._1);
	}
};
var _user$project$Common_syntax$knowEither = F2(
	function (ag, f) {
		return _user$project$Common_syntax$bigOr(
			{
				ctor: '::',
				_0: A2(_user$project$Common_syntax$Box, ag, f),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Common_syntax$Box,
						ag,
						_user$project$Common_syntax$Not(f)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Common_syntax$knowNeither = F2(
	function (ag, f) {
		return _user$project$Common_syntax$Not(
			A2(_user$project$Common_syntax$knowEither, ag, f));
	});
var _user$project$Common_syntax$lookPre2 = F2(
	function (li, at) {
		lookPre2:
		while (true) {
			var _p10 = li;
			if (_p10.ctor === '[]') {
				return _user$project$Common_syntax$Bot;
			} else {
				if (_elm_lang$core$Native_Utils.eq(at, _p10._0._0)) {
					return _p10._0._1;
				} else {
					var _v25 = _p10._1,
						_v26 = at;
					li = _v25;
					at = _v26;
					continue lookPre2;
				}
			}
		}
	});
var _user$project$Common_syntax$Top = {ctor: 'Top'};
var _user$project$Common_syntax$bigAnd = function (li) {
	var _p11 = li;
	if (_p11.ctor === '[]') {
		return _user$project$Common_syntax$Top;
	} else {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$And, x, y);
				}),
			_p11._0,
			_p11._1);
	}
};
var _user$project$Common_syntax$skip = function () {
	var skipPre = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'e1', _1: _user$project$Common_syntax$Top},
		_1: {ctor: '[]'}
	};
	var e1 = 'e1';
	var skipS = {
		ctor: '::',
		_0: e1,
		_1: {ctor: '[]'}
	};
	var refl = function (ag) {
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return {ctor: '_Tuple3', _0: ag, _1: x, _2: x};
			},
			skipS);
	};
	var skipR = {
		ctor: '::',
		_0: {ctor: '_Tuple3', _0: 'a', _1: e1, _2: e1},
		_1: {ctor: '[]'}
	};
	return {am_name: 'Skip', am_domain: skipS, am_relation: skipR, am_pre: skipPre};
}();
var _user$project$Common_syntax$ComposePoAM = F2(
	function (a, b) {
		return {ctor: 'ComposePoAM', _0: a, _1: b};
	});
var _user$project$Common_syntax$Cup = F2(
	function (a, b) {
		return {ctor: 'Cup', _0: a, _1: b};
	});
var _user$project$Common_syntax$PointAModel = F2(
	function (a, b) {
		return {ctor: 'PointAModel', _0: a, _1: b};
	});
var _user$project$Common_syntax$composeAM = F2(
	function (e1, e2) {
		var form = F2(
			function (x, y) {
				return A2(
					_user$project$Common_syntax$And,
					A2(_user$project$Common_syntax$Precon, e1, x),
					A2(
						_user$project$Common_syntax$BoxAction,
						A2(_user$project$Common_syntax$PointAModel, e1, x),
						A2(_user$project$Common_syntax$Precon, e2, y)));
			});
		var mapF = function (_p12) {
			var _p13 = _p12;
			var _p15 = _p13._1;
			var _p14 = _p13._0;
			return {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p14,
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(_elm_lang$core$Basics_ops['++'], _p15, ')')))),
				_1: A2(form, _p14, _p15)
			};
		};
		var ff = function (_p16) {
			var _p17 = _p16;
			var _p18 = _p17._0;
			return A2(
				_elm_lang$core$List$member,
				{ctor: '_Tuple3', _0: _p18, _1: _p17._1._0, _2: _p17._2._0},
				e1.am_relation) && A2(
				_elm_lang$core$List$member,
				{ctor: '_Tuple3', _0: _p18, _1: _p17._1._1, _2: _p17._2._1},
				e2.am_relation);
		};
		var domain1 = A2(_user$project$Util$cartesian, e1.am_domain, e2.am_domain);
		var domain2 = A2(
			_elm_lang$core$List$map,
			function (_p19) {
				var _p20 = _p19;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p20._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(_elm_lang$core$Basics_ops['++'], _p20._1, ')'))));
			},
			domain1);
		var pre2 = A2(_elm_lang$core$List$map, mapF, domain1);
		var name2 = A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				e1.am_name,
				A2(
					_elm_lang$core$Basics_ops['++'],
					';',
					A2(_elm_lang$core$Basics_ops['++'], e2.am_name, ')'))));
		var agents = _user$project$Util$nub2(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Common_syntax$amodel2agentlist(e1),
				_user$project$Common_syntax$amodel2agentlist(e2)));
		var relation1 = A3(_user$project$Util$cartesian2, agents, domain1, domain1);
		var relation2 = A2(_elm_lang$core$List$filter, ff, relation1);
		var relation3 = A2(
			_elm_lang$core$List$map,
			function (_p21) {
				var _p22 = _p21;
				return {
					ctor: '_Tuple3',
					_0: _p22._0,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p22._1._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(_elm_lang$core$Basics_ops['++'], _p22._1._1, ')')))),
					_2: A2(
						_elm_lang$core$Basics_ops['++'],
						'(',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p22._2._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								',',
								A2(_elm_lang$core$Basics_ops['++'], _p22._2._1, ')'))))
				};
			},
			relation2);
		return {am_name: name2, am_domain: domain2, am_relation: relation3, am_pre: pre2};
	});
var _user$project$Common_syntax$composeAction = F2(
	function (a, b) {
		composeAction:
		while (true) {
			var _p23 = {ctor: '_Tuple2', _0: a, _1: b};
			_v32_4:
			do {
				if (_p23.ctor === '_Tuple2') {
					switch (_p23._0.ctor) {
						case 'PointAModel':
							switch (_p23._1.ctor) {
								case 'PointAModel':
									return A2(
										_user$project$Common_syntax$PointAModel,
										A2(_user$project$Common_syntax$composeAM, _p23._0._0, _p23._1._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'(',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p23._0._1,
												A2(
													_elm_lang$core$Basics_ops['++'],
													',',
													A2(_elm_lang$core$Basics_ops['++'], _p23._1._1, ')')))));
								case 'ComposePoAM':
									var _v33 = A2(_user$project$Common_syntax$PointAModel, _p23._0._0, _p23._0._1),
										_v34 = A2(_user$project$Common_syntax$composeAction, _p23._1._0, _p23._1._1);
									a = _v33;
									b = _v34;
									continue composeAction;
								default:
									break _v32_4;
							}
						case 'ComposePoAM':
							switch (_p23._1.ctor) {
								case 'PointAModel':
									var _v35 = A2(_user$project$Common_syntax$composeAction, _p23._0._0, _p23._0._1),
										_v36 = A2(_user$project$Common_syntax$PointAModel, _p23._1._0, _p23._1._1);
									a = _v35;
									b = _v36;
									continue composeAction;
								case 'ComposePoAM':
									var _v37 = A2(_user$project$Common_syntax$composeAction, _p23._0._0, _p23._0._1),
										_v38 = A2(_user$project$Common_syntax$composeAction, _p23._1._0, _p23._1._1);
									a = _v37;
									b = _v38;
									continue composeAction;
								default:
									break _v32_4;
							}
						default:
							break _v32_4;
					}
				} else {
					break _v32_4;
				}
			} while(false);
			return _elm_lang$core$Native_Utils.crashCase(
				'Common_syntax',
				{
					start: {line: 197, column: 22},
					end: {line: 208, column: 50}
				},
				_p23)('error in composeAction');
		}
	});
var _user$project$Common_syntax_ops = _user$project$Common_syntax_ops || {};
_user$project$Common_syntax_ops['+++'] = _user$project$Common_syntax$composeAction;
var _user$project$Common_syntax$skip_point = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$skip, 's1');
var _user$project$Common_syntax$reada_po = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$reada, 'pa');
var _user$project$Common_syntax$readb_po = A2(_user$project$Common_syntax$PointAModel, _user$project$Common_syntax$readb, 'pb');
var _user$project$Common_syntax$mayReada = function () {
	var readaPre = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'pa',
			_1: _user$project$Common_syntax$Atom('p')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'npa',
				_1: _user$project$Common_syntax$Not(
					_user$project$Common_syntax$Atom('p'))
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 't', _1: _user$project$Common_syntax$Top},
				_1: {ctor: '[]'}
			}
		}
	};
	var name = 'MayReada';
	var t = 't';
	var pa = 'pa';
	var npa = 'npa';
	var readaS = {
		ctor: '::',
		_0: npa,
		_1: {
			ctor: '::',
			_0: pa,
			_1: {
				ctor: '::',
				_0: t,
				_1: {ctor: '[]'}
			}
		}
	};
	var readaR = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: 'a', _1: npa, _2: npa},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'a', _1: pa, _2: pa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'a', _1: t, _2: t},
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: npa},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: pa},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: t},
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: pa},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: npa},
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: npa, _2: t},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: npa},
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: 'b', _1: pa, _2: t},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple3', _0: 'b', _1: t, _2: pa},
							_1: {ctor: '[]'}
						}
					}))));
	return A2(
		_user$project$Common_syntax$PointAModel,
		{am_name: name, am_domain: readaS, am_relation: readaR, am_pre: readaPre},
		pa);
}();

var _user$project$Parser_Formula$jsonRel2AMRelation = function (x) {
	return {ctor: '_Tuple3', _0: x.agent, _1: x.from, _2: x.to};
};
var _user$project$Parser_Formula$parseFormatError = F2(
	function (ms, stream) {
		var expectationSeparator = '\n  * ';
		var separator = '| ';
		var separatorOffset = _elm_lang$core$String$length(separator);
		var location = _elm_community$parser_combinators$Combine$currentLocation(stream);
		var lineNumberOffset = _elm_lang$core$Basics$floor(
			A2(
				_elm_lang$core$Basics$logBase,
				10,
				_elm_lang$core$Basics$toFloat(location.line))) + 1;
		var padding = (location.column + separatorOffset) + 2;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'Parse error around line:\n\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(location.line),
				A2(
					_elm_lang$core$Basics_ops['++'],
					separator,
					A2(
						_elm_lang$core$Basics_ops['++'],
						location.source,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A3(
									_elm_lang$core$String$padLeft,
									padding,
									_elm_lang$core$Native_Utils.chr(' '),
									'^'),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\nI expected one of the following:\n',
									A2(
										_elm_lang$core$Basics_ops['++'],
										expectationSeparator,
										A2(_elm_lang$core$String$join, expectationSeparator, ms)))))))));
	});
var _user$project$Parser_Formula$identifier_state_var = _elm_community$parser_combinators$Combine$lazy(
	function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$regex('[x-z0-9]+'),
			'identifier_state');
	});
var _user$project$Parser_Formula$identifier_state = _elm_community$parser_combinators$Combine$lazy(
	function (_p2) {
		var _p3 = _p2;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$regex('[e-g0-9]+'),
			'identifier_state');
	});
var _user$project$Parser_Formula$identifier_AModel = _elm_community$parser_combinators$Combine$lazy(
	function (_p4) {
		var _p5 = _p4;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return {
					am_name: x,
					am_domain: {ctor: '[]'},
					am_relation: {ctor: '[]'},
					am_pre: {ctor: '[]'}
				};
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[A-Za-z0-9]+'),
				'identifier_AModel'));
	});
var _user$project$Parser_Formula$mixAM2AM = function (st) {
	var ff = function (x) {
		var _p6 = x;
		if (_p6.ctor === 'AModelAt') {
			return _p6._0;
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					ff(_p6._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						';',
						A2(
							_elm_lang$core$Basics_ops['++'],
							ff(_p6._1),
							')'))));
		}
	};
	return {
		am_name: ff(st),
		am_domain: {ctor: '[]'},
		am_relation: {ctor: '[]'},
		am_pre: {ctor: '[]'}
	};
};
var _user$project$Parser_Formula$mixState2state = function (st) {
	var _p7 = st;
	switch (_p7.ctor) {
		case 'StateAt':
			return _p7._0;
		case 'StateVar':
			return _p7._0;
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Parser_Formula$mixState2state(_p7._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						',',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Parser_Formula$mixState2state(_p7._1),
							')'))));
	}
};
var _user$project$Parser_Formula$parseForm0_identifier_atom = A2(
	_elm_community$parser_combinators$Combine_ops['<$>'],
	_user$project$Common_syntax$Atom,
	A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine$regex('[_p-r][_p-r0-9]*'),
		'parseForm0_identifier_atom'));
var _user$project$Parser_Formula$parseForm0_identifier_formula = _elm_community$parser_combinators$Combine$lazy(
	function (_p8) {
		var _p9 = _p8;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Common_syntax$AnyFormula,
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[_A-D][_A-D0-9]*'),
				'parseForm0_identifier_formula'));
	});
var _user$project$Parser_Formula$parseAgent_identifire_agent = _elm_community$parser_combinators$Combine$lazy(
	function (_p10) {
		var _p11 = _p10;
		var name = _elm_community$parser_combinators$Combine$regex('[a-e][a0-9]*');
		return A2(_elm_community$parser_combinators$Combine_ops['<?>'], name, 'agent');
	});
var _user$project$Parser_Formula$parseForm0_boolForm = _elm_community$parser_combinators$Combine$lazy(
	function (_p12) {
		var _p13 = _p12;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$choice(
				{
					ctor: '::',
					_0: A2(
						_elm_community$parser_combinators$Combine_ops['<$'],
						_user$project$Common_syntax$Top,
						_elm_community$parser_combinators$Combine$string('top')),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_community$parser_combinators$Combine_ops['<$'],
							_user$project$Common_syntax$Bot,
							_elm_community$parser_combinators$Combine$string('bot')),
						_1: {ctor: '[]'}
					}
				}),
			'parseForm0_boolForm');
	});
var _user$project$Parser_Formula$parse_pair_states = _elm_community$parser_combinators$Combine$lazy(
	function (_p14) {
		var _p15 = _p14;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (a, _p16) {
						var _p17 = _p16;
						return {ctor: '_Tuple3', _0: a, _1: _p17._0, _2: _p17._1};
					}),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAgent_identifire_agent)),
			_elm_community$parser_combinators$Combine$parens(
				A2(
					_elm_community$parser_combinators$Combine_ops['<*>'],
					A2(
						_elm_community$parser_combinators$Combine_ops['<*'],
						A2(
							_elm_community$parser_combinators$Combine_ops['<$>'],
							F2(
								function (x, y) {
									return {ctor: '_Tuple2', _0: x, _1: y};
								}),
							_user$project$Parser_Formula$identifier_state),
						_elm_community$parser_combinators$Combine$string(',')),
					_user$project$Parser_Formula$identifier_state_var)));
	});
var _user$project$Parser_Formula$parseAModel_amodel_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p18) {
		var _p19 = _p18;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (e, a) {
						return {ctor: '_Tuple2', _0: e, _1: a};
					}),
				A2(
					_elm_community$parser_combinators$Combine_ops['*>'],
					_elm_community$parser_combinators$Combine$string('Rel'),
					_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$identifier_AModel))),
			_user$project$Parser_Formula$parse_pair_states);
	});
var _user$project$Parser_Formula$AModelJSON = F5(
	function (a, b, c, d, e) {
		return {name: a, domain: b, relation: c, precondition: d, comment: e};
	});
var _user$project$Parser_Formula$AModelJSON_rel = F3(
	function (a, b, c) {
		return {agent: a, from: b, to: c};
	});
var _user$project$Parser_Formula$AModelJSON_pre = F2(
	function (a, b) {
		return {from: a, to: b};
	});
var _user$project$Parser_Formula$MixState = F2(
	function (a, b) {
		return {ctor: 'MixState', _0: a, _1: b};
	});
var _user$project$Parser_Formula$StateVar = function (a) {
	return {ctor: 'StateVar', _0: a};
};
var _user$project$Parser_Formula$identifier_State2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p20) {
		var _p21 = _p20;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return _user$project$Parser_Formula$StateVar(x);
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[x-z0-9]+'),
				'identifier_Stete2'));
	});
var _user$project$Parser_Formula$StateAt = function (a) {
	return {ctor: 'StateAt', _0: a};
};
var _user$project$Parser_Formula$identifier_State1 = _elm_community$parser_combinators$Combine$lazy(
	function (_p22) {
		var _p23 = _p22;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (x) {
				return _user$project$Parser_Formula$StateAt(x);
			},
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[e-gx-z0-9]+'),
				'identifier_State1'));
	});
var _user$project$Parser_Formula$parseStateSelect = _elm_community$parser_combinators$Combine$lazy(
	function (_p24) {
		var _p25 = _p24;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseState),
			_user$project$Parser_Formula$identifier_State1);
	});
var _user$project$Parser_Formula$parseState = _elm_community$parser_combinators$Combine$lazy(
	function (_p26) {
		var _p27 = _p26;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Parser_Formula$MixState,
			_elm_community$parser_combinators$Combine$string(','));
		return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseStateSelect);
	});
var _user$project$Parser_Formula$MixAModel = F2(
	function (a, b) {
		return {ctor: 'MixAModel', _0: a, _1: b};
	});
var _user$project$Parser_Formula$AModelAt = function (a) {
	return {ctor: 'AModelAt', _0: a};
};
var _user$project$Parser_Formula$identifier_AModel1 = _elm_community$parser_combinators$Combine$lazy(
	function (_p28) {
		var _p29 = _p28;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Parser_Formula$AModelAt,
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				_elm_community$parser_combinators$Combine$regex('[A-Za-z0-9]+'),
				'identifier_AModel1'));
	});
var _user$project$Parser_Formula$parseAModelSelect = _elm_community$parser_combinators$Combine$lazy(
	function (_p30) {
		var _p31 = _p30;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel2),
			_user$project$Parser_Formula$identifier_AModel1);
	});
var _user$project$Parser_Formula$parseAModel2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p32) {
		var _p33 = _p32;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Parser_Formula$MixAModel,
			_elm_community$parser_combinators$Combine$string(';'));
		return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAModelSelect);
	});
var _user$project$Parser_Formula$test21 = A2(_elm_community$parser_combinators$Combine$parse, _user$project$Parser_Formula$parseAModel2, '(((E1;E2);E3))');
var _user$project$Parser_Formula$parseAction1_identifier_actionModel = _elm_community$parser_combinators$Combine$lazy(
	function (_p34) {
		var _p35 = _p34;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					_user$project$Common_syntax$PointAModel,
					A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixAM2AM, _user$project$Parser_Formula$parseAModel2)),
				_elm_community$parser_combinators$Combine$string(',')),
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixState2state, _user$project$Parser_Formula$parseState),
				'parseAction1_identifier_actionModel'));
	});
var _user$project$Parser_Formula$parseAction2_anyAction = _elm_community$parser_combinators$Combine$lazy(
	function (_p36) {
		var _p37 = _p36;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAction1_identifier_actionModel),
			'parseAction2_anyAction_p');
	});
var _user$project$Parser_Formula$parseAction3_composition = _elm_community$parser_combinators$Combine$lazy(
	function (_p38) {
		var _p39 = _p38;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$ComposePoAM,
			_elm_community$parser_combinators$Combine$string(';'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAction2_anyAction),
			'parseAction4_cup');
	});
var _user$project$Parser_Formula$parseAction4_cup = _elm_community$parser_combinators$Combine$lazy(
	function (_p40) {
		var _p41 = _p40;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Cup,
			_elm_community$parser_combinators$Combine$string('U'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<?>'],
			A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseAction3_composition),
			'parseAction4_cup');
	});
var _user$project$Parser_Formula$parseForm0_identifier_precon = _elm_community$parser_combinators$Combine$lazy(
	function (_p42) {
		var _p43 = _p42;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					_user$project$Common_syntax$Precon,
					_elm_community$parser_combinators$Combine$string('Pre')),
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixAM2AM, _user$project$Parser_Formula$parseAModel2)),
			A2(
				_elm_community$parser_combinators$Combine_ops['<?>'],
				A2(_elm_community$parser_combinators$Combine_ops['<$>'], _user$project$Parser_Formula$mixState2state, _user$project$Parser_Formula$parseState),
				'parseForm0_identifier_atom'));
	});
var _user$project$Parser_Formula$parseForm_atom = _elm_community$parser_combinators$Combine$lazy(
	function (_p44) {
		var _p45 = _p44;
		return _elm_community$parser_combinators$Combine$choice(
			{
				ctor: '::',
				_0: _user$project$Parser_Formula$parseForm0_boolForm,
				_1: {
					ctor: '::',
					_0: _user$project$Parser_Formula$parseForm10_bigWedgep,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$parseForm10_bigVee,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$parseForm8_announce_p,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$parseForm9_announce2_p,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$parseForm11_action_p,
									_1: {
										ctor: '::',
										_0: _user$project$Parser_Formula$parseForm0_identifier_precon,
										_1: {
											ctor: '::',
											_0: _user$project$Parser_Formula$parseForm0_identifier_formula,
											_1: {
												ctor: '::',
												_0: _user$project$Parser_Formula$parseForm0_identifier_atom,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Parser_Formula$parseForm10_bigVee = _elm_community$parser_combinators$Combine$lazy(
	function (_p46) {
		var _p47 = _p46;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					F2(
						function (mo, f) {
							return A3(
								_user$project$Common_syntax$Bigwedge,
								{ctor: '[]'},
								mo,
								f);
						}),
					_elm_community$parser_combinators$Combine$string('vv')),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel_amodel_p)),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$parseForm2_unary = _elm_community$parser_combinators$Combine$lazy(
	function (_p48) {
		var _p49 = _p48;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$choice(
				{
					ctor: '::',
					_0: _user$project$Parser_Formula$knowp,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$knowifp,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$boxp,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$diap,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$notp,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_user$project$Parser_Formula$parseForm1_term);
	});
var _user$project$Parser_Formula$boxp = _elm_community$parser_combinators$Combine$lazy(
	function (_p50) {
		var _p51 = _p50;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					_user$project$Common_syntax$Box,
					_elm_community$parser_combinators$Combine$string('#')),
				_user$project$Parser_Formula$parseAgent_identifire_agent),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$diap = _elm_community$parser_combinators$Combine$lazy(
	function (_p52) {
		var _p53 = _p52;
		var unaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			F2(
				function (x, y) {
					return A2(_user$project$Common_syntax$Dia, x, y);
				}),
			_elm_community$parser_combinators$Combine$string('$'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(_elm_community$parser_combinators$Combine_ops['<*>'], unaryOp, _user$project$Parser_Formula$parseAgent_identifire_agent),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$knowifp = _elm_community$parser_combinators$Combine$lazy(
	function (_p54) {
		var _p55 = _p54;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$'],
				function (_p56) {
					var _p57 = _p56;
					var _p59 = _p57._1;
					var _p58 = _p57._0;
					return A2(
						_user$project$Common_syntax$Or,
						A2(_user$project$Common_syntax$Box, _p58, _p59),
						A2(
							_user$project$Common_syntax$Box,
							_p58,
							_user$project$Common_syntax$Not(_p59)));
				},
				_elm_community$parser_combinators$Combine$string('knows_if')),
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$knowp2));
	});
var _user$project$Parser_Formula$knowp2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p60) {
		var _p61 = _p60;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F2(
						function (x, y) {
							return {ctor: '_Tuple2', _0: x, _1: y};
						}),
					_user$project$Parser_Formula$parseAgent_identifire_agent),
				_elm_community$parser_combinators$Combine$string(',')),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$knowp = _elm_community$parser_combinators$Combine$lazy(
	function (_p62) {
		var _p63 = _p62;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$'],
				function (_p64) {
					var _p65 = _p64;
					return A2(_user$project$Common_syntax$Box, _p65._0, _p65._1);
				},
				_elm_community$parser_combinators$Combine$string('knows')),
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$knowp2));
	});
var _user$project$Parser_Formula$notp = _elm_community$parser_combinators$Combine$lazy(
	function (_p66) {
		var _p67 = _p66;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_user$project$Common_syntax$Not,
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$string('~'),
				_user$project$Parser_Formula$parseForm2_unary));
	});
var _user$project$Parser_Formula$parseForm1_term = _elm_community$parser_combinators$Combine$lazy(
	function (_p68) {
		var _p69 = _p68;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseForm7_expr),
			_user$project$Parser_Formula$parseForm_atom);
	});
var _user$project$Parser_Formula$parseForm7_expr = _elm_community$parser_combinators$Combine$lazy(
	function (_p70) {
		var _p71 = _p70;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Iff,
			_elm_community$parser_combinators$Combine$string('<->'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p72) {
				var _p73 = _p72;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm6_impl2);
			});
	});
var _user$project$Parser_Formula$parseForm6_impl2 = _elm_community$parser_combinators$Combine$lazy(
	function (_p74) {
		var _p75 = _p74;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Imply2,
			_elm_community$parser_combinators$Combine$string('<-'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p76) {
				var _p77 = _p76;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm5_impl);
			});
	});
var _user$project$Parser_Formula$parseForm5_impl = _elm_community$parser_combinators$Combine$lazy(
	function (_p78) {
		var _p79 = _p78;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Imply,
			_elm_community$parser_combinators$Combine$string('->'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p80) {
				var _p81 = _p80;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm4_or);
			});
	});
var _user$project$Parser_Formula$parseForm4_or = _elm_community$parser_combinators$Combine$lazy(
	function (_p82) {
		var _p83 = _p82;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$Or,
			_elm_community$parser_combinators$Combine$string('v'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p84) {
				var _p85 = _p84;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm3_and);
			});
	});
var _user$project$Parser_Formula$parseForm3_and = _elm_community$parser_combinators$Combine$lazy(
	function (_p86) {
		var _p87 = _p86;
		var binaryOp = A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			_user$project$Common_syntax$And,
			_elm_community$parser_combinators$Combine$string('&'));
		return _elm_community$parser_combinators$Combine$lazy(
			function (_p88) {
				var _p89 = _p88;
				return A2(_elm_community$parser_combinators$Combine$chainl, binaryOp, _user$project$Parser_Formula$parseForm2_unary);
			});
	});
var _user$project$Parser_Formula$parseForm10_bigWedgep = _elm_community$parser_combinators$Combine$lazy(
	function (_p90) {
		var _p91 = _p90;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					F2(
						function (mo, f) {
							return A3(
								_user$project$Common_syntax$Bigwedge,
								{ctor: '[]'},
								mo,
								f);
						}),
					_elm_community$parser_combinators$Combine$string('&&')),
				_elm_community$parser_combinators$Combine$parens(_user$project$Parser_Formula$parseAModel_amodel_p)),
			_user$project$Parser_Formula$parseForm2_unary);
	});
var _user$project$Parser_Formula$parseForm11_action_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p92) {
		var _p93 = _p92;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$BoxAction,
				_elm_community$parser_combinators$Combine$brackets(_user$project$Parser_Formula$parseAction4_cup)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm11_action_p'));
	});
var _user$project$Parser_Formula$parseForm8_announce_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p94) {
		var _p95 = _p94;
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$Announce,
				_elm_community$parser_combinators$Combine$brackets(_user$project$Parser_Formula$parseForm7_expr)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm8_announce_p'));
	});
var _user$project$Parser_Formula$parseForm9_announce2_p = _elm_community$parser_combinators$Combine$lazy(
	function (_p96) {
		var _p97 = _p96;
		var brackets2 = A2(
			_elm_community$parser_combinators$Combine$between,
			_elm_community$parser_combinators$Combine$string('<'),
			_elm_community$parser_combinators$Combine$string('>'));
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				_user$project$Common_syntax$Announce2,
				brackets2(_user$project$Parser_Formula$parseForm7_expr)),
			A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm2_unary, 'parseForm9_announce2_p'));
	});
var _user$project$Parser_Formula$programFormula = _elm_community$parser_combinators$Combine$lazy(
	function (_p98) {
		var _p99 = _p98;
		return A2(_elm_community$parser_combinators$Combine_ops['<?>'], _user$project$Parser_Formula$parseForm7_expr, 'error in parseForm7_expression');
	});
var _user$project$Parser_Formula$parseFormula2 = function (s) {
	var ss = _user$project$Util$removeWhiteSpaceFromString(s);
	return A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['<*'], _user$project$Parser_Formula$programFormula, _elm_community$parser_combinators$Combine$end),
		ss);
};
var _user$project$Parser_Formula$test02 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))A');
var _user$project$Parser_Formula$test03 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))[(E,x)]A');
var _user$project$Parser_Formula$test04 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#aA');
var _user$project$Parser_Formula$test05 = _user$project$Parser_Formula$parseFormula2('[(E,e)]A');
var _user$project$Parser_Formula$test06 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#a[(E,e)]A');
var _user$project$Parser_Formula$test07 = _user$project$Parser_Formula$parseFormula2('&&(~(E)(a)(e,x))#a[(E,x1)]A');
var _user$project$Parser_Formula$test08 = _user$project$Parser_Formula$parseFormula2('[(E,e)]#aA <->(Pre(E)(e)->&&(~(E)(a)(e,x))#a[(E,x)]A)');
var _user$project$Parser_Formula$parseFormula = function (s) {
	var ss = _user$project$Util$removeWhiteSpaceFromString(s);
	var _p100 = A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['<*'], _user$project$Parser_Formula$programFormula, _elm_community$parser_combinators$Combine$end),
		ss);
	if (_p100.ctor === 'Ok') {
		return _elm_lang$core$Result$Ok(_p100._0._2);
	} else {
		return _elm_lang$core$Result$Err(
			A2(_user$project$Parser_Formula$parseFormatError, _p100._0._2, _p100._0._1));
	}
};
var _user$project$Parser_Formula$test14 = _user$project$Parser_Formula$parseFormula('[((Skip;Skip),(e1,e1))]Pre(Skip)(e1)');
var _user$project$Parser_Formula$test15 = _user$project$Parser_Formula$parseFormula('[((Skip;Skip),(e1,e1))]top');
var _user$project$Parser_Formula$test11 = _user$project$Parser_Formula$parseFormula('Pre(((Skip;Ski);Crash))(((e2,e1),e3))');
var _user$project$Parser_Formula$test13 = _user$project$Parser_Formula$parseFormula('Pre((Crash;(Skip;Ski)))((e3,(e2,e1)))');
var _user$project$Parser_Formula$test12 = _user$project$Parser_Formula$parseFormula('Pre(Skip)(((e2,e1),e3))');
var _user$project$Parser_Formula$test80 = _user$project$Parser_Formula$parseFormula('Pre((Skip;Skip))((e2,e1))');
var _user$project$Parser_Formula$test91 = _user$project$Parser_Formula$parseFormula('Pre(Skip)(e1)');
var _user$project$Parser_Formula$test92 = _user$project$Parser_Formula$parseFormula('[(Skip,e1)]Pre(Skip)(e1)');
var _user$project$Parser_Formula$test0 = _user$project$Parser_Formula$parseFormula('[p1 & [q]p2]r');
var _user$project$Parser_Formula$test1 = _user$project$Parser_Formula$parseFormula('(A -> (B -> C)) -> ((A -> B)->(A -> C))');
var _user$project$Parser_Formula$test2 = _user$project$Parser_Formula$parseFormula('(p1 -> p9) v (p8 & ~top)');
var _user$project$Parser_Formula$test3 = _user$project$Parser_Formula$parseFormula('p1 & p9 -> (p8 <-> ~top)');
var _user$project$Parser_Formula$test4 = _user$project$Parser_Formula$parseFormula('#a~#a~#ap4');
var _user$project$Parser_Formula$test5 = _user$project$Parser_Formula$parseFormula('~#a1 (p1 v ~p4)');
var _user$project$Parser_Formula$test6 = _user$project$Parser_Formula$parseFormula('~#a~#b~ (p1 v ~p4)');
var _user$project$Parser_Formula$test7 = _user$project$Parser_Formula$parseFormula('[~#a<#ap5 v ~p8>p1]p2');
var _user$project$Parser_Formula$test8 = _user$project$Parser_Formula$parseFormula('#b8p');
var _user$project$Parser_Formula$test9 = _user$project$Parser_Formula$parseFormula('[(E,e)]p');
var _user$project$Parser_Formula$test10 = _user$project$Parser_Formula$parseFormula('[(E1,e1)U(E2,e2)]p');
var _user$project$Parser_Formula$testall = A2(
	_user$project$Util$forall,
	{
		ctor: '::',
		_0: _user$project$Parser_Formula$test2,
		_1: {
			ctor: '::',
			_0: _user$project$Parser_Formula$test3,
			_1: {
				ctor: '::',
				_0: _user$project$Parser_Formula$test4,
				_1: {
					ctor: '::',
					_0: _user$project$Parser_Formula$test5,
					_1: {
						ctor: '::',
						_0: _user$project$Parser_Formula$test6,
						_1: {
							ctor: '::',
							_0: _user$project$Parser_Formula$test7,
							_1: {
								ctor: '::',
								_0: _user$project$Parser_Formula$test8,
								_1: {
									ctor: '::',
									_0: _user$project$Parser_Formula$test9,
									_1: {
										ctor: '::',
										_0: _user$project$Parser_Formula$test10,
										_1: {
											ctor: '::',
											_0: _user$project$Parser_Formula$test11,
											_1: {
												ctor: '::',
												_0: _user$project$Parser_Formula$test12,
												_1: {
													ctor: '::',
													_0: _user$project$Parser_Formula$test91,
													_1: {
														ctor: '::',
														_0: _user$project$Parser_Formula$test92,
														_1: {
															ctor: '::',
															_0: _user$project$Parser_Formula$test80,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	function (x) {
		var _p101 = x;
		if (_p101.ctor === 'Ok') {
			return true;
		} else {
			return false;
		}
	});
var _user$project$Parser_Formula$test111 = _user$project$Parser_Formula$parseFormula('knows(a,p)');
var _user$project$Parser_Formula$test112 = _user$project$Parser_Formula$parseFormula('knows_if(a,p)');
var _user$project$Parser_Formula$jsonPre2precondition = function (pre) {
	return function (x) {
		var _p102 = x;
		if (_p102.ctor === 'Ok') {
			return {ctor: '_Tuple2', _0: _p102._0._0, _1: _p102._0._1};
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Parser_Formula',
				{
					start: {line: 441, column: 38},
					end: {line: 443, column: 82}
				},
				_p102)('error in jsonPre2precondition');
		}
	}(
		A2(
			_user$project$Applicative_ops['@>'],
			_user$project$Parser_Formula$parseFormula(pre.to),
			function (x) {
				return {ctor: '_Tuple2', _0: pre.from, _1: x};
			}));
};
var _user$project$Parser_Formula$object2listOfActions = function (actionJSON) {
	return {
		am_name: actionJSON.name,
		am_domain: actionJSON.domain,
		am_relation: A2(_elm_lang$core$List$map, _user$project$Parser_Formula$jsonRel2AMRelation, actionJSON.relation),
		am_pre: A2(_elm_lang$core$List$map, _user$project$Parser_Formula$jsonPre2precondition, actionJSON.precondition)
	};
};

var _user$project$ElmFunctions_syntaxChecker$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$ElmFunctions_syntaxChecker$checkDEL = function (fr) {
	checkDEL:
	while (true) {
		var _p0 = fr;
		switch (_p0.ctor) {
			case 'Top':
				return true;
			case 'Bot':
				return true;
			case 'Atom':
				return true;
			case 'AnyFormula':
				return true;
			case 'Not':
				var _v1 = _p0._0;
				fr = _v1;
				continue checkDEL;
			case 'And':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._0) && _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._1);
			case 'Or':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._0) && _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._1);
			case 'Imply':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._0) && _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._1);
			case 'Imply2':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._0) && _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._1);
			case 'Iff':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._0) && _user$project$ElmFunctions_syntaxChecker$checkDEL(_p0._1);
			case 'Dia':
				var _v2 = _p0._1;
				fr = _v2;
				continue checkDEL;
			case 'Box':
				var _v3 = _p0._1;
				fr = _v3;
				continue checkDEL;
			case 'Announce':
				return false;
			case 'Announce2':
				return false;
			case 'Bigwedge':
				var _v4 = _p0._2;
				fr = _v4;
				continue checkDEL;
			case 'Bigvee':
				var _v5 = _p0._2;
				fr = _v5;
				continue checkDEL;
			case 'BoxAction':
				var _v6 = _p0._1;
				fr = _v6;
				continue checkDEL;
			case 'DiaAction':
				var _v7 = _p0._1;
				fr = _v7;
				continue checkDEL;
			default:
				return true;
		}
	}
};
var _user$project$ElmFunctions_syntaxChecker$checkPAL = function (fr) {
	checkPAL:
	while (true) {
		var _p1 = fr;
		switch (_p1.ctor) {
			case 'Top':
				return true;
			case 'Bot':
				return true;
			case 'Atom':
				return true;
			case 'AnyFormula':
				return true;
			case 'Not':
				var _v9 = _p1._0;
				fr = _v9;
				continue checkPAL;
			case 'And':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Or':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Imply':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Imply2':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Iff':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Dia':
				var _v10 = _p1._1;
				fr = _v10;
				continue checkPAL;
			case 'Box':
				var _v11 = _p1._1;
				fr = _v11;
				continue checkPAL;
			case 'Announce':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Announce2':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._0) && _user$project$ElmFunctions_syntaxChecker$checkPAL(_p1._1);
			case 'Bigwedge':
				return false;
			case 'Bigvee':
				return false;
			case 'BoxAction':
				return false;
			case 'DiaAction':
				return false;
			default:
				return false;
		}
	}
};
var _user$project$ElmFunctions_syntaxChecker$syntaxCheck = F2(
	function (fr, st) {
		var _p2 = st;
		switch (_p2) {
			case 'EL':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(fr) && _user$project$ElmFunctions_syntaxChecker$checkDEL(fr);
			case 'PAL':
				return _user$project$ElmFunctions_syntaxChecker$checkPAL(fr);
			case 'DEL':
				return _user$project$ElmFunctions_syntaxChecker$checkDEL(fr);
			default:
				return false;
		}
	});
var _user$project$ElmFunctions_syntaxChecker$input1 = _elm_lang$core$Native_Platform.incomingPort('input1', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_syntaxChecker$input2 = _elm_lang$core$Native_Platform.incomingPort('input2', _elm_lang$core$Json_Decode$value);
var _user$project$ElmFunctions_syntaxChecker$output1 = _elm_lang$core$Native_Platform.outgoingPort(
	'output1',
	function (v) {
		return {result: v.result};
	});
var _user$project$ElmFunctions_syntaxChecker$JSON = F2(
	function (a, b) {
		return {system: a, formula: b};
	});
var _user$project$ElmFunctions_syntaxChecker$decodeJSON = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$ElmFunctions_syntaxChecker$JSON,
	A2(_elm_lang$core$Json_Decode$field, 'system', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'formula', _elm_lang$core$Json_Decode$string));
var _user$project$ElmFunctions_syntaxChecker$update = F2(
	function (msg, model) {
		var _p3 = msg;
		var decodedJSON = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$ElmFunctions_syntaxChecker$decodeJSON, _p3._0);
		var resultOfCheck = function (x) {
			return A2(_elm_lang$core$Maybe$withDefault, 'parseError', x);
		}(
			A2(
				_user$project$Util_ops['?>>='],
				A2(
					_user$project$Util_ops['?>>='],
					_elm_lang$core$Result$toMaybe(decodedJSON),
					function (x) {
						var _p4 = _user$project$Parser_Formula$parseFormula(x.formula);
						if (_p4.ctor === 'Ok') {
							return _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p4._0, _1: x.system});
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}),
				function (_p5) {
					var _p6 = _p5;
					var _p7 = _p6._0;
					return A2(_user$project$ElmFunctions_syntaxChecker$syntaxCheck, _p7, _p6._1) ? _elm_lang$core$Maybe$Just(
						A2(_user$project$Common_syntax$outputForm, 0, _p7)) : _elm_lang$core$Maybe$Nothing;
				}));
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{result: resultOfCheck},
			{
				ctor: '::',
				_0: _user$project$ElmFunctions_syntaxChecker$output1(
					{result: resultOfCheck}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$ElmFunctions_syntaxChecker$Model = function (a) {
	return {result: a};
};
var _user$project$ElmFunctions_syntaxChecker$initModel = {
	ctor: '_Tuple2',
	_0: _user$project$ElmFunctions_syntaxChecker$Model(''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$ElmFunctions_syntaxChecker$JsonFromJS1 = function (a) {
	return {ctor: 'JsonFromJS1', _0: a};
};
var _user$project$ElmFunctions_syntaxChecker$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$ElmFunctions_syntaxChecker$input1(_user$project$ElmFunctions_syntaxChecker$JsonFromJS1),
			_1: {ctor: '[]'}
		});
};
var _user$project$ElmFunctions_syntaxChecker$main = _elm_lang$html$Html$program(
	{init: _user$project$ElmFunctions_syntaxChecker$initModel, view: _user$project$ElmFunctions_syntaxChecker$view, update: _user$project$ElmFunctions_syntaxChecker$update, subscriptions: _user$project$ElmFunctions_syntaxChecker$subscriptions})();

var Elm = {};
Elm['ElmFunctions_syntaxChecker'] = Elm['ElmFunctions_syntaxChecker'] || {};
if (typeof _user$project$ElmFunctions_syntaxChecker$main !== 'undefined') {
    _user$project$ElmFunctions_syntaxChecker$main(Elm['ElmFunctions_syntaxChecker'], 'ElmFunctions_syntaxChecker', undefined);
}

if (true)
{
  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return Elm; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  return;
}

if (true)
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);



/***/ })

},[339]);